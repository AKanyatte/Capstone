/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "LoRa.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

USART_HandleTypeDef husart2;

/* USER CODE BEGIN PV */
LoRa myLoRa;
uint8_t rx_data[32];
uint8_t send_data[3] = {0x20, 0xAB, 0x6D};
char* tx_data;
//uint8_t* send_data = (uint8_t *)"Hello World!";
char status[200];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */


  myLoRa = newLoRa();

  myLoRa.CS_port         = GPIOB;
  myLoRa.CS_pin          = GPIO_PIN_0;
  myLoRa.reset_port      = GPIOB;
  myLoRa.reset_pin       = GPIO_PIN_1;
  myLoRa.DIO0_port       = GPIOA;
  myLoRa.DIO0_pin        = GPIO_PIN_3;
  myLoRa.hSPIx           = &hspi1;

  LoRa_reset(&myLoRa);
  LoRa_init(&myLoRa);

  uint8_t    data;
  uint8_t    read;
  uint8_t    read1;

  /*

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
  HAL_SPI_TransmitReceive(&hspi1, &tx_data, &rx_data, 1, 500);

  //while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}

  //HAL_SPI_Receive(&hspi1, (uint8_t*)rx_data, 1, 500);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

  if( rx_data == 0xAB)
  {
	  snprintf(status, sizeof(status), "Success\r\n");
	  HAL_USART_Transmit(&husart2, (uint8_t*)status, strlen(status), 200);
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
  }
  else
  {
	  snprintf(status, sizeof(status), "Failed\r\n");
	  HAL_USART_Transmit(&husart2, (uint8_t*)status, strlen(status), 200);
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
  }
*/




  /*
  if(LoRa_isvalid(&myLoRa))
  {
	  data = 0x00;
	  LoRa_write(&myLoRa, RegOpMode, data);
	  LoRa_gotoMode(&myLoRa, SLEEP_MODE);
	  HAL_Delay(100);

	  // turn on LoRa mode:
	  read = LoRa_read(&myLoRa, RegOpMode);
	  snprintf(status, sizeof(status), "Read Opmode after setting Sleep %02x \r\n", read);
	  HAL_USART_Transmit(&husart2, (uint8_t*)status, strlen(status), 200);
	  HAL_Delay(2000);
	  data = read | 0x80;


	  LoRa_write(&myLoRa, RegOpMode, data);
	  snprintf(status, sizeof(status), "Write to set LORA mode %02x \r\n", data);
	  HAL_USART_Transmit(&husart2, (uint8_t*)status, strlen(status), 200);
	  HAL_Delay(2000);

	  read1 = LoRa_read(&myLoRa, RegOpMode);
	  snprintf(status, sizeof(status), "Read after setting LORA mode %02x \r\n", read1);
	  HAL_USART_Transmit(&husart2, (uint8_t*)status, strlen(status), 200);
	  HAL_Delay(2000);


	   LoRa_setFrequency(&myLoRa, myLoRa.frequency);

	  // set output power gain:
	   LoRa_setPower(&myLoRa, myLoRa.power);

	  // set over current protection:
	   LoRa_setOCP(&myLoRa, myLoRa.overCurrentProtection);

	  // set LNA gain:
	   LoRa_write(&myLoRa, RegLna, 0x23);

	  // set spreading factor, CRC on, and Timeout Msb:
	   LoRa_setTOMsb_setCRCon(&myLoRa);
	   LoRa_setSpreadingFactor(&myLoRa, myLoRa.spredingFactor);

	   // set Timeout Lsb:
	   LoRa_write(&myLoRa, RegSymbTimeoutL, 0xFF);

	   // set bandwidth, coding rate and expilicit mode:
	    // 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
	    //       bits represent --> |   bandwidth   |     CR    |I/E|
	    data = 0;
	    data = (myLoRa.bandWidth << 4) + (myLoRa.crcRate << 1);
	    LoRa_write(&myLoRa, RegModemConfig1, data);
	    LoRa_setAutoLDO(&myLoRa);

	    		// set preamble:
	   LoRa_write(&myLoRa, RegPreambleMsb, myLoRa.preamble >> 8);
	   LoRa_write(&myLoRa, RegPreambleLsb, myLoRa.preamble >> 0);


	  read = LoRa_read(&myLoRa, RegDioMapping1);
	  snprintf(status, sizeof(status), "Read after first write should be 0:  %02x \r\n", read);
	  HAL_USART_Transmit(&husart2, (uint8_t*)status, strlen(status), 200);
	  HAL_Delay(2000);

	  data = read | 0x3F;
	  LoRa_write(&myLoRa, RegDioMapping1, data);
	  snprintf(status, sizeof(status), "Write to DIO  %02x \r\n", data);
	  HAL_USART_Transmit(&husart2, (uint8_t*)status, strlen(status), 200);
	  HAL_Delay(2000);

	  read = LoRa_read(&myLoRa, RegDioMapping1);
	  snprintf(status, sizeof(status), "Read after writing to DIO %02x \r\n", read);
	  HAL_USART_Transmit(&husart2, (uint8_t*)status, strlen(status), 200);
	  HAL_Delay(2000);

	  // goto standby mode:
	  LoRa_gotoMode(&myLoRa, STNBY_MODE);
	  myLoRa.current_mode = STNBY_MODE;
	  HAL_Delay(10);

	  read = LoRa_read(&myLoRa, RegOpMode);
	  snprintf(status, sizeof(status), "Mode after set??? %02x \r\n", read);
	  HAL_USART_Transmit(&husart2, (uint8_t*)status, strlen(status), 200);
	  HAL_Delay(10);

	  read = LoRa_read(&myLoRa, RegVersion);
	  snprintf(status, sizeof(status), "Read from Version %02x \r\n", read);
	  HAL_USART_Transmit(&husart2, (uint8_t*)status, strlen(status), 200);

  }
*/
  //GPIOB->BSRR = 0x00000001;

  uint16_t LoRa_status = LoRa_init(&myLoRa);


  memset(status, NULL, 200);

  if(LoRa_status == LORA_OK)
  {
	  snprintf(status, sizeof(status), "Lora is running ...  \r\n");
	  LoRa_transmit(&myLoRa, (uint8_t*)status, 120, 100);
	  HAL_USART_Transmit(&husart2, (uint8_t*)status, 200, 200);
  }
  else
  {
	  snprintf(status, sizeof(status), "Lora failed :( \n\r Error code: %d  \r\n", LoRa_status);
	  HAL_USART_Transmit(&husart2, (uint8_t*)status, 200, 200);
  }


  //LoRa_startReceiving(&myLoRa);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Transmit data

	  // SENDING DATA - - - - - - - - - - - - - - - - - - - - - - - - -


	          //uint8_t send_data[3] = {0x20, 0xab, 0x6f}; // MY ADDRESS
	          LoRa_transmit(&myLoRa, send_data, sizeof(send_data), 500);
	          HAL_Delay(1500);
	          HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);

	    	  read = LoRa_read(&myLoRa, RegIrqFlags);
	    	  snprintf(status, sizeof(status), "Read from IrqFlags %02x \r\n", read);
	    	  HAL_USART_Transmit(&husart2, (uint8_t*)status, strlen(status), 200);

	    	  read = LoRa_read(&myLoRa, RegFifoTxBaseAddr);
	    	  snprintf(status, sizeof(status), "Read from RegFifoTxBaseAddr %02x \r\n", read);
	    	  HAL_USART_Transmit(&husart2, (uint8_t*)status, strlen(status), 200);

	    	  RegFifoRxBaseAddr
			  read = LoRa_read(&myLoRa, RegFifoTxBaseAddr);
			  snprintf(status, sizeof(status), "Read from RegFifoTxBaseAddr %02x \r\n", read);
			  HAL_USART_Transmit(&husart2, (uint8_t*)status, strlen(status), 200);



	  	  /*
	  	 tx_data = "Hella World!";
	    //send_data[0] = 0x20;
	    LoRa_transmit(&myLoRa, (uint8_t*)tx_data, 12, 100);
	    HAL_Delay(1000);
	    if(LoRa_transmit(&myLoRa, (uint8_t*)tx_data, 12, 100)==1)
	    {
	  	    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	    }
	    else
	    {
	    	 snprintf(status, sizeof(status), "Lora failed :( \r\n");
	    	 HAL_USART_Transmit(&husart2, (uint8_t*)status, 200, 200);
	    }

		*/

	    /*
	  if(LoRa_transmit(&myLoRa, send_data, 128, 500) == 1)
	  {
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	  HAL_Delay(5000);
	  }
		*/

	    // Receive data
	    /*
	    uint8_t packet_size;
	    packet_size = LoRa_receive(&myLoRa, rx_data, 12);
	  	HAL_Delay(500);
	  	snprintf(status, sizeof(status), "Packet size: %x \r\n", *rx_data);
	  	HAL_USART_Transmit(&husart2, (uint8_t*)packet_size, 12, 200);
		*/
	  // SENDING DATA - - - - - - - - - - - - - - - - - - - - - - - - -

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
  husart2.Init.BaudRate = 115200;
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
  husart2.Init.StopBits = USART_STOPBITS_1;
  husart2.Init.Parity = USART_PARITY_NONE;
  husart2.Init.Mode = USART_MODE_TX_RX;
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
  if (HAL_USART_Init(&husart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == myLoRa.DIO0_pin)
	{}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

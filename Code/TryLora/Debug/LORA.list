
LORA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005524  08005524  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800552c  0800552c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800552c  0800552c  0001552c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005530  08005530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000064  08005598  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08005598  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c5fe  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002282  00000000  00000000  0002c6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  0002e958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097c  00000000  00000000  0002f5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000204b1  00000000  00000000  0002ff6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de2a  00000000  00000000  0005041d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfbc9  00000000  00000000  0005e247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003784  00000000  00000000  0011de10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00121594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005420 	.word	0x08005420

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08005420 	.word	0x08005420

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <boardled_on>:
	//set PB_3 to output mode
	GPIOB->MODER |= (1U << 6);
}

void boardled_on(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
		GPIOB->ODR |= (1U << 3);
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <boardled_on+0x1c>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <boardled_on+0x1c>)
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	6153      	str	r3, [r2, #20]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	48000400 	.word	0x48000400

0800058c <boardled_off>:

void boardled_off(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
		GPIOB->ODR &= ~(1U << 3);
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <boardled_off+0x1c>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <boardled_off+0x1c>)
 8000596:	f023 0308 	bic.w	r3, r3, #8
 800059a:	6153      	str	r3, [r2, #20]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	48000400 	.word	0x48000400

080005ac <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 80005bc:	78fb      	ldrb	r3, [r7, #3]
 80005be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6858      	ldr	r0, [r3, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	8adb      	ldrh	r3, [r3, #22]
 80005ce:	2200      	movs	r2, #0
 80005d0:	4619      	mov	r1, r3
 80005d2:	f001 fa8f 	bl	8001af4 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6818      	ldr	r0, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	1cf9      	adds	r1, r7, #3
 80005e0:	2201      	movs	r2, #1
 80005e2:	f002 fce6 	bl	8002fb2 <HAL_SPI_Transmit>
 80005e6:	4603      	mov	r3, r0
 80005e8:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f107 010f 	add.w	r1, r7, #15
 80005f6:	2201      	movs	r2, #1
 80005f8:	f002 fe50 	bl	800329c <HAL_SPI_Receive>
 80005fc:	4603      	mov	r3, r0
 80005fe:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6858      	ldr	r0, [r3, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	8adb      	ldrh	r3, [r3, #22]
 8000608:	2201      	movs	r2, #1
 800060a:	4619      	mov	r1, r3
 800060c:	f001 fa72 	bl	8001af4 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b084      	sub	sp, #16
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	70fb      	strb	r3, [r7, #3]
 8000626:	4613      	mov	r3, r2
 8000628:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000630:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000632:	78bb      	ldrb	r3, [r7, #2]
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	b21a      	sxth	r2, r3
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	b21b      	sxth	r3, r3
 800063c:	4313      	orrs	r3, r2
 800063e:	b21b      	sxth	r3, r3
 8000640:	b29b      	uxth	r3, r3
 8000642:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6858      	ldr	r0, [r3, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	8adb      	ldrh	r3, [r3, #22]
 800064c:	2200      	movs	r2, #0
 800064e:	4619      	mov	r1, r3
 8000650:	f001 fa50 	bl	8001af4 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6818      	ldr	r0, [r3, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f107 010a 	add.w	r1, r7, #10
 8000660:	2202      	movs	r2, #2
 8000662:	f002 fca6 	bl	8002fb2 <HAL_SPI_Transmit>
 8000666:	4603      	mov	r3, r0
 8000668:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6858      	ldr	r0, [r3, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	8adb      	ldrh	r3, [r3, #22]
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	f001 fa3d 	bl	8001af4 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b088      	sub	sp, #32
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	4611      	mov	r1, r2
 800068e:	461a      	mov	r2, r3
 8000690:	460b      	mov	r3, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	6858      	ldr	r0, [r3, #4]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	8adb      	ldrh	r3, [r3, #22]
 80006a4:	2200      	movs	r2, #0
 80006a6:	4619      	mov	r1, r3
 80006a8:	f001 fa24 	bl	8001af4 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	f107 0117 	add.w	r1, r7, #23
 80006b8:	2201      	movs	r2, #1
 80006ba:	f002 fc7a 	bl	8002fb2 <HAL_SPI_Transmit>
 80006be:	4603      	mov	r3, r0
 80006c0:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d108      	bne.n	80006da <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	79fa      	ldrb	r2, [r7, #7]
 80006ce:	b292      	uxth	r2, r2
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f93c 	bl	8003950 <HAL_SPI_Transmit_DMA>
 80006d8:	e012      	b.n	8000700 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	68b9      	ldr	r1, [r7, #8]
 80006e8:	f002 fc63 	bl	8002fb2 <HAL_SPI_Transmit>
 80006ec:	4603      	mov	r3, r0
 80006ee:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	6858      	ldr	r0, [r3, #4]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	8adb      	ldrh	r3, [r3, #22]
 80006f8:	2201      	movs	r2, #1
 80006fa:	4619      	mov	r1, r3
 80006fc:	f001 f9fa 	bl	8001af4 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8000700:	3720      	adds	r7, #32
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
 800070e:	460b      	mov	r3, r1
 8000710:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000712:	78fb      	ldrb	r3, [r7, #3]
 8000714:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000718:	b2db      	uxtb	r3, r3
 800071a:	461a      	mov	r2, r3
 800071c:	2101      	movs	r1, #1
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff ff7b 	bl	800061a <write_register>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	2b2c      	cmp	r3, #44	; 0x2c
 800073c:	d801      	bhi.n	8000742 <set_OCP+0x16>
    imax = 45;
 800073e:	232d      	movs	r3, #45	; 0x2d
 8000740:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	2bf0      	cmp	r3, #240	; 0xf0
 8000746:	d901      	bls.n	800074c <set_OCP+0x20>
    imax = 240;
 8000748:	23f0      	movs	r3, #240	; 0xf0
 800074a:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	2b81      	cmp	r3, #129	; 0x81
 8000750:	d809      	bhi.n	8000766 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	3b2d      	subs	r3, #45	; 0x2d
 8000756:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <set_OCP+0x68>)
 8000758:	fb82 1203 	smull	r1, r2, r2, r3
 800075c:	1052      	asrs	r2, r2, #1
 800075e:	17db      	asrs	r3, r3, #31
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	e008      	b.n	8000778 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8000766:	78fb      	ldrb	r3, [r7, #3]
 8000768:	331e      	adds	r3, #30
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <set_OCP+0x68>)
 800076c:	fb82 1203 	smull	r1, r2, r2, r3
 8000770:	1092      	asrs	r2, r2, #2
 8000772:	17db      	asrs	r3, r3, #31
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	f043 0320 	orr.w	r3, r3, #32
 800077e:	b2db      	uxtb	r3, r3
 8000780:	461a      	mov	r2, r3
 8000782:	210b      	movs	r1, #11
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff48 	bl	800061a <write_register>
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	66666667 	.word	0x66666667

08000798 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8000798:	b5b0      	push	{r4, r5, r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80007a0:	211d      	movs	r1, #29
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff ff02 	bl	80005ac <read_register>
 80007a8:	4603      	mov	r3, r0
 80007aa:	091b      	lsrs	r3, r3, #4
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2200      	movs	r2, #0
 80007b2:	461c      	mov	r4, r3
 80007b4:	4615      	mov	r5, r2
 80007b6:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 80007ba:	211e      	movs	r1, #30
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff fef5 	bl	80005ac <read_register>
 80007c2:	4603      	mov	r3, r0
 80007c4:	091b      	lsrs	r3, r3, #4
 80007c6:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 80007c8:	2304      	movs	r3, #4
 80007ca:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	2b0a      	cmp	r3, #10
 80007d0:	d908      	bls.n	80007e4 <set_low_data_rate_optimization+0x4c>
 80007d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80007d6:	1fd1      	subs	r1, r2, #7
 80007d8:	430b      	orrs	r3, r1
 80007da:	d103      	bne.n	80007e4 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 80007dc:	7ffb      	ldrb	r3, [r7, #31]
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 80007e4:	7ffb      	ldrb	r3, [r7, #31]
 80007e6:	461a      	mov	r2, r3
 80007e8:	2126      	movs	r1, #38	; 0x26
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ff15 	bl	800061a <write_register>
}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bdb0      	pop	{r4, r5, r7, pc}

080007f8 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8000800:	2100      	movs	r1, #0
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ff7f 	bl	8000706 <set_mode>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8000818:	2101      	movs	r1, #1
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ff73 	bl	8000706 <set_mode>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8000830:	211d      	movs	r1, #29
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff feba 	bl	80005ac <read_register>
 8000838:	4603      	mov	r3, r0
 800083a:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	f023 0301 	bic.w	r3, r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	461a      	mov	r2, r3
 8000848:	211d      	movs	r1, #29
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff fee5 	bl	800061a <write_register>
}
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10e      	bne.n	800088a <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b0f      	cmp	r3, #15
 8000870:	d901      	bls.n	8000876 <lora_set_tx_power+0x1e>
      level = 15;
 8000872:	230f      	movs	r3, #15
 8000874:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800087c:	b2db      	uxtb	r3, r3
 800087e:	461a      	mov	r2, r3
 8000880:	2109      	movs	r1, #9
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff fec9 	bl	800061a <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000888:	e02e      	b.n	80008e8 <lora_set_tx_power+0x90>
    if (level > 20) {
 800088a:	78fb      	ldrb	r3, [r7, #3]
 800088c:	2b14      	cmp	r3, #20
 800088e:	d901      	bls.n	8000894 <lora_set_tx_power+0x3c>
      level = 20;
 8000890:	2314      	movs	r3, #20
 8000892:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d801      	bhi.n	800089e <lora_set_tx_power+0x46>
      level = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	2b11      	cmp	r3, #17
 80008a2:	d90c      	bls.n	80008be <lora_set_tx_power+0x66>
      level -= 3;
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	3b03      	subs	r3, #3
 80008a8:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80008aa:	2287      	movs	r2, #135	; 0x87
 80008ac:	214d      	movs	r1, #77	; 0x4d
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff feb3 	bl	800061a <write_register>
      set_OCP(lora, 140);
 80008b4:	218c      	movs	r1, #140	; 0x8c
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ff38 	bl	800072c <set_OCP>
 80008bc:	e008      	b.n	80008d0 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 80008be:	2284      	movs	r2, #132	; 0x84
 80008c0:	214d      	movs	r1, #77	; 0x4d
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fea9 	bl	800061a <write_register>
      set_OCP(lora, 97);
 80008c8:	2161      	movs	r1, #97	; 0x61
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ff2e 	bl	800072c <set_OCP>
    level -= 2;
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	3b02      	subs	r3, #2
 80008d4:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	461a      	mov	r2, r3
 80008e0:	2109      	movs	r1, #9
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff fe99 	bl	800061a <write_register>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80008fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000900:	f04f 0000 	mov.w	r0, #0
 8000904:	f04f 0100 	mov.w	r1, #0
 8000908:	04d9      	lsls	r1, r3, #19
 800090a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800090e:	04d0      	lsls	r0, r2, #19
 8000910:	4a19      	ldr	r2, [pc, #100]	; (8000978 <lora_set_frequency+0x88>)
 8000912:	f04f 0300 	mov.w	r3, #0
 8000916:	f7ff fcab 	bl	8000270 <__aeabi_uldivmod>
 800091a:	4602      	mov	r2, r0
 800091c:	460b      	mov	r3, r1
 800091e:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8000922:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000926:	f04f 0200 	mov.w	r2, #0
 800092a:	f04f 0300 	mov.w	r3, #0
 800092e:	0c02      	lsrs	r2, r0, #16
 8000930:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000934:	0c0b      	lsrs	r3, r1, #16
 8000936:	b2d3      	uxtb	r3, r2
 8000938:	461a      	mov	r2, r3
 800093a:	2106      	movs	r1, #6
 800093c:	68f8      	ldr	r0, [r7, #12]
 800093e:	f7ff fe6c 	bl	800061a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8000942:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000946:	f04f 0200 	mov.w	r2, #0
 800094a:	f04f 0300 	mov.w	r3, #0
 800094e:	0a02      	lsrs	r2, r0, #8
 8000950:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000954:	0a0b      	lsrs	r3, r1, #8
 8000956:	b2d3      	uxtb	r3, r2
 8000958:	461a      	mov	r2, r3
 800095a:	2107      	movs	r1, #7
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f7ff fe5c 	bl	800061a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8000962:	7c3b      	ldrb	r3, [r7, #16]
 8000964:	461a      	mov	r2, r3
 8000966:	2108      	movs	r1, #8
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f7ff fe56 	bl	800061a <write_register>
}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	01e84800 	.word	0x01e84800

0800097c <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	2b05      	cmp	r3, #5
 800098c:	d802      	bhi.n	8000994 <lora_set_spreading_factor+0x18>
    sf = 6;
 800098e:	2306      	movs	r3, #6
 8000990:	70fb      	strb	r3, [r7, #3]
 8000992:	e004      	b.n	800099e <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	2b0c      	cmp	r3, #12
 8000998:	d901      	bls.n	800099e <lora_set_spreading_factor+0x22>
    sf = 12;
 800099a:	230c      	movs	r3, #12
 800099c:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	2b06      	cmp	r3, #6
 80009a2:	d10a      	bne.n	80009ba <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80009a4:	22c5      	movs	r2, #197	; 0xc5
 80009a6:	2131      	movs	r1, #49	; 0x31
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fe36 	bl	800061a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80009ae:	220c      	movs	r2, #12
 80009b0:	2137      	movs	r1, #55	; 0x37
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fe31 	bl	800061a <write_register>
 80009b8:	e009      	b.n	80009ce <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 80009ba:	22c3      	movs	r2, #195	; 0xc3
 80009bc:	2131      	movs	r1, #49	; 0x31
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fe2b 	bl	800061a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 80009c4:	220a      	movs	r2, #10
 80009c6:	2137      	movs	r1, #55	; 0x37
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fe26 	bl	800061a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 80009ce:	211e      	movs	r1, #30
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff fdeb 	bl	80005ac <read_register>
 80009d6:	4603      	mov	r3, r0
 80009d8:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 80009da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	b25a      	sxtb	r2, r3
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	011b      	lsls	r3, r3, #4
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	4313      	orrs	r3, r2
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	461a      	mov	r2, r3
 80009f4:	211e      	movs	r1, #30
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff fe0f 	bl	800061a <write_register>

  set_low_data_rate_optimization(lora);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff fecb 	bl	8000798 <set_low_data_rate_optimization>
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	460b      	mov	r3, r1
 8000a14:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8000a16:	887b      	ldrh	r3, [r7, #2]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	2120      	movs	r1, #32
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff fdf9 	bl	800061a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8000a28:	887b      	ldrh	r3, [r7, #2]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f003 030f 	and.w	r3, r3, #15
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	2121      	movs	r1, #33	; 0x21
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff fdef 	bl	800061a <write_register>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8000a4c:	2142      	movs	r1, #66	; 0x42
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff fdac 	bl	80005ac <read_register>
 8000a54:	4603      	mov	r3, r0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b084      	sub	sp, #16
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8000a66:	2101      	movs	r1, #1
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fd9f 	bl	80005ac <read_register>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	73fb      	strb	r3, [r7, #15]

  return (opmode | OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	f043 0303 	orr.w	r3, r3, #3
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d101      	bne.n	8000a82 <lora_is_transmitting+0x24>
 8000a7e:	2305      	movs	r3, #5
 8000a80:	e000      	b.n	8000a84 <lora_is_transmitting+0x26>
 8000a82:	2300      	movs	r3, #0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	4611      	mov	r1, r2
 8000a98:	461a      	mov	r2, r3
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	71fb      	strb	r3, [r7, #7]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f7ff ffdb 	bl	8000a5e <lora_is_transmitting>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	e02a      	b.n	8000b08 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	68f8      	ldr	r0, [r7, #12]
 8000ab6:	f7ff fe26 	bl	8000706 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f000 f83a 	bl	8000b34 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	7d1b      	ldrb	r3, [r3, #20]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	210d      	movs	r1, #13
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff fda6 	bl	800061a <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	7d1b      	ldrb	r3, [r3, #20]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f7ff fd9f 	bl	800061a <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	2122      	movs	r1, #34	; 0x22
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f7ff fd99 	bl	800061a <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	79fa      	ldrb	r2, [r7, #7]
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f7ff fdc7 	bl	8000682 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8000af4:	79bb      	ldrb	r3, [r7, #6]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d101      	bne.n	8000afe <lora_send_packet_base+0x72>
    return LORA_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e004      	b.n	8000b08 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8000afe:	2103      	movs	r1, #3
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f7ff fe00 	bl	8000706 <set_mode>
  return LORA_OK;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	2302      	movs	r3, #2
 8000b22:	68b9      	ldr	r1, [r7, #8]
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f7ff ffb1 	bl	8000a8c <lora_send_packet_base>
 8000b2a:	4603      	mov	r3, r0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	2112      	movs	r1, #18
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fd6a 	bl	800061a <write_register>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000b6e:	6a3a      	ldr	r2, [r7, #32]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2201      	movs	r2, #1
 8000b78:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2200      	movs	r2, #0
 8000b84:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b8c:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f7ff ff58 	bl	8000a44 <lora_version>
 8000b94:	4603      	mov	r3, r0
 8000b96:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	e031      	b.n	8000c06 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff fe28 	bl	80007f8 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f7ff fe25 	bl	80007f8 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000bae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f7ff fe9c 	bl	80008f0 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000bb8:	2107      	movs	r1, #7
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff fede 	bl	800097c <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000bc0:	210a      	movs	r1, #10
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f7ff ff21 	bl	8000a0a <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff fe2d 	bl	8000828 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000bce:	210c      	movs	r1, #12
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f7ff fceb 	bl	80005ac <read_register>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000bda:	7dbb      	ldrb	r3, [r7, #22]
 8000bdc:	f043 0303 	orr.w	r3, r3, #3
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	461a      	mov	r2, r3
 8000be4:	210c      	movs	r1, #12
 8000be6:	68f8      	ldr	r0, [r7, #12]
 8000be8:	f7ff fd17 	bl	800061a <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000bec:	2204      	movs	r2, #4
 8000bee:	2126      	movs	r1, #38	; 0x26
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f7ff fd12 	bl	800061a <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000bf6:	2111      	movs	r1, #17
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff fe2d 	bl	8000858 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f7ff fe06 	bl	8000810 <lora_mode_standby>

  return LORA_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c16:	f000 fb88 	bl	800132a <HAL_Init>
  lora_sx1276 lora;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1a:	f000 f8a3 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1e:	f000 f96b 	bl	8000ef8 <MX_GPIO_Init>
  MX_USART2_Init();
 8000c22:	f000 f93d 	bl	8000ea0 <MX_USART2_Init>
  MX_SPI1_Init();
 8000c26:	f000 f8ff 	bl	8000e28 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  // Reset pin pulled low
  GPIOB->ODR &= ~(1U << 1);
 8000c2a:	4b43      	ldr	r3, [pc, #268]	; (8000d38 <main+0x128>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a42      	ldr	r2, [pc, #264]	; (8000d38 <main+0x128>)
 8000c30:	f023 0302 	bic.w	r3, r3, #2
 8000c34:	6153      	str	r3, [r2, #20]
  HAL_Delay(10);
 8000c36:	200a      	movs	r0, #10
 8000c38:	f000 fbec 	bl	8001414 <HAL_Delay>
  // Reset pin pulled high
  GPIOB->ODR |= (1U << 1);
 8000c3c:	4b3e      	ldr	r3, [pc, #248]	; (8000d38 <main+0x128>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	4a3d      	ldr	r2, [pc, #244]	; (8000d38 <main+0x128>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	6153      	str	r3, [r2, #20]
  HAL_Delay(10);
 8000c48:	200a      	movs	r0, #10
 8000c4a:	f000 fbe3 	bl	8001414 <HAL_Delay>


  uint8_t init = lora_init(&lora, &hspi1, GPIOB, GPIO_PIN_0, LORA_BASE_FREQUENCY_US);
 8000c4e:	1d38      	adds	r0, r7, #4
 8000c50:	a337      	add	r3, pc, #220	; (adr r3, 8000d30 <main+0x120>)
 8000c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c56:	e9cd 2300 	strd	r2, r3, [sp]
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	4a36      	ldr	r2, [pc, #216]	; (8000d38 <main+0x128>)
 8000c5e:	4937      	ldr	r1, [pc, #220]	; (8000d3c <main+0x12c>)
 8000c60:	f7ff ff75 	bl	8000b4e <lora_init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	77fb      	strb	r3, [r7, #31]
  if (init != LORA_OK)
 8000c68:	7ffb      	ldrb	r3, [r7, #31]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d002      	beq.n	8000c74 <main+0x64>
  	// Initialization failed
	  boardled_off();
 8000c6e:	f7ff fc8d 	bl	800058c <boardled_off>
 8000c72:	e001      	b.n	8000c78 <main+0x68>
  else
	  boardled_on();
 8000c74:	f7ff fc7a 	bl	800056c <boardled_on>


  char version = lora_version(&lora);
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fee2 	bl	8000a44 <lora_version>
 8000c80:	4603      	mov	r3, r0
 8000c82:	77bb      	strb	r3, [r7, #30]
  uint8_t ver = lora_version(&lora);
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fedc 	bl	8000a44 <lora_version>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	777b      	strb	r3, [r7, #29]
  if (ver != LORA_COMPATIBLE_VERSION)
 8000c90:	7f7b      	ldrb	r3, [r7, #29]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00e      	beq.n	8000cb4 <main+0xa4>
  {
	  sprintf(instruct, "Got wrong radio version 0x%x, expected 0x12", ver);
 8000c96:	7f7b      	ldrb	r3, [r7, #29]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4929      	ldr	r1, [pc, #164]	; (8000d40 <main+0x130>)
 8000c9c:	4829      	ldr	r0, [pc, #164]	; (8000d44 <main+0x134>)
 8000c9e:	f003 ff1b 	bl	8004ad8 <siprintf>
	  sprintf(version, "0x%x", ver);
 8000ca2:	7fbb      	ldrb	r3, [r7, #30]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	7f7b      	ldrb	r3, [r7, #29]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4927      	ldr	r1, [pc, #156]	; (8000d48 <main+0x138>)
 8000cac:	f003 ff14 	bl	8004ad8 <siprintf>
	  return LORA_ERROR;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	e037      	b.n	8000d24 <main+0x114>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    #ifdef SLAVE
	lora_mode_standby(&lora);
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fdaa 	bl	8000810 <lora_mode_standby>
	test = 606;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <main+0x13c>)
 8000cbe:	f240 225e 	movw	r2, #606	; 0x25e
 8000cc2:	601a      	str	r2, [r3, #0]
 // Send packets in blocking mode
	lora_send_packet(&lora, test_var, 5);
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <main+0x140>)
 8000cc6:	6819      	ldr	r1, [r3, #0]
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2205      	movs	r2, #5
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff1f 	bl	8000b10 <lora_send_packet>
	HAL_Delay(500);
 8000cd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd6:	f000 fb9d 	bl	8001414 <HAL_Delay>
	lora_send_packet(&lora, test1_var, 4);
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <main+0x144>)
 8000cdc:	6819      	ldr	r1, [r3, #0]
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff14 	bl	8000b10 <lora_send_packet>
	HAL_Delay(500);
 8000ce8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cec:	f000 fb92 	bl	8001414 <HAL_Delay>

	uint8_t packet_avail = lora_is_transmitting(&lora);
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff feb3 	bl	8000a5e <lora_is_transmitting>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	773b      	strb	r3, [r7, #28]

	HAL_USART_Transmit(&husart2, test_var, 5, 100);
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <main+0x140>)
 8000cfe:	6819      	ldr	r1, [r3, #0]
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	2205      	movs	r2, #5
 8000d04:	4814      	ldr	r0, [pc, #80]	; (8000d58 <main+0x148>)
 8000d06:	f003 fac1 	bl	800428c <HAL_USART_Transmit>

	//sprintf(instruct, "%x", packet_avail);
	// HAL_USART_Transmit(&husart2, instruct, strlen(instruct), 100);

		if (packet_avail == 0)
 8000d0a:	7f3b      	ldrb	r3, [r7, #28]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d104      	bne.n	8000d1a <main+0x10a>
		{
			sprintf(instruct, "No packet transmission");
 8000d10:	4912      	ldr	r1, [pc, #72]	; (8000d5c <main+0x14c>)
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <main+0x134>)
 8000d14:	f003 fee0 	bl	8004ad8 <siprintf>
 8000d18:	e7cc      	b.n	8000cb4 <main+0xa4>
			//HAL_USART_Transmit(&husart2, instruct, strlen(instruct), 100);
		}
		else
		{
			sprintf(instruct, "Transmitting packet");
 8000d1a:	4911      	ldr	r1, [pc, #68]	; (8000d60 <main+0x150>)
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <main+0x134>)
 8000d1e:	f003 fedb 	bl	8004ad8 <siprintf>
  {
 8000d22:	e7c7      	b.n	8000cb4 <main+0xa4>
  //#ifdef SLAVE
 // lora_clear_interrupt_tx_done(&lora);
  //#endif

  /* USER CODE END 3 */
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	f3af 8000 	nop.w
 8000d30:	3689cac0 	.word	0x3689cac0
 8000d34:	00000000 	.word	0x00000000
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	20000080 	.word	0x20000080
 8000d40:	08005448 	.word	0x08005448
 8000d44:	20000138 	.word	0x20000138
 8000d48:	08005474 	.word	0x08005474
 8000d4c:	20000134 	.word	0x20000134
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000004 	.word	0x20000004
 8000d58:	200000e4 	.word	0x200000e4
 8000d5c:	0800547c 	.word	0x0800547c
 8000d60:	08005494 	.word	0x08005494

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b096      	sub	sp, #88	; 0x58
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	2244      	movs	r2, #68	; 0x44
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 fed0 	bl	8004b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d8a:	f000 fee9 	bl	8001b60 <HAL_PWREx_ControlVoltageScaling>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d94:	f000 f916 	bl	8000fc4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d98:	f000 fec4 	bl	8001b24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <SystemClock_Config+0xc0>)
 8000d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000da2:	4a20      	ldr	r2, [pc, #128]	; (8000e24 <SystemClock_Config+0xc0>)
 8000da4:	f023 0318 	bic.w	r3, r3, #24
 8000da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000dac:	2314      	movs	r3, #20
 8000dae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000dbc:	2360      	movs	r3, #96	; 0x60
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 ff13 	bl	8001c0c <HAL_RCC_OscConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000dec:	f000 f8ea 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df0:	230f      	movs	r3, #15
 8000df2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df4:	2303      	movs	r3, #3
 8000df6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	2101      	movs	r1, #1
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fb13 	bl	8002434 <HAL_RCC_ClockConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e14:	f000 f8d6 	bl	8000fc4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000e18:	f001 ff26 	bl	8002c68 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e1c:	bf00      	nop
 8000e1e:	3758      	adds	r7, #88	; 0x58
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000

08000e28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e2e:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <MX_SPI1_Init+0x74>)
 8000e30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e80:	2208      	movs	r2, #8
 8000e82:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_SPI1_Init+0x70>)
 8000e86:	f001 fff1 	bl	8002e6c <HAL_SPI_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8000e90:	f000 f898 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000080 	.word	0x20000080
 8000e9c:	40013000 	.word	0x40013000

08000ea0 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_USART2_Init+0x50>)
 8000ea6:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <MX_USART2_Init+0x54>)
 8000ea8:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_USART2_Init+0x50>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_USART2_Init+0x50>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <MX_USART2_Init+0x50>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_USART2_Init+0x50>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <MX_USART2_Init+0x50>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_USART2_Init+0x50>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <MX_USART2_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_USART2_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <MX_USART2_Init+0x50>)
 8000ede:	f003 f98b 	bl	80041f8 <HAL_USART_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000ee8:	f000 f86c 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200000e4 	.word	0x200000e4
 8000ef4:	40004400 	.word	0x40004400

08000ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <MX_GPIO_Init+0xc4>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	4a2a      	ldr	r2, [pc, #168]	; (8000fbc <MX_GPIO_Init+0xc4>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1a:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <MX_GPIO_Init+0xc4>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <MX_GPIO_Init+0xc4>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4a24      	ldr	r2, [pc, #144]	; (8000fbc <MX_GPIO_Init+0xc4>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <MX_GPIO_Init+0xc4>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <MX_GPIO_Init+0xc4>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a1e      	ldr	r2, [pc, #120]	; (8000fbc <MX_GPIO_Init+0xc4>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <MX_GPIO_Init+0xc4>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|LD3_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	210a      	movs	r1, #10
 8000f5a:	4819      	ldr	r0, [pc, #100]	; (8000fc0 <MX_GPIO_Init+0xc8>)
 8000f5c:	f000 fdca 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f60:	2308      	movs	r3, #8
 8000f62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f000 fc53 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD3_Pin;
 8000f7a:	230a      	movs	r3, #10
 8000f7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <MX_GPIO_Init+0xc8>)
 8000f92:	f000 fc45 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f96:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	4619      	mov	r1, r3
 8000fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb0:	f000 fc36 	bl	8001820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb4:	bf00      	nop
 8000fb6:	3720      	adds	r7, #32
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	48000400 	.word	0x48000400

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_MspInit+0x44>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <HAL_MspInit+0x44>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_MspInit+0x44>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_MspInit+0x44>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	4a08      	ldr	r2, [pc, #32]	; (8001014 <HAL_MspInit+0x44>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_MspInit+0x44>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a29      	ldr	r2, [pc, #164]	; (80010dc <HAL_SPI_MspInit+0xc4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d14c      	bne.n	80010d4 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <HAL_SPI_MspInit+0xc8>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	4a28      	ldr	r2, [pc, #160]	; (80010e0 <HAL_SPI_MspInit+0xc8>)
 8001040:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001044:	6613      	str	r3, [r2, #96]	; 0x60
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_SPI_MspInit+0xc8>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <HAL_SPI_MspInit+0xc8>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <HAL_SPI_MspInit+0xc8>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_SPI_MspInit+0xc8>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_SPI_MspInit+0xc8>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <HAL_SPI_MspInit+0xc8>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_SPI_MspInit+0xc8>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001082:	23e0      	movs	r3, #224	; 0xe0
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001092:	2305      	movs	r3, #5
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f000 fbbe 	bl	8001820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010a4:	2301      	movs	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b4:	2305      	movs	r3, #5
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4809      	ldr	r0, [pc, #36]	; (80010e4 <HAL_SPI_MspInit+0xcc>)
 80010c0:	f000 fbae 	bl	8001820 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2023      	movs	r0, #35	; 0x23
 80010ca:	f000 faa2 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010ce:	2023      	movs	r0, #35	; 0x23
 80010d0:	f000 fabb 	bl	800164a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40013000 	.word	0x40013000
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48000400 	.word	0x48000400

080010e8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b09e      	sub	sp, #120	; 0x78
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2254      	movs	r2, #84	; 0x54
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fd05 	bl	8004b18 <memset>
  if(husart->Instance==USART2)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <HAL_USART_MspInit+0xdc>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d150      	bne.n	80011ba <HAL_USART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001118:	2302      	movs	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4618      	mov	r0, r3
 8001126:	f001 fba9 	bl	800287c <HAL_RCCEx_PeriphCLKConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8001130:	f7ff ff48 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <HAL_USART_MspInit+0xe0>)
 8001136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001138:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <HAL_USART_MspInit+0xe0>)
 800113a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113e:	6593      	str	r3, [r2, #88]	; 0x58
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <HAL_USART_MspInit+0xe0>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_USART_MspInit+0xe0>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <HAL_USART_MspInit+0xe0>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_USART_MspInit+0xe0>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_4;
 8001164:	2314      	movs	r3, #20
 8001166:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001174:	2307      	movs	r3, #7
 8001176:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800117c:	4619      	mov	r1, r3
 800117e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001182:	f000 fb4d 	bl	8001820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800118a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001198:	2303      	movs	r3, #3
 800119a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f000 fb3b 	bl	8001820 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2026      	movs	r0, #38	; 0x26
 80011b0:	f000 fa2f 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011b4:	2026      	movs	r0, #38	; 0x26
 80011b6:	f000 fa48 	bl	800164a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3778      	adds	r7, #120	; 0x78
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40004400 	.word	0x40004400
 80011c8:	40021000 	.word	0x40021000

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d0:	e7fe      	b.n	80011d0 <NMI_Handler+0x4>

080011d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <MemManage_Handler+0x4>

080011de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001218:	f000 f8dc 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <SPI1_IRQHandler+0x10>)
 8001226:	f002 fc83 	bl	8003b30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000080 	.word	0x20000080

08001234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <USART2_IRQHandler+0x10>)
 800123a:	f003 f8d5 	bl	80043e8 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200000e4 	.word	0x200000e4

08001248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001250:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <_sbrk+0x5c>)
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <_sbrk+0x60>)
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <_sbrk+0x64>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <_sbrk+0x68>)
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	429a      	cmp	r2, r3
 8001276:	d207      	bcs.n	8001288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001278:	f003 fc56 	bl	8004b28 <__errno>
 800127c:	4603      	mov	r3, r0
 800127e:	220c      	movs	r2, #12
 8001280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e009      	b.n	800129c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <_sbrk+0x64>)
 8001298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20010000 	.word	0x20010000
 80012a8:	00000400 	.word	0x00000400
 80012ac:	2000016c 	.word	0x2000016c
 80012b0:	200002c0 	.word	0x200002c0

080012b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <SystemInit+0x20>)
 80012ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <SystemInit+0x20>)
 80012c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001310 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012dc:	f7ff ffea 	bl	80012b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <LoopForever+0x6>)
  ldr r1, =_edata
 80012e2:	490d      	ldr	r1, [pc, #52]	; (8001318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <LoopForever+0xe>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012f8:	4c0a      	ldr	r4, [pc, #40]	; (8001324 <LoopForever+0x16>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001306:	f003 fc15 	bl	8004b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800130a:	f7ff fc81 	bl	8000c10 <main>

0800130e <LoopForever>:

LoopForever:
    b LoopForever
 800130e:	e7fe      	b.n	800130e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001310:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800131c:	08005534 	.word	0x08005534
  ldr r2, =_sbss
 8001320:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001324:	200002bc 	.word	0x200002bc

08001328 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC1_IRQHandler>

0800132a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001334:	2003      	movs	r0, #3
 8001336:	f000 f961 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f80e 	bl	800135c <HAL_InitTick>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	e001      	b.n	8001350 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800134c:	f7ff fe40 	bl	8000fd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001350:	79fb      	ldrb	r3, [r7, #7]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <HAL_InitTick+0x6c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d023      	beq.n	80013b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_InitTick+0x70>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_InitTick+0x6c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f96d 	bl	8001666 <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10f      	bne.n	80013b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d809      	bhi.n	80013ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 f937 	bl	8001612 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_InitTick+0x74>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e007      	b.n	80013bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e004      	b.n	80013bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]
 80013b6:	e001      	b.n	80013bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000010 	.word	0x20000010
 80013cc:	20000008 	.word	0x20000008
 80013d0:	2000000c 	.word	0x2000000c

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000010 	.word	0x20000010
 80013f8:	20000170 	.word	0x20000170

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000170 	.word	0x20000170

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000010 	.word	0x20000010

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4907      	ldr	r1, [pc, #28]	; (80014f8 <__NVIC_EnableIRQ+0x38>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c8:	d301      	bcc.n	80015ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00f      	b.n	80015ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <SysTick_Config+0x40>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d6:	210f      	movs	r1, #15
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f7ff ff8e 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <SysTick_Config+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SysTick_Config+0x40>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff29 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff3e 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ff8e 	bl	8001550 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff5d 	bl	80014fc <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff31 	bl	80014c0 <__NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffa2 	bl	80015b8 <SysTick_Config>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_DMA_Start_IT+0x20>
 800169a:	2302      	movs	r3, #2
 800169c:	e04b      	b.n	8001736 <HAL_DMA_Start_IT+0xb8>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d13a      	bne.n	8001728 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2202      	movs	r2, #2
 80016b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 f872 	bl	80017c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 020e 	orr.w	r2, r2, #14
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e00f      	b.n	8001716 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0204 	bic.w	r2, r2, #4
 8001704:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 020a 	orr.w	r2, r2, #10
 8001714:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0201 	orr.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e005      	b.n	8001734 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001730:	2302      	movs	r3, #2
 8001732:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001734:	7dfb      	ldrb	r3, [r7, #23]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d005      	beq.n	8001762 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2204      	movs	r2, #4
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e029      	b.n	80017b6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 020e 	bic.w	r2, r2, #14
 8001770:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0201 	bic.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f003 021c 	and.w	r2, r3, #28
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	2101      	movs	r1, #1
 8001790:	fa01 f202 	lsl.w	r2, r1, r2
 8001794:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	4798      	blx	r3
    }
  }
  return status;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f003 021c 	and.w	r2, r3, #28
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	2101      	movs	r1, #1
 80017dc:	fa01 f202 	lsl.w	r2, r1, r2
 80017e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b10      	cmp	r3, #16
 80017f0:	d108      	bne.n	8001804 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001802:	e007      	b.n	8001814 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	60da      	str	r2, [r3, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182e:	e148      	b.n	8001ac2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2101      	movs	r1, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 813a 	beq.w	8001abc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b01      	cmp	r3, #1
 8001852:	d005      	beq.n	8001860 <HAL_GPIO_Init+0x40>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d130      	bne.n	80018c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001896:	2201      	movs	r2, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	f003 0201 	and.w	r2, r3, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d017      	beq.n	80018fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d123      	bne.n	8001952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	220f      	movs	r2, #15
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	08da      	lsrs	r2, r3, #3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3208      	adds	r2, #8
 800194c:	6939      	ldr	r1, [r7, #16]
 800194e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0203 	and.w	r2, r3, #3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8094 	beq.w	8001abc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001994:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	4a51      	ldr	r2, [pc, #324]	; (8001ae0 <HAL_GPIO_Init+0x2c0>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6613      	str	r3, [r2, #96]	; 0x60
 80019a0:	4b4f      	ldr	r3, [pc, #316]	; (8001ae0 <HAL_GPIO_Init+0x2c0>)
 80019a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ac:	4a4d      	ldr	r2, [pc, #308]	; (8001ae4 <HAL_GPIO_Init+0x2c4>)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019d6:	d00d      	beq.n	80019f4 <HAL_GPIO_Init+0x1d4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a43      	ldr	r2, [pc, #268]	; (8001ae8 <HAL_GPIO_Init+0x2c8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d007      	beq.n	80019f0 <HAL_GPIO_Init+0x1d0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a42      	ldr	r2, [pc, #264]	; (8001aec <HAL_GPIO_Init+0x2cc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_GPIO_Init+0x1cc>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e004      	b.n	80019f6 <HAL_GPIO_Init+0x1d6>
 80019ec:	2307      	movs	r3, #7
 80019ee:	e002      	b.n	80019f6 <HAL_GPIO_Init+0x1d6>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_GPIO_Init+0x1d6>
 80019f4:	2300      	movs	r3, #0
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	f002 0203 	and.w	r2, r2, #3
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	4093      	lsls	r3, r2
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a06:	4937      	ldr	r1, [pc, #220]	; (8001ae4 <HAL_GPIO_Init+0x2c4>)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a14:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a38:	4a2d      	ldr	r2, [pc, #180]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a62:	4a23      	ldr	r2, [pc, #140]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a8c:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f47f aeaf 	bne.w	8001830 <HAL_GPIO_Init+0x10>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	48000400 	.word	0x48000400
 8001aec:	48000800 	.word	0x48000800
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
 8001b00:	4613      	mov	r3, r2
 8001b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b04:	787b      	ldrb	r3, [r7, #1]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40007000 	.word	0x40007000

08001b44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40007000 	.word	0x40007000

08001b60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b6e:	d130      	bne.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b70:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b7c:	d038      	beq.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b86:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2232      	movs	r2, #50	; 0x32
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	4a1b      	ldr	r2, [pc, #108]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	0c9b      	lsrs	r3, r3, #18
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba4:	e002      	b.n	8001bac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb8:	d102      	bne.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f2      	bne.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bcc:	d110      	bne.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e00f      	b.n	8001bf2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bde:	d007      	beq.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001be8:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40007000 	.word	0x40007000
 8001c04:	20000008 	.word	0x20000008
 8001c08:	431bde83 	.word	0x431bde83

08001c0c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d102      	bne.n	8001c20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f000 bc02 	b.w	8002424 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c20:	4b96      	ldr	r3, [pc, #600]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c2a:	4b94      	ldr	r3, [pc, #592]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80e4 	beq.w	8001e0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d007      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4c>
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	f040 808b 	bne.w	8001d66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	f040 8087 	bne.w	8001d66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c58:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_OscConfig+0x64>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e3d9      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1a      	ldr	r2, [r3, #32]
 8001c74:	4b81      	ldr	r3, [pc, #516]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_RCC_OscConfig+0x7e>
 8001c80:	4b7e      	ldr	r3, [pc, #504]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c88:	e005      	b.n	8001c96 <HAL_RCC_OscConfig+0x8a>
 8001c8a:	4b7c      	ldr	r3, [pc, #496]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d223      	bcs.n	8001ce2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fd8c 	bl	80027bc <RCC_SetFlashLatencyFromMSIRange>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e3ba      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cae:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a72      	ldr	r2, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	4b70      	ldr	r3, [pc, #448]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	496d      	ldr	r1, [pc, #436]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ccc:	4b6b      	ldr	r3, [pc, #428]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	021b      	lsls	r3, r3, #8
 8001cda:	4968      	ldr	r1, [pc, #416]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
 8001ce0:	e025      	b.n	8001d2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce2:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a65      	ldr	r2, [pc, #404]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001ce8:	f043 0308 	orr.w	r3, r3, #8
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b63      	ldr	r3, [pc, #396]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4960      	ldr	r1, [pc, #384]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d00:	4b5e      	ldr	r3, [pc, #376]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	495b      	ldr	r1, [pc, #364]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fd4c 	bl	80027bc <RCC_SetFlashLatencyFromMSIRange>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e37a      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d2e:	f000 fc81 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 8001d32:	4602      	mov	r2, r0
 8001d34:	4b51      	ldr	r3, [pc, #324]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	4950      	ldr	r1, [pc, #320]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d40:	5ccb      	ldrb	r3, [r1, r3]
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	4a4e      	ldr	r2, [pc, #312]	; (8001e84 <HAL_RCC_OscConfig+0x278>)
 8001d4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d4e:	4b4e      	ldr	r3, [pc, #312]	; (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fb02 	bl	800135c <HAL_InitTick>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d052      	beq.n	8001e08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	e35e      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d032      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a42      	ldr	r2, [pc, #264]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff fb3f 	bl	80013fc <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d82:	f7ff fb3b 	bl	80013fc <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e347      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d94:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da0:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a35      	ldr	r2, [pc, #212]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001da6:	f043 0308 	orr.w	r3, r3, #8
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4930      	ldr	r1, [pc, #192]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	492b      	ldr	r1, [pc, #172]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
 8001dd2:	e01a      	b.n	8001e0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dd4:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a28      	ldr	r2, [pc, #160]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fb0c 	bl	80013fc <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de8:	f7ff fb08 	bl	80013fc <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e314      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1dc>
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d073      	beq.n	8001efe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_OscConfig+0x21c>
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	d10e      	bne.n	8001e40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d10b      	bne.n	8001e40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d063      	beq.n	8001efc <HAL_RCC_OscConfig+0x2f0>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d15f      	bne.n	8001efc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e2f1      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e48:	d106      	bne.n	8001e58 <HAL_RCC_OscConfig+0x24c>
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e025      	b.n	8001ea4 <HAL_RCC_OscConfig+0x298>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e60:	d114      	bne.n	8001e8c <HAL_RCC_OscConfig+0x280>
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a02      	ldr	r2, [pc, #8]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e013      	b.n	8001ea4 <HAL_RCC_OscConfig+0x298>
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	080054a8 	.word	0x080054a8
 8001e84:	20000008 	.word	0x20000008
 8001e88:	2000000c 	.word	0x2000000c
 8001e8c:	4ba0      	ldr	r3, [pc, #640]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a9f      	ldr	r2, [pc, #636]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b9d      	ldr	r3, [pc, #628]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a9c      	ldr	r2, [pc, #624]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff faa6 	bl	80013fc <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff faa2 	bl	80013fc <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e2ae      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec6:	4b92      	ldr	r3, [pc, #584]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x2a8>
 8001ed2:	e014      	b.n	8001efe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fa92 	bl	80013fc <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff fa8e 	bl	80013fc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e29a      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eee:	4b88      	ldr	r3, [pc, #544]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x2d0>
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d060      	beq.n	8001fcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_OscConfig+0x310>
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2b0c      	cmp	r3, #12
 8001f14:	d119      	bne.n	8001f4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d116      	bne.n	8001f4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f1c:	4b7c      	ldr	r3, [pc, #496]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_OscConfig+0x328>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e277      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f34:	4b76      	ldr	r3, [pc, #472]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	061b      	lsls	r3, r3, #24
 8001f42:	4973      	ldr	r1, [pc, #460]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f48:	e040      	b.n	8001fcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d023      	beq.n	8001f9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f52:	4b6f      	ldr	r3, [pc, #444]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a6e      	ldr	r2, [pc, #440]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7ff fa4d 	bl	80013fc <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f66:	f7ff fa49 	bl	80013fc <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e255      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f78:	4b65      	ldr	r3, [pc, #404]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f84:	4b62      	ldr	r3, [pc, #392]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	061b      	lsls	r3, r3, #24
 8001f92:	495f      	ldr	r1, [pc, #380]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
 8001f98:	e018      	b.n	8001fcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9a:	4b5d      	ldr	r3, [pc, #372]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a5c      	ldr	r2, [pc, #368]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fa29 	bl	80013fc <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fae:	f7ff fa25 	bl	80013fc <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e231      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc0:	4b53      	ldr	r3, [pc, #332]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d03c      	beq.n	8002052 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d01c      	beq.n	800201a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe0:	4b4b      	ldr	r3, [pc, #300]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe6:	4a4a      	ldr	r2, [pc, #296]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fa04 	bl	80013fc <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7ff fa00 	bl	80013fc <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e20c      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800200a:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 800200c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0ef      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x3ec>
 8002018:	e01b      	b.n	8002052 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201a:	4b3d      	ldr	r3, [pc, #244]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 800201c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002020:	4a3b      	ldr	r2, [pc, #236]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202a:	f7ff f9e7 	bl	80013fc <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002032:	f7ff f9e3 	bl	80013fc <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e1ef      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002044:	4b32      	ldr	r3, [pc, #200]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8002046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1ef      	bne.n	8002032 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80a6 	beq.w	80021ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002064:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10d      	bne.n	800208c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	4a26      	ldr	r2, [pc, #152]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207a:	6593      	str	r3, [r2, #88]	; 0x58
 800207c:	4b24      	ldr	r3, [pc, #144]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002088:	2301      	movs	r3, #1
 800208a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_RCC_OscConfig+0x508>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d118      	bne.n	80020ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002098:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_RCC_OscConfig+0x508>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_RCC_OscConfig+0x508>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a4:	f7ff f9aa 	bl	80013fc <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ac:	f7ff f9a6 	bl	80013fc <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e1b2      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_RCC_OscConfig+0x508>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d108      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4d8>
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d8:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e2:	e029      	b.n	8002138 <HAL_RCC_OscConfig+0x52c>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d115      	bne.n	8002118 <HAL_RCC_OscConfig+0x50c>
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f2:	4a07      	ldr	r2, [pc, #28]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	4a03      	ldr	r2, [pc, #12]	; (8002110 <HAL_RCC_OscConfig+0x504>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800210c:	e014      	b.n	8002138 <HAL_RCC_OscConfig+0x52c>
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	40007000 	.word	0x40007000
 8002118:	4b9a      	ldr	r3, [pc, #616]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	4a99      	ldr	r2, [pc, #612]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002128:	4b96      	ldr	r3, [pc, #600]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	4a95      	ldr	r2, [pc, #596]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 8002130:	f023 0304 	bic.w	r3, r3, #4
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d016      	beq.n	800216e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002140:	f7ff f95c 	bl	80013fc <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002146:	e00a      	b.n	800215e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7ff f958 	bl	80013fc <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	; 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e162      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215e:	4b89      	ldr	r3, [pc, #548]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ed      	beq.n	8002148 <HAL_RCC_OscConfig+0x53c>
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216e:	f7ff f945 	bl	80013fc <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7ff f941 	bl	80013fc <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e14b      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800218c:	4b7d      	ldr	r3, [pc, #500]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1ed      	bne.n	8002176 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800219a:	7ffb      	ldrb	r3, [r7, #31]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d105      	bne.n	80021ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a0:	4b78      	ldr	r3, [pc, #480]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	4a77      	ldr	r2, [pc, #476]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 80021a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d03c      	beq.n	8002232 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01c      	beq.n	80021fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021c0:	4b70      	ldr	r3, [pc, #448]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 80021c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c6:	4a6f      	ldr	r2, [pc, #444]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d0:	f7ff f914 	bl	80013fc <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021d8:	f7ff f910 	bl	80013fc <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e11c      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ea:	4b66      	ldr	r3, [pc, #408]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 80021ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ef      	beq.n	80021d8 <HAL_RCC_OscConfig+0x5cc>
 80021f8:	e01b      	b.n	8002232 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021fa:	4b62      	ldr	r3, [pc, #392]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 80021fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002200:	4a60      	ldr	r2, [pc, #384]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220a:	f7ff f8f7 	bl	80013fc <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002212:	f7ff f8f3 	bl	80013fc <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e0ff      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002224:	4b57      	ldr	r3, [pc, #348]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 8002226:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1ef      	bne.n	8002212 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80f3 	beq.w	8002422 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	2b02      	cmp	r3, #2
 8002242:	f040 80c9 	bne.w	80023d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002246:	4b4f      	ldr	r3, [pc, #316]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f003 0203 	and.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	429a      	cmp	r2, r3
 8002258:	d12c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	3b01      	subs	r3, #1
 8002266:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d123      	bne.n	80022b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002276:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d11b      	bne.n	80022b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d113      	bne.n	80022b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	085b      	lsrs	r3, r3, #1
 8002298:	3b01      	subs	r3, #1
 800229a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d109      	bne.n	80022b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	3b01      	subs	r3, #1
 80022ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d06b      	beq.n	800238c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b0c      	cmp	r3, #12
 80022b8:	d062      	beq.n	8002380 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022ba:	4b32      	ldr	r3, [pc, #200]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0ac      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022ca:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a2d      	ldr	r2, [pc, #180]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 80022d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022d6:	f7ff f891 	bl	80013fc <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7ff f88d 	bl	80013fc <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e099      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	4b24      	ldr	r3, [pc, #144]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fc:	4b21      	ldr	r3, [pc, #132]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	4b21      	ldr	r3, [pc, #132]	; (8002388 <HAL_RCC_OscConfig+0x77c>)
 8002302:	4013      	ands	r3, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800230c:	3a01      	subs	r2, #1
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	4311      	orrs	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002316:	0212      	lsls	r2, r2, #8
 8002318:	4311      	orrs	r1, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800231e:	0852      	lsrs	r2, r2, #1
 8002320:	3a01      	subs	r2, #1
 8002322:	0552      	lsls	r2, r2, #21
 8002324:	4311      	orrs	r1, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800232a:	0852      	lsrs	r2, r2, #1
 800232c:	3a01      	subs	r2, #1
 800232e:	0652      	lsls	r2, r2, #25
 8002330:	4311      	orrs	r1, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002336:	06d2      	lsls	r2, r2, #27
 8002338:	430a      	orrs	r2, r1
 800233a:	4912      	ldr	r1, [pc, #72]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 800233c:	4313      	orrs	r3, r2
 800233e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002340:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 8002346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a0c      	ldr	r2, [pc, #48]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 8002352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002356:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002358:	f7ff f850 	bl	80013fc <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002360:	f7ff f84c 	bl	80013fc <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e058      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800237e:	e050      	b.n	8002422 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e04f      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
 8002384:	40021000 	.word	0x40021000
 8002388:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238c:	4b27      	ldr	r3, [pc, #156]	; (800242c <HAL_RCC_OscConfig+0x820>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d144      	bne.n	8002422 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002398:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_RCC_OscConfig+0x820>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a23      	ldr	r2, [pc, #140]	; (800242c <HAL_RCC_OscConfig+0x820>)
 800239e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <HAL_RCC_OscConfig+0x820>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a20      	ldr	r2, [pc, #128]	; (800242c <HAL_RCC_OscConfig+0x820>)
 80023aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023b0:	f7ff f824 	bl	80013fc <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7ff f820 	bl	80013fc <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e02c      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_RCC_OscConfig+0x820>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x7ac>
 80023d6:	e024      	b.n	8002422 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d01f      	beq.n	800241e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <HAL_RCC_OscConfig+0x820>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a12      	ldr	r2, [pc, #72]	; (800242c <HAL_RCC_OscConfig+0x820>)
 80023e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7ff f807 	bl	80013fc <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7ff f803 	bl	80013fc <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e00f      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_RCC_OscConfig+0x820>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f0      	bne.n	80023f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCC_OscConfig+0x820>)
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	4905      	ldr	r1, [pc, #20]	; (800242c <HAL_RCC_OscConfig+0x820>)
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_OscConfig+0x824>)
 8002418:	4013      	ands	r3, r2
 800241a:	60cb      	str	r3, [r1, #12]
 800241c:	e001      	b.n	8002422 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	feeefffc 	.word	0xfeeefffc

08002434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0e7      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002448:	4b75      	ldr	r3, [pc, #468]	; (8002620 <HAL_RCC_ClockConfig+0x1ec>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d910      	bls.n	8002478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b72      	ldr	r3, [pc, #456]	; (8002620 <HAL_RCC_ClockConfig+0x1ec>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 0207 	bic.w	r2, r3, #7
 800245e:	4970      	ldr	r1, [pc, #448]	; (8002620 <HAL_RCC_ClockConfig+0x1ec>)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b6e      	ldr	r3, [pc, #440]	; (8002620 <HAL_RCC_ClockConfig+0x1ec>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0cf      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d010      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	4b66      	ldr	r3, [pc, #408]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002490:	429a      	cmp	r2, r3
 8002492:	d908      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002494:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4960      	ldr	r1, [pc, #384]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d04c      	beq.n	800254c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ba:	4b5a      	ldr	r3, [pc, #360]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d121      	bne.n	800250a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0a6      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d2:	4b54      	ldr	r3, [pc, #336]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d115      	bne.n	800250a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e09a      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ea:	4b4e      	ldr	r3, [pc, #312]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e08e      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024fa:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e086      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800250a:	4b46      	ldr	r3, [pc, #280]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4943      	ldr	r1, [pc, #268]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 8002518:	4313      	orrs	r3, r2
 800251a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800251c:	f7fe ff6e 	bl	80013fc <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7fe ff6a 	bl	80013fc <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e06e      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 020c 	and.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d1eb      	bne.n	8002524 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	4b31      	ldr	r3, [pc, #196]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002564:	429a      	cmp	r2, r3
 8002566:	d208      	bcs.n	800257a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	492b      	ldr	r1, [pc, #172]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800257a:	4b29      	ldr	r3, [pc, #164]	; (8002620 <HAL_RCC_ClockConfig+0x1ec>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d210      	bcs.n	80025aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002588:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_RCC_ClockConfig+0x1ec>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 0207 	bic.w	r2, r3, #7
 8002590:	4923      	ldr	r1, [pc, #140]	; (8002620 <HAL_RCC_ClockConfig+0x1ec>)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCC_ClockConfig+0x1ec>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e036      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4918      	ldr	r1, [pc, #96]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4910      	ldr	r1, [pc, #64]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025e8:	f000 f824 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_RCC_ClockConfig+0x1f0>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	490b      	ldr	r1, [pc, #44]	; (8002628 <HAL_RCC_ClockConfig+0x1f4>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	4a09      	ldr	r2, [pc, #36]	; (800262c <HAL_RCC_ClockConfig+0x1f8>)
 8002606:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_RCC_ClockConfig+0x1fc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fea5 	bl	800135c <HAL_InitTick>
 8002612:	4603      	mov	r3, r0
 8002614:	72fb      	strb	r3, [r7, #11]

  return status;
 8002616:	7afb      	ldrb	r3, [r7, #11]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40022000 	.word	0x40022000
 8002624:	40021000 	.word	0x40021000
 8002628:	080054a8 	.word	0x080054a8
 800262c:	20000008 	.word	0x20000008
 8002630:	2000000c 	.word	0x2000000c

08002634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002642:	4b3e      	ldr	r3, [pc, #248]	; (800273c <HAL_RCC_GetSysClockFreq+0x108>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800264c:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_RCC_GetSysClockFreq+0x108>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_GetSysClockFreq+0x34>
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b0c      	cmp	r3, #12
 8002660:	d121      	bne.n	80026a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d11e      	bne.n	80026a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002668:	4b34      	ldr	r3, [pc, #208]	; (800273c <HAL_RCC_GetSysClockFreq+0x108>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002674:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_RCC_GetSysClockFreq+0x108>)
 8002676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	e005      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002684:	4b2d      	ldr	r3, [pc, #180]	; (800273c <HAL_RCC_GetSysClockFreq+0x108>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002690:	4a2b      	ldr	r2, [pc, #172]	; (8002740 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002698:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10d      	bne.n	80026bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026a4:	e00a      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d102      	bne.n	80026b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026ac:	4b25      	ldr	r3, [pc, #148]	; (8002744 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	e004      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026b8:	4b23      	ldr	r3, [pc, #140]	; (8002748 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b0c      	cmp	r3, #12
 80026c0:	d134      	bne.n	800272c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_RCC_GetSysClockFreq+0x108>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d003      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0xa6>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d003      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0xac>
 80026d8:	e005      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026da:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <HAL_RCC_GetSysClockFreq+0x110>)
 80026dc:	617b      	str	r3, [r7, #20]
      break;
 80026de:	e005      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_RCC_GetSysClockFreq+0x114>)
 80026e2:	617b      	str	r3, [r7, #20]
      break;
 80026e4:	e002      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	617b      	str	r3, [r7, #20]
      break;
 80026ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_RCC_GetSysClockFreq+0x108>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	3301      	adds	r3, #1
 80026f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_RCC_GetSysClockFreq+0x108>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	0a1b      	lsrs	r3, r3, #8
 8002700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	fb03 f202 	mul.w	r2, r3, r2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002710:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_RCC_GetSysClockFreq+0x108>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	0e5b      	lsrs	r3, r3, #25
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	3301      	adds	r3, #1
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	fbb2 f3f3 	udiv	r3, r2, r3
 800272a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800272c:	69bb      	ldr	r3, [r7, #24]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	080054c0 	.word	0x080054c0
 8002744:	00f42400 	.word	0x00f42400
 8002748:	007a1200 	.word	0x007a1200

0800274c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_RCC_GetHCLKFreq+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000008 	.word	0x20000008

08002764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002768:	f7ff fff0 	bl	800274c <HAL_RCC_GetHCLKFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4904      	ldr	r1, [pc, #16]	; (800278c <HAL_RCC_GetPCLK1Freq+0x28>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	080054b8 	.word	0x080054b8

08002790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002794:	f7ff ffda 	bl	800274c <HAL_RCC_GetHCLKFreq>
 8002798:	4602      	mov	r2, r0
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	0adb      	lsrs	r3, r3, #11
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	4904      	ldr	r1, [pc, #16]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027a6:	5ccb      	ldrb	r3, [r1, r3]
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000
 80027b8:	080054b8 	.word	0x080054b8

080027bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027d4:	f7ff f9b6 	bl	8001b44 <HAL_PWREx_GetVoltageRange>
 80027d8:	6178      	str	r0, [r7, #20]
 80027da:	e014      	b.n	8002806 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027dc:	4b25      	ldr	r3, [pc, #148]	; (8002874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	4a24      	ldr	r2, [pc, #144]	; (8002874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6593      	str	r3, [r2, #88]	; 0x58
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027f4:	f7ff f9a6 	bl	8001b44 <HAL_PWREx_GetVoltageRange>
 80027f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027fa:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002804:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800280c:	d10b      	bne.n	8002826 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b80      	cmp	r3, #128	; 0x80
 8002812:	d919      	bls.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2ba0      	cmp	r3, #160	; 0xa0
 8002818:	d902      	bls.n	8002820 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800281a:	2302      	movs	r3, #2
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	e013      	b.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002820:	2301      	movs	r3, #1
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	e010      	b.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d902      	bls.n	8002832 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800282c:	2303      	movs	r3, #3
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	e00a      	b.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b80      	cmp	r3, #128	; 0x80
 8002836:	d102      	bne.n	800283e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002838:	2302      	movs	r3, #2
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	e004      	b.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b70      	cmp	r3, #112	; 0x70
 8002842:	d101      	bne.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002844:	2301      	movs	r3, #1
 8002846:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 0207 	bic.w	r2, r3, #7
 8002850:	4909      	ldr	r1, [pc, #36]	; (8002878 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002858:	4b07      	ldr	r3, [pc, #28]	; (8002878 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	40022000 	.word	0x40022000

0800287c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002884:	2300      	movs	r3, #0
 8002886:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002888:	2300      	movs	r3, #0
 800288a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002894:	2b00      	cmp	r3, #0
 8002896:	d031      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028a0:	d01a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80028a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028a6:	d814      	bhi.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d009      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028b0:	d10f      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80028b2:	4b5d      	ldr	r3, [pc, #372]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4a5c      	ldr	r2, [pc, #368]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028be:	e00c      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f9de 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028d0:	e003      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	74fb      	strb	r3, [r7, #19]
      break;
 80028d6:	e000      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80028d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028da:	7cfb      	ldrb	r3, [r7, #19]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10b      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e0:	4b51      	ldr	r3, [pc, #324]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	494e      	ldr	r1, [pc, #312]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028f6:	e001      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 809e 	beq.w	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290a:	2300      	movs	r3, #0
 800290c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800290e:	4b46      	ldr	r3, [pc, #280]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00d      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	4b40      	ldr	r3, [pc, #256]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	4a3f      	ldr	r2, [pc, #252]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292e:	6593      	str	r3, [r2, #88]	; 0x58
 8002930:	4b3d      	ldr	r3, [pc, #244]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293c:	2301      	movs	r3, #1
 800293e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002940:	4b3a      	ldr	r3, [pc, #232]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a39      	ldr	r2, [pc, #228]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800294c:	f7fe fd56 	bl	80013fc <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002952:	e009      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7fe fd52 	bl	80013fc <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d902      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	74fb      	strb	r3, [r7, #19]
        break;
 8002966:	e005      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002968:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d15a      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800297a:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002984:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01e      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	429a      	cmp	r2, r3
 8002994:	d019      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029a2:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a8:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029c2:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d016      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fd12 	bl	80013fc <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029da:	e00b      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe fd0e 	bl	80013fc <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d902      	bls.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	74fb      	strb	r3, [r7, #19]
            break;
 80029f2:	e006      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0ec      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002a02:	7cfb      	ldrb	r3, [r7, #19]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10b      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	4904      	ldr	r1, [pc, #16]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a1e:	e009      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	74bb      	strb	r3, [r7, #18]
 8002a24:	e006      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a34:	7c7b      	ldrb	r3, [r7, #17]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d105      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3a:	4b8a      	ldr	r3, [pc, #552]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	4a89      	ldr	r2, [pc, #548]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a52:	4b84      	ldr	r3, [pc, #528]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f023 0203 	bic.w	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	4980      	ldr	r1, [pc, #512]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a74:	4b7b      	ldr	r3, [pc, #492]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f023 020c 	bic.w	r2, r3, #12
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	4978      	ldr	r1, [pc, #480]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a96:	4b73      	ldr	r3, [pc, #460]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	496f      	ldr	r1, [pc, #444]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac6:	4967      	ldr	r1, [pc, #412]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ada:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	495e      	ldr	r1, [pc, #376]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002afc:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	4956      	ldr	r1, [pc, #344]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b1e:	4b51      	ldr	r3, [pc, #324]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	494d      	ldr	r1, [pc, #308]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d028      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b40:	4b48      	ldr	r3, [pc, #288]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	4945      	ldr	r1, [pc, #276]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b60:	4b40      	ldr	r3, [pc, #256]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a3f      	ldr	r2, [pc, #252]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b6a:	60d3      	str	r3, [r2, #12]
 8002b6c:	e011      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f882 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d028      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b9e:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	492d      	ldr	r1, [pc, #180]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bbe:	4b29      	ldr	r3, [pc, #164]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	4a28      	ldr	r2, [pc, #160]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bc8:	60d3      	str	r3, [r2, #12]
 8002bca:	e011      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2101      	movs	r1, #1
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f853 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002be2:	4603      	mov	r3, r0
 8002be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01c      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0a:	4916      	ldr	r1, [pc, #88]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c1a:	d10c      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	2102      	movs	r1, #2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f830 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002c32:	7cfb      	ldrb	r3, [r7, #19]
 8002c34:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c48:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c50:	4904      	ldr	r1, [pc, #16]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c58:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000

08002c68 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002c72:	f043 0304 	orr.w	r3, r3, #4
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000

08002c88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c96:	4b74      	ldr	r3, [pc, #464]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ca2:	4b71      	ldr	r3, [pc, #452]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0203 	and.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d10d      	bne.n	8002cce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cba:	4b6b      	ldr	r3, [pc, #428]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d047      	beq.n	8002d5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e044      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d018      	beq.n	8002d0e <RCCEx_PLLSAI1_Config+0x86>
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d825      	bhi.n	8002d2c <RCCEx_PLLSAI1_Config+0xa4>
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d002      	beq.n	8002cea <RCCEx_PLLSAI1_Config+0x62>
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d009      	beq.n	8002cfc <RCCEx_PLLSAI1_Config+0x74>
 8002ce8:	e020      	b.n	8002d2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cea:	4b5f      	ldr	r3, [pc, #380]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11d      	bne.n	8002d32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfa:	e01a      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cfc:	4b5a      	ldr	r3, [pc, #360]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d116      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0c:	e013      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d0e:	4b56      	ldr	r3, [pc, #344]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d1a:	4b53      	ldr	r3, [pc, #332]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d2a:	e006      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d30:	e004      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d32:	bf00      	nop
 8002d34:	e002      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10d      	bne.n	8002d5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d42:	4b49      	ldr	r3, [pc, #292]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	430b      	orrs	r3, r1
 8002d58:	4943      	ldr	r1, [pc, #268]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d17c      	bne.n	8002e5e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d64:	4b40      	ldr	r3, [pc, #256]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3f      	ldr	r2, [pc, #252]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d70:	f7fe fb44 	bl	80013fc <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d76:	e009      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d78:	f7fe fb40 	bl	80013fc <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d902      	bls.n	8002d8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	73fb      	strb	r3, [r7, #15]
        break;
 8002d8a:	e005      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d8c:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ef      	bne.n	8002d78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d15f      	bne.n	8002e5e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d110      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da4:	4b30      	ldr	r3, [pc, #192]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002dac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6892      	ldr	r2, [r2, #8]
 8002db4:	0211      	lsls	r1, r2, #8
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68d2      	ldr	r2, [r2, #12]
 8002dba:	06d2      	lsls	r2, r2, #27
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	492a      	ldr	r1, [pc, #168]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	610b      	str	r3, [r1, #16]
 8002dc4:	e027      	b.n	8002e16 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d112      	bne.n	8002df2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dcc:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6892      	ldr	r2, [r2, #8]
 8002ddc:	0211      	lsls	r1, r2, #8
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6912      	ldr	r2, [r2, #16]
 8002de2:	0852      	lsrs	r2, r2, #1
 8002de4:	3a01      	subs	r2, #1
 8002de6:	0552      	lsls	r2, r2, #21
 8002de8:	430a      	orrs	r2, r1
 8002dea:	491f      	ldr	r1, [pc, #124]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	610b      	str	r3, [r1, #16]
 8002df0:	e011      	b.n	8002e16 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6892      	ldr	r2, [r2, #8]
 8002e02:	0211      	lsls	r1, r2, #8
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6952      	ldr	r2, [r2, #20]
 8002e08:	0852      	lsrs	r2, r2, #1
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	0652      	lsls	r2, r2, #25
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	4915      	ldr	r1, [pc, #84]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7fe faeb 	bl	80013fc <HAL_GetTick>
 8002e26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e28:	e009      	b.n	8002e3e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e2a:	f7fe fae7 	bl	80013fc <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d902      	bls.n	8002e3e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	73fb      	strb	r3, [r7, #15]
          break;
 8002e3c:	e005      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0ef      	beq.n	8002e2a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	4903      	ldr	r1, [pc, #12]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000

08002e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e095      	b.n	8002faa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d108      	bne.n	8002e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e8e:	d009      	beq.n	8002ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	61da      	str	r2, [r3, #28]
 8002e96:	e005      	b.n	8002ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe f8aa 	bl	8001018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ee4:	d902      	bls.n	8002eec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	e002      	b.n	8002ef2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002efa:	d007      	beq.n	8002f0c <HAL_SPI_Init+0xa0>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f04:	d002      	beq.n	8002f0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4e:	ea42 0103 	orr.w	r1, r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	0c1b      	lsrs	r3, r3, #16
 8002f68:	f003 0204 	and.w	r2, r3, #4
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f88:	ea42 0103 	orr.w	r1, r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b088      	sub	sp, #32
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_SPI_Transmit+0x22>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e15f      	b.n	8003294 <HAL_SPI_Transmit+0x2e2>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fdc:	f7fe fa0e 	bl	80013fc <HAL_GetTick>
 8002fe0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d002      	beq.n	8002ff8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ff6:	e148      	b.n	800328a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_SPI_Transmit+0x52>
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003008:	e13f      	b.n	800328a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2203      	movs	r2, #3
 800300e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	88fa      	ldrh	r2, [r7, #6]
 8003028:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003054:	d10f      	bne.n	8003076 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003064:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003074:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d007      	beq.n	8003094 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800309c:	d94f      	bls.n	800313e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_SPI_Transmit+0xfa>
 80030a6:	8afb      	ldrh	r3, [r7, #22]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d142      	bne.n	8003132 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	881a      	ldrh	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	1c9a      	adds	r2, r3, #2
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030d0:	e02f      	b.n	8003132 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d112      	bne.n	8003106 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003104:	e015      	b.n	8003132 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003106:	f7fe f979 	bl	80013fc <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d803      	bhi.n	800311e <HAL_SPI_Transmit+0x16c>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d102      	bne.n	8003124 <HAL_SPI_Transmit+0x172>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003130:	e0ab      	b.n	800328a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ca      	bne.n	80030d2 <HAL_SPI_Transmit+0x120>
 800313c:	e080      	b.n	8003240 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_SPI_Transmit+0x19a>
 8003146:	8afb      	ldrh	r3, [r7, #22]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d174      	bne.n	8003236 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d912      	bls.n	800317c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	881a      	ldrh	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	1c9a      	adds	r2, r3, #2
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b02      	subs	r3, #2
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	87da      	strh	r2, [r3, #62]	; 0x3e
 800317a:	e05c      	b.n	8003236 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	7812      	ldrb	r2, [r2, #0]
 8003188:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031a2:	e048      	b.n	8003236 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d12b      	bne.n	800320a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d912      	bls.n	80031e2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	881a      	ldrh	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	1c9a      	adds	r2, r3, #2
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b02      	subs	r3, #2
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031e0:	e029      	b.n	8003236 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	330c      	adds	r3, #12
 80031ec:	7812      	ldrb	r2, [r2, #0]
 80031ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003208:	e015      	b.n	8003236 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800320a:	f7fe f8f7 	bl	80013fc <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d803      	bhi.n	8003222 <HAL_SPI_Transmit+0x270>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d102      	bne.n	8003228 <HAL_SPI_Transmit+0x276>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d106      	bne.n	8003236 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003234:	e029      	b.n	800328a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1b1      	bne.n	80031a4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	6839      	ldr	r1, [r7, #0]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 ff91 	bl	800416c <SPI_EndRxTxTransaction>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e003      	b.n	800328a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003292:	7ffb      	ldrb	r3, [r7, #31]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3720      	adds	r7, #32
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d002      	beq.n	80032c2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
 80032be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032c0:	e11a      	b.n	80034f8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ca:	d112      	bne.n	80032f2 <HAL_SPI_Receive+0x56>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10e      	bne.n	80032f2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2204      	movs	r2, #4
 80032d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	4613      	mov	r3, r2
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f90e 	bl	800350a <HAL_SPI_TransmitReceive>
 80032ee:	4603      	mov	r3, r0
 80032f0:	e107      	b.n	8003502 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_SPI_Receive+0x64>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e100      	b.n	8003502 <HAL_SPI_Receive+0x266>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003308:	f7fe f878 	bl	80013fc <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_SPI_Receive+0x7e>
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d102      	bne.n	8003320 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800331e:	e0eb      	b.n	80034f8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2204      	movs	r2, #4
 8003324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	88fa      	ldrh	r2, [r7, #6]
 8003338:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	88fa      	ldrh	r2, [r7, #6]
 8003340:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800336a:	d908      	bls.n	800337e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	e007      	b.n	800338e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800338c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003396:	d10f      	bne.n	80033b8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d007      	beq.n	80033d6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033de:	d86f      	bhi.n	80034c0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033e0:	e034      	b.n	800344c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d117      	bne.n	8003420 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f103 020c 	add.w	r2, r3, #12
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800341e:	e015      	b.n	800344c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003420:	f7fd ffec 	bl	80013fc <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d803      	bhi.n	8003438 <HAL_SPI_Receive+0x19c>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d102      	bne.n	800343e <HAL_SPI_Receive+0x1a2>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800344a:	e055      	b.n	80034f8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1c4      	bne.n	80033e2 <HAL_SPI_Receive+0x146>
 8003458:	e038      	b.n	80034cc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d115      	bne.n	8003494 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	b292      	uxth	r2, r2
 8003474:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	1c9a      	adds	r2, r3, #2
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003492:	e015      	b.n	80034c0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003494:	f7fd ffb2 	bl	80013fc <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d803      	bhi.n	80034ac <HAL_SPI_Receive+0x210>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d102      	bne.n	80034b2 <HAL_SPI_Receive+0x216>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80034be:	e01b      	b.n	80034f8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1c6      	bne.n	800345a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	6839      	ldr	r1, [r7, #0]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fdf3 	bl	80040bc <SPI_EndRxTransaction>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
 80034ee:	e003      	b.n	80034f8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003500:	7dfb      	ldrb	r3, [r7, #23]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b08a      	sub	sp, #40	; 0x28
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003518:	2301      	movs	r3, #1
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x26>
 800352c:	2302      	movs	r3, #2
 800352e:	e20a      	b.n	8003946 <HAL_SPI_TransmitReceive+0x43c>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003538:	f7fd ff60 	bl	80013fc <HAL_GetTick>
 800353c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003544:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800354c:	887b      	ldrh	r3, [r7, #2]
 800354e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003550:	887b      	ldrh	r3, [r7, #2]
 8003552:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003554:	7efb      	ldrb	r3, [r7, #27]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d00e      	beq.n	8003578 <HAL_SPI_TransmitReceive+0x6e>
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003560:	d106      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x66>
 800356a:	7efb      	ldrb	r3, [r7, #27]
 800356c:	2b04      	cmp	r3, #4
 800356e:	d003      	beq.n	8003578 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003570:	2302      	movs	r3, #2
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003576:	e1e0      	b.n	800393a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_SPI_TransmitReceive+0x80>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_SPI_TransmitReceive+0x80>
 8003584:	887b      	ldrh	r3, [r7, #2]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d103      	bne.n	8003592 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003590:	e1d3      	b.n	800393a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b04      	cmp	r3, #4
 800359c:	d003      	beq.n	80035a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2205      	movs	r2, #5
 80035a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	887a      	ldrh	r2, [r7, #2]
 80035b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	887a      	ldrh	r2, [r7, #2]
 80035be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	887a      	ldrh	r2, [r7, #2]
 80035cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	887a      	ldrh	r2, [r7, #2]
 80035d2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035e8:	d802      	bhi.n	80035f0 <HAL_SPI_TransmitReceive+0xe6>
 80035ea:	8a3b      	ldrh	r3, [r7, #16]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d908      	bls.n	8003602 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	e007      	b.n	8003612 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003610:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361c:	2b40      	cmp	r3, #64	; 0x40
 800361e:	d007      	beq.n	8003630 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800362e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003638:	f240 8081 	bls.w	800373e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_SPI_TransmitReceive+0x140>
 8003644:	8a7b      	ldrh	r3, [r7, #18]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d16d      	bne.n	8003726 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	881a      	ldrh	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	1c9a      	adds	r2, r3, #2
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800366e:	e05a      	b.n	8003726 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d11b      	bne.n	80036b6 <HAL_SPI_TransmitReceive+0x1ac>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d016      	beq.n	80036b6 <HAL_SPI_TransmitReceive+0x1ac>
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	2b01      	cmp	r3, #1
 800368c:	d113      	bne.n	80036b6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	881a      	ldrh	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	1c9a      	adds	r2, r3, #2
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d11c      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x1f4>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d016      	beq.n	80036fe <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	b292      	uxth	r2, r2
 80036dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	1c9a      	adds	r2, r3, #2
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036fa:	2301      	movs	r3, #1
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036fe:	f7fd fe7d 	bl	80013fc <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800370a:	429a      	cmp	r2, r3
 800370c:	d80b      	bhi.n	8003726 <HAL_SPI_TransmitReceive+0x21c>
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d007      	beq.n	8003726 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003724:	e109      	b.n	800393a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d19f      	bne.n	8003670 <HAL_SPI_TransmitReceive+0x166>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d199      	bne.n	8003670 <HAL_SPI_TransmitReceive+0x166>
 800373c:	e0e3      	b.n	8003906 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_SPI_TransmitReceive+0x244>
 8003746:	8a7b      	ldrh	r3, [r7, #18]
 8003748:	2b01      	cmp	r3, #1
 800374a:	f040 80cf 	bne.w	80038ec <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d912      	bls.n	800377e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	881a      	ldrh	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	1c9a      	adds	r2, r3, #2
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b02      	subs	r3, #2
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800377c:	e0b6      	b.n	80038ec <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	330c      	adds	r3, #12
 8003788:	7812      	ldrb	r2, [r2, #0]
 800378a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a4:	e0a2      	b.n	80038ec <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d134      	bne.n	800381e <HAL_SPI_TransmitReceive+0x314>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d02f      	beq.n	800381e <HAL_SPI_TransmitReceive+0x314>
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d12c      	bne.n	800381e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d912      	bls.n	80037f4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	881a      	ldrh	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	1c9a      	adds	r2, r3, #2
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b02      	subs	r3, #2
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037f2:	e012      	b.n	800381a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	7812      	ldrb	r2, [r2, #0]
 8003800:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b01      	cmp	r3, #1
 800382a:	d148      	bne.n	80038be <HAL_SPI_TransmitReceive+0x3b4>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d042      	beq.n	80038be <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d923      	bls.n	800388c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	b292      	uxth	r2, r2
 8003850:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	1c9a      	adds	r2, r3, #2
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b02      	subs	r3, #2
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b01      	cmp	r3, #1
 8003878:	d81f      	bhi.n	80038ba <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	e016      	b.n	80038ba <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f103 020c 	add.w	r2, r3, #12
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	7812      	ldrb	r2, [r2, #0]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038ba:	2301      	movs	r3, #1
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038be:	f7fd fd9d 	bl	80013fc <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d803      	bhi.n	80038d6 <HAL_SPI_TransmitReceive+0x3cc>
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d102      	bne.n	80038dc <HAL_SPI_TransmitReceive+0x3d2>
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80038ea:	e026      	b.n	800393a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f47f af57 	bne.w	80037a6 <HAL_SPI_TransmitReceive+0x29c>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	f47f af50 	bne.w	80037a6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fc2e 	bl	800416c <SPI_EndRxTxTransaction>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003930:	e003      	b.n	800393a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003946:	4618      	mov	r0, r3
 8003948:	3728      	adds	r7, #40	; 0x28
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_SPI_Transmit_DMA+0x20>
 800396c:	2302      	movs	r3, #2
 800396e:	e0d4      	b.n	8003b1a <HAL_SPI_Transmit_DMA+0x1ca>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d002      	beq.n	800398a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003984:	2302      	movs	r3, #2
 8003986:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003988:	e0c2      	b.n	8003b10 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_SPI_Transmit_DMA+0x46>
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d102      	bne.n	800399c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
    goto error;
 800399a:	e0b9      	b.n	8003b10 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2203      	movs	r2, #3
 80039a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	88fa      	ldrh	r2, [r7, #6]
 80039b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	88fa      	ldrh	r2, [r7, #6]
 80039ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e6:	d10f      	bne.n	8003a08 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	4a45      	ldr	r2, [pc, #276]	; (8003b24 <HAL_SPI_Transmit_DMA+0x1d4>)
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	4a44      	ldr	r2, [pc, #272]	; (8003b28 <HAL_SPI_Transmit_DMA+0x1d8>)
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	4a43      	ldr	r2, [pc, #268]	; (8003b2c <HAL_SPI_Transmit_DMA+0x1dc>)
 8003a1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	2200      	movs	r2, #0
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a36:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a40:	d82d      	bhi.n	8003a9e <HAL_SPI_Transmit_DMA+0x14e>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4c:	d127      	bne.n	8003a9e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10f      	bne.n	8003a7c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a6a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	085b      	lsrs	r3, r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a7a:	e010      	b.n	8003a9e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a8a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3301      	adds	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003ab6:	f7fd fde2 	bl	800167e <HAL_DMA_Start_IT>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac4:	f043 0210 	orr.w	r2, r3, #16
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003ad0:	e01e      	b.n	8003b10 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d007      	beq.n	8003af0 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0220 	orr.w	r2, r2, #32
 8003afe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0202 	orr.w	r2, r2, #2
 8003b0e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	08003dfb 	.word	0x08003dfb
 8003b28:	08003d55 	.word	0x08003d55
 8003b2c:	08003e17 	.word	0x08003e17

08003b30 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10e      	bne.n	8003b70 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d009      	beq.n	8003b70 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d004      	beq.n	8003b70 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4798      	blx	r3
    return;
 8003b6e:	e0ce      	b.n	8003d0e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_SPI_IRQHandler+0x5e>
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
    return;
 8003b8c:	e0bf      	b.n	8003d0e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <HAL_SPI_IRQHandler+0x7e>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80b0 	beq.w	8003d0e <HAL_SPI_IRQHandler+0x1de>
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80aa 	beq.w	8003d0e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d023      	beq.n	8003c0c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d011      	beq.n	8003bf4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd4:	f043 0204 	orr.w	r2, r3, #4
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	e00b      	b.n	8003c0c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	693b      	ldr	r3, [r7, #16]
        return;
 8003c0a:	e080      	b.n	8003d0e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d014      	beq.n	8003c40 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1a:	f043 0201 	orr.w	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00c      	beq.n	8003c64 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c4e:	f043 0208 	orr.w	r2, r3, #8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d04f      	beq.n	8003d0c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c7a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d104      	bne.n	8003c98 <HAL_SPI_IRQHandler+0x168>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d034      	beq.n	8003d02 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0203 	bic.w	r2, r2, #3
 8003ca6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d011      	beq.n	8003cd4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <HAL_SPI_IRQHandler+0x1e4>)
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fd fd3e 	bl	800173e <HAL_DMA_Abort_IT>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ccc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d016      	beq.n	8003d0a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce0:	4a0c      	ldr	r2, [pc, #48]	; (8003d14 <HAL_SPI_IRQHandler+0x1e4>)
 8003ce2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fd fd28 	bl	800173e <HAL_DMA_Abort_IT>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003d00:	e003      	b.n	8003d0a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f81c 	bl	8003d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d08:	e000      	b.n	8003d0c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003d0a:	bf00      	nop
    return;
 8003d0c:	bf00      	nop
  }
}
 8003d0e:	3720      	adds	r7, #32
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	08003e57 	.word	0x08003e57

08003d18 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d62:	f7fd fb4b 	bl	80013fc <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d03b      	beq.n	8003dee <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0220 	bic.w	r2, r2, #32
 8003d84:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0202 	bic.w	r2, r2, #2
 8003d94:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	2164      	movs	r1, #100	; 0x64
 8003d9a:	6978      	ldr	r0, [r7, #20]
 8003d9c:	f000 f9e6 	bl	800416c <SPI_EndRxTxTransaction>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003daa:	f043 0220 	orr.w	r2, r3, #32
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10a      	bne.n	8003dd0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003de6:	6978      	ldr	r0, [r7, #20]
 8003de8:	f7ff ffaa 	bl	8003d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003dec:	e002      	b.n	8003df4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003dee:	6978      	ldr	r0, [r7, #20]
 8003df0:	f7ff ff92 	bl	8003d18 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7ff ff8f 	bl	8003d2c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e0e:	bf00      	nop
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0203 	bic.w	r2, r2, #3
 8003e32:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e38:	f043 0210 	orr.w	r2, r3, #16
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff ff79 	bl	8003d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f7ff ff64 	bl	8003d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e90:	f7fd fab4 	bl	80013fc <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ea0:	f7fd faac 	bl	80013fc <HAL_GetTick>
 8003ea4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ea6:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	015b      	lsls	r3, r3, #5
 8003eac:	0d1b      	lsrs	r3, r3, #20
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	fb02 f303 	mul.w	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eb6:	e054      	b.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d050      	beq.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ec0:	f7fd fa9c 	bl	80013fc <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d902      	bls.n	8003ed6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d13d      	bne.n	8003f52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ee4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eee:	d111      	bne.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef8:	d004      	beq.n	8003f04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f02:	d107      	bne.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1c:	d10f      	bne.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e017      	b.n	8003f82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	bf0c      	ite	eq
 8003f72:	2301      	moveq	r3, #1
 8003f74:	2300      	movne	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d19b      	bne.n	8003eb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000008 	.word	0x20000008

08003f90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003fa2:	f7fd fa2b 	bl	80013fc <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	4413      	add	r3, r2
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003fb2:	f7fd fa23 	bl	80013fc <HAL_GetTick>
 8003fb6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003fc0:	4b3d      	ldr	r3, [pc, #244]	; (80040b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	00da      	lsls	r2, r3, #3
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	0d1b      	lsrs	r3, r3, #20
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd2:	fb02 f303 	mul.w	r3, r2, r3
 8003fd6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003fd8:	e060      	b.n	800409c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fe0:	d107      	bne.n	8003ff2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d104      	bne.n	8003ff2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d050      	beq.n	800409c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ffa:	f7fd f9ff 	bl	80013fc <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004006:	429a      	cmp	r2, r3
 8004008:	d902      	bls.n	8004010 <SPI_WaitFifoStateUntilTimeout+0x80>
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	2b00      	cmp	r3, #0
 800400e:	d13d      	bne.n	800408c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800401e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004028:	d111      	bne.n	800404e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004032:	d004      	beq.n	800403e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403c:	d107      	bne.n	800404e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800404c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004056:	d10f      	bne.n	8004078 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004076:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e010      	b.n	80040ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	3b01      	subs	r3, #1
 800409a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d196      	bne.n	8003fda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3728      	adds	r7, #40	; 0x28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000008 	.word	0x20000008

080040bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040d0:	d111      	bne.n	80040f6 <SPI_EndRxTransaction+0x3a>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040da:	d004      	beq.n	80040e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e4:	d107      	bne.n	80040f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2180      	movs	r1, #128	; 0x80
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff febd 	bl	8003e80 <SPI_WaitFlagStateUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004110:	f043 0220 	orr.w	r2, r3, #32
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e023      	b.n	8004164 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004124:	d11d      	bne.n	8004162 <SPI_EndRxTransaction+0xa6>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800412e:	d004      	beq.n	800413a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004138:	d113      	bne.n	8004162 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2200      	movs	r2, #0
 8004142:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f7ff ff22 	bl	8003f90 <SPI_WaitFifoStateUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004156:	f043 0220 	orr.w	r2, r3, #32
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e000      	b.n	8004164 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2200      	movs	r2, #0
 8004180:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f7ff ff03 	bl	8003f90 <SPI_WaitFifoStateUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e027      	b.n	80041f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2200      	movs	r2, #0
 80041a8:	2180      	movs	r1, #128	; 0x80
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7ff fe68 	bl	8003e80 <SPI_WaitFlagStateUntilTimeout>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ba:	f043 0220 	orr.w	r2, r3, #32
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e014      	b.n	80041f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff fedc 	bl	8003f90 <SPI_WaitFifoStateUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e000      	b.n	80041f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e03c      	b.n	8004284 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fc ff62 	bl	80010e8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0201 	bic.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fa97 	bl	8004770 <USART_SetConfig>
 8004242:	4603      	mov	r3, r0
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e01b      	b.n	8004284 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800425a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800426a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fba5 	bl	80049cc <USART_CheckIdleState>
 8004282:	4603      	mov	r3, r0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	; 0x28
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	f040 809a 	bne.w	80043de <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_USART_Transmit+0x2a>
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e092      	b.n	80043e0 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_USART_Transmit+0x3c>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e08b      	b.n	80043e0 <HAL_USART_Transmit+0x154>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2212      	movs	r2, #18
 80042da:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042de:	f7fd f88d 	bl	80013fc <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	88fa      	ldrh	r2, [r7, #6]
 80042e8:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	88fa      	ldrh	r2, [r7, #6]
 80042ee:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	d108      	bne.n	800430c <HAL_USART_Transmit+0x80>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d104      	bne.n	800430c <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	e003      	b.n	8004314 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8004310:	2300      	movs	r3, #0
 8004312:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8004314:	e02b      	b.n	800436e <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2200      	movs	r2, #0
 800431e:	2180      	movs	r1, #128	; 0x80
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f9ef 	bl	8004704 <USART_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e057      	b.n	80043e0 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10b      	bne.n	800434e <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	881a      	ldrh	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004342:	b292      	uxth	r2, r2
 8004344:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	3302      	adds	r3, #2
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	e008      	b.n	8004360 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	b292      	uxth	r2, r2
 8004358:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	3301      	adds	r3, #1
 800435e:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1ce      	bne.n	8004316 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2200      	movs	r2, #0
 8004380:	2140      	movs	r1, #64	; 0x40
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f9be 	bl	8004704 <USART_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e026      	b.n	80043e0 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2240      	movs	r2, #64	; 0x40
 8004398:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2208      	movs	r2, #8
 80043a0:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	8b1b      	ldrh	r3, [r3, #24]
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0208 	orr.w	r2, r2, #8
 80043b2:	b292      	uxth	r2, r2
 80043b4:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	8b1b      	ldrh	r3, [r3, #24]
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0210 	orr.w	r2, r2, #16
 80043c6:	b292      	uxth	r2, r2
 80043c8:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e000      	b.n	80043e0 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 80043de:	2302      	movs	r3, #2
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	617b      	str	r3, [r7, #20]
  /* If no error occurs */
#if defined(USART_CR2_SLVEN)
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
                                      USART_ISR_UDR));
#else
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	f640 030f 	movw	r3, #2063	; 0x80f
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
#endif /* USART_CR2_SLVEN */
  if (errorflags == 0U)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d113      	bne.n	8004440 <HAL_USART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <HAL_USART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (husart->RxISR != NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 810d 	beq.w	8004650 <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
      }
      return;
 800443e:	e107      	b.n	8004650 <HAL_USART_IRQHandler+0x268>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
#else
  if ((errorflags != 0U)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 80e3 	beq.w	800460e <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80d8 	beq.w	800460e <HAL_USART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00e      	beq.n	8004486 <HAL_USART_IRQHandler+0x9e>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2201      	movs	r2, #1
 8004478:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	f043 0201 	orr.w	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00e      	beq.n	80044ae <HAL_USART_IRQHandler+0xc6>
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2202      	movs	r2, #2
 80044a0:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	f043 0204 	orr.w	r2, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00e      	beq.n	80044d6 <HAL_USART_IRQHandler+0xee>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2204      	movs	r2, #4
 80044c8:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ce:	f043 0202 	orr.w	r2, r3, #2
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	64da      	str	r2, [r3, #76]	; 0x4c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d013      	beq.n	8004508 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <HAL_USART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2208      	movs	r2, #8
 80044fa:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004500:	f043 0208 	orr.w	r2, r3, #8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00f      	beq.n	8004532 <HAL_USART_IRQHandler+0x14a>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004524:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
#endif /* USART_CR2_SLVEN */

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 808c 	beq.w	8004654 <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d007      	beq.n	8004560 <HAL_USART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (husart->RxISR != NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d002      	beq.n	800457e <HAL_USART_IRQHandler+0x196>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d03e      	beq.n	80045fc <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f88e 	bl	80046a0 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b40      	cmp	r3, #64	; 0x40
 8004590:	d130      	bne.n	80045f4 <HAL_USART_IRQHandler+0x20c>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a0:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d008      	beq.n	80045bc <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2200      	movs	r2, #0
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd f8c1 	bl	800173e <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d013      	beq.n	80045ec <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c8:	4a25      	ldr	r2, [pc, #148]	; (8004660 <HAL_USART_IRQHandler+0x278>)
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fd f8b4 	bl	800173e <HAL_DMA_Abort_IT>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d016      	beq.n	800460a <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80045e6:	4610      	mov	r0, r2
 80045e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80045ea:	e00e      	b.n	800460a <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f84d 	bl	800468c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80045f2:	e00a      	b.n	800460a <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f849 	bl	800468c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80045fa:	e006      	b.n	800460a <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f845 	bl	800468c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    return;
 8004608:	e024      	b.n	8004654 <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800460a:	bf00      	nop
    return;
 800460c:	e022      	b.n	8004654 <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00d      	beq.n	8004634 <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_USART_IRQHandler+0x24c>
#endif /* USART_CR1_FIFOEN */
  {
    if (husart->TxISR != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d016      	beq.n	8004658 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
    }
    return;
 8004632:	e011      	b.n	8004658 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00d      	beq.n	800465a <HAL_USART_IRQHandler+0x272>
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fa02 	bl	8004a52 <USART_EndTransmit_IT>
    return;
 800464e:	e004      	b.n	800465a <HAL_USART_IRQHandler+0x272>
      return;
 8004650:	bf00      	nop
 8004652:	e002      	b.n	800465a <HAL_USART_IRQHandler+0x272>
    return;
 8004654:	bf00      	nop
 8004656:	e000      	b.n	800465a <HAL_USART_IRQHandler+0x272>
    return;
 8004658:	bf00      	nop
    HAL_USARTEx_RxFifoFullCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	080046dd 	.word	0x080046dd

08004664 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80046b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0201 	bic.w	r2, r2, #1
 80046c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f7ff ffc8 	bl	800468c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	4613      	mov	r3, r2
 8004712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004714:	e018      	b.n	8004748 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d014      	beq.n	8004748 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471e:	f7fc fe6d 	bl	80013fc <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	429a      	cmp	r2, r3
 800472c:	d302      	bcc.n	8004734 <USART_WaitOnFlagUntilTimeout+0x30>
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d109      	bne.n	8004748 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e00f      	b.n	8004768 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69da      	ldr	r2, [r3, #28]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	4013      	ands	r3, r2
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	429a      	cmp	r2, r3
 8004756:	bf0c      	ite	eq
 8004758:	2301      	moveq	r3, #1
 800475a:	2300      	movne	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	461a      	mov	r2, r3
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	429a      	cmp	r2, r3
 8004764:	d0d7      	beq.n	8004716 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800477c:	2300      	movs	r3, #0
 800477e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004794:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b87      	ldr	r3, [pc, #540]	; (80049bc <USART_SetConfig+0x24c>)
 800479e:	4013      	ands	r3, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	6979      	ldr	r1, [r7, #20]
 80047a6:	430b      	orrs	r3, r1
 80047a8:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80047aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047ae:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a74      	ldr	r2, [pc, #464]	; (80049c0 <USART_SetConfig+0x250>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d121      	bne.n	8004836 <USART_SetConfig+0xc6>
 80047f2:	4b74      	ldr	r3, [pc, #464]	; (80049c4 <USART_SetConfig+0x254>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d817      	bhi.n	8004830 <USART_SetConfig+0xc0>
 8004800:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <USART_SetConfig+0x98>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	08004819 	.word	0x08004819
 800480c:	08004825 	.word	0x08004825
 8004810:	0800481f 	.word	0x0800481f
 8004814:	0800482b 	.word	0x0800482b
 8004818:	2301      	movs	r3, #1
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e045      	b.n	80048aa <USART_SetConfig+0x13a>
 800481e:	2302      	movs	r3, #2
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e042      	b.n	80048aa <USART_SetConfig+0x13a>
 8004824:	2304      	movs	r3, #4
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e03f      	b.n	80048aa <USART_SetConfig+0x13a>
 800482a:	2308      	movs	r3, #8
 800482c:	77fb      	strb	r3, [r7, #31]
 800482e:	e03c      	b.n	80048aa <USART_SetConfig+0x13a>
 8004830:	2310      	movs	r3, #16
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e039      	b.n	80048aa <USART_SetConfig+0x13a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a63      	ldr	r2, [pc, #396]	; (80049c8 <USART_SetConfig+0x258>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d132      	bne.n	80048a6 <USART_SetConfig+0x136>
 8004840:	4b60      	ldr	r3, [pc, #384]	; (80049c4 <USART_SetConfig+0x254>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b0c      	cmp	r3, #12
 800484c:	d828      	bhi.n	80048a0 <USART_SetConfig+0x130>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <USART_SetConfig+0xe4>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004889 	.word	0x08004889
 8004858:	080048a1 	.word	0x080048a1
 800485c:	080048a1 	.word	0x080048a1
 8004860:	080048a1 	.word	0x080048a1
 8004864:	08004895 	.word	0x08004895
 8004868:	080048a1 	.word	0x080048a1
 800486c:	080048a1 	.word	0x080048a1
 8004870:	080048a1 	.word	0x080048a1
 8004874:	0800488f 	.word	0x0800488f
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a1 	.word	0x080048a1
 8004880:	080048a1 	.word	0x080048a1
 8004884:	0800489b 	.word	0x0800489b
 8004888:	2300      	movs	r3, #0
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e00d      	b.n	80048aa <USART_SetConfig+0x13a>
 800488e:	2302      	movs	r3, #2
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e00a      	b.n	80048aa <USART_SetConfig+0x13a>
 8004894:	2304      	movs	r3, #4
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e007      	b.n	80048aa <USART_SetConfig+0x13a>
 800489a:	2308      	movs	r3, #8
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e004      	b.n	80048aa <USART_SetConfig+0x13a>
 80048a0:	2310      	movs	r3, #16
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e001      	b.n	80048aa <USART_SetConfig+0x13a>
 80048a6:	2310      	movs	r3, #16
 80048a8:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80048aa:	7ffb      	ldrb	r3, [r7, #31]
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d85a      	bhi.n	8004966 <USART_SetConfig+0x1f6>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <USART_SetConfig+0x148>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048fb 	.word	0x080048fb
 80048c0:	08004919 	.word	0x08004919
 80048c4:	08004967 	.word	0x08004967
 80048c8:	08004933 	.word	0x08004933
 80048cc:	08004967 	.word	0x08004967
 80048d0:	08004967 	.word	0x08004967
 80048d4:	08004967 	.word	0x08004967
 80048d8:	08004951 	.word	0x08004951
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80048dc:	f7fd ff42 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 80048e0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	005a      	lsls	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	441a      	add	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80048f8:	e038      	b.n	800496c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80048fa:	f7fd ff49 	bl	8002790 <HAL_RCC_GetPCLK2Freq>
 80048fe:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	005a      	lsls	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	441a      	add	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004916:	e029      	b.n	800496c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004922:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6852      	ldr	r2, [r2, #4]
 800492a:	fbb3 f3f2 	udiv	r3, r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004930:	e01c      	b.n	800496c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8004932:	f7fd fe7f 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 8004936:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	005a      	lsls	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	441a      	add	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800494e:	e00d      	b.n	800496c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004964:	e002      	b.n	800496c <USART_SetConfig+0x1fc>
    default:
      ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	77bb      	strb	r3, [r7, #30]
      break;
 800496a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d916      	bls.n	80049a0 <USART_SetConfig+0x230>
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d212      	bcs.n	80049a0 <USART_SetConfig+0x230>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	b29b      	uxth	r3, r3
 800497e:	f023 030f 	bic.w	r3, r3, #15
 8004982:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	085b      	lsrs	r3, r3, #1
 8004988:	b29b      	uxth	r3, r3
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	b29a      	uxth	r2, r3
 8004990:	89fb      	ldrh	r3, [r7, #14]
 8004992:	4313      	orrs	r3, r2
 8004994:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	89fa      	ldrh	r2, [r7, #14]
 800499c:	60da      	str	r2, [r3, #12]
 800499e:	e001      	b.n	80049a4 <USART_SetConfig+0x234>
  }
  else
  {
    ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 80049b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3720      	adds	r7, #32
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	efff69f3 	.word	0xefff69f3
 80049c0:	40013800 	.word	0x40013800
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40004400 	.word	0x40004400

080049cc <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049da:	f7fc fd0f 	bl	80013fc <HAL_GetTick>
 80049de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d10e      	bne.n	8004a0c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80049ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff fe81 	bl	8004704 <USART_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e01e      	b.n	8004a4a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d10e      	bne.n	8004a38 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff fe6b 	bl	8004704 <USART_WaitOnFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e008      	b.n	8004a4a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a68:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	63da      	str	r2, [r3, #60]	; 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b12      	cmp	r3, #18
 8004a8a:	d115      	bne.n	8004ab8 <USART_EndTransmit_IT+0x66>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2208      	movs	r2, #8
 8004a92:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	8b1b      	ldrh	r3, [r3, #24]
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0208 	orr.w	r2, r2, #8
 8004aa4:	b292      	uxth	r2, r2
 8004aa6:	831a      	strh	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff fdd7 	bl	8004664 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ab6:	e00b      	b.n	8004ad0 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    HAL_USART_TxRxCpltCallback(husart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff fdd4 	bl	8004678 <HAL_USART_TxRxCpltCallback>
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <siprintf>:
 8004ad8:	b40e      	push	{r1, r2, r3}
 8004ada:	b500      	push	{lr}
 8004adc:	b09c      	sub	sp, #112	; 0x70
 8004ade:	ab1d      	add	r3, sp, #116	; 0x74
 8004ae0:	9002      	str	r0, [sp, #8]
 8004ae2:	9006      	str	r0, [sp, #24]
 8004ae4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ae8:	4809      	ldr	r0, [pc, #36]	; (8004b10 <siprintf+0x38>)
 8004aea:	9107      	str	r1, [sp, #28]
 8004aec:	9104      	str	r1, [sp, #16]
 8004aee:	4909      	ldr	r1, [pc, #36]	; (8004b14 <siprintf+0x3c>)
 8004af0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004af4:	9105      	str	r1, [sp, #20]
 8004af6:	6800      	ldr	r0, [r0, #0]
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	a902      	add	r1, sp, #8
 8004afc:	f000 f9a0 	bl	8004e40 <_svfiprintf_r>
 8004b00:	9b02      	ldr	r3, [sp, #8]
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
 8004b06:	b01c      	add	sp, #112	; 0x70
 8004b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b0c:	b003      	add	sp, #12
 8004b0e:	4770      	bx	lr
 8004b10:	20000060 	.word	0x20000060
 8004b14:	ffff0208 	.word	0xffff0208

08004b18 <memset>:
 8004b18:	4402      	add	r2, r0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d100      	bne.n	8004b22 <memset+0xa>
 8004b20:	4770      	bx	lr
 8004b22:	f803 1b01 	strb.w	r1, [r3], #1
 8004b26:	e7f9      	b.n	8004b1c <memset+0x4>

08004b28 <__errno>:
 8004b28:	4b01      	ldr	r3, [pc, #4]	; (8004b30 <__errno+0x8>)
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20000060 	.word	0x20000060

08004b34 <__libc_init_array>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	4d0d      	ldr	r5, [pc, #52]	; (8004b6c <__libc_init_array+0x38>)
 8004b38:	4c0d      	ldr	r4, [pc, #52]	; (8004b70 <__libc_init_array+0x3c>)
 8004b3a:	1b64      	subs	r4, r4, r5
 8004b3c:	10a4      	asrs	r4, r4, #2
 8004b3e:	2600      	movs	r6, #0
 8004b40:	42a6      	cmp	r6, r4
 8004b42:	d109      	bne.n	8004b58 <__libc_init_array+0x24>
 8004b44:	4d0b      	ldr	r5, [pc, #44]	; (8004b74 <__libc_init_array+0x40>)
 8004b46:	4c0c      	ldr	r4, [pc, #48]	; (8004b78 <__libc_init_array+0x44>)
 8004b48:	f000 fc6a 	bl	8005420 <_init>
 8004b4c:	1b64      	subs	r4, r4, r5
 8004b4e:	10a4      	asrs	r4, r4, #2
 8004b50:	2600      	movs	r6, #0
 8004b52:	42a6      	cmp	r6, r4
 8004b54:	d105      	bne.n	8004b62 <__libc_init_array+0x2e>
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b5c:	4798      	blx	r3
 8004b5e:	3601      	adds	r6, #1
 8004b60:	e7ee      	b.n	8004b40 <__libc_init_array+0xc>
 8004b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b66:	4798      	blx	r3
 8004b68:	3601      	adds	r6, #1
 8004b6a:	e7f2      	b.n	8004b52 <__libc_init_array+0x1e>
 8004b6c:	0800552c 	.word	0x0800552c
 8004b70:	0800552c 	.word	0x0800552c
 8004b74:	0800552c 	.word	0x0800552c
 8004b78:	08005530 	.word	0x08005530

08004b7c <__retarget_lock_acquire_recursive>:
 8004b7c:	4770      	bx	lr

08004b7e <__retarget_lock_release_recursive>:
 8004b7e:	4770      	bx	lr

08004b80 <memcpy>:
 8004b80:	440a      	add	r2, r1
 8004b82:	4291      	cmp	r1, r2
 8004b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b88:	d100      	bne.n	8004b8c <memcpy+0xc>
 8004b8a:	4770      	bx	lr
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b96:	4291      	cmp	r1, r2
 8004b98:	d1f9      	bne.n	8004b8e <memcpy+0xe>
 8004b9a:	bd10      	pop	{r4, pc}

08004b9c <_free_r>:
 8004b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b9e:	2900      	cmp	r1, #0
 8004ba0:	d044      	beq.n	8004c2c <_free_r+0x90>
 8004ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ba6:	9001      	str	r0, [sp, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f1a1 0404 	sub.w	r4, r1, #4
 8004bae:	bfb8      	it	lt
 8004bb0:	18e4      	addlt	r4, r4, r3
 8004bb2:	f000 f8df 	bl	8004d74 <__malloc_lock>
 8004bb6:	4a1e      	ldr	r2, [pc, #120]	; (8004c30 <_free_r+0x94>)
 8004bb8:	9801      	ldr	r0, [sp, #4]
 8004bba:	6813      	ldr	r3, [r2, #0]
 8004bbc:	b933      	cbnz	r3, 8004bcc <_free_r+0x30>
 8004bbe:	6063      	str	r3, [r4, #4]
 8004bc0:	6014      	str	r4, [r2, #0]
 8004bc2:	b003      	add	sp, #12
 8004bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bc8:	f000 b8da 	b.w	8004d80 <__malloc_unlock>
 8004bcc:	42a3      	cmp	r3, r4
 8004bce:	d908      	bls.n	8004be2 <_free_r+0x46>
 8004bd0:	6825      	ldr	r5, [r4, #0]
 8004bd2:	1961      	adds	r1, r4, r5
 8004bd4:	428b      	cmp	r3, r1
 8004bd6:	bf01      	itttt	eq
 8004bd8:	6819      	ldreq	r1, [r3, #0]
 8004bda:	685b      	ldreq	r3, [r3, #4]
 8004bdc:	1949      	addeq	r1, r1, r5
 8004bde:	6021      	streq	r1, [r4, #0]
 8004be0:	e7ed      	b.n	8004bbe <_free_r+0x22>
 8004be2:	461a      	mov	r2, r3
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	b10b      	cbz	r3, 8004bec <_free_r+0x50>
 8004be8:	42a3      	cmp	r3, r4
 8004bea:	d9fa      	bls.n	8004be2 <_free_r+0x46>
 8004bec:	6811      	ldr	r1, [r2, #0]
 8004bee:	1855      	adds	r5, r2, r1
 8004bf0:	42a5      	cmp	r5, r4
 8004bf2:	d10b      	bne.n	8004c0c <_free_r+0x70>
 8004bf4:	6824      	ldr	r4, [r4, #0]
 8004bf6:	4421      	add	r1, r4
 8004bf8:	1854      	adds	r4, r2, r1
 8004bfa:	42a3      	cmp	r3, r4
 8004bfc:	6011      	str	r1, [r2, #0]
 8004bfe:	d1e0      	bne.n	8004bc2 <_free_r+0x26>
 8004c00:	681c      	ldr	r4, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	6053      	str	r3, [r2, #4]
 8004c06:	440c      	add	r4, r1
 8004c08:	6014      	str	r4, [r2, #0]
 8004c0a:	e7da      	b.n	8004bc2 <_free_r+0x26>
 8004c0c:	d902      	bls.n	8004c14 <_free_r+0x78>
 8004c0e:	230c      	movs	r3, #12
 8004c10:	6003      	str	r3, [r0, #0]
 8004c12:	e7d6      	b.n	8004bc2 <_free_r+0x26>
 8004c14:	6825      	ldr	r5, [r4, #0]
 8004c16:	1961      	adds	r1, r4, r5
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	bf04      	itt	eq
 8004c1c:	6819      	ldreq	r1, [r3, #0]
 8004c1e:	685b      	ldreq	r3, [r3, #4]
 8004c20:	6063      	str	r3, [r4, #4]
 8004c22:	bf04      	itt	eq
 8004c24:	1949      	addeq	r1, r1, r5
 8004c26:	6021      	streq	r1, [r4, #0]
 8004c28:	6054      	str	r4, [r2, #4]
 8004c2a:	e7ca      	b.n	8004bc2 <_free_r+0x26>
 8004c2c:	b003      	add	sp, #12
 8004c2e:	bd30      	pop	{r4, r5, pc}
 8004c30:	200002b4 	.word	0x200002b4

08004c34 <sbrk_aligned>:
 8004c34:	b570      	push	{r4, r5, r6, lr}
 8004c36:	4e0e      	ldr	r6, [pc, #56]	; (8004c70 <sbrk_aligned+0x3c>)
 8004c38:	460c      	mov	r4, r1
 8004c3a:	6831      	ldr	r1, [r6, #0]
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	b911      	cbnz	r1, 8004c46 <sbrk_aligned+0x12>
 8004c40:	f000 fba6 	bl	8005390 <_sbrk_r>
 8004c44:	6030      	str	r0, [r6, #0]
 8004c46:	4621      	mov	r1, r4
 8004c48:	4628      	mov	r0, r5
 8004c4a:	f000 fba1 	bl	8005390 <_sbrk_r>
 8004c4e:	1c43      	adds	r3, r0, #1
 8004c50:	d00a      	beq.n	8004c68 <sbrk_aligned+0x34>
 8004c52:	1cc4      	adds	r4, r0, #3
 8004c54:	f024 0403 	bic.w	r4, r4, #3
 8004c58:	42a0      	cmp	r0, r4
 8004c5a:	d007      	beq.n	8004c6c <sbrk_aligned+0x38>
 8004c5c:	1a21      	subs	r1, r4, r0
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 fb96 	bl	8005390 <_sbrk_r>
 8004c64:	3001      	adds	r0, #1
 8004c66:	d101      	bne.n	8004c6c <sbrk_aligned+0x38>
 8004c68:	f04f 34ff 	mov.w	r4, #4294967295
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	200002b8 	.word	0x200002b8

08004c74 <_malloc_r>:
 8004c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c78:	1ccd      	adds	r5, r1, #3
 8004c7a:	f025 0503 	bic.w	r5, r5, #3
 8004c7e:	3508      	adds	r5, #8
 8004c80:	2d0c      	cmp	r5, #12
 8004c82:	bf38      	it	cc
 8004c84:	250c      	movcc	r5, #12
 8004c86:	2d00      	cmp	r5, #0
 8004c88:	4607      	mov	r7, r0
 8004c8a:	db01      	blt.n	8004c90 <_malloc_r+0x1c>
 8004c8c:	42a9      	cmp	r1, r5
 8004c8e:	d905      	bls.n	8004c9c <_malloc_r+0x28>
 8004c90:	230c      	movs	r3, #12
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	2600      	movs	r6, #0
 8004c96:	4630      	mov	r0, r6
 8004c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d70 <_malloc_r+0xfc>
 8004ca0:	f000 f868 	bl	8004d74 <__malloc_lock>
 8004ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ca8:	461c      	mov	r4, r3
 8004caa:	bb5c      	cbnz	r4, 8004d04 <_malloc_r+0x90>
 8004cac:	4629      	mov	r1, r5
 8004cae:	4638      	mov	r0, r7
 8004cb0:	f7ff ffc0 	bl	8004c34 <sbrk_aligned>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	d155      	bne.n	8004d66 <_malloc_r+0xf2>
 8004cba:	f8d8 4000 	ldr.w	r4, [r8]
 8004cbe:	4626      	mov	r6, r4
 8004cc0:	2e00      	cmp	r6, #0
 8004cc2:	d145      	bne.n	8004d50 <_malloc_r+0xdc>
 8004cc4:	2c00      	cmp	r4, #0
 8004cc6:	d048      	beq.n	8004d5a <_malloc_r+0xe6>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4638      	mov	r0, r7
 8004cce:	eb04 0903 	add.w	r9, r4, r3
 8004cd2:	f000 fb5d 	bl	8005390 <_sbrk_r>
 8004cd6:	4581      	cmp	r9, r0
 8004cd8:	d13f      	bne.n	8004d5a <_malloc_r+0xe6>
 8004cda:	6821      	ldr	r1, [r4, #0]
 8004cdc:	1a6d      	subs	r5, r5, r1
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	f7ff ffa7 	bl	8004c34 <sbrk_aligned>
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d037      	beq.n	8004d5a <_malloc_r+0xe6>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	442b      	add	r3, r5
 8004cee:	6023      	str	r3, [r4, #0]
 8004cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d038      	beq.n	8004d6a <_malloc_r+0xf6>
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	42a2      	cmp	r2, r4
 8004cfc:	d12b      	bne.n	8004d56 <_malloc_r+0xe2>
 8004cfe:	2200      	movs	r2, #0
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	e00f      	b.n	8004d24 <_malloc_r+0xb0>
 8004d04:	6822      	ldr	r2, [r4, #0]
 8004d06:	1b52      	subs	r2, r2, r5
 8004d08:	d41f      	bmi.n	8004d4a <_malloc_r+0xd6>
 8004d0a:	2a0b      	cmp	r2, #11
 8004d0c:	d917      	bls.n	8004d3e <_malloc_r+0xca>
 8004d0e:	1961      	adds	r1, r4, r5
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	6025      	str	r5, [r4, #0]
 8004d14:	bf18      	it	ne
 8004d16:	6059      	strne	r1, [r3, #4]
 8004d18:	6863      	ldr	r3, [r4, #4]
 8004d1a:	bf08      	it	eq
 8004d1c:	f8c8 1000 	streq.w	r1, [r8]
 8004d20:	5162      	str	r2, [r4, r5]
 8004d22:	604b      	str	r3, [r1, #4]
 8004d24:	4638      	mov	r0, r7
 8004d26:	f104 060b 	add.w	r6, r4, #11
 8004d2a:	f000 f829 	bl	8004d80 <__malloc_unlock>
 8004d2e:	f026 0607 	bic.w	r6, r6, #7
 8004d32:	1d23      	adds	r3, r4, #4
 8004d34:	1af2      	subs	r2, r6, r3
 8004d36:	d0ae      	beq.n	8004c96 <_malloc_r+0x22>
 8004d38:	1b9b      	subs	r3, r3, r6
 8004d3a:	50a3      	str	r3, [r4, r2]
 8004d3c:	e7ab      	b.n	8004c96 <_malloc_r+0x22>
 8004d3e:	42a3      	cmp	r3, r4
 8004d40:	6862      	ldr	r2, [r4, #4]
 8004d42:	d1dd      	bne.n	8004d00 <_malloc_r+0x8c>
 8004d44:	f8c8 2000 	str.w	r2, [r8]
 8004d48:	e7ec      	b.n	8004d24 <_malloc_r+0xb0>
 8004d4a:	4623      	mov	r3, r4
 8004d4c:	6864      	ldr	r4, [r4, #4]
 8004d4e:	e7ac      	b.n	8004caa <_malloc_r+0x36>
 8004d50:	4634      	mov	r4, r6
 8004d52:	6876      	ldr	r6, [r6, #4]
 8004d54:	e7b4      	b.n	8004cc0 <_malloc_r+0x4c>
 8004d56:	4613      	mov	r3, r2
 8004d58:	e7cc      	b.n	8004cf4 <_malloc_r+0x80>
 8004d5a:	230c      	movs	r3, #12
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4638      	mov	r0, r7
 8004d60:	f000 f80e 	bl	8004d80 <__malloc_unlock>
 8004d64:	e797      	b.n	8004c96 <_malloc_r+0x22>
 8004d66:	6025      	str	r5, [r4, #0]
 8004d68:	e7dc      	b.n	8004d24 <_malloc_r+0xb0>
 8004d6a:	605b      	str	r3, [r3, #4]
 8004d6c:	deff      	udf	#255	; 0xff
 8004d6e:	bf00      	nop
 8004d70:	200002b4 	.word	0x200002b4

08004d74 <__malloc_lock>:
 8004d74:	4801      	ldr	r0, [pc, #4]	; (8004d7c <__malloc_lock+0x8>)
 8004d76:	f7ff bf01 	b.w	8004b7c <__retarget_lock_acquire_recursive>
 8004d7a:	bf00      	nop
 8004d7c:	200002b0 	.word	0x200002b0

08004d80 <__malloc_unlock>:
 8004d80:	4801      	ldr	r0, [pc, #4]	; (8004d88 <__malloc_unlock+0x8>)
 8004d82:	f7ff befc 	b.w	8004b7e <__retarget_lock_release_recursive>
 8004d86:	bf00      	nop
 8004d88:	200002b0 	.word	0x200002b0

08004d8c <__ssputs_r>:
 8004d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d90:	688e      	ldr	r6, [r1, #8]
 8004d92:	461f      	mov	r7, r3
 8004d94:	42be      	cmp	r6, r7
 8004d96:	680b      	ldr	r3, [r1, #0]
 8004d98:	4682      	mov	sl, r0
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	4690      	mov	r8, r2
 8004d9e:	d82c      	bhi.n	8004dfa <__ssputs_r+0x6e>
 8004da0:	898a      	ldrh	r2, [r1, #12]
 8004da2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004da6:	d026      	beq.n	8004df6 <__ssputs_r+0x6a>
 8004da8:	6965      	ldr	r5, [r4, #20]
 8004daa:	6909      	ldr	r1, [r1, #16]
 8004dac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004db0:	eba3 0901 	sub.w	r9, r3, r1
 8004db4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004db8:	1c7b      	adds	r3, r7, #1
 8004dba:	444b      	add	r3, r9
 8004dbc:	106d      	asrs	r5, r5, #1
 8004dbe:	429d      	cmp	r5, r3
 8004dc0:	bf38      	it	cc
 8004dc2:	461d      	movcc	r5, r3
 8004dc4:	0553      	lsls	r3, r2, #21
 8004dc6:	d527      	bpl.n	8004e18 <__ssputs_r+0x8c>
 8004dc8:	4629      	mov	r1, r5
 8004dca:	f7ff ff53 	bl	8004c74 <_malloc_r>
 8004dce:	4606      	mov	r6, r0
 8004dd0:	b360      	cbz	r0, 8004e2c <__ssputs_r+0xa0>
 8004dd2:	6921      	ldr	r1, [r4, #16]
 8004dd4:	464a      	mov	r2, r9
 8004dd6:	f7ff fed3 	bl	8004b80 <memcpy>
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de4:	81a3      	strh	r3, [r4, #12]
 8004de6:	6126      	str	r6, [r4, #16]
 8004de8:	6165      	str	r5, [r4, #20]
 8004dea:	444e      	add	r6, r9
 8004dec:	eba5 0509 	sub.w	r5, r5, r9
 8004df0:	6026      	str	r6, [r4, #0]
 8004df2:	60a5      	str	r5, [r4, #8]
 8004df4:	463e      	mov	r6, r7
 8004df6:	42be      	cmp	r6, r7
 8004df8:	d900      	bls.n	8004dfc <__ssputs_r+0x70>
 8004dfa:	463e      	mov	r6, r7
 8004dfc:	6820      	ldr	r0, [r4, #0]
 8004dfe:	4632      	mov	r2, r6
 8004e00:	4641      	mov	r1, r8
 8004e02:	f000 faab 	bl	800535c <memmove>
 8004e06:	68a3      	ldr	r3, [r4, #8]
 8004e08:	1b9b      	subs	r3, r3, r6
 8004e0a:	60a3      	str	r3, [r4, #8]
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	4433      	add	r3, r6
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	2000      	movs	r0, #0
 8004e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e18:	462a      	mov	r2, r5
 8004e1a:	f000 fac9 	bl	80053b0 <_realloc_r>
 8004e1e:	4606      	mov	r6, r0
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d1e0      	bne.n	8004de6 <__ssputs_r+0x5a>
 8004e24:	6921      	ldr	r1, [r4, #16]
 8004e26:	4650      	mov	r0, sl
 8004e28:	f7ff feb8 	bl	8004b9c <_free_r>
 8004e2c:	230c      	movs	r3, #12
 8004e2e:	f8ca 3000 	str.w	r3, [sl]
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e38:	81a3      	strh	r3, [r4, #12]
 8004e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3e:	e7e9      	b.n	8004e14 <__ssputs_r+0x88>

08004e40 <_svfiprintf_r>:
 8004e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e44:	4698      	mov	r8, r3
 8004e46:	898b      	ldrh	r3, [r1, #12]
 8004e48:	061b      	lsls	r3, r3, #24
 8004e4a:	b09d      	sub	sp, #116	; 0x74
 8004e4c:	4607      	mov	r7, r0
 8004e4e:	460d      	mov	r5, r1
 8004e50:	4614      	mov	r4, r2
 8004e52:	d50e      	bpl.n	8004e72 <_svfiprintf_r+0x32>
 8004e54:	690b      	ldr	r3, [r1, #16]
 8004e56:	b963      	cbnz	r3, 8004e72 <_svfiprintf_r+0x32>
 8004e58:	2140      	movs	r1, #64	; 0x40
 8004e5a:	f7ff ff0b 	bl	8004c74 <_malloc_r>
 8004e5e:	6028      	str	r0, [r5, #0]
 8004e60:	6128      	str	r0, [r5, #16]
 8004e62:	b920      	cbnz	r0, 8004e6e <_svfiprintf_r+0x2e>
 8004e64:	230c      	movs	r3, #12
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	e0d0      	b.n	8005010 <_svfiprintf_r+0x1d0>
 8004e6e:	2340      	movs	r3, #64	; 0x40
 8004e70:	616b      	str	r3, [r5, #20]
 8004e72:	2300      	movs	r3, #0
 8004e74:	9309      	str	r3, [sp, #36]	; 0x24
 8004e76:	2320      	movs	r3, #32
 8004e78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e80:	2330      	movs	r3, #48	; 0x30
 8004e82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005028 <_svfiprintf_r+0x1e8>
 8004e86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e8a:	f04f 0901 	mov.w	r9, #1
 8004e8e:	4623      	mov	r3, r4
 8004e90:	469a      	mov	sl, r3
 8004e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e96:	b10a      	cbz	r2, 8004e9c <_svfiprintf_r+0x5c>
 8004e98:	2a25      	cmp	r2, #37	; 0x25
 8004e9a:	d1f9      	bne.n	8004e90 <_svfiprintf_r+0x50>
 8004e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8004ea0:	d00b      	beq.n	8004eba <_svfiprintf_r+0x7a>
 8004ea2:	465b      	mov	r3, fp
 8004ea4:	4622      	mov	r2, r4
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	f7ff ff6f 	bl	8004d8c <__ssputs_r>
 8004eae:	3001      	adds	r0, #1
 8004eb0:	f000 80a9 	beq.w	8005006 <_svfiprintf_r+0x1c6>
 8004eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eb6:	445a      	add	r2, fp
 8004eb8:	9209      	str	r2, [sp, #36]	; 0x24
 8004eba:	f89a 3000 	ldrb.w	r3, [sl]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80a1 	beq.w	8005006 <_svfiprintf_r+0x1c6>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ece:	f10a 0a01 	add.w	sl, sl, #1
 8004ed2:	9304      	str	r3, [sp, #16]
 8004ed4:	9307      	str	r3, [sp, #28]
 8004ed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eda:	931a      	str	r3, [sp, #104]	; 0x68
 8004edc:	4654      	mov	r4, sl
 8004ede:	2205      	movs	r2, #5
 8004ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee4:	4850      	ldr	r0, [pc, #320]	; (8005028 <_svfiprintf_r+0x1e8>)
 8004ee6:	f7fb f973 	bl	80001d0 <memchr>
 8004eea:	9a04      	ldr	r2, [sp, #16]
 8004eec:	b9d8      	cbnz	r0, 8004f26 <_svfiprintf_r+0xe6>
 8004eee:	06d0      	lsls	r0, r2, #27
 8004ef0:	bf44      	itt	mi
 8004ef2:	2320      	movmi	r3, #32
 8004ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ef8:	0711      	lsls	r1, r2, #28
 8004efa:	bf44      	itt	mi
 8004efc:	232b      	movmi	r3, #43	; 0x2b
 8004efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f02:	f89a 3000 	ldrb.w	r3, [sl]
 8004f06:	2b2a      	cmp	r3, #42	; 0x2a
 8004f08:	d015      	beq.n	8004f36 <_svfiprintf_r+0xf6>
 8004f0a:	9a07      	ldr	r2, [sp, #28]
 8004f0c:	4654      	mov	r4, sl
 8004f0e:	2000      	movs	r0, #0
 8004f10:	f04f 0c0a 	mov.w	ip, #10
 8004f14:	4621      	mov	r1, r4
 8004f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f1a:	3b30      	subs	r3, #48	; 0x30
 8004f1c:	2b09      	cmp	r3, #9
 8004f1e:	d94d      	bls.n	8004fbc <_svfiprintf_r+0x17c>
 8004f20:	b1b0      	cbz	r0, 8004f50 <_svfiprintf_r+0x110>
 8004f22:	9207      	str	r2, [sp, #28]
 8004f24:	e014      	b.n	8004f50 <_svfiprintf_r+0x110>
 8004f26:	eba0 0308 	sub.w	r3, r0, r8
 8004f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	9304      	str	r3, [sp, #16]
 8004f32:	46a2      	mov	sl, r4
 8004f34:	e7d2      	b.n	8004edc <_svfiprintf_r+0x9c>
 8004f36:	9b03      	ldr	r3, [sp, #12]
 8004f38:	1d19      	adds	r1, r3, #4
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	9103      	str	r1, [sp, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bfbb      	ittet	lt
 8004f42:	425b      	neglt	r3, r3
 8004f44:	f042 0202 	orrlt.w	r2, r2, #2
 8004f48:	9307      	strge	r3, [sp, #28]
 8004f4a:	9307      	strlt	r3, [sp, #28]
 8004f4c:	bfb8      	it	lt
 8004f4e:	9204      	strlt	r2, [sp, #16]
 8004f50:	7823      	ldrb	r3, [r4, #0]
 8004f52:	2b2e      	cmp	r3, #46	; 0x2e
 8004f54:	d10c      	bne.n	8004f70 <_svfiprintf_r+0x130>
 8004f56:	7863      	ldrb	r3, [r4, #1]
 8004f58:	2b2a      	cmp	r3, #42	; 0x2a
 8004f5a:	d134      	bne.n	8004fc6 <_svfiprintf_r+0x186>
 8004f5c:	9b03      	ldr	r3, [sp, #12]
 8004f5e:	1d1a      	adds	r2, r3, #4
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	9203      	str	r2, [sp, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bfb8      	it	lt
 8004f68:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f6c:	3402      	adds	r4, #2
 8004f6e:	9305      	str	r3, [sp, #20]
 8004f70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005038 <_svfiprintf_r+0x1f8>
 8004f74:	7821      	ldrb	r1, [r4, #0]
 8004f76:	2203      	movs	r2, #3
 8004f78:	4650      	mov	r0, sl
 8004f7a:	f7fb f929 	bl	80001d0 <memchr>
 8004f7e:	b138      	cbz	r0, 8004f90 <_svfiprintf_r+0x150>
 8004f80:	9b04      	ldr	r3, [sp, #16]
 8004f82:	eba0 000a 	sub.w	r0, r0, sl
 8004f86:	2240      	movs	r2, #64	; 0x40
 8004f88:	4082      	lsls	r2, r0
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	3401      	adds	r4, #1
 8004f8e:	9304      	str	r3, [sp, #16]
 8004f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f94:	4825      	ldr	r0, [pc, #148]	; (800502c <_svfiprintf_r+0x1ec>)
 8004f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f9a:	2206      	movs	r2, #6
 8004f9c:	f7fb f918 	bl	80001d0 <memchr>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d038      	beq.n	8005016 <_svfiprintf_r+0x1d6>
 8004fa4:	4b22      	ldr	r3, [pc, #136]	; (8005030 <_svfiprintf_r+0x1f0>)
 8004fa6:	bb1b      	cbnz	r3, 8004ff0 <_svfiprintf_r+0x1b0>
 8004fa8:	9b03      	ldr	r3, [sp, #12]
 8004faa:	3307      	adds	r3, #7
 8004fac:	f023 0307 	bic.w	r3, r3, #7
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	9303      	str	r3, [sp, #12]
 8004fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb6:	4433      	add	r3, r6
 8004fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fba:	e768      	b.n	8004e8e <_svfiprintf_r+0x4e>
 8004fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	e7a6      	b.n	8004f14 <_svfiprintf_r+0xd4>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	3401      	adds	r4, #1
 8004fca:	9305      	str	r3, [sp, #20]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f04f 0c0a 	mov.w	ip, #10
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fd8:	3a30      	subs	r2, #48	; 0x30
 8004fda:	2a09      	cmp	r2, #9
 8004fdc:	d903      	bls.n	8004fe6 <_svfiprintf_r+0x1a6>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0c6      	beq.n	8004f70 <_svfiprintf_r+0x130>
 8004fe2:	9105      	str	r1, [sp, #20]
 8004fe4:	e7c4      	b.n	8004f70 <_svfiprintf_r+0x130>
 8004fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fea:	4604      	mov	r4, r0
 8004fec:	2301      	movs	r3, #1
 8004fee:	e7f0      	b.n	8004fd2 <_svfiprintf_r+0x192>
 8004ff0:	ab03      	add	r3, sp, #12
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	462a      	mov	r2, r5
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <_svfiprintf_r+0x1f4>)
 8004ff8:	a904      	add	r1, sp, #16
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	f3af 8000 	nop.w
 8005000:	1c42      	adds	r2, r0, #1
 8005002:	4606      	mov	r6, r0
 8005004:	d1d6      	bne.n	8004fb4 <_svfiprintf_r+0x174>
 8005006:	89ab      	ldrh	r3, [r5, #12]
 8005008:	065b      	lsls	r3, r3, #25
 800500a:	f53f af2d 	bmi.w	8004e68 <_svfiprintf_r+0x28>
 800500e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005010:	b01d      	add	sp, #116	; 0x74
 8005012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005016:	ab03      	add	r3, sp, #12
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	462a      	mov	r2, r5
 800501c:	4b05      	ldr	r3, [pc, #20]	; (8005034 <_svfiprintf_r+0x1f4>)
 800501e:	a904      	add	r1, sp, #16
 8005020:	4638      	mov	r0, r7
 8005022:	f000 f879 	bl	8005118 <_printf_i>
 8005026:	e7eb      	b.n	8005000 <_svfiprintf_r+0x1c0>
 8005028:	080054f0 	.word	0x080054f0
 800502c:	080054fa 	.word	0x080054fa
 8005030:	00000000 	.word	0x00000000
 8005034:	08004d8d 	.word	0x08004d8d
 8005038:	080054f6 	.word	0x080054f6

0800503c <_printf_common>:
 800503c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005040:	4616      	mov	r6, r2
 8005042:	4699      	mov	r9, r3
 8005044:	688a      	ldr	r2, [r1, #8]
 8005046:	690b      	ldr	r3, [r1, #16]
 8005048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800504c:	4293      	cmp	r3, r2
 800504e:	bfb8      	it	lt
 8005050:	4613      	movlt	r3, r2
 8005052:	6033      	str	r3, [r6, #0]
 8005054:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005058:	4607      	mov	r7, r0
 800505a:	460c      	mov	r4, r1
 800505c:	b10a      	cbz	r2, 8005062 <_printf_common+0x26>
 800505e:	3301      	adds	r3, #1
 8005060:	6033      	str	r3, [r6, #0]
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	0699      	lsls	r1, r3, #26
 8005066:	bf42      	ittt	mi
 8005068:	6833      	ldrmi	r3, [r6, #0]
 800506a:	3302      	addmi	r3, #2
 800506c:	6033      	strmi	r3, [r6, #0]
 800506e:	6825      	ldr	r5, [r4, #0]
 8005070:	f015 0506 	ands.w	r5, r5, #6
 8005074:	d106      	bne.n	8005084 <_printf_common+0x48>
 8005076:	f104 0a19 	add.w	sl, r4, #25
 800507a:	68e3      	ldr	r3, [r4, #12]
 800507c:	6832      	ldr	r2, [r6, #0]
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	42ab      	cmp	r3, r5
 8005082:	dc26      	bgt.n	80050d2 <_printf_common+0x96>
 8005084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005088:	1e13      	subs	r3, r2, #0
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	bf18      	it	ne
 800508e:	2301      	movne	r3, #1
 8005090:	0692      	lsls	r2, r2, #26
 8005092:	d42b      	bmi.n	80050ec <_printf_common+0xb0>
 8005094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005098:	4649      	mov	r1, r9
 800509a:	4638      	mov	r0, r7
 800509c:	47c0      	blx	r8
 800509e:	3001      	adds	r0, #1
 80050a0:	d01e      	beq.n	80050e0 <_printf_common+0xa4>
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	6922      	ldr	r2, [r4, #16]
 80050a6:	f003 0306 	and.w	r3, r3, #6
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	bf02      	ittt	eq
 80050ae:	68e5      	ldreq	r5, [r4, #12]
 80050b0:	6833      	ldreq	r3, [r6, #0]
 80050b2:	1aed      	subeq	r5, r5, r3
 80050b4:	68a3      	ldr	r3, [r4, #8]
 80050b6:	bf0c      	ite	eq
 80050b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050bc:	2500      	movne	r5, #0
 80050be:	4293      	cmp	r3, r2
 80050c0:	bfc4      	itt	gt
 80050c2:	1a9b      	subgt	r3, r3, r2
 80050c4:	18ed      	addgt	r5, r5, r3
 80050c6:	2600      	movs	r6, #0
 80050c8:	341a      	adds	r4, #26
 80050ca:	42b5      	cmp	r5, r6
 80050cc:	d11a      	bne.n	8005104 <_printf_common+0xc8>
 80050ce:	2000      	movs	r0, #0
 80050d0:	e008      	b.n	80050e4 <_printf_common+0xa8>
 80050d2:	2301      	movs	r3, #1
 80050d4:	4652      	mov	r2, sl
 80050d6:	4649      	mov	r1, r9
 80050d8:	4638      	mov	r0, r7
 80050da:	47c0      	blx	r8
 80050dc:	3001      	adds	r0, #1
 80050de:	d103      	bne.n	80050e8 <_printf_common+0xac>
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295
 80050e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e8:	3501      	adds	r5, #1
 80050ea:	e7c6      	b.n	800507a <_printf_common+0x3e>
 80050ec:	18e1      	adds	r1, r4, r3
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	2030      	movs	r0, #48	; 0x30
 80050f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050f6:	4422      	add	r2, r4
 80050f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005100:	3302      	adds	r3, #2
 8005102:	e7c7      	b.n	8005094 <_printf_common+0x58>
 8005104:	2301      	movs	r3, #1
 8005106:	4622      	mov	r2, r4
 8005108:	4649      	mov	r1, r9
 800510a:	4638      	mov	r0, r7
 800510c:	47c0      	blx	r8
 800510e:	3001      	adds	r0, #1
 8005110:	d0e6      	beq.n	80050e0 <_printf_common+0xa4>
 8005112:	3601      	adds	r6, #1
 8005114:	e7d9      	b.n	80050ca <_printf_common+0x8e>
	...

08005118 <_printf_i>:
 8005118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800511c:	7e0f      	ldrb	r7, [r1, #24]
 800511e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005120:	2f78      	cmp	r7, #120	; 0x78
 8005122:	4691      	mov	r9, r2
 8005124:	4680      	mov	r8, r0
 8005126:	460c      	mov	r4, r1
 8005128:	469a      	mov	sl, r3
 800512a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800512e:	d807      	bhi.n	8005140 <_printf_i+0x28>
 8005130:	2f62      	cmp	r7, #98	; 0x62
 8005132:	d80a      	bhi.n	800514a <_printf_i+0x32>
 8005134:	2f00      	cmp	r7, #0
 8005136:	f000 80d4 	beq.w	80052e2 <_printf_i+0x1ca>
 800513a:	2f58      	cmp	r7, #88	; 0x58
 800513c:	f000 80c0 	beq.w	80052c0 <_printf_i+0x1a8>
 8005140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005144:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005148:	e03a      	b.n	80051c0 <_printf_i+0xa8>
 800514a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800514e:	2b15      	cmp	r3, #21
 8005150:	d8f6      	bhi.n	8005140 <_printf_i+0x28>
 8005152:	a101      	add	r1, pc, #4	; (adr r1, 8005158 <_printf_i+0x40>)
 8005154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005158:	080051b1 	.word	0x080051b1
 800515c:	080051c5 	.word	0x080051c5
 8005160:	08005141 	.word	0x08005141
 8005164:	08005141 	.word	0x08005141
 8005168:	08005141 	.word	0x08005141
 800516c:	08005141 	.word	0x08005141
 8005170:	080051c5 	.word	0x080051c5
 8005174:	08005141 	.word	0x08005141
 8005178:	08005141 	.word	0x08005141
 800517c:	08005141 	.word	0x08005141
 8005180:	08005141 	.word	0x08005141
 8005184:	080052c9 	.word	0x080052c9
 8005188:	080051f1 	.word	0x080051f1
 800518c:	08005283 	.word	0x08005283
 8005190:	08005141 	.word	0x08005141
 8005194:	08005141 	.word	0x08005141
 8005198:	080052eb 	.word	0x080052eb
 800519c:	08005141 	.word	0x08005141
 80051a0:	080051f1 	.word	0x080051f1
 80051a4:	08005141 	.word	0x08005141
 80051a8:	08005141 	.word	0x08005141
 80051ac:	0800528b 	.word	0x0800528b
 80051b0:	682b      	ldr	r3, [r5, #0]
 80051b2:	1d1a      	adds	r2, r3, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	602a      	str	r2, [r5, #0]
 80051b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051c0:	2301      	movs	r3, #1
 80051c2:	e09f      	b.n	8005304 <_printf_i+0x1ec>
 80051c4:	6820      	ldr	r0, [r4, #0]
 80051c6:	682b      	ldr	r3, [r5, #0]
 80051c8:	0607      	lsls	r7, r0, #24
 80051ca:	f103 0104 	add.w	r1, r3, #4
 80051ce:	6029      	str	r1, [r5, #0]
 80051d0:	d501      	bpl.n	80051d6 <_printf_i+0xbe>
 80051d2:	681e      	ldr	r6, [r3, #0]
 80051d4:	e003      	b.n	80051de <_printf_i+0xc6>
 80051d6:	0646      	lsls	r6, r0, #25
 80051d8:	d5fb      	bpl.n	80051d2 <_printf_i+0xba>
 80051da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051de:	2e00      	cmp	r6, #0
 80051e0:	da03      	bge.n	80051ea <_printf_i+0xd2>
 80051e2:	232d      	movs	r3, #45	; 0x2d
 80051e4:	4276      	negs	r6, r6
 80051e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ea:	485a      	ldr	r0, [pc, #360]	; (8005354 <_printf_i+0x23c>)
 80051ec:	230a      	movs	r3, #10
 80051ee:	e012      	b.n	8005216 <_printf_i+0xfe>
 80051f0:	682b      	ldr	r3, [r5, #0]
 80051f2:	6820      	ldr	r0, [r4, #0]
 80051f4:	1d19      	adds	r1, r3, #4
 80051f6:	6029      	str	r1, [r5, #0]
 80051f8:	0605      	lsls	r5, r0, #24
 80051fa:	d501      	bpl.n	8005200 <_printf_i+0xe8>
 80051fc:	681e      	ldr	r6, [r3, #0]
 80051fe:	e002      	b.n	8005206 <_printf_i+0xee>
 8005200:	0641      	lsls	r1, r0, #25
 8005202:	d5fb      	bpl.n	80051fc <_printf_i+0xe4>
 8005204:	881e      	ldrh	r6, [r3, #0]
 8005206:	4853      	ldr	r0, [pc, #332]	; (8005354 <_printf_i+0x23c>)
 8005208:	2f6f      	cmp	r7, #111	; 0x6f
 800520a:	bf0c      	ite	eq
 800520c:	2308      	moveq	r3, #8
 800520e:	230a      	movne	r3, #10
 8005210:	2100      	movs	r1, #0
 8005212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005216:	6865      	ldr	r5, [r4, #4]
 8005218:	60a5      	str	r5, [r4, #8]
 800521a:	2d00      	cmp	r5, #0
 800521c:	bfa2      	ittt	ge
 800521e:	6821      	ldrge	r1, [r4, #0]
 8005220:	f021 0104 	bicge.w	r1, r1, #4
 8005224:	6021      	strge	r1, [r4, #0]
 8005226:	b90e      	cbnz	r6, 800522c <_printf_i+0x114>
 8005228:	2d00      	cmp	r5, #0
 800522a:	d04b      	beq.n	80052c4 <_printf_i+0x1ac>
 800522c:	4615      	mov	r5, r2
 800522e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005232:	fb03 6711 	mls	r7, r3, r1, r6
 8005236:	5dc7      	ldrb	r7, [r0, r7]
 8005238:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800523c:	4637      	mov	r7, r6
 800523e:	42bb      	cmp	r3, r7
 8005240:	460e      	mov	r6, r1
 8005242:	d9f4      	bls.n	800522e <_printf_i+0x116>
 8005244:	2b08      	cmp	r3, #8
 8005246:	d10b      	bne.n	8005260 <_printf_i+0x148>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	07de      	lsls	r6, r3, #31
 800524c:	d508      	bpl.n	8005260 <_printf_i+0x148>
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	6861      	ldr	r1, [r4, #4]
 8005252:	4299      	cmp	r1, r3
 8005254:	bfde      	ittt	le
 8005256:	2330      	movle	r3, #48	; 0x30
 8005258:	f805 3c01 	strble.w	r3, [r5, #-1]
 800525c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005260:	1b52      	subs	r2, r2, r5
 8005262:	6122      	str	r2, [r4, #16]
 8005264:	f8cd a000 	str.w	sl, [sp]
 8005268:	464b      	mov	r3, r9
 800526a:	aa03      	add	r2, sp, #12
 800526c:	4621      	mov	r1, r4
 800526e:	4640      	mov	r0, r8
 8005270:	f7ff fee4 	bl	800503c <_printf_common>
 8005274:	3001      	adds	r0, #1
 8005276:	d14a      	bne.n	800530e <_printf_i+0x1f6>
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	b004      	add	sp, #16
 800527e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	f043 0320 	orr.w	r3, r3, #32
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	4833      	ldr	r0, [pc, #204]	; (8005358 <_printf_i+0x240>)
 800528c:	2778      	movs	r7, #120	; 0x78
 800528e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	6829      	ldr	r1, [r5, #0]
 8005296:	061f      	lsls	r7, r3, #24
 8005298:	f851 6b04 	ldr.w	r6, [r1], #4
 800529c:	d402      	bmi.n	80052a4 <_printf_i+0x18c>
 800529e:	065f      	lsls	r7, r3, #25
 80052a0:	bf48      	it	mi
 80052a2:	b2b6      	uxthmi	r6, r6
 80052a4:	07df      	lsls	r7, r3, #31
 80052a6:	bf48      	it	mi
 80052a8:	f043 0320 	orrmi.w	r3, r3, #32
 80052ac:	6029      	str	r1, [r5, #0]
 80052ae:	bf48      	it	mi
 80052b0:	6023      	strmi	r3, [r4, #0]
 80052b2:	b91e      	cbnz	r6, 80052bc <_printf_i+0x1a4>
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	f023 0320 	bic.w	r3, r3, #32
 80052ba:	6023      	str	r3, [r4, #0]
 80052bc:	2310      	movs	r3, #16
 80052be:	e7a7      	b.n	8005210 <_printf_i+0xf8>
 80052c0:	4824      	ldr	r0, [pc, #144]	; (8005354 <_printf_i+0x23c>)
 80052c2:	e7e4      	b.n	800528e <_printf_i+0x176>
 80052c4:	4615      	mov	r5, r2
 80052c6:	e7bd      	b.n	8005244 <_printf_i+0x12c>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	6826      	ldr	r6, [r4, #0]
 80052cc:	6961      	ldr	r1, [r4, #20]
 80052ce:	1d18      	adds	r0, r3, #4
 80052d0:	6028      	str	r0, [r5, #0]
 80052d2:	0635      	lsls	r5, r6, #24
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	d501      	bpl.n	80052dc <_printf_i+0x1c4>
 80052d8:	6019      	str	r1, [r3, #0]
 80052da:	e002      	b.n	80052e2 <_printf_i+0x1ca>
 80052dc:	0670      	lsls	r0, r6, #25
 80052de:	d5fb      	bpl.n	80052d8 <_printf_i+0x1c0>
 80052e0:	8019      	strh	r1, [r3, #0]
 80052e2:	2300      	movs	r3, #0
 80052e4:	6123      	str	r3, [r4, #16]
 80052e6:	4615      	mov	r5, r2
 80052e8:	e7bc      	b.n	8005264 <_printf_i+0x14c>
 80052ea:	682b      	ldr	r3, [r5, #0]
 80052ec:	1d1a      	adds	r2, r3, #4
 80052ee:	602a      	str	r2, [r5, #0]
 80052f0:	681d      	ldr	r5, [r3, #0]
 80052f2:	6862      	ldr	r2, [r4, #4]
 80052f4:	2100      	movs	r1, #0
 80052f6:	4628      	mov	r0, r5
 80052f8:	f7fa ff6a 	bl	80001d0 <memchr>
 80052fc:	b108      	cbz	r0, 8005302 <_printf_i+0x1ea>
 80052fe:	1b40      	subs	r0, r0, r5
 8005300:	6060      	str	r0, [r4, #4]
 8005302:	6863      	ldr	r3, [r4, #4]
 8005304:	6123      	str	r3, [r4, #16]
 8005306:	2300      	movs	r3, #0
 8005308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800530c:	e7aa      	b.n	8005264 <_printf_i+0x14c>
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	462a      	mov	r2, r5
 8005312:	4649      	mov	r1, r9
 8005314:	4640      	mov	r0, r8
 8005316:	47d0      	blx	sl
 8005318:	3001      	adds	r0, #1
 800531a:	d0ad      	beq.n	8005278 <_printf_i+0x160>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	079b      	lsls	r3, r3, #30
 8005320:	d413      	bmi.n	800534a <_printf_i+0x232>
 8005322:	68e0      	ldr	r0, [r4, #12]
 8005324:	9b03      	ldr	r3, [sp, #12]
 8005326:	4298      	cmp	r0, r3
 8005328:	bfb8      	it	lt
 800532a:	4618      	movlt	r0, r3
 800532c:	e7a6      	b.n	800527c <_printf_i+0x164>
 800532e:	2301      	movs	r3, #1
 8005330:	4632      	mov	r2, r6
 8005332:	4649      	mov	r1, r9
 8005334:	4640      	mov	r0, r8
 8005336:	47d0      	blx	sl
 8005338:	3001      	adds	r0, #1
 800533a:	d09d      	beq.n	8005278 <_printf_i+0x160>
 800533c:	3501      	adds	r5, #1
 800533e:	68e3      	ldr	r3, [r4, #12]
 8005340:	9903      	ldr	r1, [sp, #12]
 8005342:	1a5b      	subs	r3, r3, r1
 8005344:	42ab      	cmp	r3, r5
 8005346:	dcf2      	bgt.n	800532e <_printf_i+0x216>
 8005348:	e7eb      	b.n	8005322 <_printf_i+0x20a>
 800534a:	2500      	movs	r5, #0
 800534c:	f104 0619 	add.w	r6, r4, #25
 8005350:	e7f5      	b.n	800533e <_printf_i+0x226>
 8005352:	bf00      	nop
 8005354:	08005501 	.word	0x08005501
 8005358:	08005512 	.word	0x08005512

0800535c <memmove>:
 800535c:	4288      	cmp	r0, r1
 800535e:	b510      	push	{r4, lr}
 8005360:	eb01 0402 	add.w	r4, r1, r2
 8005364:	d902      	bls.n	800536c <memmove+0x10>
 8005366:	4284      	cmp	r4, r0
 8005368:	4623      	mov	r3, r4
 800536a:	d807      	bhi.n	800537c <memmove+0x20>
 800536c:	1e43      	subs	r3, r0, #1
 800536e:	42a1      	cmp	r1, r4
 8005370:	d008      	beq.n	8005384 <memmove+0x28>
 8005372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005376:	f803 2f01 	strb.w	r2, [r3, #1]!
 800537a:	e7f8      	b.n	800536e <memmove+0x12>
 800537c:	4402      	add	r2, r0
 800537e:	4601      	mov	r1, r0
 8005380:	428a      	cmp	r2, r1
 8005382:	d100      	bne.n	8005386 <memmove+0x2a>
 8005384:	bd10      	pop	{r4, pc}
 8005386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800538a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800538e:	e7f7      	b.n	8005380 <memmove+0x24>

08005390 <_sbrk_r>:
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4d06      	ldr	r5, [pc, #24]	; (80053ac <_sbrk_r+0x1c>)
 8005394:	2300      	movs	r3, #0
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	602b      	str	r3, [r5, #0]
 800539c:	f7fb ff54 	bl	8001248 <_sbrk>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d102      	bne.n	80053aa <_sbrk_r+0x1a>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	b103      	cbz	r3, 80053aa <_sbrk_r+0x1a>
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	200002ac 	.word	0x200002ac

080053b0 <_realloc_r>:
 80053b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053b4:	4680      	mov	r8, r0
 80053b6:	4614      	mov	r4, r2
 80053b8:	460e      	mov	r6, r1
 80053ba:	b921      	cbnz	r1, 80053c6 <_realloc_r+0x16>
 80053bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053c0:	4611      	mov	r1, r2
 80053c2:	f7ff bc57 	b.w	8004c74 <_malloc_r>
 80053c6:	b92a      	cbnz	r2, 80053d4 <_realloc_r+0x24>
 80053c8:	f7ff fbe8 	bl	8004b9c <_free_r>
 80053cc:	4625      	mov	r5, r4
 80053ce:	4628      	mov	r0, r5
 80053d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053d4:	f000 f81b 	bl	800540e <_malloc_usable_size_r>
 80053d8:	4284      	cmp	r4, r0
 80053da:	4607      	mov	r7, r0
 80053dc:	d802      	bhi.n	80053e4 <_realloc_r+0x34>
 80053de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053e2:	d812      	bhi.n	800540a <_realloc_r+0x5a>
 80053e4:	4621      	mov	r1, r4
 80053e6:	4640      	mov	r0, r8
 80053e8:	f7ff fc44 	bl	8004c74 <_malloc_r>
 80053ec:	4605      	mov	r5, r0
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d0ed      	beq.n	80053ce <_realloc_r+0x1e>
 80053f2:	42bc      	cmp	r4, r7
 80053f4:	4622      	mov	r2, r4
 80053f6:	4631      	mov	r1, r6
 80053f8:	bf28      	it	cs
 80053fa:	463a      	movcs	r2, r7
 80053fc:	f7ff fbc0 	bl	8004b80 <memcpy>
 8005400:	4631      	mov	r1, r6
 8005402:	4640      	mov	r0, r8
 8005404:	f7ff fbca 	bl	8004b9c <_free_r>
 8005408:	e7e1      	b.n	80053ce <_realloc_r+0x1e>
 800540a:	4635      	mov	r5, r6
 800540c:	e7df      	b.n	80053ce <_realloc_r+0x1e>

0800540e <_malloc_usable_size_r>:
 800540e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005412:	1f18      	subs	r0, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	bfbc      	itt	lt
 8005418:	580b      	ldrlt	r3, [r1, r0]
 800541a:	18c0      	addlt	r0, r0, r3
 800541c:	4770      	bx	lr
	...

08005420 <_init>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr

0800542c <_fini>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr


STM32-RFM95.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005160  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080052f0  080052f0  000152f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800540c  0800540c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800540c  0800540c  0001540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005414  08005414  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800541c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000060  0800547c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  0800547c  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c099  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000218e  00000000  00000000  0002c16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  0002e300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000957  00000000  00000000  0002ef60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203da  00000000  00000000  0002f8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d91e  00000000  00000000  0004fc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfb87  00000000  00000000  0005d5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036f4  00000000  00000000  0011d138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012082c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052d8 	.word	0x080052d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080052d8 	.word	0x080052d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000592:	b2db      	uxtb	r3, r3
 8000594:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6858      	ldr	r0, [r3, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	8adb      	ldrh	r3, [r3, #22]
 800059e:	2200      	movs	r2, #0
 80005a0:	4619      	mov	r1, r3
 80005a2:	f001 fb0b 	bl	8001bbc <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	1cf9      	adds	r1, r7, #3
 80005b0:	2201      	movs	r2, #1
 80005b2:	f002 fd62 	bl	800307a <HAL_SPI_Transmit>
 80005b6:	4603      	mov	r3, r0
 80005b8:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6818      	ldr	r0, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f107 010f 	add.w	r1, r7, #15
 80005c6:	2201      	movs	r2, #1
 80005c8:	f002 fecc 	bl	8003364 <HAL_SPI_Receive>
 80005cc:	4603      	mov	r3, r0
 80005ce:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6858      	ldr	r0, [r3, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	8adb      	ldrh	r3, [r3, #22]
 80005d8:	2201      	movs	r2, #1
 80005da:	4619      	mov	r1, r3
 80005dc:	f001 faee 	bl	8001bbc <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b084      	sub	sp, #16
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	460b      	mov	r3, r1
 80005f4:	70fb      	strb	r3, [r7, #3]
 80005f6:	4613      	mov	r3, r2
 80005f8:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 80005fa:	78fb      	ldrb	r3, [r7, #3]
 80005fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000600:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000602:	78bb      	ldrb	r3, [r7, #2]
 8000604:	021b      	lsls	r3, r3, #8
 8000606:	b21a      	sxth	r2, r3
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	b21b      	sxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b21b      	sxth	r3, r3
 8000610:	b29b      	uxth	r3, r3
 8000612:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6858      	ldr	r0, [r3, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	8adb      	ldrh	r3, [r3, #22]
 800061c:	2200      	movs	r2, #0
 800061e:	4619      	mov	r1, r3
 8000620:	f001 facc 	bl	8001bbc <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	f107 010a 	add.w	r1, r7, #10
 8000630:	2202      	movs	r2, #2
 8000632:	f002 fd22 	bl	800307a <HAL_SPI_Transmit>
 8000636:	4603      	mov	r3, r0
 8000638:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6858      	ldr	r0, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	8adb      	ldrh	r3, [r3, #22]
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	f001 fab9 	bl	8001bbc <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b088      	sub	sp, #32
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	4611      	mov	r1, r2
 800065e:	461a      	mov	r2, r3
 8000660:	460b      	mov	r3, r1
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	4613      	mov	r3, r2
 8000666:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	6858      	ldr	r0, [r3, #4]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	8adb      	ldrh	r3, [r3, #22]
 8000674:	2200      	movs	r2, #0
 8000676:	4619      	mov	r1, r3
 8000678:	f001 faa0 	bl	8001bbc <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f107 0117 	add.w	r1, r7, #23
 8000688:	2201      	movs	r2, #1
 800068a:	f002 fcf6 	bl	800307a <HAL_SPI_Transmit>
 800068e:	4603      	mov	r3, r0
 8000690:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d108      	bne.n	80006aa <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	b292      	uxth	r2, r2
 80006a0:	68b9      	ldr	r1, [r7, #8]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 f9b8 	bl	8003a18 <HAL_SPI_Transmit_DMA>
 80006a8:	e012      	b.n	80006d0 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	68b9      	ldr	r1, [r7, #8]
 80006b8:	f002 fcdf 	bl	800307a <HAL_SPI_Transmit>
 80006bc:	4603      	mov	r3, r0
 80006be:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	6858      	ldr	r0, [r3, #4]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	8adb      	ldrh	r3, [r3, #22]
 80006c8:	2201      	movs	r2, #1
 80006ca:	4619      	mov	r1, r3
 80006cc:	f001 fa76 	bl	8001bbc <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	460b      	mov	r3, r1
 80006e0:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	461a      	mov	r2, r3
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff ff7b 	bl	80005ea <write_register>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	2b2c      	cmp	r3, #44	; 0x2c
 800070c:	d801      	bhi.n	8000712 <set_OCP+0x16>
    imax = 45;
 800070e:	232d      	movs	r3, #45	; 0x2d
 8000710:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8000712:	78fb      	ldrb	r3, [r7, #3]
 8000714:	2bf0      	cmp	r3, #240	; 0xf0
 8000716:	d901      	bls.n	800071c <set_OCP+0x20>
    imax = 240;
 8000718:	23f0      	movs	r3, #240	; 0xf0
 800071a:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	2b81      	cmp	r3, #129	; 0x81
 8000720:	d809      	bhi.n	8000736 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	3b2d      	subs	r3, #45	; 0x2d
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <set_OCP+0x68>)
 8000728:	fb82 1203 	smull	r1, r2, r2, r3
 800072c:	1052      	asrs	r2, r2, #1
 800072e:	17db      	asrs	r3, r3, #31
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	e008      	b.n	8000748 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	331e      	adds	r3, #30
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <set_OCP+0x68>)
 800073c:	fb82 1203 	smull	r1, r2, r2, r3
 8000740:	1092      	asrs	r2, r2, #2
 8000742:	17db      	asrs	r3, r3, #31
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	f043 0320 	orr.w	r3, r3, #32
 800074e:	b2db      	uxtb	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	210b      	movs	r1, #11
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff48 	bl	80005ea <write_register>
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	66666667 	.word	0x66666667

08000768 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8000770:	211d      	movs	r1, #29
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ff02 	bl	800057c <read_register>
 8000778:	4603      	mov	r3, r0
 800077a:	091b      	lsrs	r3, r3, #4
 800077c:	b2db      	uxtb	r3, r3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2200      	movs	r2, #0
 8000782:	461c      	mov	r4, r3
 8000784:	4615      	mov	r5, r2
 8000786:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 800078a:	211e      	movs	r1, #30
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff fef5 	bl	800057c <read_register>
 8000792:	4603      	mov	r3, r0
 8000794:	091b      	lsrs	r3, r3, #4
 8000796:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000798:	2304      	movs	r3, #4
 800079a:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b0a      	cmp	r3, #10
 80007a0:	d908      	bls.n	80007b4 <set_low_data_rate_optimization+0x4c>
 80007a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80007a6:	1fd1      	subs	r1, r2, #7
 80007a8:	430b      	orrs	r3, r1
 80007aa:	d103      	bne.n	80007b4 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 80007ac:	7ffb      	ldrb	r3, [r7, #31]
 80007ae:	f043 0308 	orr.w	r3, r3, #8
 80007b2:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 80007b4:	7ffb      	ldrb	r3, [r7, #31]
 80007b6:	461a      	mov	r2, r3
 80007b8:	2126      	movs	r1, #38	; 0x26
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff15 	bl	80005ea <write_register>
}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bdb0      	pop	{r4, r5, r7, pc}

080007c8 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 80007d0:	2100      	movs	r1, #0
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ff7f 	bl	80006d6 <set_mode>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80007e8:	2101      	movs	r1, #1
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ff73 	bl	80006d6 <set_mode>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8000800:	211d      	movs	r1, #29
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff feba 	bl	800057c <read_register>
 8000808:	4603      	mov	r3, r0
 800080a:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	f023 0301 	bic.w	r3, r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	461a      	mov	r2, r3
 8000818:	211d      	movs	r1, #29
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff fee5 	bl	80005ea <write_register>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	691b      	ldr	r3, [r3, #16]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d10e      	bne.n	800085a <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	2b0f      	cmp	r3, #15
 8000840:	d901      	bls.n	8000846 <lora_set_tx_power+0x1e>
      level = 15;
 8000842:	230f      	movs	r3, #15
 8000844:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	2104      	movs	r1, #4
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff fec9 	bl	80005ea <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000858:	e02e      	b.n	80008b8 <lora_set_tx_power+0x90>
    if (level > 20) {
 800085a:	78fb      	ldrb	r3, [r7, #3]
 800085c:	2b14      	cmp	r3, #20
 800085e:	d901      	bls.n	8000864 <lora_set_tx_power+0x3c>
      level = 20;
 8000860:	2314      	movs	r3, #20
 8000862:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d801      	bhi.n	800086e <lora_set_tx_power+0x46>
      level = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800086e:	78fb      	ldrb	r3, [r7, #3]
 8000870:	2b11      	cmp	r3, #17
 8000872:	d90c      	bls.n	800088e <lora_set_tx_power+0x66>
      level -= 3;
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	3b03      	subs	r3, #3
 8000878:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 800087a:	2287      	movs	r2, #135	; 0x87
 800087c:	214d      	movs	r1, #77	; 0x4d
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff feb3 	bl	80005ea <write_register>
      set_OCP(lora, 140);
 8000884:	218c      	movs	r1, #140	; 0x8c
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ff38 	bl	80006fc <set_OCP>
 800088c:	e008      	b.n	80008a0 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800088e:	2284      	movs	r2, #132	; 0x84
 8000890:	214d      	movs	r1, #77	; 0x4d
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fea9 	bl	80005ea <write_register>
      set_OCP(lora, 97);
 8000898:	2161      	movs	r1, #97	; 0x61
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ff2e 	bl	80006fc <set_OCP>
    level -= 2;
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	3b02      	subs	r3, #2
 80008a4:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	2104      	movs	r1, #4
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff fe99 	bl	80005ea <write_register>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80008cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008d0:	f04f 0000 	mov.w	r0, #0
 80008d4:	f04f 0100 	mov.w	r1, #0
 80008d8:	04d9      	lsls	r1, r3, #19
 80008da:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80008de:	04d0      	lsls	r0, r2, #19
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <lora_set_frequency+0x88>)
 80008e2:	f04f 0300 	mov.w	r3, #0
 80008e6:	f7ff fccb 	bl	8000280 <__aeabi_uldivmod>
 80008ea:	4602      	mov	r2, r0
 80008ec:	460b      	mov	r3, r1
 80008ee:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80008f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008f6:	f04f 0200 	mov.w	r2, #0
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	0c02      	lsrs	r2, r0, #16
 8000900:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000904:	0c0b      	lsrs	r3, r1, #16
 8000906:	b2d3      	uxtb	r3, r2
 8000908:	461a      	mov	r2, r3
 800090a:	2106      	movs	r1, #6
 800090c:	68f8      	ldr	r0, [r7, #12]
 800090e:	f7ff fe6c 	bl	80005ea <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8000912:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000916:	f04f 0200 	mov.w	r2, #0
 800091a:	f04f 0300 	mov.w	r3, #0
 800091e:	0a02      	lsrs	r2, r0, #8
 8000920:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000924:	0a0b      	lsrs	r3, r1, #8
 8000926:	b2d3      	uxtb	r3, r2
 8000928:	461a      	mov	r2, r3
 800092a:	2107      	movs	r1, #7
 800092c:	68f8      	ldr	r0, [r7, #12]
 800092e:	f7ff fe5c 	bl	80005ea <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8000932:	7c3b      	ldrb	r3, [r7, #16]
 8000934:	461a      	mov	r2, r3
 8000936:	2108      	movs	r1, #8
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f7ff fe56 	bl	80005ea <write_register>
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	01e84800 	.word	0x01e84800

0800094c <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	2b05      	cmp	r3, #5
 800095c:	d802      	bhi.n	8000964 <lora_set_spreading_factor+0x18>
    sf = 6;
 800095e:	2306      	movs	r3, #6
 8000960:	70fb      	strb	r3, [r7, #3]
 8000962:	e004      	b.n	800096e <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	2b0c      	cmp	r3, #12
 8000968:	d901      	bls.n	800096e <lora_set_spreading_factor+0x22>
    sf = 12;
 800096a:	230c      	movs	r3, #12
 800096c:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	2b06      	cmp	r3, #6
 8000972:	d10a      	bne.n	800098a <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000974:	22c5      	movs	r2, #197	; 0xc5
 8000976:	2131      	movs	r1, #49	; 0x31
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff fe36 	bl	80005ea <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800097e:	220c      	movs	r2, #12
 8000980:	2137      	movs	r1, #55	; 0x37
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff fe31 	bl	80005ea <write_register>
 8000988:	e009      	b.n	800099e <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 800098a:	22c3      	movs	r2, #195	; 0xc3
 800098c:	2131      	movs	r1, #49	; 0x31
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff fe2b 	bl	80005ea <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000994:	220a      	movs	r2, #10
 8000996:	2137      	movs	r1, #55	; 0x37
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff fe26 	bl	80005ea <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800099e:	211e      	movs	r1, #30
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff fdeb 	bl	800057c <read_register>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 80009aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	b25a      	sxtb	r2, r3
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	461a      	mov	r2, r3
 80009c4:	211e      	movs	r1, #30
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fe0f 	bl	80005ea <write_register>

  set_low_data_rate_optimization(lora);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff fecb 	bl	8000768 <set_low_data_rate_optimization>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 80009e6:	887b      	ldrh	r3, [r7, #2]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	2120      	movs	r1, #32
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fdf9 	bl	80005ea <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80009f8:	887b      	ldrh	r3, [r7, #2]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f003 030f 	and.w	r3, r3, #15
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	2121      	movs	r1, #33	; 0x21
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff fdef 	bl	80005ea <write_register>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8000a1c:	2142      	movs	r1, #66	; 0x42
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fdac 	bl	800057c <read_register>
 8000a24:	4603      	mov	r3, r0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b084      	sub	sp, #16
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8000a36:	2101      	movs	r1, #1
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff fd9f 	bl	800057c <read_register>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73fb      	strb	r3, [r7, #15]

  return (opmode | OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	f043 0303 	orr.w	r3, r3, #3
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b03      	cmp	r3, #3
 8000a4c:	d101      	bne.n	8000a52 <lora_is_transmitting+0x24>
 8000a4e:	2305      	movs	r3, #5
 8000a50:	e000      	b.n	8000a54 <lora_is_transmitting+0x26>
 8000a52:	2300      	movs	r3, #0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	4611      	mov	r1, r2
 8000a68:	461a      	mov	r2, r3
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	71fb      	strb	r3, [r7, #7]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8000a72:	68f8      	ldr	r0, [r7, #12]
 8000a74:	f7ff ffdb 	bl	8000a2e <lora_is_transmitting>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8000a7e:	2305      	movs	r3, #5
 8000a80:	e02a      	b.n	8000ad8 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8000a82:	2101      	movs	r1, #1
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f7ff fe26 	bl	80006d6 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f000 f83a 	bl	8000b04 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	7d1b      	ldrb	r3, [r3, #20]
 8000a94:	461a      	mov	r2, r3
 8000a96:	210d      	movs	r1, #13
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f7ff fda6 	bl	80005ea <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	7d1b      	ldrb	r3, [r3, #20]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	210e      	movs	r1, #14
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f7ff fd9f 	bl	80005ea <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2122      	movs	r1, #34	; 0x22
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff fd99 	bl	80005ea <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	79fa      	ldrb	r2, [r7, #7]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fdc7 	bl	8000652 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d101      	bne.n	8000ace <lora_send_packet_base+0x72>
    return LORA_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e004      	b.n	8000ad8 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8000ace:	2103      	movs	r1, #3
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f7ff fe00 	bl	80006d6 <set_mode>
  return LORA_OK;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	4613      	mov	r3, r2
 8000aec:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8000aee:	79fa      	ldrb	r2, [r7, #7]
 8000af0:	2302      	movs	r3, #2
 8000af2:	68b9      	ldr	r1, [r7, #8]
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f7ff ffb1 	bl	8000a5c <lora_send_packet_base>
 8000afa:	4603      	mov	r3, r0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	2112      	movs	r1, #18
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fd6a 	bl	80005ea <write_register>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000b3e:	6a3a      	ldr	r2, [r7, #32]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2201      	movs	r2, #1
 8000b48:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2200      	movs	r2, #0
 8000b54:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b5c:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	f7ff ff58 	bl	8000a14 <lora_version>
 8000b64:	4603      	mov	r3, r0
 8000b66:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000b68:	7dfb      	ldrb	r3, [r7, #23]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	e031      	b.n	8000bd6 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f7ff fe28 	bl	80007c8 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	f7ff fe25 	bl	80007c8 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff fe9c 	bl	80008c0 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000b88:	2107      	movs	r1, #7
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fede 	bl	800094c <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000b90:	210a      	movs	r1, #10
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff ff21 	bl	80009da <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f7ff fe2d 	bl	80007f8 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000b9e:	210c      	movs	r1, #12
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f7ff fceb 	bl	800057c <read_register>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000baa:	7dbb      	ldrb	r3, [r7, #22]
 8000bac:	f043 0303 	orr.w	r3, r3, #3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	210c      	movs	r1, #12
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f7ff fd17 	bl	80005ea <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	2126      	movs	r1, #38	; 0x26
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f7ff fd12 	bl	80005ea <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000bc6:	2105      	movs	r1, #5
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff fe2d 	bl	8000828 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f7ff fe06 	bl	80007e0 <lora_mode_standby>

  return LORA_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <read>:

uint8_t read(lora_sx1276 *lora, uint8_t address)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	460b      	mov	r3, r1
 8000be8:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6858      	ldr	r0, [r3, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	8adb      	ldrh	r3, [r3, #22]
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	f000 ffda 	bl	8001bbc <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6818      	ldr	r0, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	1cf9      	adds	r1, r7, #3
 8000c12:	2201      	movs	r2, #1
 8000c14:	f002 fa31 	bl	800307a <HAL_SPI_Transmit>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6818      	ldr	r0, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f107 010f 	add.w	r1, r7, #15
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f002 fb9b 	bl	8003364 <HAL_SPI_Receive>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6858      	ldr	r0, [r3, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	8adb      	ldrh	r3, [r3, #22]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f000 ffbd 	bl	8001bbc <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	0000      	movs	r0, r0
	...

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b08d      	sub	sp, #52	; 0x34
 8000c54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c56:	f000 fbcc 	bl	80013f2 <HAL_Init>
  lora_sx1276 lora;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5a:	f000 f8ff 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5e:	f000 f9c7 	bl	8000ff0 <MX_GPIO_Init>
  MX_USART2_Init();
 8000c62:	f000 f999 	bl	8000f98 <MX_USART2_Init>
  MX_SPI1_Init();
 8000c66:	f000 f95b 	bl	8000f20 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	486e      	ldr	r0, [pc, #440]	; (8000e28 <main+0x1d8>)
 8000c70:	f000 ffa4 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c74:	2064      	movs	r0, #100	; 0x64
 8000c76:	f000 fc31 	bl	80014dc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	486a      	ldr	r0, [pc, #424]	; (8000e28 <main+0x1d8>)
 8000c80:	f000 ff9c 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c84:	2064      	movs	r0, #100	; 0x64
 8000c86:	f000 fc29 	bl	80014dc <HAL_Delay>

  // Initialize LoRa module
  uint8_t init = lora_init(&lora, &hspi1, GPIOB, GPIO_PIN_0, LORA_BASE_FREQUENCY_US);
 8000c8a:	1d38      	adds	r0, r7, #4
 8000c8c:	a364      	add	r3, pc, #400	; (adr r3, 8000e20 <main+0x1d0>)
 8000c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c92:	e9cd 2300 	strd	r2, r3, [sp]
 8000c96:	2301      	movs	r3, #1
 8000c98:	4a63      	ldr	r2, [pc, #396]	; (8000e28 <main+0x1d8>)
 8000c9a:	4964      	ldr	r1, [pc, #400]	; (8000e2c <main+0x1dc>)
 8000c9c:	f7ff ff3f 	bl	8000b1e <lora_init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (init != LORA_OK) {
 8000ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d009      	beq.n	8000cc2 <main+0x72>
	// Initialization failed
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2108      	movs	r1, #8
 8000cb2:	485d      	ldr	r0, [pc, #372]	; (8000e28 <main+0x1d8>)
 8000cb4:	f000 ff82 	bl	8001bbc <HAL_GPIO_WritePin>

    test = 404;
 8000cb8:	4b5d      	ldr	r3, [pc, #372]	; (8000e30 <main+0x1e0>)
 8000cba:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e008      	b.n	8000cd4 <main+0x84>
  }
  else
  {
	  test = 505;
 8000cc2:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <main+0x1e0>)
 8000cc4:	f240 12f9 	movw	r2, #505	; 0x1f9
 8000cc8:	601a      	str	r2, [r3, #0]
  	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2108      	movs	r1, #8
 8000cce:	4856      	ldr	r0, [pc, #344]	; (8000e28 <main+0x1d8>)
 8000cd0:	f000 ff74 	bl	8001bbc <HAL_GPIO_WritePin>
  }

  uint8_t* ver = (uint8_t *)lora_version(&lora);
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fe9c 	bl	8000a14 <lora_version>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	623b      	str	r3, [r7, #32]

  char version = lora_version(&lora);
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fe96 	bl	8000a14 <lora_version>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	77fb      	strb	r3, [r7, #31]
  //uint8_t ver = lora_version(&lora);
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000cec:	6a3b      	ldr	r3, [r7, #32]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d023      	beq.n	8000d3a <main+0xea>
    sprintf(instruct, "Got wrong radio version 0x%x, expected 0x12", ver);
 8000cf2:	6a3a      	ldr	r2, [r7, #32]
 8000cf4:	494f      	ldr	r1, [pc, #316]	; (8000e34 <main+0x1e4>)
 8000cf6:	4850      	ldr	r0, [pc, #320]	; (8000e38 <main+0x1e8>)
 8000cf8:	f003 fe4a 	bl	8004990 <siprintf>
    HAL_USART_Transmit(&husart2, instruct, strlen(instruct), 10);
 8000cfc:	484e      	ldr	r0, [pc, #312]	; (8000e38 <main+0x1e8>)
 8000cfe:	f7ff fa67 	bl	80001d0 <strlen>
 8000d02:	4603      	mov	r3, r0
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	230a      	movs	r3, #10
 8000d08:	494b      	ldr	r1, [pc, #300]	; (8000e38 <main+0x1e8>)
 8000d0a:	484c      	ldr	r0, [pc, #304]	; (8000e3c <main+0x1ec>)
 8000d0c:	f003 fa1a 	bl	8004144 <HAL_USART_Transmit>
    sprintf(version, "0x%x", ver);
 8000d10:	7ffb      	ldrb	r3, [r7, #31]
 8000d12:	6a3a      	ldr	r2, [r7, #32]
 8000d14:	494a      	ldr	r1, [pc, #296]	; (8000e40 <main+0x1f0>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fe3a 	bl	8004990 <siprintf>
    HAL_USART_Transmit(&husart2, version, strlen(version), 10);
 8000d1c:	7ffb      	ldrb	r3, [r7, #31]
 8000d1e:	461c      	mov	r4, r3
 8000d20:	7ffb      	ldrb	r3, [r7, #31]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fa54 	bl	80001d0 <strlen>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	4621      	mov	r1, r4
 8000d30:	4842      	ldr	r0, [pc, #264]	; (8000e3c <main+0x1ec>)
 8000d32:	f003 fa07 	bl	8004144 <HAL_USART_Transmit>
    return LORA_ERROR;
 8000d36:	2304      	movs	r3, #4
 8000d38:	e06c      	b.n	8000e14 <main+0x1c4>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		#ifdef SLAVE
		lora_mode_standby(&lora);
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fd4f 	bl	80007e0 <lora_mode_standby>
		test = 606;
 8000d42:	4b3b      	ldr	r3, [pc, #236]	; (8000e30 <main+0x1e0>)
 8000d44:	f240 225e 	movw	r2, #606	; 0x25e
 8000d48:	601a      	str	r2, [r3, #0]
		// Send packets in blocking mode
		lora_send_packet(&lora, test_var, 4);
 8000d4a:	4b3e      	ldr	r3, [pc, #248]	; (8000e44 <main+0x1f4>)
 8000d4c:	6819      	ldr	r1, [r3, #0]
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2204      	movs	r2, #4
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fec4 	bl	8000ae0 <lora_send_packet>
		HAL_Delay(10000);
 8000d58:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d5c:	f000 fbbe 	bl	80014dc <HAL_Delay>
		//lora_send_packet(&lora, test1_var, 4);
		//HAL_Delay(1000);

		  uint8_t state = read(&lora, 0x12);
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2112      	movs	r1, #18
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff3a 	bl	8000bde <read>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	77bb      	strb	r3, [r7, #30]
		  sprintf(instruct, "%x", state);
 8000d6e:	7fbb      	ldrb	r3, [r7, #30]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4935      	ldr	r1, [pc, #212]	; (8000e48 <main+0x1f8>)
 8000d74:	4830      	ldr	r0, [pc, #192]	; (8000e38 <main+0x1e8>)
 8000d76:	f003 fe0b 	bl	8004990 <siprintf>
		  HAL_USART_Transmit(&husart2, instruct, strlen(instruct), 100);
 8000d7a:	482f      	ldr	r0, [pc, #188]	; (8000e38 <main+0x1e8>)
 8000d7c:	f7ff fa28 	bl	80001d0 <strlen>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	2364      	movs	r3, #100	; 0x64
 8000d86:	492c      	ldr	r1, [pc, #176]	; (8000e38 <main+0x1e8>)
 8000d88:	482c      	ldr	r0, [pc, #176]	; (8000e3c <main+0x1ec>)
 8000d8a:	f003 f9db 	bl	8004144 <HAL_USART_Transmit>

		uint8_t packet_avail = lora_is_transmitting(&lora);
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fe4c 	bl	8000a2e <lora_is_transmitting>
 8000d96:	4603      	mov	r3, r0
 8000d98:	777b      	strb	r3, [r7, #29]
			if (packet_avail == 0)
 8000d9a:	7f7b      	ldrb	r3, [r7, #29]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d10e      	bne.n	8000dbe <main+0x16e>
			{
				sprintf(instruct, "Slave Mode: No packet transmission\r\n");
 8000da0:	492a      	ldr	r1, [pc, #168]	; (8000e4c <main+0x1fc>)
 8000da2:	4825      	ldr	r0, [pc, #148]	; (8000e38 <main+0x1e8>)
 8000da4:	f003 fdf4 	bl	8004990 <siprintf>
				HAL_USART_Transmit(&husart2, instruct, strlen(instruct), 10);
 8000da8:	4823      	ldr	r0, [pc, #140]	; (8000e38 <main+0x1e8>)
 8000daa:	f7ff fa11 	bl	80001d0 <strlen>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	230a      	movs	r3, #10
 8000db4:	4920      	ldr	r1, [pc, #128]	; (8000e38 <main+0x1e8>)
 8000db6:	4821      	ldr	r0, [pc, #132]	; (8000e3c <main+0x1ec>)
 8000db8:	f003 f9c4 	bl	8004144 <HAL_USART_Transmit>
 8000dbc:	e7bd      	b.n	8000d3a <main+0xea>
			}
			else
			{
				sprintf(instruct, "Slave Mode: Transmitting packet\r\n");
 8000dbe:	4924      	ldr	r1, [pc, #144]	; (8000e50 <main+0x200>)
 8000dc0:	481d      	ldr	r0, [pc, #116]	; (8000e38 <main+0x1e8>)
 8000dc2:	f003 fde5 	bl	8004990 <siprintf>
				HAL_USART_Transmit(&husart2, instruct, strlen(instruct), 1000);
 8000dc6:	481c      	ldr	r0, [pc, #112]	; (8000e38 <main+0x1e8>)
 8000dc8:	f7ff fa02 	bl	80001d0 <strlen>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd4:	4918      	ldr	r1, [pc, #96]	; (8000e38 <main+0x1e8>)
 8000dd6:	4819      	ldr	r0, [pc, #100]	; (8000e3c <main+0x1ec>)
 8000dd8:	f003 f9b4 	bl	8004144 <HAL_USART_Transmit>

				sprintf(instruct, "Packet: ");
 8000ddc:	491d      	ldr	r1, [pc, #116]	; (8000e54 <main+0x204>)
 8000dde:	4816      	ldr	r0, [pc, #88]	; (8000e38 <main+0x1e8>)
 8000de0:	f003 fdd6 	bl	8004990 <siprintf>
				HAL_USART_Transmit(&husart2, test_var, 4, 1000);
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <main+0x1f4>)
 8000de6:	6819      	ldr	r1, [r3, #0]
 8000de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dec:	2204      	movs	r2, #4
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <main+0x1ec>)
 8000df0:	f003 f9a8 	bl	8004144 <HAL_USART_Transmit>

				sprintf(instruct, "\r\n");
 8000df4:	4918      	ldr	r1, [pc, #96]	; (8000e58 <main+0x208>)
 8000df6:	4810      	ldr	r0, [pc, #64]	; (8000e38 <main+0x1e8>)
 8000df8:	f003 fdca 	bl	8004990 <siprintf>
				HAL_USART_Transmit(&husart2, instruct, strlen(instruct), 1000);
 8000dfc:	480e      	ldr	r0, [pc, #56]	; (8000e38 <main+0x1e8>)
 8000dfe:	f7ff f9e7 	bl	80001d0 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	490b      	ldr	r1, [pc, #44]	; (8000e38 <main+0x1e8>)
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <main+0x1ec>)
 8000e0e:	f003 f999 	bl	8004144 <HAL_USART_Transmit>
  {
 8000e12:	e792      	b.n	8000d3a <main+0xea>

/* USER CODE END 3 */

    /* USER CODE BEGIN 3 */
  	/* USER CODE END 3 */
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	372c      	adds	r7, #44	; 0x2c
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	f3af 8000 	nop.w
 8000e20:	3689cac0 	.word	0x3689cac0
 8000e24:	00000000 	.word	0x00000000
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	2000007c 	.word	0x2000007c
 8000e30:	20000130 	.word	0x20000130
 8000e34:	080052fc 	.word	0x080052fc
 8000e38:	20000134 	.word	0x20000134
 8000e3c:	200000e0 	.word	0x200000e0
 8000e40:	08005328 	.word	0x08005328
 8000e44:	20000000 	.word	0x20000000
 8000e48:	08005330 	.word	0x08005330
 8000e4c:	08005334 	.word	0x08005334
 8000e50:	0800535c 	.word	0x0800535c
 8000e54:	08005380 	.word	0x08005380
 8000e58:	0800538c 	.word	0x0800538c

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b096      	sub	sp, #88	; 0x58
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	2244      	movs	r2, #68	; 0x44
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fdb0 	bl	80049d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e82:	f000 fed1 	bl	8001c28 <HAL_PWREx_ControlVoltageScaling>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e8c:	f000 f910 	bl	80010b0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e90:	f000 feac 	bl	8001bec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <SystemClock_Config+0xc0>)
 8000e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e9a:	4a20      	ldr	r2, [pc, #128]	; (8000f1c <SystemClock_Config+0xc0>)
 8000e9c:	f023 0318 	bic.w	r3, r3, #24
 8000ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000ea4:	2314      	movs	r3, #20
 8000ea6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000eac:	2301      	movs	r3, #1
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000eb4:	2360      	movs	r3, #96	; 0x60
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fefb 	bl	8001cd4 <HAL_RCC_OscConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ee4:	f000 f8e4 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee8:	230f      	movs	r3, #15
 8000eea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eec:	2303      	movs	r3, #3
 8000eee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	2101      	movs	r1, #1
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 fafb 	bl	80024fc <HAL_RCC_ClockConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f0c:	f000 f8d0 	bl	80010b0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f10:	f001 ff0e 	bl	8002d30 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f14:	bf00      	nop
 8000f16:	3758      	adds	r7, #88	; 0x58
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000

08000f20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
*/

  hspi1.Instance = SPI1;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f26:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <MX_SPI1_Init+0x74>)
 8000f28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f54:	2228      	movs	r2, #40	; 0x28
 8000f56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f78:	2208      	movs	r2, #8
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;*/
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_SPI1_Init+0x70>)
 8000f7e:	f001 ffd9 	bl	8002f34 <HAL_SPI_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8000f88:	f000 f892 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000007c 	.word	0x2000007c
 8000f94:	40013000 	.word	0x40013000

08000f98 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_USART2_Init+0x50>)
 8000f9e:	4a13      	ldr	r2, [pc, #76]	; (8000fec <MX_USART2_Init+0x54>)
 8000fa0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_USART2_Init+0x50>)
 8000fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_USART2_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <MX_USART2_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_USART2_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <MX_USART2_Init+0x50>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_USART2_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <MX_USART2_Init+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_USART2_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <MX_USART2_Init+0x50>)
 8000fd6:	f003 f86b 	bl	80040b0 <HAL_USART_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000fe0:	f000 f866 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200000e0 	.word	0x200000e0
 8000fec:	40004400 	.word	0x40004400

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <MX_GPIO_Init+0xb8>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <MX_GPIO_Init+0xb8>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <MX_GPIO_Init+0xb8>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <MX_GPIO_Init+0xb8>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <MX_GPIO_Init+0xb8>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_GPIO_Init+0xb8>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_GPIO_Init+0xb8>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <MX_GPIO_Init+0xb8>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_GPIO_Init+0xb8>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2108      	movs	r1, #8
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f000 fdb1 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|LD3_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	210a      	movs	r1, #10
 800105e:	4813      	ldr	r0, [pc, #76]	; (80010ac <MX_GPIO_Init+0xbc>)
 8001060:	f000 fdac 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001064:	2308      	movs	r3, #8
 8001066:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f000 fc33 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001082:	2308      	movs	r3, #8
 8001084:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4619      	mov	r1, r3
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_GPIO_Init+0xbc>)
 800109a:	f000 fc25 	bl	80018e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	48000400 	.word	0x48000400

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <Error_Handler+0x8>
	...

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_MspInit+0x44>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_MspInit+0x44>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6613      	str	r3, [r2, #96]	; 0x60
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_MspInit+0x44>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_MspInit+0x44>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x44>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6593      	str	r3, [r2, #88]	; 0x58
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x44>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a25      	ldr	r2, [pc, #148]	; (80011b8 <HAL_SPI_MspInit+0xb4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d144      	bne.n	80011b0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	4a24      	ldr	r2, [pc, #144]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 800112c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001130:	6613      	str	r3, [r2, #96]	; 0x60
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a18      	ldr	r2, [pc, #96]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_SPI_MspInit+0xb8>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800116e:	23e0      	movs	r3, #224	; 0xe0
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800117e:	2305      	movs	r3, #5
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f000 fbac 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001190:	2301      	movs	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a0:	2305      	movs	r3, #5
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_SPI_MspInit+0xbc>)
 80011ac:	f000 fb9c 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	; 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40013000 	.word	0x40013000
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48000400 	.word	0x48000400

080011c4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b09e      	sub	sp, #120	; 0x78
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	2254      	movs	r2, #84	; 0x54
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f003 fbf3 	bl	80049d0 <memset>
  if(husart->Instance==USART2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a2c      	ldr	r2, [pc, #176]	; (80012a0 <HAL_USART_MspInit+0xdc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d150      	bne.n	8001296 <HAL_USART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fb9f 	bl	8002944 <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 800120c:	f7ff ff50 	bl	80010b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_USART_MspInit+0xe0>)
 8001212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001214:	4a23      	ldr	r2, [pc, #140]	; (80012a4 <HAL_USART_MspInit+0xe0>)
 8001216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121a:	6593      	str	r3, [r2, #88]	; 0x58
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <HAL_USART_MspInit+0xe0>)
 800121e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <HAL_USART_MspInit+0xe0>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122c:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <HAL_USART_MspInit+0xe0>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_USART_MspInit+0xe0>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_4;
 8001240:	2314      	movs	r3, #20
 8001242:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001250:	2307      	movs	r3, #7
 8001252:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f000 fb43 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001266:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001274:	2303      	movs	r3, #3
 8001276:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f000 fb31 	bl	80018e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2026      	movs	r0, #38	; 0x26
 800128c:	f000 fa25 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001290:	2026      	movs	r0, #38	; 0x26
 8001292:	f000 fa3e 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001296:	bf00      	nop
 8001298:	3778      	adds	r7, #120	; 0x78
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40021000 	.word	0x40021000

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f4:	f000 f8d2 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <USART2_IRQHandler+0x10>)
 8001302:	f002 ffcd 	bl	80042a0 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000e0 	.word	0x200000e0

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f003 fb4e 	bl	80049e0 <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20010000 	.word	0x20010000
 8001370:	00000400 	.word	0x00000400
 8001374:	20000168 	.word	0x20000168
 8001378:	200002b8 	.word	0x200002b8

0800137c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <SystemInit+0x20>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <SystemInit+0x20>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a4:	f7ff ffea 	bl	800137c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <LoopForever+0x6>)
  ldr r1, =_edata
 80013aa:	490d      	ldr	r1, [pc, #52]	; (80013e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <LoopForever+0xe>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c0:	4c0a      	ldr	r4, [pc, #40]	; (80013ec <LoopForever+0x16>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ce:	f003 fb0d 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013d2:	f7ff fc3d 	bl	8000c50 <main>

080013d6 <LoopForever>:

LoopForever:
    b LoopForever
 80013d6:	e7fe      	b.n	80013d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80013e4:	0800541c 	.word	0x0800541c
  ldr r2, =_sbss
 80013e8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80013ec:	200002b8 	.word	0x200002b8

080013f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC1_IRQHandler>

080013f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f961 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f80e 	bl	8001424 <HAL_InitTick>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	e001      	b.n	8001418 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001414:	f7ff fe52 	bl	80010bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001418:	79fb      	ldrb	r3, [r7, #7]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <HAL_InitTick+0x6c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d023      	beq.n	8001480 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_InitTick+0x70>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <HAL_InitTick+0x6c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f96d 	bl	800172e <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10f      	bne.n	800147a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d809      	bhi.n	8001474 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f000 f937 	bl	80016da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_InitTick+0x74>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e007      	b.n	8001484 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e004      	b.n	8001484 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e001      	b.n	8001484 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000000c 	.word	0x2000000c
 8001494:	20000004 	.word	0x20000004
 8001498:	20000008 	.word	0x20000008

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000000c 	.word	0x2000000c
 80014c0:	2000016c 	.word	0x2000016c

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2000016c 	.word	0x2000016c

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff ffee 	bl	80014c4 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001502:	bf00      	nop
 8001504:	f7ff ffde 	bl	80014c4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000000c 	.word	0x2000000c

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	; (80015c0 <__NVIC_EnableIRQ+0x38>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	; (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	; (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f7ff ff8e 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff29 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff3e 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff8e 	bl	8001618 <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5d 	bl	80015c4 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff31 	bl	8001588 <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa2 	bl	8001680 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_DMA_Start_IT+0x20>
 8001762:	2302      	movs	r3, #2
 8001764:	e04b      	b.n	80017fe <HAL_DMA_Start_IT+0xb8>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d13a      	bne.n	80017f0 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2202      	movs	r2, #2
 800177e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0201 	bic.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 f872 	bl	8001888 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 020e 	orr.w	r2, r2, #14
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e00f      	b.n	80017de <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0204 	bic.w	r2, r2, #4
 80017cc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 020a 	orr.w	r2, r2, #10
 80017dc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 0201 	orr.w	r2, r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e005      	b.n	80017fc <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
 80017fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d005      	beq.n	800182a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2204      	movs	r2, #4
 8001822:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e029      	b.n	800187e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 020e 	bic.w	r2, r2, #14
 8001838:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0201 	bic.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f003 021c 	and.w	r2, r3, #28
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	2101      	movs	r1, #1
 8001858:	fa01 f202 	lsl.w	r2, r1, r2
 800185c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4798      	blx	r3
    }
  }
  return status;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f003 021c 	and.w	r2, r3, #28
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f202 	lsl.w	r2, r1, r2
 80018a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d108      	bne.n	80018cc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018ca:	e007      	b.n	80018dc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	60da      	str	r2, [r3, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f6:	e148      	b.n	8001b8a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 813a 	beq.w	8001b84 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d005      	beq.n	8001928 <HAL_GPIO_Init+0x40>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d130      	bne.n	800198a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800195e:	2201      	movs	r2, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	f003 0201 	and.w	r2, r3, #1
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b03      	cmp	r3, #3
 8001994:	d017      	beq.n	80019c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d123      	bne.n	8001a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3208      	adds	r2, #8
 80019da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	6939      	ldr	r1, [r7, #16]
 8001a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0203 	and.w	r2, r3, #3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8094 	beq.w	8001b84 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5c:	4b52      	ldr	r3, [pc, #328]	; (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a60:	4a51      	ldr	r2, [pc, #324]	; (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6613      	str	r3, [r2, #96]	; 0x60
 8001a68:	4b4f      	ldr	r3, [pc, #316]	; (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a74:	4a4d      	ldr	r2, [pc, #308]	; (8001bac <HAL_GPIO_Init+0x2c4>)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a9e:	d00d      	beq.n	8001abc <HAL_GPIO_Init+0x1d4>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a43      	ldr	r2, [pc, #268]	; (8001bb0 <HAL_GPIO_Init+0x2c8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d007      	beq.n	8001ab8 <HAL_GPIO_Init+0x1d0>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a42      	ldr	r2, [pc, #264]	; (8001bb4 <HAL_GPIO_Init+0x2cc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d101      	bne.n	8001ab4 <HAL_GPIO_Init+0x1cc>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e004      	b.n	8001abe <HAL_GPIO_Init+0x1d6>
 8001ab4:	2307      	movs	r3, #7
 8001ab6:	e002      	b.n	8001abe <HAL_GPIO_Init+0x1d6>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <HAL_GPIO_Init+0x1d6>
 8001abc:	2300      	movs	r3, #0
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	f002 0203 	and.w	r2, r2, #3
 8001ac4:	0092      	lsls	r2, r2, #2
 8001ac6:	4093      	lsls	r3, r2
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ace:	4937      	ldr	r1, [pc, #220]	; (8001bac <HAL_GPIO_Init+0x2c4>)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001adc:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b00:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b06:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b2a:	4a23      	ldr	r2, [pc, #140]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b54:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3301      	adds	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f47f aeaf 	bne.w	80018f8 <HAL_GPIO_Init+0x10>
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	48000400 	.word	0x48000400
 8001bb4:	48000800 	.word	0x48000800
 8001bb8:	40010400 	.word	0x40010400

08001bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bda:	887a      	ldrh	r2, [r7, #2]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40007000 	.word	0x40007000

08001c0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40007000 	.word	0x40007000

08001c28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c36:	d130      	bne.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c38:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c44:	d038      	beq.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2232      	movs	r2, #50	; 0x32
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	0c9b      	lsrs	r3, r3, #18
 8001c68:	3301      	adds	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c6c:	e002      	b.n	8001c74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c80:	d102      	bne.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f2      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c94:	d110      	bne.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e00f      	b.n	8001cba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca6:	d007      	beq.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cb0:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	20000004 	.word	0x20000004
 8001cd0:	431bde83 	.word	0x431bde83

08001cd4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f000 bc02 	b.w	80024ec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce8:	4b96      	ldr	r3, [pc, #600]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf2:	4b94      	ldr	r3, [pc, #592]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80e4 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_RCC_OscConfig+0x4c>
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	f040 808b 	bne.w	8001e2e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	f040 8087 	bne.w	8001e2e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d20:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_OscConfig+0x64>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e3d9      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1a      	ldr	r2, [r3, #32]
 8001d3c:	4b81      	ldr	r3, [pc, #516]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <HAL_RCC_OscConfig+0x7e>
 8001d48:	4b7e      	ldr	r3, [pc, #504]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d50:	e005      	b.n	8001d5e <HAL_RCC_OscConfig+0x8a>
 8001d52:	4b7c      	ldr	r3, [pc, #496]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d223      	bcs.n	8001daa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fd8c 	bl	8002884 <RCC_SetFlashLatencyFromMSIRange>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e3ba      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d76:	4b73      	ldr	r3, [pc, #460]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a72      	ldr	r2, [pc, #456]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	f043 0308 	orr.w	r3, r3, #8
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b70      	ldr	r3, [pc, #448]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	496d      	ldr	r1, [pc, #436]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d94:	4b6b      	ldr	r3, [pc, #428]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	4968      	ldr	r1, [pc, #416]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
 8001da8:	e025      	b.n	8001df6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001daa:	4b66      	ldr	r3, [pc, #408]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a65      	ldr	r2, [pc, #404]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b63      	ldr	r3, [pc, #396]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4960      	ldr	r1, [pc, #384]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc8:	4b5e      	ldr	r3, [pc, #376]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	495b      	ldr	r1, [pc, #364]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fd4c 	bl	8002884 <RCC_SetFlashLatencyFromMSIRange>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e37a      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001df6:	f000 fc81 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	4b51      	ldr	r3, [pc, #324]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	4950      	ldr	r1, [pc, #320]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e08:	5ccb      	ldrb	r3, [r1, r3]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e12:	4a4e      	ldr	r2, [pc, #312]	; (8001f4c <HAL_RCC_OscConfig+0x278>)
 8001e14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e16:	4b4e      	ldr	r3, [pc, #312]	; (8001f50 <HAL_RCC_OscConfig+0x27c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fb02 	bl	8001424 <HAL_InitTick>
 8001e20:	4603      	mov	r3, r0
 8001e22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d052      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	e35e      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d032      	beq.n	8001e9c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e36:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a42      	ldr	r2, [pc, #264]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e42:	f7ff fb3f 	bl	80014c4 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fb3b 	bl	80014c4 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e347      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e5c:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e68:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a35      	ldr	r2, [pc, #212]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e6e:	f043 0308 	orr.w	r3, r3, #8
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4930      	ldr	r1, [pc, #192]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e86:	4b2f      	ldr	r3, [pc, #188]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	492b      	ldr	r1, [pc, #172]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
 8001e9a:	e01a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e9c:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a28      	ldr	r2, [pc, #160]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fb0c 	bl	80014c4 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fb08 	bl	80014c4 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e314      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x1dc>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ed0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d073      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x21c>
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d10e      	bne.n	8001f08 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d10b      	bne.n	8001f08 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d063      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x2f0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d15f      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e2f1      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d106      	bne.n	8001f20 <HAL_RCC_OscConfig+0x24c>
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e025      	b.n	8001f6c <HAL_RCC_OscConfig+0x298>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f28:	d114      	bne.n	8001f54 <HAL_RCC_OscConfig+0x280>
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a02      	ldr	r2, [pc, #8]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e013      	b.n	8001f6c <HAL_RCC_OscConfig+0x298>
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08005390 	.word	0x08005390
 8001f4c:	20000004 	.word	0x20000004
 8001f50:	20000008 	.word	0x20000008
 8001f54:	4ba0      	ldr	r3, [pc, #640]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a9f      	ldr	r2, [pc, #636]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b9d      	ldr	r3, [pc, #628]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a9c      	ldr	r2, [pc, #624]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff faa6 	bl	80014c4 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff faa2 	bl	80014c4 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e2ae      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8e:	4b92      	ldr	r3, [pc, #584]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0x2a8>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fa92 	bl	80014c4 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fa8e 	bl	80014c4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e29a      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fb6:	4b88      	ldr	r3, [pc, #544]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x2d0>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d060      	beq.n	8002094 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x310>
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d119      	bne.n	8002012 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d116      	bne.n	8002012 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe4:	4b7c      	ldr	r3, [pc, #496]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_OscConfig+0x328>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e277      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b76      	ldr	r3, [pc, #472]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	4973      	ldr	r1, [pc, #460]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002010:	e040      	b.n	8002094 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d023      	beq.n	8002062 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800201a:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff fa4d 	bl	80014c4 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202e:	f7ff fa49 	bl	80014c4 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e255      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002040:	4b65      	ldr	r3, [pc, #404]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4b62      	ldr	r3, [pc, #392]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	495f      	ldr	r1, [pc, #380]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
 8002060:	e018      	b.n	8002094 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a5c      	ldr	r2, [pc, #368]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800206c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206e:	f7ff fa29 	bl	80014c4 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002076:	f7ff fa25 	bl	80014c4 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e231      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002088:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d03c      	beq.n	800211a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a8:	4b4b      	ldr	r3, [pc, #300]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ae:	4a4a      	ldr	r2, [pc, #296]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7ff fa04 	bl	80014c4 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c0:	f7ff fa00 	bl	80014c4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e20c      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d2:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ef      	beq.n	80020c0 <HAL_RCC_OscConfig+0x3ec>
 80020e0:	e01b      	b.n	800211a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e8:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7ff f9e7 	bl	80014c4 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fa:	f7ff f9e3 	bl	80014c4 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e1ef      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800210c:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800210e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ef      	bne.n	80020fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80a6 	beq.w	8002274 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002128:	2300      	movs	r3, #0
 800212a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	4a26      	ldr	r2, [pc, #152]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800213e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002142:	6593      	str	r3, [r2, #88]	; 0x58
 8002144:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002150:	2301      	movs	r3, #1
 8002152:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_RCC_OscConfig+0x508>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d118      	bne.n	8002192 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002160:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_RCC_OscConfig+0x508>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <HAL_RCC_OscConfig+0x508>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216c:	f7ff f9aa 	bl	80014c4 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002174:	f7ff f9a6 	bl	80014c4 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1b2      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_RCC_OscConfig+0x508>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d108      	bne.n	80021ac <HAL_RCC_OscConfig+0x4d8>
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800219c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a0:	4a0d      	ldr	r2, [pc, #52]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021aa:	e029      	b.n	8002200 <HAL_RCC_OscConfig+0x52c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d115      	bne.n	80021e0 <HAL_RCC_OscConfig+0x50c>
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ca:	4a03      	ldr	r2, [pc, #12]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021d4:	e014      	b.n	8002200 <HAL_RCC_OscConfig+0x52c>
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
 80021e0:	4b9a      	ldr	r3, [pc, #616]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	4a99      	ldr	r2, [pc, #612]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021f0:	4b96      	ldr	r3, [pc, #600]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	4a95      	ldr	r2, [pc, #596]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d016      	beq.n	8002236 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7ff f95c 	bl	80014c4 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7ff f958 	bl	80014c4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e162      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002226:	4b89      	ldr	r3, [pc, #548]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ed      	beq.n	8002210 <HAL_RCC_OscConfig+0x53c>
 8002234:	e015      	b.n	8002262 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002236:	f7ff f945 	bl	80014c4 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7ff f941 	bl	80014c4 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e14b      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002254:	4b7d      	ldr	r3, [pc, #500]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1ed      	bne.n	800223e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002262:	7ffb      	ldrb	r3, [r7, #31]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002268:	4b78      	ldr	r3, [pc, #480]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	4a77      	ldr	r2, [pc, #476]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800226e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002272:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d03c      	beq.n	80022fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01c      	beq.n	80022c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002288:	4b70      	ldr	r3, [pc, #448]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800228a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800228e:	4a6f      	ldr	r2, [pc, #444]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002298:	f7ff f914 	bl	80014c4 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022a0:	f7ff f910 	bl	80014c4 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e11c      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022b2:	4b66      	ldr	r3, [pc, #408]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80022b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ef      	beq.n	80022a0 <HAL_RCC_OscConfig+0x5cc>
 80022c0:	e01b      	b.n	80022fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022c2:	4b62      	ldr	r3, [pc, #392]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80022c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022c8:	4a60      	ldr	r2, [pc, #384]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7ff f8f7 	bl	80014c4 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022da:	f7ff f8f3 	bl	80014c4 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e0ff      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022ec:	4b57      	ldr	r3, [pc, #348]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80022ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ef      	bne.n	80022da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80f3 	beq.w	80024ea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	2b02      	cmp	r3, #2
 800230a:	f040 80c9 	bne.w	80024a0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800230e:	4b4f      	ldr	r3, [pc, #316]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 0203 	and.w	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	429a      	cmp	r2, r3
 8002320:	d12c      	bne.n	800237c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	3b01      	subs	r3, #1
 800232e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d123      	bne.n	800237c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002340:	429a      	cmp	r2, r3
 8002342:	d11b      	bne.n	800237c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d113      	bne.n	800237c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	3b01      	subs	r3, #1
 8002362:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d109      	bne.n	800237c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	085b      	lsrs	r3, r3, #1
 8002374:	3b01      	subs	r3, #1
 8002376:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d06b      	beq.n	8002454 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b0c      	cmp	r3, #12
 8002380:	d062      	beq.n	8002448 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002382:	4b32      	ldr	r3, [pc, #200]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0ac      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002392:	4b2e      	ldr	r3, [pc, #184]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2d      	ldr	r2, [pc, #180]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800239c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800239e:	f7ff f891 	bl	80014c4 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a6:	f7ff f88d 	bl	80014c4 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e099      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b8:	4b24      	ldr	r3, [pc, #144]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c4:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	4b21      	ldr	r3, [pc, #132]	; (8002450 <HAL_RCC_OscConfig+0x77c>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023d4:	3a01      	subs	r2, #1
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	4311      	orrs	r1, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023de:	0212      	lsls	r2, r2, #8
 80023e0:	4311      	orrs	r1, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023e6:	0852      	lsrs	r2, r2, #1
 80023e8:	3a01      	subs	r2, #1
 80023ea:	0552      	lsls	r2, r2, #21
 80023ec:	4311      	orrs	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023f2:	0852      	lsrs	r2, r2, #1
 80023f4:	3a01      	subs	r2, #1
 80023f6:	0652      	lsls	r2, r2, #25
 80023f8:	4311      	orrs	r1, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023fe:	06d2      	lsls	r2, r2, #27
 8002400:	430a      	orrs	r2, r1
 8002402:	4912      	ldr	r1, [pc, #72]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002404:	4313      	orrs	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0f      	ldr	r2, [pc, #60]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800240e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002412:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a0c      	ldr	r2, [pc, #48]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800241a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002420:	f7ff f850 	bl	80014c4 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002428:	f7ff f84c 	bl	80014c4 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e058      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002446:	e050      	b.n	80024ea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e04f      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
 800244c:	40021000 	.word	0x40021000
 8002450:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d144      	bne.n	80024ea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002460:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a23      	ldr	r2, [pc, #140]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 8002466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800246a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 8002472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002476:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002478:	f7ff f824 	bl	80014c4 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff f820 	bl	80014c4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e02c      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x7ac>
 800249e:	e024      	b.n	80024ea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d01f      	beq.n	80024e6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 80024ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7ff f807 	bl	80014c4 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff f803 	bl	80014c4 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e00f      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	4905      	ldr	r1, [pc, #20]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_RCC_OscConfig+0x824>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	60cb      	str	r3, [r1, #12]
 80024e4:	e001      	b.n	80024ea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	feeefffc 	.word	0xfeeefffc

080024fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0e7      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b75      	ldr	r3, [pc, #468]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d910      	bls.n	8002540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b72      	ldr	r3, [pc, #456]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	4970      	ldr	r1, [pc, #448]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b6e      	ldr	r3, [pc, #440]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0cf      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d010      	beq.n	800256e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	4b66      	ldr	r3, [pc, #408]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002558:	429a      	cmp	r2, r3
 800255a:	d908      	bls.n	800256e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b63      	ldr	r3, [pc, #396]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4960      	ldr	r1, [pc, #384]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d04c      	beq.n	8002614 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002582:	4b5a      	ldr	r3, [pc, #360]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d121      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0a6      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800259a:	4b54      	ldr	r3, [pc, #336]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d115      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e09a      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b2:	4b4e      	ldr	r3, [pc, #312]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e08e      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e086      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025d2:	4b46      	ldr	r3, [pc, #280]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f023 0203 	bic.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4943      	ldr	r1, [pc, #268]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e4:	f7fe ff6e 	bl	80014c4 <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ec:	f7fe ff6a 	bl	80014c4 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e06e      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 020c 	and.w	r2, r3, #12
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	429a      	cmp	r2, r3
 8002612:	d1eb      	bne.n	80025ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d010      	beq.n	8002642 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800262c:	429a      	cmp	r2, r3
 800262e:	d208      	bcs.n	8002642 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	492b      	ldr	r1, [pc, #172]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002642:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d210      	bcs.n	8002672 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 0207 	bic.w	r2, r3, #7
 8002658:	4923      	ldr	r1, [pc, #140]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d001      	beq.n	8002672 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e036      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	4918      	ldr	r1, [pc, #96]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d009      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4910      	ldr	r1, [pc, #64]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026b0:	f000 f824 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	490b      	ldr	r1, [pc, #44]	; (80026f0 <HAL_RCC_ClockConfig+0x1f4>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
 80026cc:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1f8>)
 80026ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1fc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fea5 	bl	8001424 <HAL_InitTick>
 80026da:	4603      	mov	r3, r0
 80026dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80026de:	7afb      	ldrb	r3, [r7, #11]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40022000 	.word	0x40022000
 80026ec:	40021000 	.word	0x40021000
 80026f0:	08005390 	.word	0x08005390
 80026f4:	20000004 	.word	0x20000004
 80026f8:	20000008 	.word	0x20000008

080026fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270a:	4b3e      	ldr	r3, [pc, #248]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002714:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x34>
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d121      	bne.n	800276e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d11e      	bne.n	800276e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002730:	4b34      	ldr	r3, [pc, #208]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800273c:	4b31      	ldr	r3, [pc, #196]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	e005      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800274c:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002758:	4a2b      	ldr	r2, [pc, #172]	; (8002808 <HAL_RCC_GetSysClockFreq+0x10c>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002760:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10d      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b04      	cmp	r3, #4
 8002772:	d102      	bne.n	800277a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <HAL_RCC_GetSysClockFreq+0x110>)
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	e004      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d101      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002780:	4b23      	ldr	r3, [pc, #140]	; (8002810 <HAL_RCC_GetSysClockFreq+0x114>)
 8002782:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d134      	bne.n	80027f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800278a:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d003      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0xac>
 80027a0:	e005      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <HAL_RCC_GetSysClockFreq+0x110>)
 80027a4:	617b      	str	r3, [r7, #20]
      break;
 80027a6:	e005      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_GetSysClockFreq+0x114>)
 80027aa:	617b      	str	r3, [r7, #20]
      break;
 80027ac:	e002      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	617b      	str	r3, [r7, #20]
      break;
 80027b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	3301      	adds	r3, #1
 80027c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	fb03 f202 	mul.w	r2, r3, r2
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	0e5b      	lsrs	r3, r3, #25
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	3301      	adds	r3, #1
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027f4:	69bb      	ldr	r3, [r7, #24]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
 8002808:	080053a8 	.word	0x080053a8
 800280c:	00f42400 	.word	0x00f42400
 8002810:	007a1200 	.word	0x007a1200

08002814 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_RCC_GetHCLKFreq+0x14>)
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000004 	.word	0x20000004

0800282c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002830:	f7ff fff0 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 8002834:	4602      	mov	r2, r0
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	4904      	ldr	r1, [pc, #16]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002842:	5ccb      	ldrb	r3, [r1, r3]
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	080053a0 	.word	0x080053a0

08002858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800285c:	f7ff ffda 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0adb      	lsrs	r3, r3, #11
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4904      	ldr	r1, [pc, #16]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x28>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	080053a0 	.word	0x080053a0

08002884 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002890:	4b2a      	ldr	r3, [pc, #168]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800289c:	f7ff f9b6 	bl	8001c0c <HAL_PWREx_GetVoltageRange>
 80028a0:	6178      	str	r0, [r7, #20]
 80028a2:	e014      	b.n	80028ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028a4:	4b25      	ldr	r3, [pc, #148]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	4a24      	ldr	r2, [pc, #144]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ae:	6593      	str	r3, [r2, #88]	; 0x58
 80028b0:	4b22      	ldr	r3, [pc, #136]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028bc:	f7ff f9a6 	bl	8001c0c <HAL_PWREx_GetVoltageRange>
 80028c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028c2:	4b1e      	ldr	r3, [pc, #120]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	4a1d      	ldr	r2, [pc, #116]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d4:	d10b      	bne.n	80028ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b80      	cmp	r3, #128	; 0x80
 80028da:	d919      	bls.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2ba0      	cmp	r3, #160	; 0xa0
 80028e0:	d902      	bls.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028e2:	2302      	movs	r3, #2
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	e013      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028e8:	2301      	movs	r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	e010      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b80      	cmp	r3, #128	; 0x80
 80028f2:	d902      	bls.n	80028fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028f4:	2303      	movs	r3, #3
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	e00a      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	d102      	bne.n	8002906 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002900:	2302      	movs	r3, #2
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e004      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b70      	cmp	r3, #112	; 0x70
 800290a:	d101      	bne.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800290c:	2301      	movs	r3, #1
 800290e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 0207 	bic.w	r2, r3, #7
 8002918:	4909      	ldr	r1, [pc, #36]	; (8002940 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002920:	4b07      	ldr	r3, [pc, #28]	; (8002940 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	429a      	cmp	r2, r3
 800292c:	d001      	beq.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	40022000 	.word	0x40022000

08002944 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800294c:	2300      	movs	r3, #0
 800294e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002950:	2300      	movs	r3, #0
 8002952:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295c:	2b00      	cmp	r3, #0
 800295e:	d031      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002968:	d01a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800296a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800296e:	d814      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002970:	2b00      	cmp	r3, #0
 8002972:	d009      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002974:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002978:	d10f      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800297a:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4a5c      	ldr	r2, [pc, #368]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002984:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002986:	e00c      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f9de 	bl	8002d50 <RCCEx_PLLSAI1_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002998:	e003      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	74fb      	strb	r3, [r7, #19]
      break;
 800299e:	e000      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80029a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a2:	7cfb      	ldrb	r3, [r7, #19]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029a8:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	494e      	ldr	r1, [pc, #312]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029be:	e001      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 809e 	beq.w	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029d6:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00d      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ec:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f0:	4a3f      	ldr	r2, [pc, #252]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f6:	6593      	str	r3, [r2, #88]	; 0x58
 80029f8:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a04:	2301      	movs	r3, #1
 8002a06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a08:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a39      	ldr	r2, [pc, #228]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a14:	f7fe fd56 	bl	80014c4 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a1a:	e009      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1c:	f7fe fd52 	bl	80014c4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d902      	bls.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	74fb      	strb	r3, [r7, #19]
        break;
 8002a2e:	e005      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a30:	4b30      	ldr	r3, [pc, #192]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ef      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d15a      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a42:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01e      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d019      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a5e:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a8a:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d016      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fd12 	bl	80014c4 <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa2:	e00b      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fd0e 	bl	80014c4 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d902      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	74fb      	strb	r3, [r7, #19]
            break;
 8002aba:	e006      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0ec      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	4904      	ldr	r1, [pc, #16]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ae6:	e009      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ae8:	7cfb      	ldrb	r3, [r7, #19]
 8002aea:	74bb      	strb	r3, [r7, #18]
 8002aec:	e006      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002afc:	7c7b      	ldrb	r3, [r7, #17]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d105      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b02:	4b8a      	ldr	r3, [pc, #552]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b06:	4a89      	ldr	r2, [pc, #548]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b1a:	4b84      	ldr	r3, [pc, #528]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b20:	f023 0203 	bic.w	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4980      	ldr	r1, [pc, #512]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b3c:	4b7b      	ldr	r3, [pc, #492]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f023 020c 	bic.w	r2, r3, #12
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	4978      	ldr	r1, [pc, #480]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b5e:	4b73      	ldr	r3, [pc, #460]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	496f      	ldr	r1, [pc, #444]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b80:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	4967      	ldr	r1, [pc, #412]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ba2:	4b62      	ldr	r3, [pc, #392]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	495e      	ldr	r1, [pc, #376]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bc4:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	4956      	ldr	r1, [pc, #344]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002be6:	4b51      	ldr	r3, [pc, #324]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	494d      	ldr	r1, [pc, #308]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d028      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c08:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4945      	ldr	r1, [pc, #276]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c26:	d106      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c28:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a3f      	ldr	r2, [pc, #252]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c32:	60d3      	str	r3, [r2, #12]
 8002c34:	e011      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c3e:	d10c      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	2101      	movs	r1, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f882 	bl	8002d50 <RCCEx_PLLSAI1_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002c56:	7cfb      	ldrb	r3, [r7, #19]
 8002c58:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d028      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c66:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	492d      	ldr	r1, [pc, #180]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c84:	d106      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	4a28      	ldr	r2, [pc, #160]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c90:	60d3      	str	r3, [r2, #12]
 8002c92:	e011      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f853 	bl	8002d50 <RCCEx_PLLSAI1_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cae:	7cfb      	ldrb	r3, [r7, #19]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d01c      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd2:	4916      	ldr	r1, [pc, #88]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce2:	d10c      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	2102      	movs	r1, #2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f830 	bl	8002d50 <RCCEx_PLLSAI1_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002cfa:	7cfb      	ldrb	r3, [r7, #19]
 8002cfc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d18:	4904      	ldr	r1, [pc, #16]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d20:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000

08002d30 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d3a:	f043 0304 	orr.w	r3, r3, #4
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000

08002d50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d5e:	4b74      	ldr	r3, [pc, #464]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d018      	beq.n	8002d9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d6a:	4b71      	ldr	r3, [pc, #452]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f003 0203 	and.w	r2, r3, #3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d10d      	bne.n	8002d96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d82:	4b6b      	ldr	r3, [pc, #428]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	091b      	lsrs	r3, r3, #4
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
       ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d047      	beq.n	8002e26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
 8002d9a:	e044      	b.n	8002e26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d018      	beq.n	8002dd6 <RCCEx_PLLSAI1_Config+0x86>
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d825      	bhi.n	8002df4 <RCCEx_PLLSAI1_Config+0xa4>
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d002      	beq.n	8002db2 <RCCEx_PLLSAI1_Config+0x62>
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d009      	beq.n	8002dc4 <RCCEx_PLLSAI1_Config+0x74>
 8002db0:	e020      	b.n	8002df4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002db2:	4b5f      	ldr	r3, [pc, #380]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d11d      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc2:	e01a      	b.n	8002dfa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dc4:	4b5a      	ldr	r3, [pc, #360]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d116      	bne.n	8002dfe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd4:	e013      	b.n	8002dfe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dd6:	4b56      	ldr	r3, [pc, #344]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002de2:	4b53      	ldr	r3, [pc, #332]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002df2:	e006      	b.n	8002e02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
      break;
 8002df8:	e004      	b.n	8002e04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e002      	b.n	8002e04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e000      	b.n	8002e04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e02:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10d      	bne.n	8002e26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e0a:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	4943      	ldr	r1, [pc, #268]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d17c      	bne.n	8002f26 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e2c:	4b40      	ldr	r3, [pc, #256]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a3f      	ldr	r2, [pc, #252]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e38:	f7fe fb44 	bl	80014c4 <HAL_GetTick>
 8002e3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e3e:	e009      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e40:	f7fe fb40 	bl	80014c4 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d902      	bls.n	8002e54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	73fb      	strb	r3, [r7, #15]
        break;
 8002e52:	e005      	b.n	8002e60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e54:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ef      	bne.n	8002e40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d15f      	bne.n	8002f26 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d110      	bne.n	8002e8e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e6c:	4b30      	ldr	r3, [pc, #192]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6892      	ldr	r2, [r2, #8]
 8002e7c:	0211      	lsls	r1, r2, #8
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68d2      	ldr	r2, [r2, #12]
 8002e82:	06d2      	lsls	r2, r2, #27
 8002e84:	430a      	orrs	r2, r1
 8002e86:	492a      	ldr	r1, [pc, #168]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	610b      	str	r3, [r1, #16]
 8002e8c:	e027      	b.n	8002ede <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d112      	bne.n	8002eba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e94:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6892      	ldr	r2, [r2, #8]
 8002ea4:	0211      	lsls	r1, r2, #8
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6912      	ldr	r2, [r2, #16]
 8002eaa:	0852      	lsrs	r2, r2, #1
 8002eac:	3a01      	subs	r2, #1
 8002eae:	0552      	lsls	r2, r2, #21
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	491f      	ldr	r1, [pc, #124]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	610b      	str	r3, [r1, #16]
 8002eb8:	e011      	b.n	8002ede <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ec2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6892      	ldr	r2, [r2, #8]
 8002eca:	0211      	lsls	r1, r2, #8
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6952      	ldr	r2, [r2, #20]
 8002ed0:	0852      	lsrs	r2, r2, #1
 8002ed2:	3a01      	subs	r2, #1
 8002ed4:	0652      	lsls	r2, r2, #25
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	4915      	ldr	r1, [pc, #84]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ee8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7fe faeb 	bl	80014c4 <HAL_GetTick>
 8002eee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ef0:	e009      	b.n	8002f06 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ef2:	f7fe fae7 	bl	80014c4 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d902      	bls.n	8002f06 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	73fb      	strb	r3, [r7, #15]
          break;
 8002f04:	e005      	b.n	8002f12 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0ef      	beq.n	8002ef2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d106      	bne.n	8002f26 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	4903      	ldr	r1, [pc, #12]	; (8002f30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000

08002f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e095      	b.n	8003072 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d108      	bne.n	8002f60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f56:	d009      	beq.n	8002f6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
 8002f5e:	e005      	b.n	8002f6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fe f8bc 	bl	8001104 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fac:	d902      	bls.n	8002fb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e002      	b.n	8002fba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fc2:	d007      	beq.n	8002fd4 <HAL_SPI_Init+0xa0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fcc:	d002      	beq.n	8002fd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003016:	ea42 0103 	orr.w	r1, r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	0c1b      	lsrs	r3, r3, #16
 8003030:	f003 0204 	and.w	r2, r3, #4
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003050:	ea42 0103 	orr.w	r1, r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b088      	sub	sp, #32
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_SPI_Transmit+0x22>
 8003098:	2302      	movs	r3, #2
 800309a:	e15f      	b.n	800335c <HAL_SPI_Transmit+0x2e2>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030a4:	f7fe fa0e 	bl	80014c4 <HAL_GetTick>
 80030a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d002      	beq.n	80030c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030ba:	2302      	movs	r3, #2
 80030bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030be:	e148      	b.n	8003352 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_SPI_Transmit+0x52>
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030d0:	e13f      	b.n	8003352 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2203      	movs	r2, #3
 80030d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	88fa      	ldrh	r2, [r7, #6]
 80030ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800311c:	d10f      	bne.n	800313e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800313c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d007      	beq.n	800315c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800315a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003164:	d94f      	bls.n	8003206 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_SPI_Transmit+0xfa>
 800316e:	8afb      	ldrh	r3, [r7, #22]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d142      	bne.n	80031fa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	881a      	ldrh	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	1c9a      	adds	r2, r3, #2
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003198:	e02f      	b.n	80031fa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d112      	bne.n	80031ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b8:	1c9a      	adds	r2, r3, #2
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031cc:	e015      	b.n	80031fa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ce:	f7fe f979 	bl	80014c4 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d803      	bhi.n	80031e6 <HAL_SPI_Transmit+0x16c>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d102      	bne.n	80031ec <HAL_SPI_Transmit+0x172>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d106      	bne.n	80031fa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80031f8:	e0ab      	b.n	8003352 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ca      	bne.n	800319a <HAL_SPI_Transmit+0x120>
 8003204:	e080      	b.n	8003308 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_SPI_Transmit+0x19a>
 800320e:	8afb      	ldrh	r3, [r7, #22]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d174      	bne.n	80032fe <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b01      	cmp	r3, #1
 800321c:	d912      	bls.n	8003244 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	881a      	ldrh	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b02      	subs	r3, #2
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003242:	e05c      	b.n	80032fe <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	7812      	ldrb	r2, [r2, #0]
 8003250:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800326a:	e048      	b.n	80032fe <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b02      	cmp	r3, #2
 8003278:	d12b      	bne.n	80032d2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d912      	bls.n	80032aa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	881a      	ldrh	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	1c9a      	adds	r2, r3, #2
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b02      	subs	r3, #2
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032a8:	e029      	b.n	80032fe <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	330c      	adds	r3, #12
 80032b4:	7812      	ldrb	r2, [r2, #0]
 80032b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032d0:	e015      	b.n	80032fe <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d2:	f7fe f8f7 	bl	80014c4 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d803      	bhi.n	80032ea <HAL_SPI_Transmit+0x270>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d102      	bne.n	80032f0 <HAL_SPI_Transmit+0x276>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d106      	bne.n	80032fe <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80032fc:	e029      	b.n	8003352 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1b1      	bne.n	800326c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	6839      	ldr	r1, [r7, #0]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fe89 	bl	8004024 <SPI_EndRxTxTransaction>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e003      	b.n	8003352 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800335a:	7ffb      	ldrb	r3, [r7, #31]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d002      	beq.n	800338a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003384:	2302      	movs	r3, #2
 8003386:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003388:	e11a      	b.n	80035c0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003392:	d112      	bne.n	80033ba <HAL_SPI_Receive+0x56>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10e      	bne.n	80033ba <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2204      	movs	r2, #4
 80033a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80033a4:	88fa      	ldrh	r2, [r7, #6]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f90e 	bl	80035d2 <HAL_SPI_TransmitReceive>
 80033b6:	4603      	mov	r3, r0
 80033b8:	e107      	b.n	80035ca <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_SPI_Receive+0x64>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e100      	b.n	80035ca <HAL_SPI_Receive+0x266>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033d0:	f7fe f878 	bl	80014c4 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_SPI_Receive+0x7e>
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033e6:	e0eb      	b.n	80035c0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2204      	movs	r2, #4
 80033ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003432:	d908      	bls.n	8003446 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	e007      	b.n	8003456 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003454:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345e:	d10f      	bne.n	8003480 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800346e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800347e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b40      	cmp	r3, #64	; 0x40
 800348c:	d007      	beq.n	800349e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034a6:	d86f      	bhi.n	8003588 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80034a8:	e034      	b.n	8003514 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d117      	bne.n	80034e8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f103 020c 	add.w	r2, r3, #12
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80034e6:	e015      	b.n	8003514 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e8:	f7fd ffec 	bl	80014c4 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d803      	bhi.n	8003500 <HAL_SPI_Receive+0x19c>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fe:	d102      	bne.n	8003506 <HAL_SPI_Receive+0x1a2>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003512:	e055      	b.n	80035c0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1c4      	bne.n	80034aa <HAL_SPI_Receive+0x146>
 8003520:	e038      	b.n	8003594 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d115      	bne.n	800355c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	b292      	uxth	r2, r2
 800353c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	1c9a      	adds	r2, r3, #2
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800355a:	e015      	b.n	8003588 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800355c:	f7fd ffb2 	bl	80014c4 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d803      	bhi.n	8003574 <HAL_SPI_Receive+0x210>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003572:	d102      	bne.n	800357a <HAL_SPI_Receive+0x216>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003586:	e01b      	b.n	80035c0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1c6      	bne.n	8003522 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	6839      	ldr	r1, [r7, #0]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fceb 	bl	8003f74 <SPI_EndRxTransaction>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	75fb      	strb	r3, [r7, #23]
 80035b6:	e003      	b.n	80035c0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b08a      	sub	sp, #40	; 0x28
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035e0:	2301      	movs	r3, #1
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x26>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e20a      	b.n	8003a0e <HAL_SPI_TransmitReceive+0x43c>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003600:	f7fd ff60 	bl	80014c4 <HAL_GetTick>
 8003604:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800360c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003618:	887b      	ldrh	r3, [r7, #2]
 800361a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800361c:	7efb      	ldrb	r3, [r7, #27]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d00e      	beq.n	8003640 <HAL_SPI_TransmitReceive+0x6e>
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003628:	d106      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x66>
 8003632:	7efb      	ldrb	r3, [r7, #27]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d003      	beq.n	8003640 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003638:	2302      	movs	r3, #2
 800363a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800363e:	e1e0      	b.n	8003a02 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_SPI_TransmitReceive+0x80>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_SPI_TransmitReceive+0x80>
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d103      	bne.n	800365a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003658:	e1d3      	b.n	8003a02 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b04      	cmp	r3, #4
 8003664:	d003      	beq.n	800366e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2205      	movs	r2, #5
 800366a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	887a      	ldrh	r2, [r7, #2]
 800367e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	887a      	ldrh	r2, [r7, #2]
 8003686:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	887a      	ldrh	r2, [r7, #2]
 800369a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036b0:	d802      	bhi.n	80036b8 <HAL_SPI_TransmitReceive+0xe6>
 80036b2:	8a3b      	ldrh	r3, [r7, #16]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d908      	bls.n	80036ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	e007      	b.n	80036da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e4:	2b40      	cmp	r3, #64	; 0x40
 80036e6:	d007      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003700:	f240 8081 	bls.w	8003806 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_SPI_TransmitReceive+0x140>
 800370c:	8a7b      	ldrh	r3, [r7, #18]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d16d      	bne.n	80037ee <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	881a      	ldrh	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	1c9a      	adds	r2, r3, #2
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003736:	e05a      	b.n	80037ee <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b02      	cmp	r3, #2
 8003744:	d11b      	bne.n	800377e <HAL_SPI_TransmitReceive+0x1ac>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d016      	beq.n	800377e <HAL_SPI_TransmitReceive+0x1ac>
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	2b01      	cmp	r3, #1
 8003754:	d113      	bne.n	800377e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	881a      	ldrh	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	1c9a      	adds	r2, r3, #2
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d11c      	bne.n	80037c6 <HAL_SPI_TransmitReceive+0x1f4>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d016      	beq.n	80037c6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	b292      	uxth	r2, r2
 80037a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	1c9a      	adds	r2, r3, #2
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037c2:	2301      	movs	r3, #1
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037c6:	f7fd fe7d 	bl	80014c4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d80b      	bhi.n	80037ee <HAL_SPI_TransmitReceive+0x21c>
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	d007      	beq.n	80037ee <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80037ec:	e109      	b.n	8003a02 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d19f      	bne.n	8003738 <HAL_SPI_TransmitReceive+0x166>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d199      	bne.n	8003738 <HAL_SPI_TransmitReceive+0x166>
 8003804:	e0e3      	b.n	80039ce <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_SPI_TransmitReceive+0x244>
 800380e:	8a7b      	ldrh	r3, [r7, #18]
 8003810:	2b01      	cmp	r3, #1
 8003812:	f040 80cf 	bne.w	80039b4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	d912      	bls.n	8003846 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	881a      	ldrh	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	1c9a      	adds	r2, r3, #2
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b02      	subs	r3, #2
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003844:	e0b6      	b.n	80039b4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	330c      	adds	r3, #12
 8003850:	7812      	ldrb	r2, [r2, #0]
 8003852:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800386c:	e0a2      	b.n	80039b4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b02      	cmp	r3, #2
 800387a:	d134      	bne.n	80038e6 <HAL_SPI_TransmitReceive+0x314>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d02f      	beq.n	80038e6 <HAL_SPI_TransmitReceive+0x314>
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	2b01      	cmp	r3, #1
 800388a:	d12c      	bne.n	80038e6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b01      	cmp	r3, #1
 8003894:	d912      	bls.n	80038bc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	881a      	ldrh	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	1c9a      	adds	r2, r3, #2
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b02      	subs	r3, #2
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038ba:	e012      	b.n	80038e2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	330c      	adds	r3, #12
 80038c6:	7812      	ldrb	r2, [r2, #0]
 80038c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d148      	bne.n	8003986 <HAL_SPI_TransmitReceive+0x3b4>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d042      	beq.n	8003986 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d923      	bls.n	8003954 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	b292      	uxth	r2, r2
 8003918:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	1c9a      	adds	r2, r3, #2
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b02      	subs	r3, #2
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d81f      	bhi.n	8003982 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	e016      	b.n	8003982 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f103 020c 	add.w	r2, r3, #12
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	7812      	ldrb	r2, [r2, #0]
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003982:	2301      	movs	r3, #1
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003986:	f7fd fd9d 	bl	80014c4 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003992:	429a      	cmp	r2, r3
 8003994:	d803      	bhi.n	800399e <HAL_SPI_TransmitReceive+0x3cc>
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d102      	bne.n	80039a4 <HAL_SPI_TransmitReceive+0x3d2>
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d107      	bne.n	80039b4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80039b2:	e026      	b.n	8003a02 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f47f af57 	bne.w	800386e <HAL_SPI_TransmitReceive+0x29c>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f47f af50 	bne.w	800386e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fb26 	bl	8004024 <SPI_EndRxTxTransaction>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f8:	e003      	b.n	8003a02 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3728      	adds	r7, #40	; 0x28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_SPI_Transmit_DMA+0x20>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e0d4      	b.n	8003be2 <HAL_SPI_Transmit_DMA+0x1ca>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d002      	beq.n	8003a52 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a50:	e0c2      	b.n	8003bd8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_SPI_Transmit_DMA+0x46>
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a62:	e0b9      	b.n	8003bd8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2203      	movs	r2, #3
 8003a68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	88fa      	ldrh	r2, [r7, #6]
 8003a82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aae:	d10f      	bne.n	8003ad0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003abe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ace:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad4:	4a45      	ldr	r2, [pc, #276]	; (8003bec <HAL_SPI_Transmit_DMA+0x1d4>)
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	4a44      	ldr	r2, [pc, #272]	; (8003bf0 <HAL_SPI_Transmit_DMA+0x1d8>)
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	4a43      	ldr	r2, [pc, #268]	; (8003bf4 <HAL_SPI_Transmit_DMA+0x1dc>)
 8003ae6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	2200      	movs	r2, #0
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003afe:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b08:	d82d      	bhi.n	8003b66 <HAL_SPI_Transmit_DMA+0x14e>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b14:	d127      	bne.n	8003b66 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10f      	bne.n	8003b44 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b32:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	085b      	lsrs	r3, r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b42:	e010      	b.n	8003b66 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b52:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	4619      	mov	r1, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	330c      	adds	r3, #12
 8003b76:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b7e:	f7fd fde2 	bl	8001746 <HAL_DMA_Start_IT>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8c:	f043 0210 	orr.w	r2, r3, #16
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003b98:	e01e      	b.n	8003bd8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d007      	beq.n	8003bb8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0220 	orr.w	r2, r2, #32
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0202 	orr.w	r2, r2, #2
 8003bd6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	08003cdb 	.word	0x08003cdb
 8003bf0:	08003c35 	.word	0x08003c35
 8003bf4:	08003cf7 	.word	0x08003cf7

08003bf8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c42:	f7fd fc3f 	bl	80014c4 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d03b      	beq.n	8003cce <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0220 	bic.w	r2, r2, #32
 8003c64:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0202 	bic.w	r2, r2, #2
 8003c74:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	2164      	movs	r1, #100	; 0x64
 8003c7a:	6978      	ldr	r0, [r7, #20]
 8003c7c:	f000 f9d2 	bl	8004024 <SPI_EndRxTxTransaction>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8a:	f043 0220 	orr.w	r2, r3, #32
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003cc6:	6978      	ldr	r0, [r7, #20]
 8003cc8:	f7ff ffaa 	bl	8003c20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003ccc:	e002      	b.n	8003cd4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003cce:	6978      	ldr	r0, [r7, #20]
 8003cd0:	f7ff ff92 	bl	8003bf8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f7ff ff8f 	bl	8003c0c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cee:	bf00      	nop
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0203 	bic.w	r2, r2, #3
 8003d12:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d18:	f043 0210 	orr.w	r2, r3, #16
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f7ff ff79 	bl	8003c20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d2e:	bf00      	nop
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d48:	f7fd fbbc 	bl	80014c4 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	4413      	add	r3, r2
 8003d56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d58:	f7fd fbb4 	bl	80014c4 <HAL_GetTick>
 8003d5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d5e:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	015b      	lsls	r3, r3, #5
 8003d64:	0d1b      	lsrs	r3, r3, #20
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	fb02 f303 	mul.w	r3, r2, r3
 8003d6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d6e:	e054      	b.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d76:	d050      	beq.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d78:	f7fd fba4 	bl	80014c4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d902      	bls.n	8003d8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d13d      	bne.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da6:	d111      	bne.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db0:	d004      	beq.n	8003dbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dba:	d107      	bne.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd4:	d10f      	bne.n	8003df6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e017      	b.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4013      	ands	r3, r2
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	bf0c      	ite	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	2300      	movne	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d19b      	bne.n	8003d70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000004 	.word	0x20000004

08003e48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	; 0x28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e5a:	f7fd fb33 	bl	80014c4 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	4413      	add	r3, r2
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003e6a:	f7fd fb2b 	bl	80014c4 <HAL_GetTick>
 8003e6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e78:	4b3d      	ldr	r3, [pc, #244]	; (8003f70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	00da      	lsls	r2, r3, #3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	0d1b      	lsrs	r3, r3, #20
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e90:	e060      	b.n	8003f54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e98:	d107      	bne.n	8003eaa <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d050      	beq.n	8003f54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003eb2:	f7fd fb07 	bl	80014c4 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d902      	bls.n	8003ec8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d13d      	bne.n	8003f44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ed6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee0:	d111      	bne.n	8003f06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eea:	d004      	beq.n	8003ef6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef4:	d107      	bne.n	8003f06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0e:	d10f      	bne.n	8003f30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e010      	b.n	8003f66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d196      	bne.n	8003e92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3728      	adds	r7, #40	; 0x28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000004 	.word	0x20000004

08003f74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f88:	d111      	bne.n	8003fae <SPI_EndRxTransaction+0x3a>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f92:	d004      	beq.n	8003f9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9c:	d107      	bne.n	8003fae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fac:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2180      	movs	r1, #128	; 0x80
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f7ff febd 	bl	8003d38 <SPI_WaitFlagStateUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc8:	f043 0220 	orr.w	r2, r3, #32
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e023      	b.n	800401c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fdc:	d11d      	bne.n	800401a <SPI_EndRxTransaction+0xa6>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe6:	d004      	beq.n	8003ff2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff0:	d113      	bne.n	800401a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff ff22 	bl	8003e48 <SPI_WaitFifoStateUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400e:	f043 0220 	orr.w	r2, r3, #32
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e000      	b.n	800401c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2200      	movs	r2, #0
 8004038:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff ff03 	bl	8003e48 <SPI_WaitFifoStateUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404c:	f043 0220 	orr.w	r2, r3, #32
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e027      	b.n	80040a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2200      	movs	r2, #0
 8004060:	2180      	movs	r1, #128	; 0x80
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7ff fe68 	bl	8003d38 <SPI_WaitFlagStateUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004072:	f043 0220 	orr.w	r2, r3, #32
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e014      	b.n	80040a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2200      	movs	r2, #0
 8004086:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f7ff fedc 	bl	8003e48 <SPI_WaitFifoStateUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409a:	f043 0220 	orr.w	r2, r3, #32
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e000      	b.n	80040a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e03c      	b.n	800413c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fd f874 	bl	80011c4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fa97 	bl	8004628 <USART_SetConfig>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e01b      	b.n	800413c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004112:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004122:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fba5 	bl	8004884 <USART_CheckIdleState>
 800413a:	4603      	mov	r3, r0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	; 0x28
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	f040 809a 	bne.w	8004296 <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_USART_Transmit+0x2a>
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e092      	b.n	8004298 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_USART_Transmit+0x3c>
 800417c:	2302      	movs	r3, #2
 800417e:	e08b      	b.n	8004298 <HAL_USART_Transmit+0x154>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2212      	movs	r2, #18
 8004192:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004196:	f7fd f995 	bl	80014c4 <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b0:	d108      	bne.n	80041c4 <HAL_USART_Transmit+0x80>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d104      	bne.n	80041c4 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	e003      	b.n	80041cc <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80041cc:	e02b      	b.n	8004226 <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f9ef 	bl	80045bc <USART_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e057      	b.n	8004298 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	881a      	ldrh	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041fa:	b292      	uxth	r2, r2
 80041fc:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	3302      	adds	r3, #2
 8004202:	61bb      	str	r3, [r7, #24]
 8004204:	e008      	b.n	8004218 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	b292      	uxth	r2, r2
 8004210:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3301      	adds	r3, #1
 8004216:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1ce      	bne.n	80041ce <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2200      	movs	r2, #0
 8004238:	2140      	movs	r1, #64	; 0x40
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f9be 	bl	80045bc <USART_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e026      	b.n	8004298 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2240      	movs	r2, #64	; 0x40
 8004250:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2208      	movs	r2, #8
 8004258:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	8b1b      	ldrh	r3, [r3, #24]
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0208 	orr.w	r2, r2, #8
 800426a:	b292      	uxth	r2, r2
 800426c:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	8b1b      	ldrh	r3, [r3, #24]
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0210 	orr.w	r2, r2, #16
 800427e:	b292      	uxth	r2, r2
 8004280:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 8004296:	2302      	movs	r3, #2
  }
}
 8004298:	4618      	mov	r0, r3
 800429a:	3720      	adds	r7, #32
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	617b      	str	r3, [r7, #20]
  /* If no error occurs */
#if defined(USART_CR2_SLVEN)
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
                                      USART_ISR_UDR));
#else
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80042c6:	4013      	ands	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
#endif /* USART_CR2_SLVEN */
  if (errorflags == 0U)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d113      	bne.n	80042f8 <HAL_USART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00e      	beq.n	80042f8 <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_USART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (husart->RxISR != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 810d 	beq.w	8004508 <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
      }
      return;
 80042f6:	e107      	b.n	8004508 <HAL_USART_IRQHandler+0x268>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
#else
  if ((errorflags != 0U)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80e3 	beq.w	80044c6 <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d105      	bne.n	8004316 <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80d8 	beq.w	80044c6 <HAL_USART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00e      	beq.n	800433e <HAL_USART_IRQHandler+0x9e>
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2201      	movs	r2, #1
 8004330:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004336:	f043 0201 	orr.w	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00e      	beq.n	8004366 <HAL_USART_IRQHandler+0xc6>
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2202      	movs	r2, #2
 8004358:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	f043 0204 	orr.w	r2, r3, #4
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00e      	beq.n	800438e <HAL_USART_IRQHandler+0xee>
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2204      	movs	r2, #4
 8004380:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	f043 0202 	orr.w	r2, r3, #2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	64da      	str	r2, [r3, #76]	; 0x4c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d013      	beq.n	80043c0 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d009      	beq.n	80043c0 <HAL_USART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2208      	movs	r2, #8
 80043b2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b8:	f043 0208 	orr.w	r2, r3, #8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00f      	beq.n	80043ea <HAL_USART_IRQHandler+0x14a>
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043dc:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
#endif /* USART_CR2_SLVEN */

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 808c 	beq.w	800450c <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_USART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (husart->RxISR != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	d002      	beq.n	8004436 <HAL_USART_IRQHandler+0x196>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d03e      	beq.n	80044b4 <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f88e 	bl	8004558 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004446:	2b40      	cmp	r3, #64	; 0x40
 8004448:	d130      	bne.n	80044ac <HAL_USART_IRQHandler+0x20c>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004458:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2200      	movs	r2, #0
 8004468:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4618      	mov	r0, r3
 8004470:	f7fd f9c9 	bl	8001806 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	2b00      	cmp	r3, #0
 800447a:	d013      	beq.n	80044a4 <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004480:	4a25      	ldr	r2, [pc, #148]	; (8004518 <HAL_USART_IRQHandler+0x278>)
 8004482:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	4618      	mov	r0, r3
 800448a:	f7fd f9bc 	bl	8001806 <HAL_DMA_Abort_IT>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d016      	beq.n	80044c2 <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800449e:	4610      	mov	r0, r2
 80044a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80044a2:	e00e      	b.n	80044c2 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f84d 	bl	8004544 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80044aa:	e00a      	b.n	80044c2 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f849 	bl	8004544 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80044b2:	e006      	b.n	80044c2 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f845 	bl	8004544 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    return;
 80044c0:	e024      	b.n	800450c <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80044c2:	bf00      	nop
    return;
 80044c4:	e022      	b.n	800450c <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00d      	beq.n	80044ec <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <HAL_USART_IRQHandler+0x24c>
#endif /* USART_CR1_FIFOEN */
  {
    if (husart->TxISR != NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d016      	beq.n	8004510 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	4798      	blx	r3
    }
    return;
 80044ea:	e011      	b.n	8004510 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00d      	beq.n	8004512 <HAL_USART_IRQHandler+0x272>
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fa02 	bl	800490a <USART_EndTransmit_IT>
    return;
 8004506:	e004      	b.n	8004512 <HAL_USART_IRQHandler+0x272>
      return;
 8004508:	bf00      	nop
 800450a:	e002      	b.n	8004512 <HAL_USART_IRQHandler+0x272>
    return;
 800450c:	bf00      	nop
 800450e:	e000      	b.n	8004512 <HAL_USART_IRQHandler+0x272>
    return;
 8004510:	bf00      	nop
    HAL_USARTEx_RxFifoFullCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	08004595 	.word	0x08004595

0800451c <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800456e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff ffc8 	bl	8004544 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80045cc:	e018      	b.n	8004600 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d014      	beq.n	8004600 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d6:	f7fc ff75 	bl	80014c4 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d302      	bcc.n	80045ec <USART_WaitOnFlagUntilTimeout+0x30>
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e00f      	b.n	8004620 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69da      	ldr	r2, [r3, #28]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4013      	ands	r3, r2
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	429a      	cmp	r2, r3
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	429a      	cmp	r2, r3
 800461c:	d0d7      	beq.n	80045ce <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b87      	ldr	r3, [pc, #540]	; (8004874 <USART_SetConfig+0x24c>)
 8004656:	4013      	ands	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	6979      	ldr	r1, [r7, #20]
 800465e:	430b      	orrs	r3, r1
 8004660:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8004662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004666:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	4313      	orrs	r3, r2
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	430a      	orrs	r2, r1
 800469e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a74      	ldr	r2, [pc, #464]	; (8004878 <USART_SetConfig+0x250>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d121      	bne.n	80046ee <USART_SetConfig+0xc6>
 80046aa:	4b74      	ldr	r3, [pc, #464]	; (800487c <USART_SetConfig+0x254>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d817      	bhi.n	80046e8 <USART_SetConfig+0xc0>
 80046b8:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <USART_SetConfig+0x98>)
 80046ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046be:	bf00      	nop
 80046c0:	080046d1 	.word	0x080046d1
 80046c4:	080046dd 	.word	0x080046dd
 80046c8:	080046d7 	.word	0x080046d7
 80046cc:	080046e3 	.word	0x080046e3
 80046d0:	2301      	movs	r3, #1
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e045      	b.n	8004762 <USART_SetConfig+0x13a>
 80046d6:	2302      	movs	r3, #2
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	e042      	b.n	8004762 <USART_SetConfig+0x13a>
 80046dc:	2304      	movs	r3, #4
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e03f      	b.n	8004762 <USART_SetConfig+0x13a>
 80046e2:	2308      	movs	r3, #8
 80046e4:	77fb      	strb	r3, [r7, #31]
 80046e6:	e03c      	b.n	8004762 <USART_SetConfig+0x13a>
 80046e8:	2310      	movs	r3, #16
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e039      	b.n	8004762 <USART_SetConfig+0x13a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a63      	ldr	r2, [pc, #396]	; (8004880 <USART_SetConfig+0x258>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d132      	bne.n	800475e <USART_SetConfig+0x136>
 80046f8:	4b60      	ldr	r3, [pc, #384]	; (800487c <USART_SetConfig+0x254>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b0c      	cmp	r3, #12
 8004704:	d828      	bhi.n	8004758 <USART_SetConfig+0x130>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <USART_SetConfig+0xe4>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004741 	.word	0x08004741
 8004710:	08004759 	.word	0x08004759
 8004714:	08004759 	.word	0x08004759
 8004718:	08004759 	.word	0x08004759
 800471c:	0800474d 	.word	0x0800474d
 8004720:	08004759 	.word	0x08004759
 8004724:	08004759 	.word	0x08004759
 8004728:	08004759 	.word	0x08004759
 800472c:	08004747 	.word	0x08004747
 8004730:	08004759 	.word	0x08004759
 8004734:	08004759 	.word	0x08004759
 8004738:	08004759 	.word	0x08004759
 800473c:	08004753 	.word	0x08004753
 8004740:	2300      	movs	r3, #0
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e00d      	b.n	8004762 <USART_SetConfig+0x13a>
 8004746:	2302      	movs	r3, #2
 8004748:	77fb      	strb	r3, [r7, #31]
 800474a:	e00a      	b.n	8004762 <USART_SetConfig+0x13a>
 800474c:	2304      	movs	r3, #4
 800474e:	77fb      	strb	r3, [r7, #31]
 8004750:	e007      	b.n	8004762 <USART_SetConfig+0x13a>
 8004752:	2308      	movs	r3, #8
 8004754:	77fb      	strb	r3, [r7, #31]
 8004756:	e004      	b.n	8004762 <USART_SetConfig+0x13a>
 8004758:	2310      	movs	r3, #16
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e001      	b.n	8004762 <USART_SetConfig+0x13a>
 800475e:	2310      	movs	r3, #16
 8004760:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8004762:	7ffb      	ldrb	r3, [r7, #31]
 8004764:	2b08      	cmp	r3, #8
 8004766:	d85a      	bhi.n	800481e <USART_SetConfig+0x1f6>
 8004768:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <USART_SetConfig+0x148>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	08004795 	.word	0x08004795
 8004774:	080047b3 	.word	0x080047b3
 8004778:	080047d1 	.word	0x080047d1
 800477c:	0800481f 	.word	0x0800481f
 8004780:	080047eb 	.word	0x080047eb
 8004784:	0800481f 	.word	0x0800481f
 8004788:	0800481f 	.word	0x0800481f
 800478c:	0800481f 	.word	0x0800481f
 8004790:	08004809 	.word	0x08004809
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8004794:	f7fe f84a 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8004798:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	005a      	lsls	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	441a      	add	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80047b0:	e038      	b.n	8004824 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80047b2:	f7fe f851 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 80047b6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	005a      	lsls	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	085b      	lsrs	r3, r3, #1
 80047c2:	441a      	add	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80047ce:	e029      	b.n	8004824 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80047da:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6852      	ldr	r2, [r2, #4]
 80047e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80047e8:	e01c      	b.n	8004824 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80047ea:	f7fd ff87 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80047ee:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	005a      	lsls	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	441a      	add	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004806:	e00d      	b.n	8004824 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	fbb2 f3f3 	udiv	r3, r2, r3
 800481a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800481c:	e002      	b.n	8004824 <USART_SetConfig+0x1fc>
    default:
      ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	77bb      	strb	r3, [r7, #30]
      break;
 8004822:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b0f      	cmp	r3, #15
 8004828:	d916      	bls.n	8004858 <USART_SetConfig+0x230>
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004830:	d212      	bcs.n	8004858 <USART_SetConfig+0x230>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f023 030f 	bic.w	r3, r3, #15
 800483a:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	b29b      	uxth	r3, r3
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	b29a      	uxth	r2, r3
 8004848:	89fb      	ldrh	r3, [r7, #14]
 800484a:	4313      	orrs	r3, r2
 800484c:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	89fa      	ldrh	r2, [r7, #14]
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	e001      	b.n	800485c <USART_SetConfig+0x234>
  }
  else
  {
    ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8004868:	7fbb      	ldrb	r3, [r7, #30]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	efff69f3 	.word	0xefff69f3
 8004878:	40013800 	.word	0x40013800
 800487c:	40021000 	.word	0x40021000
 8004880:	40004400 	.word	0x40004400

08004884 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af02      	add	r7, sp, #8
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004892:	f7fc fe17 	bl	80014c4 <HAL_GetTick>
 8004896:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d10e      	bne.n	80048c4 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80048a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff fe81 	bl	80045bc <USART_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e01e      	b.n	8004902 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d10e      	bne.n	80048f0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80048d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff fe6b 	bl	80045bc <USART_WaitOnFlagUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e008      	b.n	8004902 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004920:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	63da      	str	r2, [r3, #60]	; 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b12      	cmp	r3, #18
 8004942:	d115      	bne.n	8004970 <USART_EndTransmit_IT+0x66>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2208      	movs	r2, #8
 800494a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	8b1b      	ldrh	r3, [r3, #24]
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0208 	orr.w	r2, r2, #8
 800495c:	b292      	uxth	r2, r2
 800495e:	831a      	strh	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff fdd7 	bl	800451c <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800496e:	e00b      	b.n	8004988 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    HAL_USART_TxRxCpltCallback(husart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff fdd4 	bl	8004530 <HAL_USART_TxRxCpltCallback>
}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <siprintf>:
 8004990:	b40e      	push	{r1, r2, r3}
 8004992:	b500      	push	{lr}
 8004994:	b09c      	sub	sp, #112	; 0x70
 8004996:	ab1d      	add	r3, sp, #116	; 0x74
 8004998:	9002      	str	r0, [sp, #8]
 800499a:	9006      	str	r0, [sp, #24]
 800499c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049a0:	4809      	ldr	r0, [pc, #36]	; (80049c8 <siprintf+0x38>)
 80049a2:	9107      	str	r1, [sp, #28]
 80049a4:	9104      	str	r1, [sp, #16]
 80049a6:	4909      	ldr	r1, [pc, #36]	; (80049cc <siprintf+0x3c>)
 80049a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ac:	9105      	str	r1, [sp, #20]
 80049ae:	6800      	ldr	r0, [r0, #0]
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	a902      	add	r1, sp, #8
 80049b4:	f000 f992 	bl	8004cdc <_svfiprintf_r>
 80049b8:	9b02      	ldr	r3, [sp, #8]
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	b01c      	add	sp, #112	; 0x70
 80049c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049c4:	b003      	add	sp, #12
 80049c6:	4770      	bx	lr
 80049c8:	2000005c 	.word	0x2000005c
 80049cc:	ffff0208 	.word	0xffff0208

080049d0 <memset>:
 80049d0:	4402      	add	r2, r0
 80049d2:	4603      	mov	r3, r0
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d100      	bne.n	80049da <memset+0xa>
 80049d8:	4770      	bx	lr
 80049da:	f803 1b01 	strb.w	r1, [r3], #1
 80049de:	e7f9      	b.n	80049d4 <memset+0x4>

080049e0 <__errno>:
 80049e0:	4b01      	ldr	r3, [pc, #4]	; (80049e8 <__errno+0x8>)
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	2000005c 	.word	0x2000005c

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4d0d      	ldr	r5, [pc, #52]	; (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1b64      	subs	r4, r4, r5
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2600      	movs	r6, #0
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4d0b      	ldr	r5, [pc, #44]	; (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	; (8004a30 <__libc_init_array+0x44>)
 8004a00:	f000 fc6a 	bl	80052d8 <_init>
 8004a04:	1b64      	subs	r4, r4, r5
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2600      	movs	r6, #0
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08005414 	.word	0x08005414
 8004a28:	08005414 	.word	0x08005414
 8004a2c:	08005414 	.word	0x08005414
 8004a30:	08005418 	.word	0x08005418

08004a34 <__retarget_lock_acquire_recursive>:
 8004a34:	4770      	bx	lr

08004a36 <__retarget_lock_release_recursive>:
 8004a36:	4770      	bx	lr

08004a38 <_free_r>:
 8004a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a3a:	2900      	cmp	r1, #0
 8004a3c:	d044      	beq.n	8004ac8 <_free_r+0x90>
 8004a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a42:	9001      	str	r0, [sp, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f1a1 0404 	sub.w	r4, r1, #4
 8004a4a:	bfb8      	it	lt
 8004a4c:	18e4      	addlt	r4, r4, r3
 8004a4e:	f000 f8df 	bl	8004c10 <__malloc_lock>
 8004a52:	4a1e      	ldr	r2, [pc, #120]	; (8004acc <_free_r+0x94>)
 8004a54:	9801      	ldr	r0, [sp, #4]
 8004a56:	6813      	ldr	r3, [r2, #0]
 8004a58:	b933      	cbnz	r3, 8004a68 <_free_r+0x30>
 8004a5a:	6063      	str	r3, [r4, #4]
 8004a5c:	6014      	str	r4, [r2, #0]
 8004a5e:	b003      	add	sp, #12
 8004a60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a64:	f000 b8da 	b.w	8004c1c <__malloc_unlock>
 8004a68:	42a3      	cmp	r3, r4
 8004a6a:	d908      	bls.n	8004a7e <_free_r+0x46>
 8004a6c:	6825      	ldr	r5, [r4, #0]
 8004a6e:	1961      	adds	r1, r4, r5
 8004a70:	428b      	cmp	r3, r1
 8004a72:	bf01      	itttt	eq
 8004a74:	6819      	ldreq	r1, [r3, #0]
 8004a76:	685b      	ldreq	r3, [r3, #4]
 8004a78:	1949      	addeq	r1, r1, r5
 8004a7a:	6021      	streq	r1, [r4, #0]
 8004a7c:	e7ed      	b.n	8004a5a <_free_r+0x22>
 8004a7e:	461a      	mov	r2, r3
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	b10b      	cbz	r3, 8004a88 <_free_r+0x50>
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	d9fa      	bls.n	8004a7e <_free_r+0x46>
 8004a88:	6811      	ldr	r1, [r2, #0]
 8004a8a:	1855      	adds	r5, r2, r1
 8004a8c:	42a5      	cmp	r5, r4
 8004a8e:	d10b      	bne.n	8004aa8 <_free_r+0x70>
 8004a90:	6824      	ldr	r4, [r4, #0]
 8004a92:	4421      	add	r1, r4
 8004a94:	1854      	adds	r4, r2, r1
 8004a96:	42a3      	cmp	r3, r4
 8004a98:	6011      	str	r1, [r2, #0]
 8004a9a:	d1e0      	bne.n	8004a5e <_free_r+0x26>
 8004a9c:	681c      	ldr	r4, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	6053      	str	r3, [r2, #4]
 8004aa2:	440c      	add	r4, r1
 8004aa4:	6014      	str	r4, [r2, #0]
 8004aa6:	e7da      	b.n	8004a5e <_free_r+0x26>
 8004aa8:	d902      	bls.n	8004ab0 <_free_r+0x78>
 8004aaa:	230c      	movs	r3, #12
 8004aac:	6003      	str	r3, [r0, #0]
 8004aae:	e7d6      	b.n	8004a5e <_free_r+0x26>
 8004ab0:	6825      	ldr	r5, [r4, #0]
 8004ab2:	1961      	adds	r1, r4, r5
 8004ab4:	428b      	cmp	r3, r1
 8004ab6:	bf04      	itt	eq
 8004ab8:	6819      	ldreq	r1, [r3, #0]
 8004aba:	685b      	ldreq	r3, [r3, #4]
 8004abc:	6063      	str	r3, [r4, #4]
 8004abe:	bf04      	itt	eq
 8004ac0:	1949      	addeq	r1, r1, r5
 8004ac2:	6021      	streq	r1, [r4, #0]
 8004ac4:	6054      	str	r4, [r2, #4]
 8004ac6:	e7ca      	b.n	8004a5e <_free_r+0x26>
 8004ac8:	b003      	add	sp, #12
 8004aca:	bd30      	pop	{r4, r5, pc}
 8004acc:	200002b0 	.word	0x200002b0

08004ad0 <sbrk_aligned>:
 8004ad0:	b570      	push	{r4, r5, r6, lr}
 8004ad2:	4e0e      	ldr	r6, [pc, #56]	; (8004b0c <sbrk_aligned+0x3c>)
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	6831      	ldr	r1, [r6, #0]
 8004ad8:	4605      	mov	r5, r0
 8004ada:	b911      	cbnz	r1, 8004ae2 <sbrk_aligned+0x12>
 8004adc:	f000 fba6 	bl	800522c <_sbrk_r>
 8004ae0:	6030      	str	r0, [r6, #0]
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	f000 fba1 	bl	800522c <_sbrk_r>
 8004aea:	1c43      	adds	r3, r0, #1
 8004aec:	d00a      	beq.n	8004b04 <sbrk_aligned+0x34>
 8004aee:	1cc4      	adds	r4, r0, #3
 8004af0:	f024 0403 	bic.w	r4, r4, #3
 8004af4:	42a0      	cmp	r0, r4
 8004af6:	d007      	beq.n	8004b08 <sbrk_aligned+0x38>
 8004af8:	1a21      	subs	r1, r4, r0
 8004afa:	4628      	mov	r0, r5
 8004afc:	f000 fb96 	bl	800522c <_sbrk_r>
 8004b00:	3001      	adds	r0, #1
 8004b02:	d101      	bne.n	8004b08 <sbrk_aligned+0x38>
 8004b04:	f04f 34ff 	mov.w	r4, #4294967295
 8004b08:	4620      	mov	r0, r4
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}
 8004b0c:	200002b4 	.word	0x200002b4

08004b10 <_malloc_r>:
 8004b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b14:	1ccd      	adds	r5, r1, #3
 8004b16:	f025 0503 	bic.w	r5, r5, #3
 8004b1a:	3508      	adds	r5, #8
 8004b1c:	2d0c      	cmp	r5, #12
 8004b1e:	bf38      	it	cc
 8004b20:	250c      	movcc	r5, #12
 8004b22:	2d00      	cmp	r5, #0
 8004b24:	4607      	mov	r7, r0
 8004b26:	db01      	blt.n	8004b2c <_malloc_r+0x1c>
 8004b28:	42a9      	cmp	r1, r5
 8004b2a:	d905      	bls.n	8004b38 <_malloc_r+0x28>
 8004b2c:	230c      	movs	r3, #12
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	2600      	movs	r6, #0
 8004b32:	4630      	mov	r0, r6
 8004b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c0c <_malloc_r+0xfc>
 8004b3c:	f000 f868 	bl	8004c10 <__malloc_lock>
 8004b40:	f8d8 3000 	ldr.w	r3, [r8]
 8004b44:	461c      	mov	r4, r3
 8004b46:	bb5c      	cbnz	r4, 8004ba0 <_malloc_r+0x90>
 8004b48:	4629      	mov	r1, r5
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	f7ff ffc0 	bl	8004ad0 <sbrk_aligned>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	4604      	mov	r4, r0
 8004b54:	d155      	bne.n	8004c02 <_malloc_r+0xf2>
 8004b56:	f8d8 4000 	ldr.w	r4, [r8]
 8004b5a:	4626      	mov	r6, r4
 8004b5c:	2e00      	cmp	r6, #0
 8004b5e:	d145      	bne.n	8004bec <_malloc_r+0xdc>
 8004b60:	2c00      	cmp	r4, #0
 8004b62:	d048      	beq.n	8004bf6 <_malloc_r+0xe6>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	4631      	mov	r1, r6
 8004b68:	4638      	mov	r0, r7
 8004b6a:	eb04 0903 	add.w	r9, r4, r3
 8004b6e:	f000 fb5d 	bl	800522c <_sbrk_r>
 8004b72:	4581      	cmp	r9, r0
 8004b74:	d13f      	bne.n	8004bf6 <_malloc_r+0xe6>
 8004b76:	6821      	ldr	r1, [r4, #0]
 8004b78:	1a6d      	subs	r5, r5, r1
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	f7ff ffa7 	bl	8004ad0 <sbrk_aligned>
 8004b82:	3001      	adds	r0, #1
 8004b84:	d037      	beq.n	8004bf6 <_malloc_r+0xe6>
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	442b      	add	r3, r5
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d038      	beq.n	8004c06 <_malloc_r+0xf6>
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	42a2      	cmp	r2, r4
 8004b98:	d12b      	bne.n	8004bf2 <_malloc_r+0xe2>
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	e00f      	b.n	8004bc0 <_malloc_r+0xb0>
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	1b52      	subs	r2, r2, r5
 8004ba4:	d41f      	bmi.n	8004be6 <_malloc_r+0xd6>
 8004ba6:	2a0b      	cmp	r2, #11
 8004ba8:	d917      	bls.n	8004bda <_malloc_r+0xca>
 8004baa:	1961      	adds	r1, r4, r5
 8004bac:	42a3      	cmp	r3, r4
 8004bae:	6025      	str	r5, [r4, #0]
 8004bb0:	bf18      	it	ne
 8004bb2:	6059      	strne	r1, [r3, #4]
 8004bb4:	6863      	ldr	r3, [r4, #4]
 8004bb6:	bf08      	it	eq
 8004bb8:	f8c8 1000 	streq.w	r1, [r8]
 8004bbc:	5162      	str	r2, [r4, r5]
 8004bbe:	604b      	str	r3, [r1, #4]
 8004bc0:	4638      	mov	r0, r7
 8004bc2:	f104 060b 	add.w	r6, r4, #11
 8004bc6:	f000 f829 	bl	8004c1c <__malloc_unlock>
 8004bca:	f026 0607 	bic.w	r6, r6, #7
 8004bce:	1d23      	adds	r3, r4, #4
 8004bd0:	1af2      	subs	r2, r6, r3
 8004bd2:	d0ae      	beq.n	8004b32 <_malloc_r+0x22>
 8004bd4:	1b9b      	subs	r3, r3, r6
 8004bd6:	50a3      	str	r3, [r4, r2]
 8004bd8:	e7ab      	b.n	8004b32 <_malloc_r+0x22>
 8004bda:	42a3      	cmp	r3, r4
 8004bdc:	6862      	ldr	r2, [r4, #4]
 8004bde:	d1dd      	bne.n	8004b9c <_malloc_r+0x8c>
 8004be0:	f8c8 2000 	str.w	r2, [r8]
 8004be4:	e7ec      	b.n	8004bc0 <_malloc_r+0xb0>
 8004be6:	4623      	mov	r3, r4
 8004be8:	6864      	ldr	r4, [r4, #4]
 8004bea:	e7ac      	b.n	8004b46 <_malloc_r+0x36>
 8004bec:	4634      	mov	r4, r6
 8004bee:	6876      	ldr	r6, [r6, #4]
 8004bf0:	e7b4      	b.n	8004b5c <_malloc_r+0x4c>
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	e7cc      	b.n	8004b90 <_malloc_r+0x80>
 8004bf6:	230c      	movs	r3, #12
 8004bf8:	603b      	str	r3, [r7, #0]
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	f000 f80e 	bl	8004c1c <__malloc_unlock>
 8004c00:	e797      	b.n	8004b32 <_malloc_r+0x22>
 8004c02:	6025      	str	r5, [r4, #0]
 8004c04:	e7dc      	b.n	8004bc0 <_malloc_r+0xb0>
 8004c06:	605b      	str	r3, [r3, #4]
 8004c08:	deff      	udf	#255	; 0xff
 8004c0a:	bf00      	nop
 8004c0c:	200002b0 	.word	0x200002b0

08004c10 <__malloc_lock>:
 8004c10:	4801      	ldr	r0, [pc, #4]	; (8004c18 <__malloc_lock+0x8>)
 8004c12:	f7ff bf0f 	b.w	8004a34 <__retarget_lock_acquire_recursive>
 8004c16:	bf00      	nop
 8004c18:	200002ac 	.word	0x200002ac

08004c1c <__malloc_unlock>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	; (8004c24 <__malloc_unlock+0x8>)
 8004c1e:	f7ff bf0a 	b.w	8004a36 <__retarget_lock_release_recursive>
 8004c22:	bf00      	nop
 8004c24:	200002ac 	.word	0x200002ac

08004c28 <__ssputs_r>:
 8004c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c2c:	688e      	ldr	r6, [r1, #8]
 8004c2e:	461f      	mov	r7, r3
 8004c30:	42be      	cmp	r6, r7
 8004c32:	680b      	ldr	r3, [r1, #0]
 8004c34:	4682      	mov	sl, r0
 8004c36:	460c      	mov	r4, r1
 8004c38:	4690      	mov	r8, r2
 8004c3a:	d82c      	bhi.n	8004c96 <__ssputs_r+0x6e>
 8004c3c:	898a      	ldrh	r2, [r1, #12]
 8004c3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c42:	d026      	beq.n	8004c92 <__ssputs_r+0x6a>
 8004c44:	6965      	ldr	r5, [r4, #20]
 8004c46:	6909      	ldr	r1, [r1, #16]
 8004c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c4c:	eba3 0901 	sub.w	r9, r3, r1
 8004c50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c54:	1c7b      	adds	r3, r7, #1
 8004c56:	444b      	add	r3, r9
 8004c58:	106d      	asrs	r5, r5, #1
 8004c5a:	429d      	cmp	r5, r3
 8004c5c:	bf38      	it	cc
 8004c5e:	461d      	movcc	r5, r3
 8004c60:	0553      	lsls	r3, r2, #21
 8004c62:	d527      	bpl.n	8004cb4 <__ssputs_r+0x8c>
 8004c64:	4629      	mov	r1, r5
 8004c66:	f7ff ff53 	bl	8004b10 <_malloc_r>
 8004c6a:	4606      	mov	r6, r0
 8004c6c:	b360      	cbz	r0, 8004cc8 <__ssputs_r+0xa0>
 8004c6e:	6921      	ldr	r1, [r4, #16]
 8004c70:	464a      	mov	r2, r9
 8004c72:	f000 faeb 	bl	800524c <memcpy>
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c80:	81a3      	strh	r3, [r4, #12]
 8004c82:	6126      	str	r6, [r4, #16]
 8004c84:	6165      	str	r5, [r4, #20]
 8004c86:	444e      	add	r6, r9
 8004c88:	eba5 0509 	sub.w	r5, r5, r9
 8004c8c:	6026      	str	r6, [r4, #0]
 8004c8e:	60a5      	str	r5, [r4, #8]
 8004c90:	463e      	mov	r6, r7
 8004c92:	42be      	cmp	r6, r7
 8004c94:	d900      	bls.n	8004c98 <__ssputs_r+0x70>
 8004c96:	463e      	mov	r6, r7
 8004c98:	6820      	ldr	r0, [r4, #0]
 8004c9a:	4632      	mov	r2, r6
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	f000 faab 	bl	80051f8 <memmove>
 8004ca2:	68a3      	ldr	r3, [r4, #8]
 8004ca4:	1b9b      	subs	r3, r3, r6
 8004ca6:	60a3      	str	r3, [r4, #8]
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	4433      	add	r3, r6
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb4:	462a      	mov	r2, r5
 8004cb6:	f000 fad7 	bl	8005268 <_realloc_r>
 8004cba:	4606      	mov	r6, r0
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d1e0      	bne.n	8004c82 <__ssputs_r+0x5a>
 8004cc0:	6921      	ldr	r1, [r4, #16]
 8004cc2:	4650      	mov	r0, sl
 8004cc4:	f7ff feb8 	bl	8004a38 <_free_r>
 8004cc8:	230c      	movs	r3, #12
 8004cca:	f8ca 3000 	str.w	r3, [sl]
 8004cce:	89a3      	ldrh	r3, [r4, #12]
 8004cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd4:	81a3      	strh	r3, [r4, #12]
 8004cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cda:	e7e9      	b.n	8004cb0 <__ssputs_r+0x88>

08004cdc <_svfiprintf_r>:
 8004cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce0:	4698      	mov	r8, r3
 8004ce2:	898b      	ldrh	r3, [r1, #12]
 8004ce4:	061b      	lsls	r3, r3, #24
 8004ce6:	b09d      	sub	sp, #116	; 0x74
 8004ce8:	4607      	mov	r7, r0
 8004cea:	460d      	mov	r5, r1
 8004cec:	4614      	mov	r4, r2
 8004cee:	d50e      	bpl.n	8004d0e <_svfiprintf_r+0x32>
 8004cf0:	690b      	ldr	r3, [r1, #16]
 8004cf2:	b963      	cbnz	r3, 8004d0e <_svfiprintf_r+0x32>
 8004cf4:	2140      	movs	r1, #64	; 0x40
 8004cf6:	f7ff ff0b 	bl	8004b10 <_malloc_r>
 8004cfa:	6028      	str	r0, [r5, #0]
 8004cfc:	6128      	str	r0, [r5, #16]
 8004cfe:	b920      	cbnz	r0, 8004d0a <_svfiprintf_r+0x2e>
 8004d00:	230c      	movs	r3, #12
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	e0d0      	b.n	8004eac <_svfiprintf_r+0x1d0>
 8004d0a:	2340      	movs	r3, #64	; 0x40
 8004d0c:	616b      	str	r3, [r5, #20]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	9309      	str	r3, [sp, #36]	; 0x24
 8004d12:	2320      	movs	r3, #32
 8004d14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d1c:	2330      	movs	r3, #48	; 0x30
 8004d1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ec4 <_svfiprintf_r+0x1e8>
 8004d22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d26:	f04f 0901 	mov.w	r9, #1
 8004d2a:	4623      	mov	r3, r4
 8004d2c:	469a      	mov	sl, r3
 8004d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d32:	b10a      	cbz	r2, 8004d38 <_svfiprintf_r+0x5c>
 8004d34:	2a25      	cmp	r2, #37	; 0x25
 8004d36:	d1f9      	bne.n	8004d2c <_svfiprintf_r+0x50>
 8004d38:	ebba 0b04 	subs.w	fp, sl, r4
 8004d3c:	d00b      	beq.n	8004d56 <_svfiprintf_r+0x7a>
 8004d3e:	465b      	mov	r3, fp
 8004d40:	4622      	mov	r2, r4
 8004d42:	4629      	mov	r1, r5
 8004d44:	4638      	mov	r0, r7
 8004d46:	f7ff ff6f 	bl	8004c28 <__ssputs_r>
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	f000 80a9 	beq.w	8004ea2 <_svfiprintf_r+0x1c6>
 8004d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d52:	445a      	add	r2, fp
 8004d54:	9209      	str	r2, [sp, #36]	; 0x24
 8004d56:	f89a 3000 	ldrb.w	r3, [sl]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 80a1 	beq.w	8004ea2 <_svfiprintf_r+0x1c6>
 8004d60:	2300      	movs	r3, #0
 8004d62:	f04f 32ff 	mov.w	r2, #4294967295
 8004d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d6a:	f10a 0a01 	add.w	sl, sl, #1
 8004d6e:	9304      	str	r3, [sp, #16]
 8004d70:	9307      	str	r3, [sp, #28]
 8004d72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d76:	931a      	str	r3, [sp, #104]	; 0x68
 8004d78:	4654      	mov	r4, sl
 8004d7a:	2205      	movs	r2, #5
 8004d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d80:	4850      	ldr	r0, [pc, #320]	; (8004ec4 <_svfiprintf_r+0x1e8>)
 8004d82:	f7fb fa2d 	bl	80001e0 <memchr>
 8004d86:	9a04      	ldr	r2, [sp, #16]
 8004d88:	b9d8      	cbnz	r0, 8004dc2 <_svfiprintf_r+0xe6>
 8004d8a:	06d0      	lsls	r0, r2, #27
 8004d8c:	bf44      	itt	mi
 8004d8e:	2320      	movmi	r3, #32
 8004d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d94:	0711      	lsls	r1, r2, #28
 8004d96:	bf44      	itt	mi
 8004d98:	232b      	movmi	r3, #43	; 0x2b
 8004d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004da2:	2b2a      	cmp	r3, #42	; 0x2a
 8004da4:	d015      	beq.n	8004dd2 <_svfiprintf_r+0xf6>
 8004da6:	9a07      	ldr	r2, [sp, #28]
 8004da8:	4654      	mov	r4, sl
 8004daa:	2000      	movs	r0, #0
 8004dac:	f04f 0c0a 	mov.w	ip, #10
 8004db0:	4621      	mov	r1, r4
 8004db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004db6:	3b30      	subs	r3, #48	; 0x30
 8004db8:	2b09      	cmp	r3, #9
 8004dba:	d94d      	bls.n	8004e58 <_svfiprintf_r+0x17c>
 8004dbc:	b1b0      	cbz	r0, 8004dec <_svfiprintf_r+0x110>
 8004dbe:	9207      	str	r2, [sp, #28]
 8004dc0:	e014      	b.n	8004dec <_svfiprintf_r+0x110>
 8004dc2:	eba0 0308 	sub.w	r3, r0, r8
 8004dc6:	fa09 f303 	lsl.w	r3, r9, r3
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	9304      	str	r3, [sp, #16]
 8004dce:	46a2      	mov	sl, r4
 8004dd0:	e7d2      	b.n	8004d78 <_svfiprintf_r+0x9c>
 8004dd2:	9b03      	ldr	r3, [sp, #12]
 8004dd4:	1d19      	adds	r1, r3, #4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	9103      	str	r1, [sp, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bfbb      	ittet	lt
 8004dde:	425b      	neglt	r3, r3
 8004de0:	f042 0202 	orrlt.w	r2, r2, #2
 8004de4:	9307      	strge	r3, [sp, #28]
 8004de6:	9307      	strlt	r3, [sp, #28]
 8004de8:	bfb8      	it	lt
 8004dea:	9204      	strlt	r2, [sp, #16]
 8004dec:	7823      	ldrb	r3, [r4, #0]
 8004dee:	2b2e      	cmp	r3, #46	; 0x2e
 8004df0:	d10c      	bne.n	8004e0c <_svfiprintf_r+0x130>
 8004df2:	7863      	ldrb	r3, [r4, #1]
 8004df4:	2b2a      	cmp	r3, #42	; 0x2a
 8004df6:	d134      	bne.n	8004e62 <_svfiprintf_r+0x186>
 8004df8:	9b03      	ldr	r3, [sp, #12]
 8004dfa:	1d1a      	adds	r2, r3, #4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	9203      	str	r2, [sp, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bfb8      	it	lt
 8004e04:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e08:	3402      	adds	r4, #2
 8004e0a:	9305      	str	r3, [sp, #20]
 8004e0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004ed4 <_svfiprintf_r+0x1f8>
 8004e10:	7821      	ldrb	r1, [r4, #0]
 8004e12:	2203      	movs	r2, #3
 8004e14:	4650      	mov	r0, sl
 8004e16:	f7fb f9e3 	bl	80001e0 <memchr>
 8004e1a:	b138      	cbz	r0, 8004e2c <_svfiprintf_r+0x150>
 8004e1c:	9b04      	ldr	r3, [sp, #16]
 8004e1e:	eba0 000a 	sub.w	r0, r0, sl
 8004e22:	2240      	movs	r2, #64	; 0x40
 8004e24:	4082      	lsls	r2, r0
 8004e26:	4313      	orrs	r3, r2
 8004e28:	3401      	adds	r4, #1
 8004e2a:	9304      	str	r3, [sp, #16]
 8004e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e30:	4825      	ldr	r0, [pc, #148]	; (8004ec8 <_svfiprintf_r+0x1ec>)
 8004e32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e36:	2206      	movs	r2, #6
 8004e38:	f7fb f9d2 	bl	80001e0 <memchr>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d038      	beq.n	8004eb2 <_svfiprintf_r+0x1d6>
 8004e40:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <_svfiprintf_r+0x1f0>)
 8004e42:	bb1b      	cbnz	r3, 8004e8c <_svfiprintf_r+0x1b0>
 8004e44:	9b03      	ldr	r3, [sp, #12]
 8004e46:	3307      	adds	r3, #7
 8004e48:	f023 0307 	bic.w	r3, r3, #7
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	9303      	str	r3, [sp, #12]
 8004e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e52:	4433      	add	r3, r6
 8004e54:	9309      	str	r3, [sp, #36]	; 0x24
 8004e56:	e768      	b.n	8004d2a <_svfiprintf_r+0x4e>
 8004e58:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	2001      	movs	r0, #1
 8004e60:	e7a6      	b.n	8004db0 <_svfiprintf_r+0xd4>
 8004e62:	2300      	movs	r3, #0
 8004e64:	3401      	adds	r4, #1
 8004e66:	9305      	str	r3, [sp, #20]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f04f 0c0a 	mov.w	ip, #10
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e74:	3a30      	subs	r2, #48	; 0x30
 8004e76:	2a09      	cmp	r2, #9
 8004e78:	d903      	bls.n	8004e82 <_svfiprintf_r+0x1a6>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0c6      	beq.n	8004e0c <_svfiprintf_r+0x130>
 8004e7e:	9105      	str	r1, [sp, #20]
 8004e80:	e7c4      	b.n	8004e0c <_svfiprintf_r+0x130>
 8004e82:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e86:	4604      	mov	r4, r0
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e7f0      	b.n	8004e6e <_svfiprintf_r+0x192>
 8004e8c:	ab03      	add	r3, sp, #12
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	462a      	mov	r2, r5
 8004e92:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <_svfiprintf_r+0x1f4>)
 8004e94:	a904      	add	r1, sp, #16
 8004e96:	4638      	mov	r0, r7
 8004e98:	f3af 8000 	nop.w
 8004e9c:	1c42      	adds	r2, r0, #1
 8004e9e:	4606      	mov	r6, r0
 8004ea0:	d1d6      	bne.n	8004e50 <_svfiprintf_r+0x174>
 8004ea2:	89ab      	ldrh	r3, [r5, #12]
 8004ea4:	065b      	lsls	r3, r3, #25
 8004ea6:	f53f af2d 	bmi.w	8004d04 <_svfiprintf_r+0x28>
 8004eaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004eac:	b01d      	add	sp, #116	; 0x74
 8004eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb2:	ab03      	add	r3, sp, #12
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	462a      	mov	r2, r5
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <_svfiprintf_r+0x1f4>)
 8004eba:	a904      	add	r1, sp, #16
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	f000 f879 	bl	8004fb4 <_printf_i>
 8004ec2:	e7eb      	b.n	8004e9c <_svfiprintf_r+0x1c0>
 8004ec4:	080053d8 	.word	0x080053d8
 8004ec8:	080053e2 	.word	0x080053e2
 8004ecc:	00000000 	.word	0x00000000
 8004ed0:	08004c29 	.word	0x08004c29
 8004ed4:	080053de 	.word	0x080053de

08004ed8 <_printf_common>:
 8004ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004edc:	4616      	mov	r6, r2
 8004ede:	4699      	mov	r9, r3
 8004ee0:	688a      	ldr	r2, [r1, #8]
 8004ee2:	690b      	ldr	r3, [r1, #16]
 8004ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	bfb8      	it	lt
 8004eec:	4613      	movlt	r3, r2
 8004eee:	6033      	str	r3, [r6, #0]
 8004ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ef4:	4607      	mov	r7, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	b10a      	cbz	r2, 8004efe <_printf_common+0x26>
 8004efa:	3301      	adds	r3, #1
 8004efc:	6033      	str	r3, [r6, #0]
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	0699      	lsls	r1, r3, #26
 8004f02:	bf42      	ittt	mi
 8004f04:	6833      	ldrmi	r3, [r6, #0]
 8004f06:	3302      	addmi	r3, #2
 8004f08:	6033      	strmi	r3, [r6, #0]
 8004f0a:	6825      	ldr	r5, [r4, #0]
 8004f0c:	f015 0506 	ands.w	r5, r5, #6
 8004f10:	d106      	bne.n	8004f20 <_printf_common+0x48>
 8004f12:	f104 0a19 	add.w	sl, r4, #25
 8004f16:	68e3      	ldr	r3, [r4, #12]
 8004f18:	6832      	ldr	r2, [r6, #0]
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	42ab      	cmp	r3, r5
 8004f1e:	dc26      	bgt.n	8004f6e <_printf_common+0x96>
 8004f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f24:	1e13      	subs	r3, r2, #0
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	bf18      	it	ne
 8004f2a:	2301      	movne	r3, #1
 8004f2c:	0692      	lsls	r2, r2, #26
 8004f2e:	d42b      	bmi.n	8004f88 <_printf_common+0xb0>
 8004f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f34:	4649      	mov	r1, r9
 8004f36:	4638      	mov	r0, r7
 8004f38:	47c0      	blx	r8
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d01e      	beq.n	8004f7c <_printf_common+0xa4>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	6922      	ldr	r2, [r4, #16]
 8004f42:	f003 0306 	and.w	r3, r3, #6
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	bf02      	ittt	eq
 8004f4a:	68e5      	ldreq	r5, [r4, #12]
 8004f4c:	6833      	ldreq	r3, [r6, #0]
 8004f4e:	1aed      	subeq	r5, r5, r3
 8004f50:	68a3      	ldr	r3, [r4, #8]
 8004f52:	bf0c      	ite	eq
 8004f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f58:	2500      	movne	r5, #0
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	bfc4      	itt	gt
 8004f5e:	1a9b      	subgt	r3, r3, r2
 8004f60:	18ed      	addgt	r5, r5, r3
 8004f62:	2600      	movs	r6, #0
 8004f64:	341a      	adds	r4, #26
 8004f66:	42b5      	cmp	r5, r6
 8004f68:	d11a      	bne.n	8004fa0 <_printf_common+0xc8>
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	e008      	b.n	8004f80 <_printf_common+0xa8>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	4652      	mov	r2, sl
 8004f72:	4649      	mov	r1, r9
 8004f74:	4638      	mov	r0, r7
 8004f76:	47c0      	blx	r8
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d103      	bne.n	8004f84 <_printf_common+0xac>
 8004f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f84:	3501      	adds	r5, #1
 8004f86:	e7c6      	b.n	8004f16 <_printf_common+0x3e>
 8004f88:	18e1      	adds	r1, r4, r3
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	2030      	movs	r0, #48	; 0x30
 8004f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f92:	4422      	add	r2, r4
 8004f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f9c:	3302      	adds	r3, #2
 8004f9e:	e7c7      	b.n	8004f30 <_printf_common+0x58>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	4622      	mov	r2, r4
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	47c0      	blx	r8
 8004faa:	3001      	adds	r0, #1
 8004fac:	d0e6      	beq.n	8004f7c <_printf_common+0xa4>
 8004fae:	3601      	adds	r6, #1
 8004fb0:	e7d9      	b.n	8004f66 <_printf_common+0x8e>
	...

08004fb4 <_printf_i>:
 8004fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb8:	7e0f      	ldrb	r7, [r1, #24]
 8004fba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fbc:	2f78      	cmp	r7, #120	; 0x78
 8004fbe:	4691      	mov	r9, r2
 8004fc0:	4680      	mov	r8, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	469a      	mov	sl, r3
 8004fc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fca:	d807      	bhi.n	8004fdc <_printf_i+0x28>
 8004fcc:	2f62      	cmp	r7, #98	; 0x62
 8004fce:	d80a      	bhi.n	8004fe6 <_printf_i+0x32>
 8004fd0:	2f00      	cmp	r7, #0
 8004fd2:	f000 80d4 	beq.w	800517e <_printf_i+0x1ca>
 8004fd6:	2f58      	cmp	r7, #88	; 0x58
 8004fd8:	f000 80c0 	beq.w	800515c <_printf_i+0x1a8>
 8004fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fe4:	e03a      	b.n	800505c <_printf_i+0xa8>
 8004fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fea:	2b15      	cmp	r3, #21
 8004fec:	d8f6      	bhi.n	8004fdc <_printf_i+0x28>
 8004fee:	a101      	add	r1, pc, #4	; (adr r1, 8004ff4 <_printf_i+0x40>)
 8004ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ff4:	0800504d 	.word	0x0800504d
 8004ff8:	08005061 	.word	0x08005061
 8004ffc:	08004fdd 	.word	0x08004fdd
 8005000:	08004fdd 	.word	0x08004fdd
 8005004:	08004fdd 	.word	0x08004fdd
 8005008:	08004fdd 	.word	0x08004fdd
 800500c:	08005061 	.word	0x08005061
 8005010:	08004fdd 	.word	0x08004fdd
 8005014:	08004fdd 	.word	0x08004fdd
 8005018:	08004fdd 	.word	0x08004fdd
 800501c:	08004fdd 	.word	0x08004fdd
 8005020:	08005165 	.word	0x08005165
 8005024:	0800508d 	.word	0x0800508d
 8005028:	0800511f 	.word	0x0800511f
 800502c:	08004fdd 	.word	0x08004fdd
 8005030:	08004fdd 	.word	0x08004fdd
 8005034:	08005187 	.word	0x08005187
 8005038:	08004fdd 	.word	0x08004fdd
 800503c:	0800508d 	.word	0x0800508d
 8005040:	08004fdd 	.word	0x08004fdd
 8005044:	08004fdd 	.word	0x08004fdd
 8005048:	08005127 	.word	0x08005127
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	1d1a      	adds	r2, r3, #4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	602a      	str	r2, [r5, #0]
 8005054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800505c:	2301      	movs	r3, #1
 800505e:	e09f      	b.n	80051a0 <_printf_i+0x1ec>
 8005060:	6820      	ldr	r0, [r4, #0]
 8005062:	682b      	ldr	r3, [r5, #0]
 8005064:	0607      	lsls	r7, r0, #24
 8005066:	f103 0104 	add.w	r1, r3, #4
 800506a:	6029      	str	r1, [r5, #0]
 800506c:	d501      	bpl.n	8005072 <_printf_i+0xbe>
 800506e:	681e      	ldr	r6, [r3, #0]
 8005070:	e003      	b.n	800507a <_printf_i+0xc6>
 8005072:	0646      	lsls	r6, r0, #25
 8005074:	d5fb      	bpl.n	800506e <_printf_i+0xba>
 8005076:	f9b3 6000 	ldrsh.w	r6, [r3]
 800507a:	2e00      	cmp	r6, #0
 800507c:	da03      	bge.n	8005086 <_printf_i+0xd2>
 800507e:	232d      	movs	r3, #45	; 0x2d
 8005080:	4276      	negs	r6, r6
 8005082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005086:	485a      	ldr	r0, [pc, #360]	; (80051f0 <_printf_i+0x23c>)
 8005088:	230a      	movs	r3, #10
 800508a:	e012      	b.n	80050b2 <_printf_i+0xfe>
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	6820      	ldr	r0, [r4, #0]
 8005090:	1d19      	adds	r1, r3, #4
 8005092:	6029      	str	r1, [r5, #0]
 8005094:	0605      	lsls	r5, r0, #24
 8005096:	d501      	bpl.n	800509c <_printf_i+0xe8>
 8005098:	681e      	ldr	r6, [r3, #0]
 800509a:	e002      	b.n	80050a2 <_printf_i+0xee>
 800509c:	0641      	lsls	r1, r0, #25
 800509e:	d5fb      	bpl.n	8005098 <_printf_i+0xe4>
 80050a0:	881e      	ldrh	r6, [r3, #0]
 80050a2:	4853      	ldr	r0, [pc, #332]	; (80051f0 <_printf_i+0x23c>)
 80050a4:	2f6f      	cmp	r7, #111	; 0x6f
 80050a6:	bf0c      	ite	eq
 80050a8:	2308      	moveq	r3, #8
 80050aa:	230a      	movne	r3, #10
 80050ac:	2100      	movs	r1, #0
 80050ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050b2:	6865      	ldr	r5, [r4, #4]
 80050b4:	60a5      	str	r5, [r4, #8]
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	bfa2      	ittt	ge
 80050ba:	6821      	ldrge	r1, [r4, #0]
 80050bc:	f021 0104 	bicge.w	r1, r1, #4
 80050c0:	6021      	strge	r1, [r4, #0]
 80050c2:	b90e      	cbnz	r6, 80050c8 <_printf_i+0x114>
 80050c4:	2d00      	cmp	r5, #0
 80050c6:	d04b      	beq.n	8005160 <_printf_i+0x1ac>
 80050c8:	4615      	mov	r5, r2
 80050ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ce:	fb03 6711 	mls	r7, r3, r1, r6
 80050d2:	5dc7      	ldrb	r7, [r0, r7]
 80050d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050d8:	4637      	mov	r7, r6
 80050da:	42bb      	cmp	r3, r7
 80050dc:	460e      	mov	r6, r1
 80050de:	d9f4      	bls.n	80050ca <_printf_i+0x116>
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d10b      	bne.n	80050fc <_printf_i+0x148>
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	07de      	lsls	r6, r3, #31
 80050e8:	d508      	bpl.n	80050fc <_printf_i+0x148>
 80050ea:	6923      	ldr	r3, [r4, #16]
 80050ec:	6861      	ldr	r1, [r4, #4]
 80050ee:	4299      	cmp	r1, r3
 80050f0:	bfde      	ittt	le
 80050f2:	2330      	movle	r3, #48	; 0x30
 80050f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050fc:	1b52      	subs	r2, r2, r5
 80050fe:	6122      	str	r2, [r4, #16]
 8005100:	f8cd a000 	str.w	sl, [sp]
 8005104:	464b      	mov	r3, r9
 8005106:	aa03      	add	r2, sp, #12
 8005108:	4621      	mov	r1, r4
 800510a:	4640      	mov	r0, r8
 800510c:	f7ff fee4 	bl	8004ed8 <_printf_common>
 8005110:	3001      	adds	r0, #1
 8005112:	d14a      	bne.n	80051aa <_printf_i+0x1f6>
 8005114:	f04f 30ff 	mov.w	r0, #4294967295
 8005118:	b004      	add	sp, #16
 800511a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	f043 0320 	orr.w	r3, r3, #32
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	4833      	ldr	r0, [pc, #204]	; (80051f4 <_printf_i+0x240>)
 8005128:	2778      	movs	r7, #120	; 0x78
 800512a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	6829      	ldr	r1, [r5, #0]
 8005132:	061f      	lsls	r7, r3, #24
 8005134:	f851 6b04 	ldr.w	r6, [r1], #4
 8005138:	d402      	bmi.n	8005140 <_printf_i+0x18c>
 800513a:	065f      	lsls	r7, r3, #25
 800513c:	bf48      	it	mi
 800513e:	b2b6      	uxthmi	r6, r6
 8005140:	07df      	lsls	r7, r3, #31
 8005142:	bf48      	it	mi
 8005144:	f043 0320 	orrmi.w	r3, r3, #32
 8005148:	6029      	str	r1, [r5, #0]
 800514a:	bf48      	it	mi
 800514c:	6023      	strmi	r3, [r4, #0]
 800514e:	b91e      	cbnz	r6, 8005158 <_printf_i+0x1a4>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	f023 0320 	bic.w	r3, r3, #32
 8005156:	6023      	str	r3, [r4, #0]
 8005158:	2310      	movs	r3, #16
 800515a:	e7a7      	b.n	80050ac <_printf_i+0xf8>
 800515c:	4824      	ldr	r0, [pc, #144]	; (80051f0 <_printf_i+0x23c>)
 800515e:	e7e4      	b.n	800512a <_printf_i+0x176>
 8005160:	4615      	mov	r5, r2
 8005162:	e7bd      	b.n	80050e0 <_printf_i+0x12c>
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	6826      	ldr	r6, [r4, #0]
 8005168:	6961      	ldr	r1, [r4, #20]
 800516a:	1d18      	adds	r0, r3, #4
 800516c:	6028      	str	r0, [r5, #0]
 800516e:	0635      	lsls	r5, r6, #24
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	d501      	bpl.n	8005178 <_printf_i+0x1c4>
 8005174:	6019      	str	r1, [r3, #0]
 8005176:	e002      	b.n	800517e <_printf_i+0x1ca>
 8005178:	0670      	lsls	r0, r6, #25
 800517a:	d5fb      	bpl.n	8005174 <_printf_i+0x1c0>
 800517c:	8019      	strh	r1, [r3, #0]
 800517e:	2300      	movs	r3, #0
 8005180:	6123      	str	r3, [r4, #16]
 8005182:	4615      	mov	r5, r2
 8005184:	e7bc      	b.n	8005100 <_printf_i+0x14c>
 8005186:	682b      	ldr	r3, [r5, #0]
 8005188:	1d1a      	adds	r2, r3, #4
 800518a:	602a      	str	r2, [r5, #0]
 800518c:	681d      	ldr	r5, [r3, #0]
 800518e:	6862      	ldr	r2, [r4, #4]
 8005190:	2100      	movs	r1, #0
 8005192:	4628      	mov	r0, r5
 8005194:	f7fb f824 	bl	80001e0 <memchr>
 8005198:	b108      	cbz	r0, 800519e <_printf_i+0x1ea>
 800519a:	1b40      	subs	r0, r0, r5
 800519c:	6060      	str	r0, [r4, #4]
 800519e:	6863      	ldr	r3, [r4, #4]
 80051a0:	6123      	str	r3, [r4, #16]
 80051a2:	2300      	movs	r3, #0
 80051a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a8:	e7aa      	b.n	8005100 <_printf_i+0x14c>
 80051aa:	6923      	ldr	r3, [r4, #16]
 80051ac:	462a      	mov	r2, r5
 80051ae:	4649      	mov	r1, r9
 80051b0:	4640      	mov	r0, r8
 80051b2:	47d0      	blx	sl
 80051b4:	3001      	adds	r0, #1
 80051b6:	d0ad      	beq.n	8005114 <_printf_i+0x160>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	079b      	lsls	r3, r3, #30
 80051bc:	d413      	bmi.n	80051e6 <_printf_i+0x232>
 80051be:	68e0      	ldr	r0, [r4, #12]
 80051c0:	9b03      	ldr	r3, [sp, #12]
 80051c2:	4298      	cmp	r0, r3
 80051c4:	bfb8      	it	lt
 80051c6:	4618      	movlt	r0, r3
 80051c8:	e7a6      	b.n	8005118 <_printf_i+0x164>
 80051ca:	2301      	movs	r3, #1
 80051cc:	4632      	mov	r2, r6
 80051ce:	4649      	mov	r1, r9
 80051d0:	4640      	mov	r0, r8
 80051d2:	47d0      	blx	sl
 80051d4:	3001      	adds	r0, #1
 80051d6:	d09d      	beq.n	8005114 <_printf_i+0x160>
 80051d8:	3501      	adds	r5, #1
 80051da:	68e3      	ldr	r3, [r4, #12]
 80051dc:	9903      	ldr	r1, [sp, #12]
 80051de:	1a5b      	subs	r3, r3, r1
 80051e0:	42ab      	cmp	r3, r5
 80051e2:	dcf2      	bgt.n	80051ca <_printf_i+0x216>
 80051e4:	e7eb      	b.n	80051be <_printf_i+0x20a>
 80051e6:	2500      	movs	r5, #0
 80051e8:	f104 0619 	add.w	r6, r4, #25
 80051ec:	e7f5      	b.n	80051da <_printf_i+0x226>
 80051ee:	bf00      	nop
 80051f0:	080053e9 	.word	0x080053e9
 80051f4:	080053fa 	.word	0x080053fa

080051f8 <memmove>:
 80051f8:	4288      	cmp	r0, r1
 80051fa:	b510      	push	{r4, lr}
 80051fc:	eb01 0402 	add.w	r4, r1, r2
 8005200:	d902      	bls.n	8005208 <memmove+0x10>
 8005202:	4284      	cmp	r4, r0
 8005204:	4623      	mov	r3, r4
 8005206:	d807      	bhi.n	8005218 <memmove+0x20>
 8005208:	1e43      	subs	r3, r0, #1
 800520a:	42a1      	cmp	r1, r4
 800520c:	d008      	beq.n	8005220 <memmove+0x28>
 800520e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005212:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005216:	e7f8      	b.n	800520a <memmove+0x12>
 8005218:	4402      	add	r2, r0
 800521a:	4601      	mov	r1, r0
 800521c:	428a      	cmp	r2, r1
 800521e:	d100      	bne.n	8005222 <memmove+0x2a>
 8005220:	bd10      	pop	{r4, pc}
 8005222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800522a:	e7f7      	b.n	800521c <memmove+0x24>

0800522c <_sbrk_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d06      	ldr	r5, [pc, #24]	; (8005248 <_sbrk_r+0x1c>)
 8005230:	2300      	movs	r3, #0
 8005232:	4604      	mov	r4, r0
 8005234:	4608      	mov	r0, r1
 8005236:	602b      	str	r3, [r5, #0]
 8005238:	f7fc f86a 	bl	8001310 <_sbrk>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_sbrk_r+0x1a>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_sbrk_r+0x1a>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	200002a8 	.word	0x200002a8

0800524c <memcpy>:
 800524c:	440a      	add	r2, r1
 800524e:	4291      	cmp	r1, r2
 8005250:	f100 33ff 	add.w	r3, r0, #4294967295
 8005254:	d100      	bne.n	8005258 <memcpy+0xc>
 8005256:	4770      	bx	lr
 8005258:	b510      	push	{r4, lr}
 800525a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800525e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005262:	4291      	cmp	r1, r2
 8005264:	d1f9      	bne.n	800525a <memcpy+0xe>
 8005266:	bd10      	pop	{r4, pc}

08005268 <_realloc_r>:
 8005268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526c:	4680      	mov	r8, r0
 800526e:	4614      	mov	r4, r2
 8005270:	460e      	mov	r6, r1
 8005272:	b921      	cbnz	r1, 800527e <_realloc_r+0x16>
 8005274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005278:	4611      	mov	r1, r2
 800527a:	f7ff bc49 	b.w	8004b10 <_malloc_r>
 800527e:	b92a      	cbnz	r2, 800528c <_realloc_r+0x24>
 8005280:	f7ff fbda 	bl	8004a38 <_free_r>
 8005284:	4625      	mov	r5, r4
 8005286:	4628      	mov	r0, r5
 8005288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800528c:	f000 f81b 	bl	80052c6 <_malloc_usable_size_r>
 8005290:	4284      	cmp	r4, r0
 8005292:	4607      	mov	r7, r0
 8005294:	d802      	bhi.n	800529c <_realloc_r+0x34>
 8005296:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800529a:	d812      	bhi.n	80052c2 <_realloc_r+0x5a>
 800529c:	4621      	mov	r1, r4
 800529e:	4640      	mov	r0, r8
 80052a0:	f7ff fc36 	bl	8004b10 <_malloc_r>
 80052a4:	4605      	mov	r5, r0
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d0ed      	beq.n	8005286 <_realloc_r+0x1e>
 80052aa:	42bc      	cmp	r4, r7
 80052ac:	4622      	mov	r2, r4
 80052ae:	4631      	mov	r1, r6
 80052b0:	bf28      	it	cs
 80052b2:	463a      	movcs	r2, r7
 80052b4:	f7ff ffca 	bl	800524c <memcpy>
 80052b8:	4631      	mov	r1, r6
 80052ba:	4640      	mov	r0, r8
 80052bc:	f7ff fbbc 	bl	8004a38 <_free_r>
 80052c0:	e7e1      	b.n	8005286 <_realloc_r+0x1e>
 80052c2:	4635      	mov	r5, r6
 80052c4:	e7df      	b.n	8005286 <_realloc_r+0x1e>

080052c6 <_malloc_usable_size_r>:
 80052c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ca:	1f18      	subs	r0, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bfbc      	itt	lt
 80052d0:	580b      	ldrlt	r3, [r1, r0]
 80052d2:	18c0      	addlt	r0, r0, r3
 80052d4:	4770      	bx	lr
	...

080052d8 <_init>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	bf00      	nop
 80052dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052de:	bc08      	pop	{r3}
 80052e0:	469e      	mov	lr, r3
 80052e2:	4770      	bx	lr

080052e4 <_fini>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	bf00      	nop
 80052e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ea:	bc08      	pop	{r3}
 80052ec:	469e      	mov	lr, r3
 80052ee:	4770      	bx	lr

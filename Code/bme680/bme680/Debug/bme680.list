
bme680.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006890  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b88  08006b88  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b88  08006b88  00016b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b90  08006b90  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b90  08006b90  00016b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b94  08006b94  00016b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000005c  08006bf4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20000390  08006bf4  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fcc7  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025eb  00000000  00000000  0002fd96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00032388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b90  00000000  00000000  000332a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002203a  00000000  00000000  00033e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012096  00000000  00000000  00055e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1609  00000000  00000000  00067f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004450  00000000  00000000  0013950c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0013d95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a08 	.word	0x08006a08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006a08 	.word	0x08006a08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295
 800028e:	f000 b9a3 	b.w	80005d8 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f835 	bl	8000310 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f828 	bl	8000310 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f817 	bl	8000310 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f809 	bl	8000310 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f001 fa65 	bl	8001ab4 <null_ptr_check>
 80005ea:	4603      	mov	r3, r0
 80005ec:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80005ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d120      	bne.n	8000638 <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 f8ee 	bl	80007d8 <bme680_soft_reset>
 80005fc:	4603      	mov	r3, r0
 80005fe:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8000600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d117      	bne.n	8000638 <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	20d0      	movs	r0, #208	; 0xd0
 8000610:	f000 f818 	bl	8000644 <bme680_get_regs>
 8000614:	4603      	mov	r3, r0
 8000616:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8000618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d10b      	bne.n	8000638 <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b61      	cmp	r3, #97	; 0x61
 8000626:	d105      	bne.n	8000634 <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 fbcf 	bl	8000dcc <get_calib_data>
 800062e:	4603      	mov	r3, r0
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	e001      	b.n	8000638 <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 8000634:	23fd      	movs	r3, #253	; 0xfd
 8000636:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8000638:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4603      	mov	r3, r0
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	4613      	mov	r3, r2
 8000654:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f001 fa2c 	bl	8001ab4 <null_ptr_check>
 800065c:	4603      	mov	r3, r0
 800065e:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 8000660:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d126      	bne.n	80006b6 <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	789b      	ldrb	r3, [r3, #2]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d10e      	bne.n	800068e <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	4618      	mov	r0, r3
 8000676:	f001 f94e 	bl	8001916 <set_mem_page>
 800067a:	4603      	mov	r3, r0
 800067c:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 800067e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d103      	bne.n	800068e <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800068c:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7858      	ldrb	r0, [r3, #1]
 8000696:	89bb      	ldrh	r3, [r7, #12]
 8000698:	7bf9      	ldrb	r1, [r7, #15]
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	47a0      	blx	r4
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 80006b2:	23fe      	movs	r3, #254	; 0xfe
 80006b4:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80006b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	371c      	adds	r7, #28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd90      	pop	{r4, r7, pc}

080006c2 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80006c2:	b5b0      	push	{r4, r5, r7, lr}
 80006c4:	b090      	sub	sp, #64	; 0x40
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4613      	mov	r3, r2
 80006d0:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	f107 0318 	add.w	r3, r7, #24
 80006da:	2224      	movs	r2, #36	; 0x24
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 fdba 	bl	8006258 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80006e4:	6838      	ldr	r0, [r7, #0]
 80006e6:	f001 f9e5 	bl	8001ab4 <null_ptr_check>
 80006ea:	4603      	mov	r3, r0
 80006ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (rslt == BME680_OK) {
 80006f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d169      	bne.n	80007cc <bme680_set_regs+0x10a>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d061      	beq.n	80007c2 <bme680_set_regs+0x100>
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b13      	cmp	r3, #19
 8000702:	d85e      	bhi.n	80007c2 <bme680_set_regs+0x100>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8000704:	2300      	movs	r3, #0
 8000706:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000708:	e034      	b.n	8000774 <bme680_set_regs+0xb2>
				if (dev->intf == BME680_SPI_INTF) {
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d118      	bne.n	8000744 <bme680_set_regs+0x82>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8000712:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	6839      	ldr	r1, [r7, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f001 f8fa 	bl	8001916 <set_mem_page>
 8000722:	4603      	mov	r3, r0
 8000724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8000728:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	4413      	add	r3, r2
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	3340      	adds	r3, #64	; 0x40
 800073c:	443b      	add	r3, r7
 800073e:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8000742:	e009      	b.n	8000758 <bme680_set_regs+0x96>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8000744:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	441a      	add	r2, r3
 800074a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	7812      	ldrb	r2, [r2, #0]
 8000750:	3340      	adds	r3, #64	; 0x40
 8000752:	443b      	add	r3, r7
 8000754:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8000758:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	441a      	add	r2, r3
 800075e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	3301      	adds	r3, #1
 8000764:	7812      	ldrb	r2, [r2, #0]
 8000766:	3340      	adds	r3, #64	; 0x40
 8000768:	443b      	add	r3, r7
 800076a:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 800076e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000770:	3301      	adds	r3, #1
 8000772:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	b29b      	uxth	r3, r3
 8000778:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800077a:	429a      	cmp	r2, r3
 800077c:	d3c5      	bcc.n	800070a <bme680_set_regs+0x48>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 800077e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8000782:	2b00      	cmp	r3, #0
 8000784:	d121      	bne.n	80007ca <bme680_set_regs+0x108>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	7858      	ldrb	r0, [r3, #1]
 800078e:	7d39      	ldrb	r1, [r7, #20]
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	b29b      	uxth	r3, r3
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	b29b      	uxth	r3, r3
 8000798:	3b01      	subs	r3, #1
 800079a:	b29d      	uxth	r5, r3
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	462b      	mov	r3, r5
 80007a4:	47a0      	blx	r4
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if (dev->com_rslt != 0)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d007      	beq.n	80007ca <bme680_set_regs+0x108>
					rslt = BME680_E_COM_FAIL;
 80007ba:	23fe      	movs	r3, #254	; 0xfe
 80007bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (rslt == BME680_OK) {
 80007c0:	e003      	b.n	80007ca <bme680_set_regs+0x108>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 80007c2:	23fc      	movs	r3, #252	; 0xfc
 80007c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80007c8:	e000      	b.n	80007cc <bme680_set_regs+0x10a>
			if (rslt == BME680_OK) {
 80007ca:	bf00      	nop
		}
	}

	return rslt;
 80007cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3740      	adds	r7, #64	; 0x40
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bdb0      	pop	{r4, r5, r7, pc}

080007d8 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 80007e0:	23e0      	movs	r3, #224	; 0xe0
 80007e2:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80007e4:	23b6      	movs	r3, #182	; 0xb6
 80007e6:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f001 f963 	bl	8001ab4 <null_ptr_check>
 80007ee:	4603      	mov	r3, r0
 80007f0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d127      	bne.n	800084a <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	789b      	ldrb	r3, [r3, #2]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d104      	bne.n	800080c <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f001 f8ec 	bl	80019e0 <get_mem_page>
 8000808:	4603      	mov	r3, r0
 800080a:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 800080c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d11a      	bne.n	800084a <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000814:	f107 010d 	add.w	r1, r7, #13
 8000818:	f107 000e 	add.w	r0, r7, #14
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2201      	movs	r2, #1
 8000820:	f7ff ff4f 	bl	80006c2 <bme680_set_regs>
 8000824:	4603      	mov	r3, r0
 8000826:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800082c:	200a      	movs	r0, #10
 800082e:	4798      	blx	r3

			if (rslt == BME680_OK) {
 8000830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d108      	bne.n	800084a <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	789b      	ldrb	r3, [r3, #2]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d104      	bne.n	800084a <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f001 f8cd 	bl	80019e0 <get_mem_page>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 800084a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b088      	sub	sp, #32
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	6039      	str	r1, [r7, #0]
 8000860:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	2300      	movs	r3, #0
 8000870:	833b      	strh	r3, [r7, #24]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	2300      	movs	r3, #0
 8000878:	823b      	strh	r3, [r7, #16]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000880:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000882:	6838      	ldr	r0, [r7, #0]
 8000884:	f001 f916 	bl	8001ab4 <null_ptr_check>
 8000888:	4603      	mov	r3, r0
 800088a:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 800088c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000890:	2b00      	cmp	r3, #0
 8000892:	f040 81a2 	bne.w	8000bda <bme680_set_sensor_settings+0x384>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	f003 0308 	and.w	r3, r3, #8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d004      	beq.n	80008aa <bme680_set_sensor_settings+0x54>
			rslt = set_gas_config(dev);
 80008a0:	6838      	ldr	r0, [r7, #0]
 80008a2:	f000 fbbf 	bl	8001024 <set_gas_config>
 80008a6:	4603      	mov	r3, r0
 80008a8:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (rslt == BME680_OK)
 80008b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d104      	bne.n	80008c4 <bme680_set_sensor_settings+0x6e>
			rslt = bme680_set_sensor_mode(dev);
 80008ba:	6838      	ldr	r0, [r7, #0]
 80008bc:	f000 f993 	bl	8000be6 <bme680_set_sensor_mode>
 80008c0:	4603      	mov	r3, r0
 80008c2:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	f003 0310 	and.w	r3, r3, #16
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d03d      	beq.n	800094a <bme680_set_sensor_settings+0xf4>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2207      	movs	r2, #7
 80008d8:	2100      	movs	r1, #0
 80008da:	f001 f8b0 	bl	8001a3e <boundary_check>
 80008de:	4603      	mov	r3, r0
 80008e0:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 80008e2:	2375      	movs	r3, #117	; 0x75
 80008e4:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80008e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d108      	bne.n	8000900 <bme680_set_sensor_settings+0xaa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80008ee:	f107 011b 	add.w	r1, r7, #27
 80008f2:	7f38      	ldrb	r0, [r7, #28]
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	2201      	movs	r2, #1
 80008f8:	f7ff fea4 	bl	8000644 <bme680_get_regs>
 80008fc:	4603      	mov	r3, r0
 80008fe:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	2b00      	cmp	r3, #0
 8000908:	d010      	beq.n	800092c <bme680_set_sensor_settings+0xd6>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 800090a:	7efb      	ldrb	r3, [r7, #27]
 800090c:	b25b      	sxtb	r3, r3
 800090e:	f023 031c 	bic.w	r3, r3, #28
 8000912:	b25a      	sxtb	r2, r3
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	b25b      	sxtb	r3, r3
 800091e:	f003 031c 	and.w	r3, r3, #28
 8000922:	b25b      	sxtb	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b25b      	sxtb	r3, r3
 8000928:	b2db      	uxtb	r3, r3
 800092a:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 800092c:	7fbb      	ldrb	r3, [r7, #30]
 800092e:	3320      	adds	r3, #32
 8000930:	443b      	add	r3, r7
 8000932:	7f3a      	ldrb	r2, [r7, #28]
 8000934:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000938:	7fbb      	ldrb	r3, [r7, #30]
 800093a:	7efa      	ldrb	r2, [r7, #27]
 800093c:	3320      	adds	r3, #32
 800093e:	443b      	add	r3, r7
 8000940:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000944:	7fbb      	ldrb	r3, [r7, #30]
 8000946:	3301      	adds	r3, #1
 8000948:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	f003 0320 	and.w	r3, r3, #32
 8000950:	2b00      	cmp	r3, #0
 8000952:	d037      	beq.n	80009c4 <bme680_set_sensor_settings+0x16e>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	2208      	movs	r2, #8
 800095e:	2100      	movs	r1, #0
 8000960:	f001 f86d 	bl	8001a3e <boundary_check>
 8000964:	4603      	mov	r3, r0
 8000966:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 8000968:	2370      	movs	r3, #112	; 0x70
 800096a:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 800096c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d108      	bne.n	8000986 <bme680_set_sensor_settings+0x130>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000974:	f107 011b 	add.w	r1, r7, #27
 8000978:	7f38      	ldrb	r0, [r7, #28]
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	2201      	movs	r2, #1
 800097e:	f7ff fe61 	bl	8000644 <bme680_get_regs>
 8000982:	4603      	mov	r3, r0
 8000984:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8000986:	7efb      	ldrb	r3, [r7, #27]
 8000988:	b25b      	sxtb	r3, r3
 800098a:	f023 0308 	bic.w	r3, r3, #8
 800098e:	b25a      	sxtb	r2, r3
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000996:	b25b      	sxtb	r3, r3
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	b25b      	sxtb	r3, r3
 800099e:	4313      	orrs	r3, r2
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 80009a6:	7fbb      	ldrb	r3, [r7, #30]
 80009a8:	3320      	adds	r3, #32
 80009aa:	443b      	add	r3, r7
 80009ac:	7f3a      	ldrb	r2, [r7, #28]
 80009ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80009b2:	7fbb      	ldrb	r3, [r7, #30]
 80009b4:	7efa      	ldrb	r2, [r7, #27]
 80009b6:	3320      	adds	r3, #32
 80009b8:	443b      	add	r3, r7
 80009ba:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80009be:	7fbb      	ldrb	r3, [r7, #30]
 80009c0:	3301      	adds	r3, #1
 80009c2:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d050      	beq.n	8000a70 <bme680_set_sensor_settings+0x21a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	2205      	movs	r2, #5
 80009d8:	2100      	movs	r1, #0
 80009da:	f001 f830 	bl	8001a3e <boundary_check>
 80009de:	4603      	mov	r3, r0
 80009e0:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80009e2:	2374      	movs	r3, #116	; 0x74
 80009e4:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80009e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d108      	bne.n	8000a00 <bme680_set_sensor_settings+0x1aa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80009ee:	f107 011b 	add.w	r1, r7, #27
 80009f2:	7f38      	ldrb	r0, [r7, #28]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	2201      	movs	r2, #1
 80009f8:	f7ff fe24 	bl	8000644 <bme680_get_regs>
 80009fc:	4603      	mov	r3, r0
 80009fe:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d00d      	beq.n	8000a26 <bme680_set_sensor_settings+0x1d0>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8000a0a:	7efb      	ldrb	r3, [r7, #27]
 8000a0c:	b25b      	sxtb	r3, r3
 8000a0e:	f003 031f 	and.w	r3, r3, #31
 8000a12:	b25a      	sxtb	r2, r3
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000a1a:	015b      	lsls	r3, r3, #5
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d010      	beq.n	8000a52 <bme680_set_sensor_settings+0x1fc>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8000a30:	7efb      	ldrb	r3, [r7, #27]
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	f023 031c 	bic.w	r3, r3, #28
 8000a38:	b25a      	sxtb	r2, r3
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	b25b      	sxtb	r3, r3
 8000a44:	f003 031c 	and.w	r3, r3, #28
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 8000a52:	7fbb      	ldrb	r3, [r7, #30]
 8000a54:	3320      	adds	r3, #32
 8000a56:	443b      	add	r3, r7
 8000a58:	7f3a      	ldrb	r2, [r7, #28]
 8000a5a:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000a5e:	7fbb      	ldrb	r3, [r7, #30]
 8000a60:	7efa      	ldrb	r2, [r7, #27]
 8000a62:	3320      	adds	r3, #32
 8000a64:	443b      	add	r3, r7
 8000a66:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000a6a:	7fbb      	ldrb	r3, [r7, #30]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d037      	beq.n	8000aea <bme680_set_sensor_settings+0x294>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	2205      	movs	r2, #5
 8000a84:	2100      	movs	r1, #0
 8000a86:	f000 ffda 	bl	8001a3e <boundary_check>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 8000a8e:	2372      	movs	r3, #114	; 0x72
 8000a90:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000a92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d108      	bne.n	8000aac <bme680_set_sensor_settings+0x256>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000a9a:	f107 011b 	add.w	r1, r7, #27
 8000a9e:	7f38      	ldrb	r0, [r7, #28]
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f7ff fdce 	bl	8000644 <bme680_get_regs>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8000aac:	7efb      	ldrb	r3, [r7, #27]
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	f023 0307 	bic.w	r3, r3, #7
 8000ab4:	b25a      	sxtb	r2, r3
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000abc:	b25b      	sxtb	r3, r3
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8000acc:	7fbb      	ldrb	r3, [r7, #30]
 8000ace:	3320      	adds	r3, #32
 8000ad0:	443b      	add	r3, r7
 8000ad2:	7f3a      	ldrb	r2, [r7, #28]
 8000ad4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000ad8:	7fbb      	ldrb	r3, [r7, #30]
 8000ada:	7efa      	ldrb	r2, [r7, #27]
 8000adc:	3320      	adds	r3, #32
 8000ade:	443b      	add	r3, r7
 8000ae0:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000ae4:	7fbb      	ldrb	r3, [r7, #30]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d060      	beq.n	8000bb6 <bme680_set_sensor_settings+0x360>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2201      	movs	r2, #1
 8000afe:	2100      	movs	r1, #0
 8000b00:	f000 ff9d 	bl	8001a3e <boundary_check>
 8000b04:	4603      	mov	r3, r0
 8000b06:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 8000b08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d109      	bne.n	8000b24 <bme680_set_sensor_settings+0x2ce>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	220a      	movs	r2, #10
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f000 ff8f 	bl	8001a3e <boundary_check>
 8000b20:	4603      	mov	r3, r0
 8000b22:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 8000b24:	2371      	movs	r3, #113	; 0x71
 8000b26:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000b28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d108      	bne.n	8000b42 <bme680_set_sensor_settings+0x2ec>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000b30:	f107 011b 	add.w	r1, r7, #27
 8000b34:	7f38      	ldrb	r0, [r7, #28]
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f7ff fd83 	bl	8000644 <bme680_get_regs>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d010      	beq.n	8000b6e <bme680_set_sensor_settings+0x318>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8000b4c:	7efb      	ldrb	r3, [r7, #27]
 8000b4e:	b25b      	sxtb	r3, r3
 8000b50:	f023 0310 	bic.w	r3, r3, #16
 8000b54:	b25a      	sxtb	r2, r3
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000b5c:	011b      	lsls	r3, r3, #4
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	f003 0310 	and.w	r3, r3, #16
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d00f      	beq.n	8000b98 <bme680_set_sensor_settings+0x342>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8000b78:	7efb      	ldrb	r3, [r7, #27]
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	f023 030f 	bic.w	r3, r3, #15
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8000b98:	7fbb      	ldrb	r3, [r7, #30]
 8000b9a:	3320      	adds	r3, #32
 8000b9c:	443b      	add	r3, r7
 8000b9e:	7f3a      	ldrb	r2, [r7, #28]
 8000ba0:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000ba4:	7fbb      	ldrb	r3, [r7, #30]
 8000ba6:	7efa      	ldrb	r2, [r7, #27]
 8000ba8:	3320      	adds	r3, #32
 8000baa:	443b      	add	r3, r7
 8000bac:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000bb0:	7fbb      	ldrb	r3, [r7, #30]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 8000bb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d109      	bne.n	8000bd2 <bme680_set_sensor_settings+0x37c>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8000bbe:	7fba      	ldrb	r2, [r7, #30]
 8000bc0:	f107 010c 	add.w	r1, r7, #12
 8000bc4:	f107 0014 	add.w	r0, r7, #20
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	f7ff fd7a 	bl	80006c2 <bme680_set_regs>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	7f7a      	ldrb	r2, [r7, #29]
 8000bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	return rslt;
 8000bda:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3720      	adds	r7, #32
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b084      	sub	sp, #16
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8000bf2:	2374      	movs	r3, #116	; 0x74
 8000bf4:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 ff5c 	bl	8001ab4 <null_ptr_check>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14c      	bne.n	8000ca2 <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8000c08:	f107 010d 	add.w	r1, r7, #13
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2074      	movs	r0, #116	; 0x74
 8000c12:	f7ff fd17 	bl	8000644 <bme680_get_regs>
 8000c16:	4603      	mov	r3, r0
 8000c18:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d119      	bne.n	8000c56 <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8000c22:	7b7b      	ldrb	r3, [r7, #13]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d012      	beq.n	8000c56 <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8000c30:	7b7b      	ldrb	r3, [r7, #13]
 8000c32:	f023 0303 	bic.w	r3, r3, #3
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8000c3a:	f107 010d 	add.w	r1, r7, #13
 8000c3e:	f107 000c 	add.w	r0, r7, #12
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f7ff fd3c 	bl	80006c2 <bme680_set_regs>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c52:	200a      	movs	r0, #10
 8000c54:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1d5      	bne.n	8000c08 <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d01d      	beq.n	8000ca2 <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8000c66:	7b7b      	ldrb	r3, [r7, #13]
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	f023 0303 	bic.w	r3, r3, #3
 8000c6e:	b25a      	sxtb	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 8000c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d109      	bne.n	8000ca2 <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8000c8e:	f107 010d 	add.w	r1, r7, #13
 8000c92:	f107 000c 	add.w	r0, r7, #12
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f7ff fd12 	bl	80006c2 <bme680_set_regs>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8000cba:	4a2c      	ldr	r2, [pc, #176]	; (8000d6c <bme680_get_profile_dur+0xbc>)
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cc4:	6018      	str	r0, [r3, #0]
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000cd0:	3318      	adds	r3, #24
 8000cd2:	443b      	add	r3, r7
 8000cd4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000cd8:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000ce0:	3318      	adds	r3, #24
 8000ce2:	443b      	add	r3, r7
 8000ce4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	4413      	add	r3, r2
 8000cee:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cf6:	3318      	adds	r3, #24
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	4413      	add	r3, r2
 8000d04:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8000d0c:	fb02 f303 	mul.w	r3, r2, r3
 8000d10:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8000d18:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	f603 1351 	addw	r3, r3, #2385	; 0x951
 8000d20:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000d28:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <bme680_get_profile_dur+0xc0>)
 8000d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d32:	099b      	lsrs	r3, r3, #6
 8000d34:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d008      	beq.n	8000d60 <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	881a      	ldrh	r2, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8000d58:	4413      	add	r3, r2
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	801a      	strh	r2, [r3, #0]
	}
}
 8000d60:	bf00      	nop
 8000d62:	371c      	adds	r7, #28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	08006a20 	.word	0x08006a20
 8000d70:	10624dd3 	.word	0x10624dd3

08000d74 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000d7e:	6838      	ldr	r0, [r7, #0]
 8000d80:	f000 fe98 	bl	8001ab4 <null_ptr_check>
 8000d84:	4603      	mov	r3, r0
 8000d86:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d117      	bne.n	8000dc0 <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8000d90:	6839      	ldr	r1, [r7, #0]
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 fd05 	bl	80017a2 <read_field_data>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8000d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10d      	bne.n	8000dc0 <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	da04      	bge.n	8000db8 <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000db6:	e003      	b.n	8000dc0 <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
	}

	return rslt;
 8000dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	; 0x38
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	2225      	movs	r2, #37	; 0x25
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f005 fa39 	bl	8006258 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 8000de6:	2300      	movs	r3, #0
 8000de8:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 fe62 	bl	8001ab4 <null_ptr_check>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BME680_OK) {
 8000df6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f040 810c 	bne.w	8001018 <get_calib_data+0x24c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 8000e00:	f107 010c 	add.w	r1, r7, #12
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2219      	movs	r2, #25
 8000e08:	2089      	movs	r0, #137	; 0x89
 8000e0a:	f7ff fc1b 	bl	8000644 <bme680_get_regs>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 8000e14:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d10b      	bne.n	8000e34 <get_calib_data+0x68>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	f103 0119 	add.w	r1, r3, #25
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2210      	movs	r2, #16
 8000e28:	20e1      	movs	r0, #225	; 0xe1
 8000e2a:	f7ff fc0b 	bl	8000644 <bme680_get_regs>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8000e34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	b21a      	sxth	r2, r3
 8000e3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	7b7b      	ldrb	r3, [r7, #13]
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	b25a      	sxtb	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8000e66:	7cbb      	ldrb	r3, [r7, #18]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	7c7b      	ldrb	r3, [r7, #17]
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 8000e7a:	7d3b      	ldrb	r3, [r7, #20]
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	7cfb      	ldrb	r3, [r7, #19]
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8000e8c:	7d7b      	ldrb	r3, [r7, #21]
 8000e8e:	b25a      	sxtb	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8000e96:	7e3b      	ldrb	r3, [r7, #24]
 8000e98:	021b      	lsls	r3, r3, #8
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b21a      	sxth	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8000ea8:	7ebb      	ldrb	r3, [r7, #26]
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	b21a      	sxth	r2, r3
 8000eae:	7e7b      	ldrb	r3, [r7, #25]
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 8000eba:	7f3b      	ldrb	r3, [r7, #28]
 8000ebc:	b25a      	sxtb	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8000ec4:	7efb      	ldrb	r3, [r7, #27]
 8000ec6:	b25a      	sxtb	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 8000ece:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	7ffb      	ldrb	r3, [r7, #31]
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 8000ee2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b21a      	sxth	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8000ef8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8000f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f06:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	4313      	orrs	r3, r2
 8000f18:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8000f20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f24:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8000f3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f40:	b25a      	sxtb	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 8000f46:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f4a:	b25a      	sxtb	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8000f50:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f54:	b25a      	sxtb	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8000f5a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 8000f62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f66:	b25a      	sxtb	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8000f6c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000f70:	b25a      	sxtb	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8000f76:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8000f8c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000f90:	b25a      	sxtb	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 8000f96:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d135      	bne.n	800100a <get_calib_data+0x23e>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8000f9e:	f107 010b 	add.w	r1, r7, #11
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f7ff fb4c 	bl	8000644 <bme680_get_regs>
 8000fac:	4603      	mov	r3, r0
 8000fae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8000fb2:	7afb      	ldrb	r3, [r7, #11]
 8000fb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da00      	bge.n	8000fbe <get_calib_data+0x1f2>
 8000fbc:	330f      	adds	r3, #15
 8000fbe:	111b      	asrs	r3, r3, #4
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if (rslt == BME680_OK) {
 8000fc8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d11c      	bne.n	800100a <get_calib_data+0x23e>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8000fd0:	f107 010b 	add.w	r1, r7, #11
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff fb33 	bl	8000644 <bme680_get_regs>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 8000fe4:	7afb      	ldrb	r3, [r7, #11]
 8000fe6:	b25a      	sxtb	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				if (rslt == BME680_OK)
 8000fee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d109      	bne.n	800100a <get_calib_data+0x23e>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8000ff6:	f107 010b 	add.w	r1, r7, #11
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2004      	movs	r0, #4
 8001000:	f7ff fb20 	bl	8000644 <bme680_get_regs>
 8001004:	4603      	mov	r3, r0
 8001006:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 800100a:	7afb      	ldrb	r3, [r7, #11]
 800100c:	b25b      	sxtb	r3, r3
 800100e:	111b      	asrs	r3, r3, #4
 8001010:	b25a      	sxtb	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	return rslt;
 8001018:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800101c:	4618      	mov	r0, r3
 800101e:	3738      	adds	r7, #56	; 0x38
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 fd41 	bl	8001ab4 <null_ptr_check>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d132      	bne.n	80010a4 <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 800103e:	2300      	movs	r3, #0
 8001040:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 8001042:	2300      	movs	r3, #0
 8001044:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800104c:	2b01      	cmp	r3, #1
 800104e:	d119      	bne.n	8001084 <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8001050:	235a      	movs	r3, #90	; 0x5a
 8001052:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 faff 	bl	8001660 <calc_heater_res>
 8001062:	4603      	mov	r3, r0
 8001064:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8001066:	2364      	movs	r3, #100	; 0x64
 8001068:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fb71 	bl	8001758 <calc_heater_dur>
 8001076:	4603      	mov	r3, r0
 8001078:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001082:	e001      	b.n	8001088 <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 8001088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d109      	bne.n	80010a4 <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8001090:	f107 0108 	add.w	r1, r7, #8
 8001094:	f107 000c 	add.w	r0, r7, #12
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2202      	movs	r2, #2
 800109c:	f7ff fb11 	bl	80006c2 <bme680_set_regs>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80010a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 80010b0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80010b4:	b091      	sub	sp, #68	; 0x44
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	61f8      	str	r0, [r7, #28]
 80010ba:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	10da      	asrs	r2, r3, #3
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	8adb      	ldrh	r3, [r3, #22]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	17da      	asrs	r2, r3, #31
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	17da      	asrs	r2, r3, #31
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	617a      	str	r2, [r7, #20]
 80010e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010ea:	460a      	mov	r2, r1
 80010ec:	fb02 f203 	mul.w	r2, r2, r3
 80010f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80010f6:	4601      	mov	r1, r0
 80010f8:	fb01 f303 	mul.w	r3, r1, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001100:	6939      	ldr	r1, [r7, #16]
 8001102:	fba2 4501 	umull	r4, r5, r2, r1
 8001106:	442b      	add	r3, r5
 8001108:	461d      	mov	r5, r3
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	0ae2      	lsrs	r2, r4, #11
 8001114:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8001118:	12eb      	asrs	r3, r5, #11
 800111a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 800111e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	f04f 0100 	mov.w	r1, #0
 800112a:	0850      	lsrs	r0, r2, #1
 800112c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8001130:	1059      	asrs	r1, r3, #1
 8001132:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	0862      	lsrs	r2, r4, #1
 8001140:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8001144:	106b      	asrs	r3, r5, #1
 8001146:	fb02 f501 	mul.w	r5, r2, r1
 800114a:	fb00 f403 	mul.w	r4, r0, r3
 800114e:	442c      	add	r4, r5
 8001150:	fba0 ab02 	umull	sl, fp, r0, r2
 8001154:	eb04 030b 	add.w	r3, r4, fp
 8001158:	469b      	mov	fp, r3
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	ea4f 321a 	mov.w	r2, sl, lsr #12
 8001166:	ea42 520b 	orr.w	r2, r2, fp, lsl #20
 800116a:	ea4f 332b 	mov.w	r3, fp, asr #12
 800116e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	17da      	asrs	r2, r3, #31
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	60fa      	str	r2, [r7, #12]
 8001180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001182:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001186:	462a      	mov	r2, r5
 8001188:	fb02 f203 	mul.w	r2, r2, r3
 800118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118e:	4621      	mov	r1, r4
 8001190:	fb01 f303 	mul.w	r3, r1, r3
 8001194:	4413      	add	r3, r2
 8001196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001198:	4621      	mov	r1, r4
 800119a:	fba2 8901 	umull	r8, r9, r2, r1
 800119e:	444b      	add	r3, r9
 80011a0:	4699      	mov	r9, r3
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	ea4f 3298 	mov.w	r2, r8, lsr #14
 80011ae:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 80011b2:	ea4f 33a9 	mov.w	r3, r9, asr #14
 80011b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	dev->calib.t_fine = (int32_t) (var2 + var3);
 80011ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011be:	4413      	add	r3, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	3380      	adds	r3, #128	; 0x80
 80011d2:	121b      	asrs	r3, r3, #8
 80011d4:	84fb      	strh	r3, [r7, #38]	; 0x26

	return calc_temp;
 80011d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3744      	adds	r7, #68	; 0x44
 80011de:	46bd      	mov	sp, r7
 80011e0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80011e4:	4770      	bx	lr

080011e6 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b087      	sub	sp, #28
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	105b      	asrs	r3, r3, #1
 80011f6:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 80011fa:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	109b      	asrs	r3, r3, #2
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	1092      	asrs	r2, r2, #2
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	f992 2026 	ldrsb.w	r2, [r2, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001210:	fb02 f303 	mul.w	r3, r2, r3
 8001214:	109b      	asrs	r3, r3, #2
 8001216:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800121e:	461a      	mov	r2, r3
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	fb02 f303 	mul.w	r3, r2, r3
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	109a      	asrs	r2, r3, #2
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	109b      	asrs	r3, r3, #2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	1092      	asrs	r2, r2, #2
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	f992 2020 	ldrsb.w	r2, [r2, #32]
 8001252:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001254:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001258:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001260:	4619      	mov	r1, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	fb01 f303 	mul.w	r3, r1, r3
 8001268:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800126a:	4413      	add	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	149b      	asrs	r3, r3, #18
 8001272:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	8b92      	ldrh	r2, [r2, #28]
 800127e:	fb02 f303 	mul.w	r3, r2, r3
 8001282:	13db      	asrs	r3, r3, #15
 8001284:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800128c:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	131b      	asrs	r3, r3, #12
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	461a      	mov	r2, r3
 8001298:	f640 4335 	movw	r3, #3125	; 0xc35
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a8:	db06      	blt.n	80012b8 <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	e005      	b.n	80012c4 <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005a      	lsls	r2, r3, #1
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	fb92 f3f3 	sdiv	r3, r2, r3
 80012c2:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80012ca:	4619      	mov	r1, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 80012d8:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80012da:	fb01 f303 	mul.w	r3, r1, r3
 80012de:	131b      	asrs	r3, r3, #12
 80012e0:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	135b      	asrs	r3, r3, #13
 80012f2:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	121b      	asrs	r3, r3, #8
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	1212      	asrs	r2, r2, #8
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001304:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 800130e:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001312:	145b      	asrs	r3, r3, #17
 8001314:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	441a      	add	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
 8001326:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001328:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 800132a:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	4413      	add	r3, r2
 8001330:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 8001332:	697b      	ldr	r3, [r7, #20]

}
 8001334:	4618      	mov	r0, r3
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8001340:	b490      	push	{r4, r7}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	3380      	adds	r3, #128	; 0x80
 8001358:	121b      	asrs	r3, r3, #8
 800135a:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	891b      	ldrh	r3, [r3, #8]
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800136c:	4619      	mov	r1, r3
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	fb01 f303 	mul.w	r3, r1, r3
 8001374:	493d      	ldr	r1, [pc, #244]	; (800146c <calc_humidity+0x12c>)
 8001376:	fb81 0103 	smull	r0, r1, r1, r3
 800137a:	1149      	asrs	r1, r1, #5
 800137c:	17db      	asrs	r3, r3, #31
 800137e:	1acb      	subs	r3, r1, r3
 8001380:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	895b      	ldrh	r3, [r3, #10]
 800138a:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8001392:	461a      	mov	r2, r3
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4a34      	ldr	r2, [pc, #208]	; (800146c <calc_humidity+0x12c>)
 800139c:	fb82 1203 	smull	r1, r2, r2, r3
 80013a0:	1152      	asrs	r2, r2, #5
 80013a2:	17db      	asrs	r3, r3, #31
 80013a4:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80013ac:	4619      	mov	r1, r3
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	fb01 f303 	mul.w	r3, r1, r3
 80013b4:	492d      	ldr	r1, [pc, #180]	; (800146c <calc_humidity+0x12c>)
 80013b6:	fb81 4103 	smull	r4, r1, r1, r3
 80013ba:	1149      	asrs	r1, r1, #5
 80013bc:	17db      	asrs	r3, r3, #31
 80013be:	1acb      	subs	r3, r1, r3
 80013c0:	6a39      	ldr	r1, [r7, #32]
 80013c2:	fb01 f303 	mul.w	r3, r1, r3
 80013c6:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 80013c8:	4928      	ldr	r1, [pc, #160]	; (800146c <calc_humidity+0x12c>)
 80013ca:	fb81 4103 	smull	r4, r1, r1, r3
 80013ce:	1149      	asrs	r1, r1, #5
 80013d0:	17db      	asrs	r3, r3, #31
 80013d2:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80013d4:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 80013d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 80013da:	fb00 f303 	mul.w	r3, r0, r3
	var2 = ((int32_t) dev->calib.par_h2
 80013de:	129b      	asrs	r3, r3, #10
 80013e0:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	fb02 f303 	mul.w	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	7bdb      	ldrb	r3, [r3, #15]
 80013f0:	01db      	lsls	r3, r3, #7
 80013f2:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80013fa:	461a      	mov	r2, r3
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	fb02 f303 	mul.w	r3, r2, r3
 8001402:	4a1a      	ldr	r2, [pc, #104]	; (800146c <calc_humidity+0x12c>)
 8001404:	fb82 1203 	smull	r1, r2, r2, r3
 8001408:	1152      	asrs	r2, r2, #5
 800140a:	17db      	asrs	r3, r3, #31
 800140c:	1ad2      	subs	r2, r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4413      	add	r3, r2
 8001412:	111b      	asrs	r3, r3, #4
 8001414:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	139b      	asrs	r3, r3, #14
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	1392      	asrs	r2, r2, #14
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	129b      	asrs	r3, r3, #10
 8001424:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	105b      	asrs	r3, r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4413      	add	r3, r2
 8001438:	129b      	asrs	r3, r3, #10
 800143a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	131b      	asrs	r3, r3, #12
 8001444:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	4a09      	ldr	r2, [pc, #36]	; (8001470 <calc_humidity+0x130>)
 800144a:	4293      	cmp	r3, r2
 800144c:	dd02      	ble.n	8001454 <calc_humidity+0x114>
		calc_hum = 100000;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <calc_humidity+0x130>)
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
 8001452:	e004      	b.n	800145e <calc_humidity+0x11e>
	else if (calc_hum < 0)
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	2b00      	cmp	r3, #0
 8001458:	da01      	bge.n	800145e <calc_humidity+0x11e>
		calc_hum = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001460:	4618      	mov	r0, r3
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bc90      	pop	{r4, r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	51eb851f 	.word	0x51eb851f
 8001470:	000186a0 	.word	0x000186a0

08001474 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8001474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001478:	b0bc      	sub	sp, #240	; 0xf0
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	64ba      	str	r2, [r7, #72]	; 0x48
 8001480:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001484:	460b      	mov	r3, r1
 8001486:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 800148a:	4b73      	ldr	r3, [pc, #460]	; (8001658 <calc_gas_resistance+0x1e4>)
 800148c:	f107 0594 	add.w	r5, r7, #148	; 0x94
 8001490:	461c      	mov	r4, r3
 8001492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 80014a6:	4b6d      	ldr	r3, [pc, #436]	; (800165c <calc_gas_resistance+0x1e8>)
 80014a8:	f107 0554 	add.w	r5, r7, #84	; 0x54
 80014ac:	461c      	mov	r4, r3
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80014c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014c4:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	17da      	asrs	r2, r3, #31
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80014ce:	63fa      	str	r2, [r7, #60]	; 0x3c
 80014d0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80014d4:	4622      	mov	r2, r4
 80014d6:	462b      	mov	r3, r5
 80014d8:	f04f 0000 	mov.w	r0, #0
 80014dc:	f04f 0100 	mov.w	r1, #0
 80014e0:	0099      	lsls	r1, r3, #2
 80014e2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014e6:	0090      	lsls	r0, r2, #2
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4621      	mov	r1, r4
 80014ee:	1851      	adds	r1, r2, r1
 80014f0:	6339      	str	r1, [r7, #48]	; 0x30
 80014f2:	4629      	mov	r1, r5
 80014f4:	eb43 0101 	adc.w	r1, r3, r1
 80014f8:	6379      	str	r1, [r7, #52]	; 0x34
 80014fa:	f240 533c 	movw	r3, #1340	; 0x53c
 80014fe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001502:	4602      	mov	r2, r0
 8001504:	18d3      	adds	r3, r2, r3
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
 8001508:	460b      	mov	r3, r1
 800150a:	f143 0300 	adc.w	r3, r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
		((int64_t) lookupTable1[gas_range])) >> 16;
 8001510:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	33a8      	adds	r3, #168	; 0xa8
 8001518:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800151c:	4413      	add	r3, r2
 800151e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001522:	2200      	movs	r2, #0
 8001524:	643b      	str	r3, [r7, #64]	; 0x40
 8001526:	647a      	str	r2, [r7, #68]	; 0x44
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001528:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800152c:	460b      	mov	r3, r1
 800152e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001532:	4622      	mov	r2, r4
 8001534:	fb02 f203 	mul.w	r2, r2, r3
 8001538:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 800153c:	462b      	mov	r3, r5
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
 8001542:	4621      	mov	r1, r4
 8001544:	fb01 f303 	mul.w	r3, r1, r3
 8001548:	4413      	add	r3, r2
 800154a:	4622      	mov	r2, r4
 800154c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800154e:	fba2 8901 	umull	r8, r9, r2, r1
 8001552:	444b      	add	r3, r9
 8001554:	4699      	mov	r9, r3
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001562:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001566:	ea4f 4329 	mov.w	r3, r9, asr #16
 800156a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 800156e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001572:	2200      	movs	r2, #0
 8001574:	623b      	str	r3, [r7, #32]
 8001576:	627a      	str	r2, [r7, #36]	; 0x24
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001584:	4629      	mov	r1, r5
 8001586:	03cb      	lsls	r3, r1, #15
 8001588:	4621      	mov	r1, r4
 800158a:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 800158e:	4621      	mov	r1, r4
 8001590:	03ca      	lsls	r2, r1, #15
 8001592:	f112 417f 	adds.w	r1, r2, #4278190080	; 0xff000000
 8001596:	61b9      	str	r1, [r7, #24]
 8001598:	f143 33ff 	adc.w	r3, r3, #4294967295
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80015a2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80015a6:	4621      	mov	r1, r4
 80015a8:	1889      	adds	r1, r1, r2
 80015aa:	6139      	str	r1, [r7, #16]
 80015ac:	4629      	mov	r1, r5
 80015ae:	eb43 0101 	adc.w	r1, r3, r1
 80015b2:	6179      	str	r1, [r7, #20]
 80015b4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80015b8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 80015bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	33a8      	adds	r3, #168	; 0xa8
 80015c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80015c8:	4413      	add	r3, r2
 80015ca:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80015ce:	2200      	movs	r2, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	60fa      	str	r2, [r7, #12]
 80015d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80015d8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015dc:	462a      	mov	r2, r5
 80015de:	fb02 f203 	mul.w	r2, r2, r3
 80015e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015e6:	4621      	mov	r1, r4
 80015e8:	fb01 f303 	mul.w	r3, r1, r3
 80015ec:	4413      	add	r3, r2
 80015ee:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80015f2:	4621      	mov	r1, r4
 80015f4:	fba2 ab01 	umull	sl, fp, r2, r1
 80015f8:	445b      	add	r3, fp
 80015fa:	469b      	mov	fp, r3
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	ea4f 225a 	mov.w	r2, sl, lsr #9
 8001608:	ea42 52cb 	orr.w	r2, r2, fp, lsl #23
 800160c:	ea4f 236b 	mov.w	r3, fp, asr #9
 8001610:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8001614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	0842      	lsrs	r2, r0, #1
 8001622:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001626:	104b      	asrs	r3, r1, #1
 8001628:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800162c:	1814      	adds	r4, r2, r0
 800162e:	603c      	str	r4, [r7, #0]
 8001630:	414b      	adcs	r3, r1
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163c:	f7fe fe18 	bl	8000270 <__aeabi_ldivmod>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4613      	mov	r3, r2
 8001646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	return calc_gas_res;
 800164a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 800164e:	4618      	mov	r0, r3
 8001650:	37f0      	adds	r7, #240	; 0xf0
 8001652:	46bd      	mov	sp, r7
 8001654:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001658:	08006a28 	.word	0x08006a28
 800165c:	08006a68 	.word	0x08006a68

08001660 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 8001660:	b480      	push	{r7}
 8001662:	b08b      	sub	sp, #44	; 0x2c
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001672:	d902      	bls.n	800167a <calc_heater_res+0x1a>
		temp = 400;
 8001674:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001678:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001680:	461a      	mov	r2, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	4a2f      	ldr	r2, [pc, #188]	; (800174c <calc_heater_res+0xec>)
 800168e:	fb82 1203 	smull	r1, r2, r2, r3
 8001692:	1192      	asrs	r2, r2, #6
 8001694:	17db      	asrs	r3, r3, #31
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80016a2:	f503 7244 	add.w	r2, r3, #784	; 0x310
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016ac:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 80016b0:	f203 1399 	addw	r3, r3, #409	; 0x199
 80016b4:	88f9      	ldrh	r1, [r7, #6]
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	4925      	ldr	r1, [pc, #148]	; (8001750 <calc_heater_res+0xf0>)
 80016bc:	fb81 0103 	smull	r0, r1, r1, r3
 80016c0:	10c9      	asrs	r1, r1, #3
 80016c2:	17db      	asrs	r3, r3, #31
 80016c4:	1acb      	subs	r3, r1, r3
 80016c6:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 80016ca:	4921      	ldr	r1, [pc, #132]	; (8001750 <calc_heater_res+0xf0>)
 80016cc:	fb81 0103 	smull	r0, r1, r1, r3
 80016d0:	1089      	asrs	r1, r1, #2
 80016d2:	17db      	asrs	r3, r3, #31
 80016d4:	1acb      	subs	r3, r1, r3
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	0fda      	lsrs	r2, r3, #31
 80016e0:	4413      	add	r3, r2
 80016e2:	105b      	asrs	r3, r3, #1
 80016e4:	461a      	mov	r2, r3
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	4413      	add	r3, r2
 80016ea:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016f2:	3304      	adds	r3, #4
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016fa:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001702:	461a      	mov	r2, r3
 8001704:	4613      	mov	r3, r2
 8001706:	019b      	lsls	r3, r3, #6
 8001708:	4413      	add	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001712:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	fb92 f3f3 	sdiv	r3, r2, r3
 800171c:	f1a3 02fa 	sub.w	r2, r3, #250	; 0xfa
 8001720:	4613      	mov	r3, r2
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	4413      	add	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	3332      	adds	r3, #50	; 0x32
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <calc_heater_res+0xf4>)
 8001730:	fb82 1203 	smull	r1, r2, r2, r3
 8001734:	1152      	asrs	r2, r2, #5
 8001736:	17db      	asrs	r3, r3, #31
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	372c      	adds	r7, #44	; 0x2c
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	10624dd3 	.word	0x10624dd3
 8001750:	66666667 	.word	0x66666667
 8001754:	51eb851f 	.word	0x51eb851f

08001758 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 800176c:	d308      	bcc.n	8001780 <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 800176e:	23ff      	movs	r3, #255	; 0xff
 8001770:	73bb      	strb	r3, [r7, #14]
 8001772:	e00f      	b.n	8001794 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	3301      	adds	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	2b3f      	cmp	r3, #63	; 0x3f
 8001784:	d8f6      	bhi.n	8001774 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	019b      	lsls	r3, r3, #6
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4413      	add	r3, r2
 8001792:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8001794:	7bbb      	ldrb	r3, [r7, #14]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b08a      	sub	sp, #40	; 0x28
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 80017be:	230a      	movs	r3, #10
 80017c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80017c4:	6838      	ldr	r0, [r7, #0]
 80017c6:	f000 f975 	bl	8001ab4 <null_ptr_check>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	do {
		if (rslt == BME680_OK) {
 80017d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f040 8087 	bne.w	80018e8 <read_field_data+0x146>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80017da:	f107 0108 	add.w	r1, r7, #8
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	220f      	movs	r2, #15
 80017e2:	201d      	movs	r0, #29
 80017e4:	f7fe ff2e 	bl	8000644 <bme680_get_regs>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80017ee:	7a3b      	ldrb	r3, [r7, #8]
 80017f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80017fa:	7a3b      	ldrb	r3, [r7, #8]
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	b2da      	uxtb	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 8001806:	7a7a      	ldrb	r2, [r7, #9]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800180c:	7abb      	ldrb	r3, [r7, #10]
 800180e:	031a      	lsls	r2, r3, #12
 8001810:	7afb      	ldrb	r3, [r7, #11]
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 8001816:	7b3a      	ldrb	r2, [r7, #12]
 8001818:	0912      	lsrs	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800181c:	4313      	orrs	r3, r2
 800181e:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8001820:	7b7b      	ldrb	r3, [r7, #13]
 8001822:	031a      	lsls	r2, r3, #12
 8001824:	7bbb      	ldrb	r3, [r7, #14]
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	0912      	lsrs	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8001830:	4313      	orrs	r3, r2
 8001832:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8001834:	7c3b      	ldrb	r3, [r7, #16]
 8001836:	b29b      	uxth	r3, r3
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	b29a      	uxth	r2, r3
 800183c:	7c7b      	ldrb	r3, [r7, #17]
 800183e:	b29b      	uxth	r3, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8001844:	7d7b      	ldrb	r3, [r7, #21]
 8001846:	b29b      	uxth	r3, r3
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	b29a      	uxth	r2, r3
 800184c:	7dbb      	ldrb	r3, [r7, #22]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	b2db      	uxtb	r3, r3
 8001852:	b29b      	uxth	r3, r3
 8001854:	4313      	orrs	r3, r2
 8001856:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8001858:	7dbb      	ldrb	r3, [r7, #22]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b25a      	sxtb	r2, r3
 8001866:	7dbb      	ldrb	r3, [r7, #22]
 8001868:	b25b      	sxtb	r3, r3
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	b25b      	sxtb	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	b25b      	sxtb	r3, r3
 8001874:	b2da      	uxtb	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b25a      	sxtb	r2, r3
 8001880:	7dbb      	ldrb	r3, [r7, #22]
 8001882:	b25b      	sxtb	r3, r3
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	b25b      	sxtb	r3, r3
 800188a:	4313      	orrs	r3, r2
 800188c:	b25b      	sxtb	r3, r3
 800188e:	b2da      	uxtb	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b25b      	sxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	da20      	bge.n	80018e0 <read_field_data+0x13e>
				data->temperature = calc_temperature(adc_temp, dev);
 800189e:	6839      	ldr	r1, [r7, #0]
 80018a0:	69f8      	ldr	r0, [r7, #28]
 80018a2:	f7ff fc05 	bl	80010b0 <calc_temperature>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 80018ae:	6839      	ldr	r1, [r7, #0]
 80018b0:	6a38      	ldr	r0, [r7, #32]
 80018b2:	f7ff fc98 	bl	80011e6 <calc_pressure>
 80018b6:	4602      	mov	r2, r0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 80018bc:	8b7b      	ldrh	r3, [r7, #26]
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fd3d 	bl	8001340 <calc_humidity>
 80018c6:	4602      	mov	r2, r0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80018cc:	7df9      	ldrb	r1, [r7, #23]
 80018ce:	8b3b      	ldrh	r3, [r7, #24]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fdce 	bl	8001474 <calc_gas_resistance>
 80018d8:	4602      	mov	r2, r0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	611a      	str	r2, [r3, #16]
				break;
 80018de:	e00d      	b.n	80018fc <read_field_data+0x15a>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e4:	200a      	movs	r0, #10
 80018e6:	4798      	blx	r3
		}
		tries--;
 80018e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ec:	3b01      	subs	r3, #1
 80018ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	} while (tries);
 80018f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f47f af6a 	bne.w	80017d0 <read_field_data+0x2e>

	if (!tries)
 80018fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001900:	2b00      	cmp	r3, #0
 8001902:	d102      	bne.n	800190a <read_field_data+0x168>
		rslt = BME680_W_NO_NEW_DATA;
 8001904:	2302      	movs	r3, #2
 8001906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return rslt;
 800190a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800190e:	4618      	mov	r0, r3
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 8001916:	b590      	push	{r4, r7, lr}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	6039      	str	r1, [r7, #0]
 8001920:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 8001922:	6838      	ldr	r0, [r7, #0]
 8001924:	f000 f8c6 	bl	8001ab4 <null_ptr_check>
 8001928:	4603      	mov	r3, r0
 800192a:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 800192c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d14f      	bne.n	80019d4 <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	da02      	bge.n	8001942 <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 800193c:	2300      	movs	r3, #0
 800193e:	73bb      	strb	r3, [r7, #14]
 8001940:	e001      	b.n	8001946 <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 8001942:	2310      	movs	r3, #16
 8001944:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	78db      	ldrb	r3, [r3, #3]
 800194a:	7bba      	ldrb	r2, [r7, #14]
 800194c:	429a      	cmp	r2, r3
 800194e:	d041      	beq.n	80019d4 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	7bba      	ldrb	r2, [r7, #14]
 8001954:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	7858      	ldrb	r0, [r3, #1]
 800195e:	f107 020d 	add.w	r2, r7, #13
 8001962:	2301      	movs	r3, #1
 8001964:	21f3      	movs	r1, #243	; 0xf3
 8001966:	47a0      	blx	r4
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (dev->com_rslt != 0)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 800197c:	23fe      	movs	r3, #254	; 0xfe
 800197e:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 8001980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d125      	bne.n	80019d4 <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8001988:	7b7b      	ldrb	r3, [r7, #13]
 800198a:	f023 0310 	bic.w	r3, r3, #16
 800198e:	b2db      	uxtb	r3, r3
 8001990:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	78db      	ldrb	r3, [r3, #3]
 8001996:	b25b      	sxtb	r3, r3
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	b25a      	sxtb	r2, r3
 800199e:	7b7b      	ldrb	r3, [r7, #13]
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	4313      	orrs	r3, r2
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	7858      	ldrb	r0, [r3, #1]
 80019b2:	f107 020d 	add.w	r2, r7, #13
 80019b6:	2301      	movs	r3, #1
 80019b8:	2173      	movs	r1, #115	; 0x73
 80019ba:	47a0      	blx	r4
 80019bc:	4603      	mov	r3, r0
 80019be:	461a      	mov	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 80019d0:	23fe      	movs	r3, #254	; 0xfe
 80019d2:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 80019d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd90      	pop	{r4, r7, pc}

080019e0 <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f863 	bl	8001ab4 <null_ptr_check>
 80019ee:	4603      	mov	r3, r0
 80019f0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d11b      	bne.n	8001a32 <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7858      	ldrb	r0, [r3, #1]
 8001a02:	f107 020e 	add.w	r2, r7, #14
 8001a06:	2301      	movs	r3, #1
 8001a08:	21f3      	movs	r1, #243	; 0xf3
 8001a0a:	47a0      	blx	r4
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 8001a20:	23fe      	movs	r3, #254	; 0xfe
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e005      	b.n	8001a32 <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd90      	pop	{r4, r7, pc}

08001a3e <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b087      	sub	sp, #28
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	72fb      	strb	r3, [r7, #11]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d022      	beq.n	8001aa0 <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	7afa      	ldrb	r2, [r7, #11]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d90b      	bls.n	8001a7c <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	7afa      	ldrb	r2, [r7, #11]
 8001a68:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	7aba      	ldrb	r2, [r7, #10]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d20e      	bcs.n	8001aa4 <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	7aba      	ldrb	r2, [r7, #10]
 8001a8a:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a9e:	e001      	b.n	8001aa4 <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8001aa0:	23ff      	movs	r3, #255	; 0xff
 8001aa2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <null_ptr_check+0x26>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <null_ptr_check+0x26>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <null_ptr_check+0x26>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 8001ada:	23ff      	movs	r3, #255	; 0xff
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e001      	b.n	8001ae4 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af4:	b5b0      	push	{r4, r5, r7, lr}
 8001af6:	b096      	sub	sp, #88	; 0x58
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001afa:	f000 fccc 	bl	8002496 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afe:	f000 f8d3 	bl	8001ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b02:	f000 fa03 	bl	8001f0c <MX_GPIO_Init>
  MX_USART2_Init();
 8001b06:	f000 f9d5 	bl	8001eb4 <MX_USART2_Init>
  MX_I2C1_Init();
 8001b0a:	f000 f993 	bl	8001e34 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001b0e:	f000 f92d 	bl	8001d6c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */



  // Configure the BME680 driver
  gas_sensor.dev_id = BME680_I2C_ADDR_SECONDARY;
 8001b12:	4b58      	ldr	r3, [pc, #352]	; (8001c74 <main+0x180>)
 8001b14:	2277      	movs	r2, #119	; 0x77
 8001b16:	705a      	strb	r2, [r3, #1]
  gas_sensor.intf = BME680_I2C_INTF;
 8001b18:	4b56      	ldr	r3, [pc, #344]	; (8001c74 <main+0x180>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	709a      	strb	r2, [r3, #2]
  gas_sensor.read = bme680I2cRead;
 8001b1e:	4b55      	ldr	r3, [pc, #340]	; (8001c74 <main+0x180>)
 8001b20:	4a55      	ldr	r2, [pc, #340]	; (8001c78 <main+0x184>)
 8001b22:	649a      	str	r2, [r3, #72]	; 0x48
  gas_sensor.write = bme680I2cWrite;
 8001b24:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <main+0x180>)
 8001b26:	4a55      	ldr	r2, [pc, #340]	; (8001c7c <main+0x188>)
 8001b28:	64da      	str	r2, [r3, #76]	; 0x4c
  gas_sensor.delay_ms = HAL_Delay;
 8001b2a:	4b52      	ldr	r3, [pc, #328]	; (8001c74 <main+0x180>)
 8001b2c:	4a54      	ldr	r2, [pc, #336]	; (8001c80 <main+0x18c>)
 8001b2e:	651a      	str	r2, [r3, #80]	; 0x50
  gas_sensor.amb_temp = 25;
 8001b30:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <main+0x180>)
 8001b32:	2219      	movs	r2, #25
 8001b34:	711a      	strb	r2, [r3, #4]

  // Initialize the driver
  if (bme680_init(&gas_sensor) != BME680_OK) {
 8001b36:	484f      	ldr	r0, [pc, #316]	; (8001c74 <main+0x180>)
 8001b38:	f7fe fd50 	bl	80005dc <bme680_init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00a      	beq.n	8001b58 <main+0x64>
    char bme_msg[] = "BME680 Initialization Error\r\n";
 8001b42:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <main+0x190>)
 8001b44:	f107 0420 	add.w	r4, r7, #32
 8001b48:	461d      	mov	r5, r3
 8001b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b52:	c407      	stmia	r4!, {r0, r1, r2}
 8001b54:	8023      	strh	r3, [r4, #0]
 8001b56:	e00b      	b.n	8001b70 <main+0x7c>
    //noteDebugSerialOutput(bme_msg);
  } else {
    char bme_msg[] = "BME680 Initialized and Ready\r\n";
 8001b58:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <main+0x194>)
 8001b5a:	463c      	mov	r4, r7
 8001b5c:	461d      	mov	r5, r3
 8001b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b66:	c407      	stmia	r4!, {r0, r1, r2}
 8001b68:	8023      	strh	r3, [r4, #0]
 8001b6a:	3402      	adds	r4, #2
 8001b6c:	0c1b      	lsrs	r3, r3, #16
 8001b6e:	7023      	strb	r3, [r4, #0]
    //noteDebugSerialOutput(bme_msg);
  }

  // Select desired oversampling rates
  gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 8001b70:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <main+0x180>)
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  gas_sensor.tph_sett.os_pres = BME680_OS_4X;
 8001b78:	4b3e      	ldr	r3, [pc, #248]	; (8001c74 <main+0x180>)
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  gas_sensor.tph_sett.os_temp = BME680_OS_8X;
 8001b80:	4b3c      	ldr	r3, [pc, #240]	; (8001c74 <main+0x180>)
 8001b82:	2204      	movs	r2, #4
 8001b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  // Set sensor to "always on"
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <main+0x180>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  // Set oversampling settings
  uint8_t required_settings = (BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL);
 8001b90:	2307      	movs	r3, #7
 8001b92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  rslt = bme680_set_sensor_settings(required_settings, &gas_sensor);
 8001b96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	4935      	ldr	r1, [pc, #212]	; (8001c74 <main+0x180>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fe59 	bl	8000856 <bme680_set_sensor_settings>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <main+0x198>)
 8001baa:	701a      	strb	r2, [r3, #0]

  // Set sensor mode
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8001bac:	4831      	ldr	r0, [pc, #196]	; (8001c74 <main+0x180>)
 8001bae:	f7ff f81a 	bl	8000be6 <bme680_set_sensor_mode>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <main+0x198>)
 8001bb8:	701a      	strb	r2, [r3, #0]

  // Query minimum sampling period
  uint16_t min_sampling_period;
  bme680_get_profile_dur(&min_sampling_period, &gas_sensor);
 8001bba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bbe:	492d      	ldr	r1, [pc, #180]	; (8001c74 <main+0x180>)
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff f875 	bl	8000cb0 <bme680_get_profile_dur>
  while (1)
  {
    /* USER CODE END WHILE */

	  // Allow BME680 to sample environment
	  HAL_Delay(min_sampling_period);
 8001bc6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fcd8 	bl	8002580 <HAL_Delay>

	  // Query the sample data
	  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8001bd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bd4:	4927      	ldr	r1, [pc, #156]	; (8001c74 <main+0x180>)
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f8cc 	bl	8000d74 <bme680_get_sensor_data>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <main+0x198>)
 8001be2:	701a      	strb	r2, [r3, #0]

	  // Format results into a human readable string
	  sprintf(i2c_reading_buf,
	    "T: %u.%u degC\r\n",
	    (unsigned int)data.temperature / 100,
 8001be4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001be8:	461a      	mov	r2, r3
	  sprintf(i2c_reading_buf,
 8001bea:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <main+0x19c>)
 8001bec:	fba3 2302 	umull	r2, r3, r3, r2
 8001bf0:	0959      	lsrs	r1, r3, #5
	    (unsigned int)data.temperature % 100);
 8001bf2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001bf6:	461a      	mov	r2, r3
	  sprintf(i2c_reading_buf,
 8001bf8:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <main+0x19c>)
 8001bfa:	fba3 0302 	umull	r0, r3, r3, r2
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2064      	movs	r0, #100	; 0x64
 8001c02:	fb00 f303 	mul.w	r3, r0, r3
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	460a      	mov	r2, r1
 8001c0a:	4922      	ldr	r1, [pc, #136]	; (8001c94 <main+0x1a0>)
 8001c0c:	4822      	ldr	r0, [pc, #136]	; (8001c98 <main+0x1a4>)
 8001c0e:	f004 fb03 	bl	8006218 <siprintf>

	  HAL_USART_Transmit(&husart2, i2c_reading_buf, 27, 10);
 8001c12:	230a      	movs	r3, #10
 8001c14:	221b      	movs	r2, #27
 8001c16:	4920      	ldr	r1, [pc, #128]	; (8001c98 <main+0x1a4>)
 8001c18:	4820      	ldr	r0, [pc, #128]	; (8001c9c <main+0x1a8>)
 8001c1a:	f003 fe1b 	bl	8005854 <HAL_USART_Transmit>

	  sprintf(i2c_reading_buf,
	    "H: %u.%u %%rH\r\n",
	    (unsigned int)data.humidity / 1000,
 8001c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	  sprintf(i2c_reading_buf,
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <main+0x1ac>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	0999      	lsrs	r1, r3, #6
	    (unsigned int)data.humidity % 1000);
 8001c28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
	  sprintf(i2c_reading_buf,
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <main+0x1ac>)
 8001c2c:	fba3 0302 	umull	r0, r3, r3, r2
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c36:	fb00 f303 	mul.w	r3, r0, r3
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	460a      	mov	r2, r1
 8001c3e:	4919      	ldr	r1, [pc, #100]	; (8001ca4 <main+0x1b0>)
 8001c40:	4815      	ldr	r0, [pc, #84]	; (8001c98 <main+0x1a4>)
 8001c42:	f004 fae9 	bl	8006218 <siprintf>

	  // Publish result to connected PC
	  HAL_USART_Transmit(&husart2, i2c_reading_buf, 27, 10);
 8001c46:	230a      	movs	r3, #10
 8001c48:	221b      	movs	r2, #27
 8001c4a:	4913      	ldr	r1, [pc, #76]	; (8001c98 <main+0x1a4>)
 8001c4c:	4813      	ldr	r0, [pc, #76]	; (8001c9c <main+0x1a8>)
 8001c4e:	f003 fe01 	bl	8005854 <HAL_USART_Transmit>

	  // Wait between samples
	  HAL_Delay(DELAY_PERIOD_MS);
 8001c52:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c56:	f000 fc93 	bl	8002580 <HAL_Delay>

	  // Request the next sample
	  if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <main+0x180>)
 8001c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d1b0      	bne.n	8001bc6 <main+0xd2>
	    rslt = bme680_set_sensor_mode(&gas_sensor);
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <main+0x180>)
 8001c66:	f7fe ffbe 	bl	8000be6 <bme680_set_sensor_mode>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <main+0x198>)
 8001c70:	701a      	strb	r2, [r3, #0]
  {
 8001c72:	e7a8      	b.n	8001bc6 <main+0xd2>
 8001c74:	20000180 	.word	0x20000180
 8001c78:	08001fa1 	.word	0x08001fa1
 8001c7c:	08002021 	.word	0x08002021
 8001c80:	08002581 	.word	0x08002581
 8001c84:	08006ac8 	.word	0x08006ac8
 8001c88:	08006ae8 	.word	0x08006ae8
 8001c8c:	2000023c 	.word	0x2000023c
 8001c90:	51eb851f 	.word	0x51eb851f
 8001c94:	08006aa8 	.word	0x08006aa8
 8001c98:	200001d8 	.word	0x200001d8
 8001c9c:	20000130 	.word	0x20000130
 8001ca0:	10624dd3 	.word	0x10624dd3
 8001ca4:	08006ab8 	.word	0x08006ab8

08001ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b096      	sub	sp, #88	; 0x58
 8001cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	2244      	movs	r2, #68	; 0x44
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f004 face 	bl	8006258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cce:	f002 fbf1 	bl	80044b4 <HAL_PWREx_ControlVoltageScaling>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001cd8:	f000 f9e0 	bl	800209c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001cdc:	f002 fbcc 	bl	8004478 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <SystemClock_Config+0xc0>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	4a20      	ldr	r2, [pc, #128]	; (8001d68 <SystemClock_Config+0xc0>)
 8001ce8:	f023 0318 	bic.w	r3, r3, #24
 8001cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001cf0:	2314      	movs	r3, #20
 8001cf2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d00:	2360      	movs	r3, #96	; 0x60
 8001d02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d04:	2302      	movs	r3, #2
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001d10:	2310      	movs	r3, #16
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d14:	2307      	movs	r3, #7
 8001d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 fc1b 	bl	8004560 <HAL_RCC_OscConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001d30:	f000 f9b4 	bl	800209c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d34:	230f      	movs	r3, #15
 8001d36:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 f81b 	bl	8004d88 <HAL_RCC_ClockConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001d58:	f000 f9a0 	bl	800209c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001d5c:	f003 fc2e 	bl	80055bc <HAL_RCCEx_EnableMSIPLLMode>
}
 8001d60:	bf00      	nop
 8001d62:	3758      	adds	r7, #88	; 0x58
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000

08001d6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d72:	463b      	mov	r3, r7
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
 8001d80:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d82:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001d84:	4a29      	ldr	r2, [pc, #164]	; (8001e2c <MX_ADC1_Init+0xc0>)
 8001d86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001da2:	2204      	movs	r2, #4
 8001da4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001de2:	4811      	ldr	r0, [pc, #68]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001de4:	f000 fd7c 	bl	80028e0 <HAL_ADC_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001dee:	f000 f955 	bl	800209c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_ADC1_Init+0xc4>)
 8001df4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001df6:	2306      	movs	r3, #6
 8001df8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dfe:	237f      	movs	r3, #127	; 0x7f
 8001e00:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e02:	2304      	movs	r3, #4
 8001e04:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4806      	ldr	r0, [pc, #24]	; (8001e28 <MX_ADC1_Init+0xbc>)
 8001e10:	f000 fea8 	bl	8002b64 <HAL_ADC_ConfigChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001e1a:	f000 f93f 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000078 	.word	0x20000078
 8001e2c:	50040000 	.word	0x50040000
 8001e30:	2e300800 	.word	0x2e300800

08001e34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <MX_I2C1_Init+0x78>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e40:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <MX_I2C1_Init+0x7c>)
 8001e42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e6e:	480e      	ldr	r0, [pc, #56]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e70:	f001 fd2e 	bl	80038d0 <HAL_I2C_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e7a:	f000 f90f 	bl	800209c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4809      	ldr	r0, [pc, #36]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e82:	f002 fa61 	bl	8004348 <HAL_I2CEx_ConfigAnalogFilter>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e8c:	f000 f906 	bl	800209c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e90:	2100      	movs	r1, #0
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_I2C1_Init+0x74>)
 8001e94:	f002 faa3 	bl	80043de <HAL_I2CEx_ConfigDigitalFilter>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e9e:	f000 f8fd 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200000dc 	.word	0x200000dc
 8001eac:	40005400 	.word	0x40005400
 8001eb0:	00707cbb 	.word	0x00707cbb

08001eb4 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <MX_USART2_Init+0x50>)
 8001eba:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <MX_USART2_Init+0x54>)
 8001ebc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <MX_USART2_Init+0x50>)
 8001ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ec4:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <MX_USART2_Init+0x50>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <MX_USART2_Init+0x50>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <MX_USART2_Init+0x50>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <MX_USART2_Init+0x50>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <MX_USART2_Init+0x50>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <MX_USART2_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <MX_USART2_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001ef0:	4804      	ldr	r0, [pc, #16]	; (8001f04 <MX_USART2_Init+0x50>)
 8001ef2:	f003 fc65 	bl	80057c0 <HAL_USART_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8001efc:	f000 f8ce 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000130 	.word	0x20000130
 8001f08:	40004400 	.word	0x40004400

08001f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <MX_GPIO_Init+0x8c>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <MX_GPIO_Init+0x8c>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <MX_GPIO_Init+0x8c>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <MX_GPIO_Init+0x8c>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	4a16      	ldr	r2, [pc, #88]	; (8001f98 <MX_GPIO_Init+0x8c>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <MX_GPIO_Init+0x8c>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_GPIO_Init+0x8c>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <MX_GPIO_Init+0x8c>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <MX_GPIO_Init+0x8c>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2108      	movs	r1, #8
 8001f6e:	480b      	ldr	r0, [pc, #44]	; (8001f9c <MX_GPIO_Init+0x90>)
 8001f70:	f001 fc96 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001f74:	2308      	movs	r3, #8
 8001f76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4804      	ldr	r0, [pc, #16]	; (8001f9c <MX_GPIO_Init+0x90>)
 8001f8c:	f001 fb1e 	bl	80035cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	48000400 	.word	0x48000400

08001fa0 <bme680I2cRead>:

/* USER CODE BEGIN 4 */



int8_t bme680I2cRead(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	603a      	str	r2, [r7, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	71bb      	strb	r3, [r7, #6]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	80bb      	strh	r3, [r7, #4]
  int8_t result;
  static const size_t I2C_READ_TIMEOUT = 250;

  if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, I2C_READ_TIMEOUT) != HAL_OK) {
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	b299      	uxth	r1, r3
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <bme680I2cRead+0x78>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	1dba      	adds	r2, r7, #6
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	4814      	ldr	r0, [pc, #80]	; (800201c <bme680I2cRead+0x7c>)
 8001fca:	f001 fd1d 	bl	8003a08 <HAL_I2C_Master_Transmit>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <bme680I2cRead+0x3a>
    result = -1;
 8001fd4:	23ff      	movs	r3, #255	; 0xff
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	e017      	b.n	800200a <bme680I2cRead+0x6a>
  } else if (HAL_I2C_Master_Receive (&hi2c1, (dev_id << 1) | 0x01, reg_data, len, I2C_READ_TIMEOUT) != HAL_OK) {
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	b21b      	sxth	r3, r3
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	b299      	uxth	r1, r3
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <bme680I2cRead+0x78>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	88ba      	ldrh	r2, [r7, #4]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	4809      	ldr	r0, [pc, #36]	; (800201c <bme680I2cRead+0x7c>)
 8001ff6:	f001 fe1f 	bl	8003c38 <HAL_I2C_Master_Receive>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <bme680I2cRead+0x66>
    result = -1;
 8002000:	23ff      	movs	r3, #255	; 0xff
 8002002:	73fb      	strb	r3, [r7, #15]
 8002004:	e001      	b.n	800200a <bme680I2cRead+0x6a>
  } else {
    result = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]
  }

  return result;
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	08006b08 	.word	0x08006b08
 800201c:	200000dc 	.word	0x200000dc

08002020 <bme680I2cWrite>:

int8_t bme680I2cWrite(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af02      	add	r7, sp, #8
 8002026:	603a      	str	r2, [r7, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
 800202e:	460b      	mov	r3, r1
 8002030:	71bb      	strb	r3, [r7, #6]
 8002032:	4613      	mov	r3, r2
 8002034:	80bb      	strh	r3, [r7, #4]
  int8_t result;
  int8_t *buf;

  // Allocate and load I2C transmit buffer
  buf = malloc(len + 1);
 8002036:	88bb      	ldrh	r3, [r7, #4]
 8002038:	3301      	adds	r3, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f004 f830 	bl	80060a0 <malloc>
 8002040:	4603      	mov	r3, r0
 8002042:	60bb      	str	r3, [r7, #8]
  buf[0] = reg_addr;
 8002044:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	701a      	strb	r2, [r3, #0]
  memcpy(buf + 1, reg_data, len);
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	3301      	adds	r3, #1
 8002050:	88ba      	ldrh	r2, [r7, #4]
 8002052:	6839      	ldr	r1, [r7, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f004 f943 	bl	80062e0 <memcpy>

  if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t *) buf, len + 1, HAL_MAX_DELAY) != HAL_OK) {
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	b29b      	uxth	r3, r3
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	b299      	uxth	r1, r3
 8002062:	88bb      	ldrh	r3, [r7, #4]
 8002064:	3301      	adds	r3, #1
 8002066:	b29b      	uxth	r3, r3
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	9200      	str	r2, [sp, #0]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <bme680I2cWrite+0x78>)
 8002072:	f001 fcc9 	bl	8003a08 <HAL_I2C_Master_Transmit>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <bme680I2cWrite+0x62>
    result = -1;
 800207c:	23ff      	movs	r3, #255	; 0xff
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	e001      	b.n	8002086 <bme680I2cWrite+0x66>
  } else {
    result = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
  }

  free(buf);
 8002086:	68b8      	ldr	r0, [r7, #8]
 8002088:	f004 f812 	bl	80060b0 <free>
  return result;
 800208c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200000dc 	.word	0x200000dc

0800209c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a0:	b672      	cpsid	i
}
 80020a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <Error_Handler+0x8>
	...

080020a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <HAL_MspInit+0x44>)
 80020b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b2:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <HAL_MspInit+0x44>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <HAL_MspInit+0x44>)
 80020bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_MspInit+0x44>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HAL_MspInit+0x44>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	; 0x58
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_MspInit+0x44>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b09e      	sub	sp, #120	; 0x78
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	2254      	movs	r2, #84	; 0x54
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f004 f8a1 	bl	8006258 <memset>
  if(hadc->Instance==ADC1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a25      	ldr	r2, [pc, #148]	; (80021b0 <HAL_ADC_MspInit+0xc0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d143      	bne.n	80021a8 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002120:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002124:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002126:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800212a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800212c:	2301      	movs	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002130:	2301      	movs	r3, #1
 8002132:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002134:	2318      	movs	r3, #24
 8002136:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002138:	2307      	movs	r3, #7
 800213a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800213c:	2302      	movs	r3, #2
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002140:	2302      	movs	r3, #2
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	4618      	mov	r0, r3
 8002150:	f003 f83e 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800215a:	f7ff ff9f 	bl	800209c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_ADC_MspInit+0xc4>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <HAL_ADC_MspInit+0xc4>)
 8002164:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_ADC_MspInit+0xc4>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_ADC_MspInit+0xc4>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <HAL_ADC_MspInit+0xc4>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_ADC_MspInit+0xc4>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800218e:	2340      	movs	r3, #64	; 0x40
 8002190:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002192:	230b      	movs	r3, #11
 8002194:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800219e:	4619      	mov	r1, r3
 80021a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a4:	f001 fa12 	bl	80035cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021a8:	bf00      	nop
 80021aa:	3778      	adds	r7, #120	; 0x78
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	50040000 	.word	0x50040000
 80021b4:	40021000 	.word	0x40021000

080021b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b09e      	sub	sp, #120	; 0x78
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d0:	f107 0310 	add.w	r3, r7, #16
 80021d4:	2254      	movs	r2, #84	; 0x54
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f004 f83d 	bl	8006258 <memset>
  if(hi2c->Instance==I2C1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1f      	ldr	r2, [pc, #124]	; (8002260 <HAL_I2C_MspInit+0xa8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d137      	bne.n	8002258 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021e8:	2340      	movs	r3, #64	; 0x40
 80021ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f0:	f107 0310 	add.w	r3, r7, #16
 80021f4:	4618      	mov	r0, r3
 80021f6:	f002 ffeb 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002200:	f7ff ff4c 	bl	800209c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_I2C_MspInit+0xac>)
 8002206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002208:	4a16      	ldr	r2, [pc, #88]	; (8002264 <HAL_I2C_MspInit+0xac>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_I2C_MspInit+0xac>)
 8002212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800221c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002220:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002222:	2312      	movs	r3, #18
 8002224:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800222e:	2304      	movs	r3, #4
 8002230:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002236:	4619      	mov	r1, r3
 8002238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223c:	f001 f9c6 	bl	80035cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <HAL_I2C_MspInit+0xac>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <HAL_I2C_MspInit+0xac>)
 8002246:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800224a:	6593      	str	r3, [r2, #88]	; 0x58
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_I2C_MspInit+0xac>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002258:	bf00      	nop
 800225a:	3778      	adds	r7, #120	; 0x78
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40005400 	.word	0x40005400
 8002264:	40021000 	.word	0x40021000

08002268 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b09e      	sub	sp, #120	; 0x78
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002280:	f107 0310 	add.w	r3, r7, #16
 8002284:	2254      	movs	r2, #84	; 0x54
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f003 ffe5 	bl	8006258 <memset>
  if(husart->Instance==USART2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <HAL_USART_MspInit+0xdc>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d150      	bne.n	800233a <HAL_USART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002298:	2302      	movs	r3, #2
 800229a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800229c:	2300      	movs	r3, #0
 800229e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 ff93 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 80022b0:	f7ff fef4 	bl	800209c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_USART_MspInit+0xe0>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	4a23      	ldr	r2, [pc, #140]	; (8002348 <HAL_USART_MspInit+0xe0>)
 80022ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022be:	6593      	str	r3, [r2, #88]	; 0x58
 80022c0:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_USART_MspInit+0xe0>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_USART_MspInit+0xe0>)
 80022ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_USART_MspInit+0xe0>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d8:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_USART_MspInit+0xe0>)
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_4;
 80022e4:	2314      	movs	r3, #20
 80022e6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022f4:	2307      	movs	r3, #7
 80022f6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022fc:	4619      	mov	r1, r3
 80022fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002302:	f001 f963 	bl	80035cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002318:	2303      	movs	r3, #3
 800231a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800231c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002320:	4619      	mov	r1, r3
 8002322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002326:	f001 f951 	bl	80035cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	2026      	movs	r0, #38	; 0x26
 8002330:	f001 f8d5 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002334:	2026      	movs	r0, #38	; 0x26
 8002336:	f001 f8ee 	bl	8003516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800233a:	bf00      	nop
 800233c:	3778      	adds	r7, #120	; 0x78
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40004400 	.word	0x40004400
 8002348:	40021000 	.word	0x40021000

0800234c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002350:	e7fe      	b.n	8002350 <NMI_Handler+0x4>

08002352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002356:	e7fe      	b.n	8002356 <HardFault_Handler+0x4>

08002358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800235c:	e7fe      	b.n	800235c <MemManage_Handler+0x4>

0800235e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002362:	e7fe      	b.n	8002362 <BusFault_Handler+0x4>

08002364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <UsageFault_Handler+0x4>

0800236a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002398:	f000 f8d2 	bl	8002540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}

080023a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <USART2_IRQHandler+0x10>)
 80023a6:	f003 fb03 	bl	80059b0 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000130 	.word	0x20000130

080023b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <_sbrk+0x5c>)
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <_sbrk+0x60>)
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <_sbrk+0x64>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <_sbrk+0x64>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <_sbrk+0x68>)
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <_sbrk+0x64>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d207      	bcs.n	80023f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e4:	f003 ff50 	bl	8006288 <__errno>
 80023e8:	4603      	mov	r3, r0
 80023ea:	220c      	movs	r2, #12
 80023ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	e009      	b.n	8002408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <_sbrk+0x64>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <_sbrk+0x64>)
 8002404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20010000 	.word	0x20010000
 8002414:	00000400 	.word	0x00000400
 8002418:	20000240 	.word	0x20000240
 800241c:	20000390 	.word	0x20000390

08002420 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <SystemInit+0x20>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <SystemInit+0x20>)
 800242c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800247c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002448:	f7ff ffea 	bl	8002420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800244c:	480c      	ldr	r0, [pc, #48]	; (8002480 <LoopForever+0x6>)
  ldr r1, =_edata
 800244e:	490d      	ldr	r1, [pc, #52]	; (8002484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <LoopForever+0xe>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002454:	e002      	b.n	800245c <LoopCopyDataInit>

08002456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245a:	3304      	adds	r3, #4

0800245c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800245c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002460:	d3f9      	bcc.n	8002456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002464:	4c0a      	ldr	r4, [pc, #40]	; (8002490 <LoopForever+0x16>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002468:	e001      	b.n	800246e <LoopFillZerobss>

0800246a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800246c:	3204      	adds	r2, #4

0800246e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002470:	d3fb      	bcc.n	800246a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002472:	f003 ff0f 	bl	8006294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002476:	f7ff fb3d 	bl	8001af4 <main>

0800247a <LoopForever>:

LoopForever:
    b LoopForever
 800247a:	e7fe      	b.n	800247a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800247c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002484:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002488:	08006b98 	.word	0x08006b98
  ldr r2, =_sbss
 800248c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002490:	20000390 	.word	0x20000390

08002494 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002494:	e7fe      	b.n	8002494 <ADC1_IRQHandler>

08002496 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a0:	2003      	movs	r0, #3
 80024a2:	f001 f811 	bl	80034c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024a6:	2000      	movs	r0, #0
 80024a8:	f000 f80e 	bl	80024c8 <HAL_InitTick>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	71fb      	strb	r3, [r7, #7]
 80024b6:	e001      	b.n	80024bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024b8:	f7ff fdf6 	bl	80020a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024bc:	79fb      	ldrb	r3, [r7, #7]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_InitTick+0x6c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d023      	beq.n	8002524 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <HAL_InitTick+0x70>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_InitTick+0x6c>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 f81d 	bl	8003532 <HAL_SYSTICK_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10f      	bne.n	800251e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b0f      	cmp	r3, #15
 8002502:	d809      	bhi.n	8002518 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002504:	2200      	movs	r2, #0
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f000 ffe7 	bl	80034de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002510:	4a0a      	ldr	r2, [pc, #40]	; (800253c <HAL_InitTick+0x74>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e007      	b.n	8002528 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	e004      	b.n	8002528 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	e001      	b.n	8002528 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000008 	.word	0x20000008
 8002538:	20000000 	.word	0x20000000
 800253c:	20000004 	.word	0x20000004

08002540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HAL_IncTick+0x20>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_IncTick+0x24>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4413      	add	r3, r2
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <HAL_IncTick+0x24>)
 8002552:	6013      	str	r3, [r2, #0]
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000008 	.word	0x20000008
 8002564:	20000244 	.word	0x20000244

08002568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return uwTick;
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_GetTick+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000244 	.word	0x20000244

08002580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff ffee 	bl	8002568 <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002598:	d005      	beq.n	80025a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_Delay+0x44>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025a6:	bf00      	nop
 80025a8:	f7ff ffde 	bl	8002568 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d8f7      	bhi.n	80025a8 <HAL_Delay+0x28>
  {
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000008 	.word	0x20000008

080025c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	609a      	str	r2, [r3, #8]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	609a      	str	r2, [r3, #8]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3360      	adds	r3, #96	; 0x60
 8002642:	461a      	mov	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <LL_ADC_SetOffset+0x44>)
 8002652:	4013      	ands	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	4313      	orrs	r3, r2
 8002660:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	03fff000 	.word	0x03fff000

08002678 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3360      	adds	r3, #96	; 0x60
 8002686:	461a      	mov	r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3360      	adds	r3, #96	; 0x60
 80026b4:	461a      	mov	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026da:	b480      	push	{r7}
 80026dc:	b087      	sub	sp, #28
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3330      	adds	r3, #48	; 0x30
 80026ea:	461a      	mov	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	4413      	add	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	211f      	movs	r1, #31
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	401a      	ands	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	f003 011f 	and.w	r1, r3, #31
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	431a      	orrs	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002732:	b480      	push	{r7}
 8002734:	b087      	sub	sp, #28
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3314      	adds	r3, #20
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	0e5b      	lsrs	r3, r3, #25
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	4413      	add	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	0d1b      	lsrs	r3, r3, #20
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	2107      	movs	r1, #7
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	401a      	ands	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	0d1b      	lsrs	r3, r3, #20
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	431a      	orrs	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800277c:	bf00      	nop
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a0:	43db      	mvns	r3, r3
 80027a2:	401a      	ands	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0318 	and.w	r3, r3, #24
 80027aa:	4908      	ldr	r1, [pc, #32]	; (80027cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80027ac:	40d9      	lsrs	r1, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	400b      	ands	r3, r1
 80027b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b6:	431a      	orrs	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	0007ffff 	.word	0x0007ffff

080027d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6093      	str	r3, [r2, #8]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002808:	d101      	bne.n	800280e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800282c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002830:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002858:	d101      	bne.n	800285e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <LL_ADC_IsEnabled+0x18>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <LL_ADC_IsEnabled+0x1a>
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d101      	bne.n	80028aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d101      	bne.n	80028d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e126      	b.n	8002b48 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fbf1 	bl	80020f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff67 	bl	80027f4 <LL_ADC_IsDeepPowerDownEnabled>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d004      	beq.n	8002936 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff4d 	bl	80027d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff82 	bl	8002844 <LL_ADC_IsInternalRegulatorEnabled>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d115      	bne.n	8002972 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff ff66 	bl	800281c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002950:	4b7f      	ldr	r3, [pc, #508]	; (8002b50 <HAL_ADC_Init+0x270>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	4a7f      	ldr	r2, [pc, #508]	; (8002b54 <HAL_ADC_Init+0x274>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	3301      	adds	r3, #1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002964:	e002      	b.n	800296c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3b01      	subs	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f9      	bne.n	8002966 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ff64 	bl	8002844 <LL_ADC_IsInternalRegulatorEnabled>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	f043 0210 	orr.w	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff75 	bl	8002892 <LL_ADC_REG_IsConversionOngoing>
 80029a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 80bf 	bne.w	8002b36 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 80bb 	bne.w	8002b36 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029c8:	f043 0202 	orr.w	r2, r3, #2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff49 	bl	800286c <LL_ADC_IsEnabled>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10b      	bne.n	80029f8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029e0:	485d      	ldr	r0, [pc, #372]	; (8002b58 <HAL_ADC_Init+0x278>)
 80029e2:	f7ff ff43 	bl	800286c <LL_ADC_IsEnabled>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d105      	bne.n	80029f8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4619      	mov	r1, r3
 80029f2:	485a      	ldr	r0, [pc, #360]	; (8002b5c <HAL_ADC_Init+0x27c>)
 80029f4:	f7ff fde8 	bl	80025c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	7e5b      	ldrb	r3, [r3, #25]
 80029fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a02:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a08:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a0e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a16:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d106      	bne.n	8002a34 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	045b      	lsls	r3, r3, #17
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d009      	beq.n	8002a50 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	4b42      	ldr	r3, [pc, #264]	; (8002b60 <HAL_ADC_Init+0x280>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	69b9      	ldr	r1, [r7, #24]
 8002a60:	430b      	orrs	r3, r1
 8002a62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff25 	bl	80028b8 <LL_ADC_INJ_IsConversionOngoing>
 8002a6e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d13d      	bne.n	8002af2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d13a      	bne.n	8002af2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a80:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a88:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a98:	f023 0302 	bic.w	r3, r3, #2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	69b9      	ldr	r1, [r7, #24]
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d118      	bne.n	8002ae2 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002aba:	f023 0304 	bic.w	r3, r3, #4
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ac6:	4311      	orrs	r1, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002acc:	4311      	orrs	r1, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	611a      	str	r2, [r3, #16]
 8002ae0:	e007      	b.n	8002af2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0201 	bic.w	r2, r2, #1
 8002af0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d10c      	bne.n	8002b14 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f023 010f 	bic.w	r1, r3, #15
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	1e5a      	subs	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
 8002b12:	e007      	b.n	8002b24 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 020f 	bic.w	r2, r2, #15
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b28:	f023 0303 	bic.w	r3, r3, #3
 8002b2c:	f043 0201 	orr.w	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
 8002b34:	e007      	b.n	8002b46 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	f043 0210 	orr.w	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b46:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000000 	.word	0x20000000
 8002b54:	053e2d63 	.word	0x053e2d63
 8002b58:	50040000 	.word	0x50040000
 8002b5c:	50040300 	.word	0x50040300
 8002b60:	fff0c007 	.word	0xfff0c007

08002b64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b0b6      	sub	sp, #216	; 0xd8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x22>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e3bb      	b.n	80032fe <HAL_ADC_ConfigChannel+0x79a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fe7d 	bl	8002892 <LL_ADC_REG_IsConversionOngoing>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 83a0 	bne.w	80032e0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d824      	bhi.n	8002bfa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	3b02      	subs	r3, #2
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d81b      	bhi.n	8002bf2 <HAL_ADC_ConfigChannel+0x8e>
 8002bba:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <HAL_ADC_ConfigChannel+0x5c>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002bd1 	.word	0x08002bd1
 8002bc4:	08002bd9 	.word	0x08002bd9
 8002bc8:	08002be1 	.word	0x08002be1
 8002bcc:	08002be9 	.word	0x08002be9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002bd0:	230c      	movs	r3, #12
 8002bd2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002bd6:	e010      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002bd8:	2312      	movs	r3, #18
 8002bda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002bde:	e00c      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002be0:	2318      	movs	r3, #24
 8002be2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002be6:	e008      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002bf0:	e003      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002bf8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002c08:	f7ff fd67 	bl	80026da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fe3e 	bl	8002892 <LL_ADC_REG_IsConversionOngoing>
 8002c16:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fe4a 	bl	80028b8 <LL_ADC_INJ_IsConversionOngoing>
 8002c24:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f040 81a4 	bne.w	8002f7a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 819f 	bne.w	8002f7a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6819      	ldr	r1, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f7ff fd72 	bl	8002732 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	08db      	lsrs	r3, r3, #3
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d00a      	beq.n	8002c86 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6919      	ldr	r1, [r3, #16]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c80:	f7ff fcd6 	bl	8002630 <LL_ADC_SetOffset>
 8002c84:	e179      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fcf3 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10a      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x14e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fce8 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	0e9b      	lsrs	r3, r3, #26
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	e01e      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x18c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fcdd 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e004      	b.n	8002cee <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002ce4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x1a4>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	e018      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x1d6>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002d24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e004      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002d30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d106      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fcac 	bl	80026a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fc90 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x214>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fc85 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	0e9b      	lsrs	r3, r3, #26
 8002d72:	f003 021f 	and.w	r2, r3, #31
 8002d76:	e01e      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x252>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fc7a 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002d96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002d9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002da6:	2320      	movs	r3, #32
 8002da8:	e004      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002daa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x26a>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	0e9b      	lsrs	r3, r3, #26
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	e018      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x29c>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002de6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002dea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002df2:	2320      	movs	r3, #32
 8002df4:	e004      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002df6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d106      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fc49 	bl	80026a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2102      	movs	r1, #2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fc2d 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x2da>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2102      	movs	r1, #2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fc22 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8002e34:	4603      	mov	r3, r0
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	e01e      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x318>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2102      	movs	r1, #2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fc17 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e004      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x330>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0e9b      	lsrs	r3, r3, #26
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	e014      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x35a>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ea4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	e004      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002eb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d106      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2102      	movs	r1, #2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fbea 	bl	80026a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2103      	movs	r1, #3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fbce 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x398>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2103      	movs	r1, #3
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fbc3 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	f003 021f 	and.w	r2, r3, #31
 8002efa:	e017      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x3c8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2103      	movs	r1, #3
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fbb8 	bl	8002678 <LL_ADC_GetOffsetChannel>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f16:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002f1e:	2320      	movs	r3, #32
 8002f20:	e003      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d105      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x3e0>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0e9b      	lsrs	r3, r3, #26
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	e011      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x404>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f54:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002f56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	e003      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002f60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d106      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2200      	movs	r2, #0
 8002f72:	2103      	movs	r1, #3
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fb95 	bl	80026a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fc74 	bl	800286c <LL_ADC_IsEnabled>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 8140 	bne.w	800320c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	6819      	ldr	r1, [r3, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	f7ff fbf5 	bl	8002788 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	4a8f      	ldr	r2, [pc, #572]	; (80031e0 <HAL_ADC_ConfigChannel+0x67c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	f040 8131 	bne.w	800320c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x46e>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0e9b      	lsrs	r3, r3, #26
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	2b09      	cmp	r3, #9
 8002fc8:	bf94      	ite	ls
 8002fca:	2301      	movls	r3, #1
 8002fcc:	2300      	movhi	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	e019      	b.n	8003006 <HAL_ADC_ConfigChannel+0x4a2>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002fea:	2320      	movs	r3, #32
 8002fec:	e003      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2b09      	cmp	r3, #9
 8002ffe:	bf94      	ite	ls
 8003000:	2301      	movls	r3, #1
 8003002:	2300      	movhi	r3, #0
 8003004:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003006:	2b00      	cmp	r3, #0
 8003008:	d079      	beq.n	80030fe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	2b00      	cmp	r3, #0
 8003014:	d107      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x4c2>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	0e9b      	lsrs	r3, r3, #26
 800301c:	3301      	adds	r3, #1
 800301e:	069b      	lsls	r3, r3, #26
 8003020:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003024:	e015      	b.n	8003052 <HAL_ADC_ConfigChannel+0x4ee>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003036:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800303e:	2320      	movs	r3, #32
 8003040:	e003      	b.n	800304a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	3301      	adds	r3, #1
 800304c:	069b      	lsls	r3, r3, #26
 800304e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x50e>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	0e9b      	lsrs	r3, r3, #26
 8003064:	3301      	adds	r3, #1
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f303 	lsl.w	r3, r1, r3
 8003070:	e017      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x53e>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003082:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800308a:	2320      	movs	r3, #32
 800308c:	e003      	b.n	8003096 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800308e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	3301      	adds	r3, #1
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	ea42 0103 	orr.w	r1, r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x564>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	0e9b      	lsrs	r3, r3, #26
 80030b8:	3301      	adds	r3, #1
 80030ba:	f003 021f 	and.w	r2, r3, #31
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	051b      	lsls	r3, r3, #20
 80030c6:	e018      	b.n	80030fa <HAL_ADC_ConfigChannel+0x596>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80030e0:	2320      	movs	r3, #32
 80030e2:	e003      	b.n	80030ec <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80030e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	3301      	adds	r3, #1
 80030ee:	f003 021f 	and.w	r2, r3, #31
 80030f2:	4613      	mov	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4413      	add	r3, r2
 80030f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030fa:	430b      	orrs	r3, r1
 80030fc:	e081      	b.n	8003202 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003106:	2b00      	cmp	r3, #0
 8003108:	d107      	bne.n	800311a <HAL_ADC_ConfigChannel+0x5b6>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	0e9b      	lsrs	r3, r3, #26
 8003110:	3301      	adds	r3, #1
 8003112:	069b      	lsls	r3, r3, #26
 8003114:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003118:	e015      	b.n	8003146 <HAL_ADC_ConfigChannel+0x5e2>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003132:	2320      	movs	r3, #32
 8003134:	e003      	b.n	800313e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003138:	fab3 f383 	clz	r3, r3
 800313c:	b2db      	uxtb	r3, r3
 800313e:	3301      	adds	r3, #1
 8003140:	069b      	lsls	r3, r3, #26
 8003142:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x602>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	0e9b      	lsrs	r3, r3, #26
 8003158:	3301      	adds	r3, #1
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2101      	movs	r1, #1
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	e017      	b.n	8003196 <HAL_ADC_ConfigChannel+0x632>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	61bb      	str	r3, [r7, #24]
  return result;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800317e:	2320      	movs	r3, #32
 8003180:	e003      	b.n	800318a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	3301      	adds	r3, #1
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	ea42 0103 	orr.w	r1, r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10d      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x65e>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	0e9b      	lsrs	r3, r3, #26
 80031ac:	3301      	adds	r3, #1
 80031ae:	f003 021f 	and.w	r2, r3, #31
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	3b1e      	subs	r3, #30
 80031ba:	051b      	lsls	r3, r3, #20
 80031bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031c0:	e01e      	b.n	8003200 <HAL_ADC_ConfigChannel+0x69c>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	60fb      	str	r3, [r7, #12]
  return result;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d104      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80031da:	2320      	movs	r3, #32
 80031dc:	e006      	b.n	80031ec <HAL_ADC_ConfigChannel+0x688>
 80031de:	bf00      	nop
 80031e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fab3 f383 	clz	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	3301      	adds	r3, #1
 80031ee:	f003 021f 	and.w	r2, r3, #31
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	3b1e      	subs	r3, #30
 80031fa:	051b      	lsls	r3, r3, #20
 80031fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003200:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003206:	4619      	mov	r1, r3
 8003208:	f7ff fa93 	bl	8002732 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <HAL_ADC_ConfigChannel+0x7a4>)
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d06c      	beq.n	80032f2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003218:	483c      	ldr	r0, [pc, #240]	; (800330c <HAL_ADC_ConfigChannel+0x7a8>)
 800321a:	f7ff f9fb 	bl	8002614 <LL_ADC_GetCommonPathInternalCh>
 800321e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a3a      	ldr	r2, [pc, #232]	; (8003310 <HAL_ADC_ConfigChannel+0x7ac>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d127      	bne.n	800327c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800322c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d121      	bne.n	800327c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a35      	ldr	r2, [pc, #212]	; (8003314 <HAL_ADC_ConfigChannel+0x7b0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d157      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003242:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003246:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800324a:	4619      	mov	r1, r3
 800324c:	482f      	ldr	r0, [pc, #188]	; (800330c <HAL_ADC_ConfigChannel+0x7a8>)
 800324e:	f7ff f9ce 	bl	80025ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003252:	4b31      	ldr	r3, [pc, #196]	; (8003318 <HAL_ADC_ConfigChannel+0x7b4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	099b      	lsrs	r3, r3, #6
 8003258:	4a30      	ldr	r2, [pc, #192]	; (800331c <HAL_ADC_ConfigChannel+0x7b8>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	099b      	lsrs	r3, r3, #6
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800326c:	e002      	b.n	8003274 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3b01      	subs	r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f9      	bne.n	800326e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800327a:	e03a      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a27      	ldr	r2, [pc, #156]	; (8003320 <HAL_ADC_ConfigChannel+0x7bc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d113      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800328a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10d      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1f      	ldr	r2, [pc, #124]	; (8003314 <HAL_ADC_ConfigChannel+0x7b0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d12a      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800329c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a4:	4619      	mov	r1, r3
 80032a6:	4819      	ldr	r0, [pc, #100]	; (800330c <HAL_ADC_ConfigChannel+0x7a8>)
 80032a8:	f7ff f9a1 	bl	80025ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032ac:	e021      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <HAL_ADC_ConfigChannel+0x7c0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d11c      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d116      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a12      	ldr	r2, [pc, #72]	; (8003314 <HAL_ADC_ConfigChannel+0x7b0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d111      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032d6:	4619      	mov	r1, r3
 80032d8:	480c      	ldr	r0, [pc, #48]	; (800330c <HAL_ADC_ConfigChannel+0x7a8>)
 80032da:	f7ff f988 	bl	80025ee <LL_ADC_SetCommonPathInternalCh>
 80032de:	e008      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80032fe:	4618      	mov	r0, r3
 8003300:	37d8      	adds	r7, #216	; 0xd8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	80080000 	.word	0x80080000
 800330c:	50040300 	.word	0x50040300
 8003310:	c7520000 	.word	0xc7520000
 8003314:	50040000 	.word	0x50040000
 8003318:	20000000 	.word	0x20000000
 800331c:	053e2d63 	.word	0x053e2d63
 8003320:	cb840000 	.word	0xcb840000
 8003324:	80000001 	.word	0x80000001

08003328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <__NVIC_SetPriorityGrouping+0x44>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003344:	4013      	ands	r3, r2
 8003346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800335a:	4a04      	ldr	r2, [pc, #16]	; (800336c <__NVIC_SetPriorityGrouping+0x44>)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	60d3      	str	r3, [r2, #12]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <__NVIC_GetPriorityGrouping+0x18>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	0a1b      	lsrs	r3, r3, #8
 800337a:	f003 0307 	and.w	r3, r3, #7
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	2b00      	cmp	r3, #0
 800339c:	db0b      	blt.n	80033b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	f003 021f 	and.w	r2, r3, #31
 80033a4:	4907      	ldr	r1, [pc, #28]	; (80033c4 <__NVIC_EnableIRQ+0x38>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	2001      	movs	r0, #1
 80033ae:	fa00 f202 	lsl.w	r2, r0, r2
 80033b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	e000e100 	.word	0xe000e100

080033c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	6039      	str	r1, [r7, #0]
 80033d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	db0a      	blt.n	80033f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	490c      	ldr	r1, [pc, #48]	; (8003414 <__NVIC_SetPriority+0x4c>)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	0112      	lsls	r2, r2, #4
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	440b      	add	r3, r1
 80033ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f0:	e00a      	b.n	8003408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	4908      	ldr	r1, [pc, #32]	; (8003418 <__NVIC_SetPriority+0x50>)
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	3b04      	subs	r3, #4
 8003400:	0112      	lsls	r2, r2, #4
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	440b      	add	r3, r1
 8003406:	761a      	strb	r2, [r3, #24]
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000e100 	.word	0xe000e100
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	; 0x24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f1c3 0307 	rsb	r3, r3, #7
 8003436:	2b04      	cmp	r3, #4
 8003438:	bf28      	it	cs
 800343a:	2304      	movcs	r3, #4
 800343c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3304      	adds	r3, #4
 8003442:	2b06      	cmp	r3, #6
 8003444:	d902      	bls.n	800344c <NVIC_EncodePriority+0x30>
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3b03      	subs	r3, #3
 800344a:	e000      	b.n	800344e <NVIC_EncodePriority+0x32>
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	f04f 32ff 	mov.w	r2, #4294967295
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43da      	mvns	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	401a      	ands	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003464:	f04f 31ff 	mov.w	r1, #4294967295
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	43d9      	mvns	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003474:	4313      	orrs	r3, r2
         );
}
 8003476:	4618      	mov	r0, r3
 8003478:	3724      	adds	r7, #36	; 0x24
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003494:	d301      	bcc.n	800349a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003496:	2301      	movs	r3, #1
 8003498:	e00f      	b.n	80034ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800349a:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <SysTick_Config+0x40>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034a2:	210f      	movs	r1, #15
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295
 80034a8:	f7ff ff8e 	bl	80033c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <SysTick_Config+0x40>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034b2:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <SysTick_Config+0x40>)
 80034b4:	2207      	movs	r2, #7
 80034b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	e000e010 	.word	0xe000e010

080034c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff29 	bl	8003328 <__NVIC_SetPriorityGrouping>
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	4603      	mov	r3, r0
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034f0:	f7ff ff3e 	bl	8003370 <__NVIC_GetPriorityGrouping>
 80034f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	6978      	ldr	r0, [r7, #20]
 80034fc:	f7ff ff8e 	bl	800341c <NVIC_EncodePriority>
 8003500:	4602      	mov	r2, r0
 8003502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff5d 	bl	80033c8 <__NVIC_SetPriority>
}
 800350e:	bf00      	nop
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	4603      	mov	r3, r0
 800351e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff31 	bl	800338c <__NVIC_EnableIRQ>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ffa2 	bl	8003484 <SysTick_Config>
 8003540:	4603      	mov	r3, r0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d005      	beq.n	800356e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2204      	movs	r2, #4
 8003566:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	e029      	b.n	80035c2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 020e 	bic.w	r2, r2, #14
 800357c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f003 021c 	and.w	r2, r3, #28
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2101      	movs	r1, #1
 800359c:	fa01 f202 	lsl.w	r2, r1, r2
 80035a0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
    }
  }
  return status;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035da:	e148      	b.n	800386e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	4013      	ands	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 813a 	beq.w	8003868 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d005      	beq.n	800360c <HAL_GPIO_Init+0x40>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d130      	bne.n	800366e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	2203      	movs	r2, #3
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003642:	2201      	movs	r2, #1
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 0201 	and.w	r2, r3, #1
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b03      	cmp	r3, #3
 8003678:	d017      	beq.n	80036aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	2203      	movs	r2, #3
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4013      	ands	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d123      	bne.n	80036fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	08da      	lsrs	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3208      	adds	r2, #8
 80036be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	220f      	movs	r2, #15
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	08da      	lsrs	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3208      	adds	r2, #8
 80036f8:	6939      	ldr	r1, [r7, #16]
 80036fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	2203      	movs	r2, #3
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4013      	ands	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0203 	and.w	r2, r3, #3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8094 	beq.w	8003868 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003740:	4b52      	ldr	r3, [pc, #328]	; (800388c <HAL_GPIO_Init+0x2c0>)
 8003742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003744:	4a51      	ldr	r2, [pc, #324]	; (800388c <HAL_GPIO_Init+0x2c0>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6613      	str	r3, [r2, #96]	; 0x60
 800374c:	4b4f      	ldr	r3, [pc, #316]	; (800388c <HAL_GPIO_Init+0x2c0>)
 800374e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003758:	4a4d      	ldr	r2, [pc, #308]	; (8003890 <HAL_GPIO_Init+0x2c4>)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	089b      	lsrs	r3, r3, #2
 800375e:	3302      	adds	r3, #2
 8003760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003764:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	220f      	movs	r2, #15
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4013      	ands	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003782:	d00d      	beq.n	80037a0 <HAL_GPIO_Init+0x1d4>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a43      	ldr	r2, [pc, #268]	; (8003894 <HAL_GPIO_Init+0x2c8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d007      	beq.n	800379c <HAL_GPIO_Init+0x1d0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a42      	ldr	r2, [pc, #264]	; (8003898 <HAL_GPIO_Init+0x2cc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d101      	bne.n	8003798 <HAL_GPIO_Init+0x1cc>
 8003794:	2302      	movs	r3, #2
 8003796:	e004      	b.n	80037a2 <HAL_GPIO_Init+0x1d6>
 8003798:	2307      	movs	r3, #7
 800379a:	e002      	b.n	80037a2 <HAL_GPIO_Init+0x1d6>
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <HAL_GPIO_Init+0x1d6>
 80037a0:	2300      	movs	r3, #0
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	f002 0203 	and.w	r2, r2, #3
 80037a8:	0092      	lsls	r2, r2, #2
 80037aa:	4093      	lsls	r3, r2
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037b2:	4937      	ldr	r1, [pc, #220]	; (8003890 <HAL_GPIO_Init+0x2c4>)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	3302      	adds	r3, #2
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <HAL_GPIO_Init+0x2d0>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	43db      	mvns	r3, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037e4:	4a2d      	ldr	r2, [pc, #180]	; (800389c <HAL_GPIO_Init+0x2d0>)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037ea:	4b2c      	ldr	r3, [pc, #176]	; (800389c <HAL_GPIO_Init+0x2d0>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	43db      	mvns	r3, r3
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4013      	ands	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800380e:	4a23      	ldr	r2, [pc, #140]	; (800389c <HAL_GPIO_Init+0x2d0>)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003814:	4b21      	ldr	r3, [pc, #132]	; (800389c <HAL_GPIO_Init+0x2d0>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	43db      	mvns	r3, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003838:	4a18      	ldr	r2, [pc, #96]	; (800389c <HAL_GPIO_Init+0x2d0>)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800383e:	4b17      	ldr	r3, [pc, #92]	; (800389c <HAL_GPIO_Init+0x2d0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	43db      	mvns	r3, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003862:	4a0e      	ldr	r2, [pc, #56]	; (800389c <HAL_GPIO_Init+0x2d0>)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	3301      	adds	r3, #1
 800386c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	fa22 f303 	lsr.w	r3, r2, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	f47f aeaf 	bne.w	80035dc <HAL_GPIO_Init+0x10>
  }
}
 800387e:	bf00      	nop
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40021000 	.word	0x40021000
 8003890:	40010000 	.word	0x40010000
 8003894:	48000400 	.word	0x48000400
 8003898:	48000800 	.word	0x48000800
 800389c:	40010400 	.word	0x40010400

080038a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
 80038ac:	4613      	mov	r3, r2
 80038ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b0:	787b      	ldrb	r3, [r7, #1]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038bc:	e002      	b.n	80038c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e08d      	b.n	80039fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fe fc5e 	bl	80021b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2224      	movs	r2, #36	; 0x24
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003920:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003930:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	e006      	b.n	8003958 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003956:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d108      	bne.n	8003972 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	e007      	b.n	8003982 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003980:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003994:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69d9      	ldr	r1, [r3, #28]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1a      	ldr	r2, [r3, #32]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	461a      	mov	r2, r3
 8003a14:	460b      	mov	r3, r1
 8003a16:	817b      	strh	r3, [r7, #10]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	f040 80fd 	bne.w	8003c24 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_I2C_Master_Transmit+0x30>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e0f6      	b.n	8003c26 <HAL_I2C_Master_Transmit+0x21e>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a40:	f7fe fd92 	bl	8002568 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	2319      	movs	r3, #25
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fa0a 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e0e1      	b.n	8003c26 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2221      	movs	r2, #33	; 0x21
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	893a      	ldrh	r2, [r7, #8]
 8003a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2bff      	cmp	r3, #255	; 0xff
 8003a92:	d906      	bls.n	8003aa2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	22ff      	movs	r2, #255	; 0xff
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003a9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	e007      	b.n	8003ab2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003aac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ab0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d024      	beq.n	8003b04 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	781a      	ldrb	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	3301      	adds	r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	8979      	ldrh	r1, [r7, #10]
 8003af6:	4b4e      	ldr	r3, [pc, #312]	; (8003c30 <HAL_I2C_Master_Transmit+0x228>)
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fbf1 	bl	80042e4 <I2C_TransferConfig>
 8003b02:	e066      	b.n	8003bd2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	8979      	ldrh	r1, [r7, #10]
 8003b0c:	4b48      	ldr	r3, [pc, #288]	; (8003c30 <HAL_I2C_Master_Transmit+0x228>)
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fbe6 	bl	80042e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003b18:	e05b      	b.n	8003bd2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	6a39      	ldr	r1, [r7, #32]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f9f3 	bl	8003f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e07b      	b.n	8003c26 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	781a      	ldrb	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d034      	beq.n	8003bd2 <HAL_I2C_Master_Transmit+0x1ca>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d130      	bne.n	8003bd2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	2200      	movs	r2, #0
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f976 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e04d      	b.n	8003c26 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2bff      	cmp	r3, #255	; 0xff
 8003b92:	d90e      	bls.n	8003bb2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	22ff      	movs	r2, #255	; 0xff
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	8979      	ldrh	r1, [r7, #10]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fb9a 	bl	80042e4 <I2C_TransferConfig>
 8003bb0:	e00f      	b.n	8003bd2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	8979      	ldrh	r1, [r7, #10]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fb89 	bl	80042e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d19e      	bne.n	8003b1a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	6a39      	ldr	r1, [r7, #32]
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f9d9 	bl	8003f98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e01a      	b.n	8003c26 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <HAL_I2C_Master_Transmit+0x22c>)
 8003c04:	400b      	ands	r3, r1
 8003c06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	80002000 	.word	0x80002000
 8003c34:	fe00e800 	.word	0xfe00e800

08003c38 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	461a      	mov	r2, r3
 8003c44:	460b      	mov	r3, r1
 8003c46:	817b      	strh	r3, [r7, #10]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	f040 80db 	bne.w	8003e10 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_I2C_Master_Receive+0x30>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e0d4      	b.n	8003e12 <HAL_I2C_Master_Receive+0x1da>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c70:	f7fe fc7a 	bl	8002568 <HAL_GetTick>
 8003c74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2319      	movs	r3, #25
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f8f2 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0bf      	b.n	8003e12 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2222      	movs	r2, #34	; 0x22
 8003c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2210      	movs	r2, #16
 8003c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	893a      	ldrh	r2, [r7, #8]
 8003cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2bff      	cmp	r3, #255	; 0xff
 8003cc2:	d90e      	bls.n	8003ce2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	22ff      	movs	r2, #255	; 0xff
 8003cc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	8979      	ldrh	r1, [r7, #10]
 8003cd2:	4b52      	ldr	r3, [pc, #328]	; (8003e1c <HAL_I2C_Master_Receive+0x1e4>)
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fb02 	bl	80042e4 <I2C_TransferConfig>
 8003ce0:	e06d      	b.n	8003dbe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	8979      	ldrh	r1, [r7, #10]
 8003cf4:	4b49      	ldr	r3, [pc, #292]	; (8003e1c <HAL_I2C_Master_Receive+0x1e4>)
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 faf1 	bl	80042e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003d02:	e05c      	b.n	8003dbe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	6a39      	ldr	r1, [r7, #32]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f989 	bl	8004020 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e07c      	b.n	8003e12 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d034      	beq.n	8003dbe <HAL_I2C_Master_Receive+0x186>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d130      	bne.n	8003dbe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	2200      	movs	r2, #0
 8003d64:	2180      	movs	r1, #128	; 0x80
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f880 	bl	8003e6c <I2C_WaitOnFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e04d      	b.n	8003e12 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2bff      	cmp	r3, #255	; 0xff
 8003d7e:	d90e      	bls.n	8003d9e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	22ff      	movs	r2, #255	; 0xff
 8003d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	8979      	ldrh	r1, [r7, #10]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 faa4 	bl	80042e4 <I2C_TransferConfig>
 8003d9c:	e00f      	b.n	8003dbe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	8979      	ldrh	r1, [r7, #10]
 8003db0:	2300      	movs	r3, #0
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fa93 	bl	80042e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d19d      	bne.n	8003d04 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	6a39      	ldr	r1, [r7, #32]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f8e3 	bl	8003f98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e01a      	b.n	8003e12 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2220      	movs	r2, #32
 8003de2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <HAL_I2C_Master_Receive+0x1e8>)
 8003df0:	400b      	ands	r3, r1
 8003df2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e000      	b.n	8003e12 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
  }
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	80002400 	.word	0x80002400
 8003e20:	fe00e800 	.word	0xfe00e800

08003e24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d103      	bne.n	8003e42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d007      	beq.n	8003e60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	619a      	str	r2, [r3, #24]
  }
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e7c:	e031      	b.n	8003ee2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d02d      	beq.n	8003ee2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7fe fb6f 	bl	8002568 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d122      	bne.n	8003ee2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	bf0c      	ite	eq
 8003eac:	2301      	moveq	r3, #1
 8003eae:	2300      	movne	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d113      	bne.n	8003ee2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f043 0220 	orr.w	r2, r3, #32
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e00f      	b.n	8003f02 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699a      	ldr	r2, [r3, #24]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4013      	ands	r3, r2
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2301      	moveq	r3, #1
 8003ef4:	2300      	movne	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d0be      	beq.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f16:	e033      	b.n	8003f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f901 	bl	8004124 <I2C_IsErrorOccurred>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e031      	b.n	8003f90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d025      	beq.n	8003f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f34:	f7fe fb18 	bl	8002568 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d302      	bcc.n	8003f4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d11a      	bne.n	8003f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d013      	beq.n	8003f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e007      	b.n	8003f90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d1c4      	bne.n	8003f18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fa4:	e02f      	b.n	8004006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f8ba 	bl	8004124 <I2C_IsErrorOccurred>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e02d      	b.n	8004016 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fba:	f7fe fad5 	bl	8002568 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d11a      	bne.n	8004006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d013      	beq.n	8004006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	f043 0220 	orr.w	r2, r3, #32
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e007      	b.n	8004016 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b20      	cmp	r3, #32
 8004012:	d1c8      	bne.n	8003fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800402c:	e06b      	b.n	8004106 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f876 	bl	8004124 <I2C_IsErrorOccurred>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e069      	b.n	8004116 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b20      	cmp	r3, #32
 800404e:	d138      	bne.n	80040c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b04      	cmp	r3, #4
 800405c:	d105      	bne.n	800406a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	e055      	b.n	8004116 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b10      	cmp	r3, #16
 8004076:	d107      	bne.n	8004088 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2210      	movs	r2, #16
 800407e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2204      	movs	r2, #4
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
 8004086:	e002      	b.n	800408e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2220      	movs	r2, #32
 8004094:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80040a2:	400b      	ands	r3, r1
 80040a4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e029      	b.n	8004116 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7fe fa51 	bl	8002568 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d116      	bne.n	8004106 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d00f      	beq.n	8004106 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e007      	b.n	8004116 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b04      	cmp	r3, #4
 8004112:	d18c      	bne.n	800402e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	fe00e800 	.word	0xfe00e800

08004124 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	; 0x28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	d068      	beq.n	8004222 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2210      	movs	r2, #16
 8004156:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004158:	e049      	b.n	80041ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d045      	beq.n	80041ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004162:	f7fe fa01 	bl	8002568 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <I2C_IsErrorOccurred+0x54>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d13a      	bne.n	80041ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004182:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800418a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419a:	d121      	bne.n	80041e0 <I2C_IsErrorOccurred+0xbc>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041a2:	d01d      	beq.n	80041e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80041a4:	7cfb      	ldrb	r3, [r7, #19]
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d01a      	beq.n	80041e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80041ba:	f7fe f9d5 	bl	8002568 <HAL_GetTick>
 80041be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041c0:	e00e      	b.n	80041e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80041c2:	f7fe f9d1 	bl	8002568 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b19      	cmp	r3, #25
 80041ce:	d907      	bls.n	80041e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	f043 0320 	orr.w	r3, r3, #32
 80041d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80041de:	e006      	b.n	80041ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	d1e9      	bne.n	80041c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d003      	beq.n	8004204 <I2C_IsErrorOccurred+0xe0>
 80041fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0aa      	beq.n	800415a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004208:	2b00      	cmp	r3, #0
 800420a:	d103      	bne.n	8004214 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2220      	movs	r2, #32
 8004212:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	f043 0304 	orr.w	r3, r3, #4
 800421a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004244:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	f043 0308 	orr.w	r3, r3, #8
 800425c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004266:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	f043 0302 	orr.w	r3, r3, #2
 800427e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004288:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01c      	beq.n	80042d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7ff fdc3 	bl	8003e24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6859      	ldr	r1, [r3, #4]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <I2C_IsErrorOccurred+0x1bc>)
 80042aa:	400b      	ands	r3, r1
 80042ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80042d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3728      	adds	r7, #40	; 0x28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	fe00e800 	.word	0xfe00e800

080042e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	460b      	mov	r3, r1
 80042f0:	817b      	strh	r3, [r7, #10]
 80042f2:	4613      	mov	r3, r2
 80042f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042f6:	897b      	ldrh	r3, [r7, #10]
 80042f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042fc:	7a7b      	ldrb	r3, [r7, #9]
 80042fe:	041b      	lsls	r3, r3, #16
 8004300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004304:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	4313      	orrs	r3, r2
 800430e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004312:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	0d5b      	lsrs	r3, r3, #21
 800431e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <I2C_TransferConfig+0x60>)
 8004324:	430b      	orrs	r3, r1
 8004326:	43db      	mvns	r3, r3
 8004328:	ea02 0103 	and.w	r1, r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	03ff63ff 	.word	0x03ff63ff

08004348 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b20      	cmp	r3, #32
 800435c:	d138      	bne.n	80043d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004368:	2302      	movs	r3, #2
 800436a:	e032      	b.n	80043d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2224      	movs	r2, #36	; 0x24
 8004378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800439a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6819      	ldr	r1, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e000      	b.n	80043d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d139      	bne.n	8004468 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043fe:	2302      	movs	r3, #2
 8004400:	e033      	b.n	800446a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2224      	movs	r2, #36	; 0x24
 800440e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004430:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	e000      	b.n	800446a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004468:	2302      	movs	r3, #2
  }
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004486:	6013      	str	r3, [r2, #0]
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40007000 	.word	0x40007000

08004498 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40007000 	.word	0x40007000

080044b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c2:	d130      	bne.n	8004526 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80044c4:	4b23      	ldr	r3, [pc, #140]	; (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d0:	d038      	beq.n	8004544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044d2:	4b20      	ldr	r3, [pc, #128]	; (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044da:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2232      	movs	r2, #50	; 0x32
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	4a1b      	ldr	r2, [pc, #108]	; (800455c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	0c9b      	lsrs	r3, r3, #18
 80044f4:	3301      	adds	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044f8:	e002      	b.n	8004500 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004500:	4b14      	ldr	r3, [pc, #80]	; (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450c:	d102      	bne.n	8004514 <HAL_PWREx_ControlVoltageScaling+0x60>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f2      	bne.n	80044fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004520:	d110      	bne.n	8004544 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e00f      	b.n	8004546 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800452e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004532:	d007      	beq.n	8004544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800453c:	4a05      	ldr	r2, [pc, #20]	; (8004554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800453e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004542:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40007000 	.word	0x40007000
 8004558:	20000000 	.word	0x20000000
 800455c:	431bde83 	.word	0x431bde83

08004560 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	f000 bc02 	b.w	8004d78 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004574:	4b96      	ldr	r3, [pc, #600]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800457e:	4b94      	ldr	r3, [pc, #592]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80e4 	beq.w	800475e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_RCC_OscConfig+0x4c>
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b0c      	cmp	r3, #12
 80045a0:	f040 808b 	bne.w	80046ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	f040 8087 	bne.w	80046ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045ac:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_OscConfig+0x64>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e3d9      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1a      	ldr	r2, [r3, #32]
 80045c8:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d004      	beq.n	80045de <HAL_RCC_OscConfig+0x7e>
 80045d4:	4b7e      	ldr	r3, [pc, #504]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045dc:	e005      	b.n	80045ea <HAL_RCC_OscConfig+0x8a>
 80045de:	4b7c      	ldr	r3, [pc, #496]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80045e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d223      	bcs.n	8004636 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fd8c 	bl	8005110 <RCC_SetFlashLatencyFromMSIRange>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e3ba      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004602:	4b73      	ldr	r3, [pc, #460]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a72      	ldr	r2, [pc, #456]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004608:	f043 0308 	orr.w	r3, r3, #8
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	4b70      	ldr	r3, [pc, #448]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	496d      	ldr	r1, [pc, #436]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 800461c:	4313      	orrs	r3, r2
 800461e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004620:	4b6b      	ldr	r3, [pc, #428]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	4968      	ldr	r1, [pc, #416]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
 8004634:	e025      	b.n	8004682 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004636:	4b66      	ldr	r3, [pc, #408]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a65      	ldr	r2, [pc, #404]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 800463c:	f043 0308 	orr.w	r3, r3, #8
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	4b63      	ldr	r3, [pc, #396]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	4960      	ldr	r1, [pc, #384]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004654:	4b5e      	ldr	r3, [pc, #376]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	495b      	ldr	r1, [pc, #364]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d109      	bne.n	8004682 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fd4c 	bl	8005110 <RCC_SetFlashLatencyFromMSIRange>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e37a      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004682:	f000 fc81 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8004686:	4602      	mov	r2, r0
 8004688:	4b51      	ldr	r3, [pc, #324]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	4950      	ldr	r1, [pc, #320]	; (80047d4 <HAL_RCC_OscConfig+0x274>)
 8004694:	5ccb      	ldrb	r3, [r1, r3]
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	fa22 f303 	lsr.w	r3, r2, r3
 800469e:	4a4e      	ldr	r2, [pc, #312]	; (80047d8 <HAL_RCC_OscConfig+0x278>)
 80046a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046a2:	4b4e      	ldr	r3, [pc, #312]	; (80047dc <HAL_RCC_OscConfig+0x27c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd ff0e 	bl	80024c8 <HAL_InitTick>
 80046ac:	4603      	mov	r3, r0
 80046ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d052      	beq.n	800475c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	e35e      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d032      	beq.n	8004728 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046c2:	4b43      	ldr	r3, [pc, #268]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a42      	ldr	r2, [pc, #264]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80046c8:	f043 0301 	orr.w	r3, r3, #1
 80046cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046ce:	f7fd ff4b 	bl	8002568 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046d6:	f7fd ff47 	bl	8002568 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e347      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046e8:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046f4:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a35      	ldr	r2, [pc, #212]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80046fa:	f043 0308 	orr.w	r3, r3, #8
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	4b33      	ldr	r3, [pc, #204]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	4930      	ldr	r1, [pc, #192]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 800470e:	4313      	orrs	r3, r2
 8004710:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004712:	4b2f      	ldr	r3, [pc, #188]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	492b      	ldr	r1, [pc, #172]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]
 8004726:	e01a      	b.n	800475e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004728:	4b29      	ldr	r3, [pc, #164]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a28      	ldr	r2, [pc, #160]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004734:	f7fd ff18 	bl	8002568 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800473c:	f7fd ff14 	bl	8002568 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e314      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x1dc>
 800475a:	e000      	b.n	800475e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800475c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d073      	beq.n	8004852 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	2b08      	cmp	r3, #8
 800476e:	d005      	beq.n	800477c <HAL_RCC_OscConfig+0x21c>
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d10e      	bne.n	8004794 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d10b      	bne.n	8004794 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800477c:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d063      	beq.n	8004850 <HAL_RCC_OscConfig+0x2f0>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d15f      	bne.n	8004850 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e2f1      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800479c:	d106      	bne.n	80047ac <HAL_RCC_OscConfig+0x24c>
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e025      	b.n	80047f8 <HAL_RCC_OscConfig+0x298>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047b4:	d114      	bne.n	80047e0 <HAL_RCC_OscConfig+0x280>
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a05      	ldr	r2, [pc, #20]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80047bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a02      	ldr	r2, [pc, #8]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80047c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	e013      	b.n	80047f8 <HAL_RCC_OscConfig+0x298>
 80047d0:	40021000 	.word	0x40021000
 80047d4:	08006b0c 	.word	0x08006b0c
 80047d8:	20000000 	.word	0x20000000
 80047dc:	20000004 	.word	0x20000004
 80047e0:	4ba0      	ldr	r3, [pc, #640]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a9f      	ldr	r2, [pc, #636]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80047e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	4b9d      	ldr	r3, [pc, #628]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a9c      	ldr	r2, [pc, #624]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80047f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d013      	beq.n	8004828 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fd feb2 	bl	8002568 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004808:	f7fd feae 	bl	8002568 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	; 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e2ae      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800481a:	4b92      	ldr	r3, [pc, #584]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x2a8>
 8004826:	e014      	b.n	8004852 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fd fe9e 	bl	8002568 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004830:	f7fd fe9a 	bl	8002568 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	; 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e29a      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004842:	4b88      	ldr	r3, [pc, #544]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x2d0>
 800484e:	e000      	b.n	8004852 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d060      	beq.n	8004920 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b04      	cmp	r3, #4
 8004862:	d005      	beq.n	8004870 <HAL_RCC_OscConfig+0x310>
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b0c      	cmp	r3, #12
 8004868:	d119      	bne.n	800489e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d116      	bne.n	800489e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004870:	4b7c      	ldr	r3, [pc, #496]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_OscConfig+0x328>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e277      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004888:	4b76      	ldr	r3, [pc, #472]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	061b      	lsls	r3, r3, #24
 8004896:	4973      	ldr	r1, [pc, #460]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004898:	4313      	orrs	r3, r2
 800489a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800489c:	e040      	b.n	8004920 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d023      	beq.n	80048ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a6:	4b6f      	ldr	r3, [pc, #444]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a6e      	ldr	r2, [pc, #440]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80048ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b2:	f7fd fe59 	bl	8002568 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ba:	f7fd fe55 	bl	8002568 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e255      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048cc:	4b65      	ldr	r3, [pc, #404]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d8:	4b62      	ldr	r3, [pc, #392]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	061b      	lsls	r3, r3, #24
 80048e6:	495f      	ldr	r1, [pc, #380]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	604b      	str	r3, [r1, #4]
 80048ec:	e018      	b.n	8004920 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ee:	4b5d      	ldr	r3, [pc, #372]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a5c      	ldr	r2, [pc, #368]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80048f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fa:	f7fd fe35 	bl	8002568 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004902:	f7fd fe31 	bl	8002568 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e231      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004914:	4b53      	ldr	r3, [pc, #332]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f0      	bne.n	8004902 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d03c      	beq.n	80049a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01c      	beq.n	800496e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004934:	4b4b      	ldr	r3, [pc, #300]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493a:	4a4a      	ldr	r2, [pc, #296]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004944:	f7fd fe10 	bl	8002568 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800494c:	f7fd fe0c 	bl	8002568 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e20c      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800495e:	4b41      	ldr	r3, [pc, #260]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0ef      	beq.n	800494c <HAL_RCC_OscConfig+0x3ec>
 800496c:	e01b      	b.n	80049a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800496e:	4b3d      	ldr	r3, [pc, #244]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004974:	4a3b      	ldr	r2, [pc, #236]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fd fdf3 	bl	8002568 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004986:	f7fd fdef 	bl	8002568 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e1ef      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004998:	4b32      	ldr	r3, [pc, #200]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 800499a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1ef      	bne.n	8004986 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 80a6 	beq.w	8004b00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b4:	2300      	movs	r3, #0
 80049b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80049b8:	4b2a      	ldr	r3, [pc, #168]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80049ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10d      	bne.n	80049e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c4:	4b27      	ldr	r3, [pc, #156]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80049ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ce:	6593      	str	r3, [r2, #88]	; 0x58
 80049d0:	4b24      	ldr	r3, [pc, #144]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 80049d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049dc:	2301      	movs	r3, #1
 80049de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049e0:	4b21      	ldr	r3, [pc, #132]	; (8004a68 <HAL_RCC_OscConfig+0x508>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d118      	bne.n	8004a1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ec:	4b1e      	ldr	r3, [pc, #120]	; (8004a68 <HAL_RCC_OscConfig+0x508>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <HAL_RCC_OscConfig+0x508>)
 80049f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049f8:	f7fd fdb6 	bl	8002568 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a00:	f7fd fdb2 	bl	8002568 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e1b2      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a12:	4b15      	ldr	r3, [pc, #84]	; (8004a68 <HAL_RCC_OscConfig+0x508>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d108      	bne.n	8004a38 <HAL_RCC_OscConfig+0x4d8>
 8004a26:	4b0f      	ldr	r3, [pc, #60]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	4a0d      	ldr	r2, [pc, #52]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a36:	e029      	b.n	8004a8c <HAL_RCC_OscConfig+0x52c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b05      	cmp	r3, #5
 8004a3e:	d115      	bne.n	8004a6c <HAL_RCC_OscConfig+0x50c>
 8004a40:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	4a07      	ldr	r2, [pc, #28]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004a48:	f043 0304 	orr.w	r3, r3, #4
 8004a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a56:	4a03      	ldr	r2, [pc, #12]	; (8004a64 <HAL_RCC_OscConfig+0x504>)
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a60:	e014      	b.n	8004a8c <HAL_RCC_OscConfig+0x52c>
 8004a62:	bf00      	nop
 8004a64:	40021000 	.word	0x40021000
 8004a68:	40007000 	.word	0x40007000
 8004a6c:	4b9a      	ldr	r3, [pc, #616]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	4a99      	ldr	r2, [pc, #612]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a7c:	4b96      	ldr	r3, [pc, #600]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	4a95      	ldr	r2, [pc, #596]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004a84:	f023 0304 	bic.w	r3, r3, #4
 8004a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d016      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a94:	f7fd fd68 	bl	8002568 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9a:	e00a      	b.n	8004ab2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9c:	f7fd fd64 	bl	8002568 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e162      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab2:	4b89      	ldr	r3, [pc, #548]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0ed      	beq.n	8004a9c <HAL_RCC_OscConfig+0x53c>
 8004ac0:	e015      	b.n	8004aee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac2:	f7fd fd51 	bl	8002568 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ac8:	e00a      	b.n	8004ae0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aca:	f7fd fd4d 	bl	8002568 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e14b      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ae0:	4b7d      	ldr	r3, [pc, #500]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1ed      	bne.n	8004aca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aee:	7ffb      	ldrb	r3, [r7, #31]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d105      	bne.n	8004b00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af4:	4b78      	ldr	r3, [pc, #480]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af8:	4a77      	ldr	r2, [pc, #476]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004afe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d03c      	beq.n	8004b86 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01c      	beq.n	8004b4e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b14:	4b70      	ldr	r3, [pc, #448]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b1a:	4a6f      	ldr	r2, [pc, #444]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b24:	f7fd fd20 	bl	8002568 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b2c:	f7fd fd1c 	bl	8002568 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e11c      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b3e:	4b66      	ldr	r3, [pc, #408]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ef      	beq.n	8004b2c <HAL_RCC_OscConfig+0x5cc>
 8004b4c:	e01b      	b.n	8004b86 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b4e:	4b62      	ldr	r3, [pc, #392]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b54:	4a60      	ldr	r2, [pc, #384]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5e:	f7fd fd03 	bl	8002568 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b66:	f7fd fcff 	bl	8002568 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e0ff      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b78:	4b57      	ldr	r3, [pc, #348]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1ef      	bne.n	8004b66 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 80f3 	beq.w	8004d76 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	f040 80c9 	bne.w	8004d2c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b9a:	4b4f      	ldr	r3, [pc, #316]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 0203 	and.w	r2, r3, #3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d12c      	bne.n	8004c08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d123      	bne.n	8004c08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d11b      	bne.n	8004c08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d113      	bne.n	8004c08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	3b01      	subs	r3, #1
 8004bee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d109      	bne.n	8004c08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	3b01      	subs	r3, #1
 8004c02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d06b      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b0c      	cmp	r3, #12
 8004c0c:	d062      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c0e:	4b32      	ldr	r3, [pc, #200]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e0ac      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c1e:	4b2e      	ldr	r3, [pc, #184]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2d      	ldr	r2, [pc, #180]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004c24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c2a:	f7fd fc9d 	bl	8002568 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c32:	f7fd fc99 	bl	8002568 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e099      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c44:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c50:	4b21      	ldr	r3, [pc, #132]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <HAL_RCC_OscConfig+0x77c>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c60:	3a01      	subs	r2, #1
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	4311      	orrs	r1, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c6a:	0212      	lsls	r2, r2, #8
 8004c6c:	4311      	orrs	r1, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c72:	0852      	lsrs	r2, r2, #1
 8004c74:	3a01      	subs	r2, #1
 8004c76:	0552      	lsls	r2, r2, #21
 8004c78:	4311      	orrs	r1, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c7e:	0852      	lsrs	r2, r2, #1
 8004c80:	3a01      	subs	r2, #1
 8004c82:	0652      	lsls	r2, r2, #25
 8004c84:	4311      	orrs	r1, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c8a:	06d2      	lsls	r2, r2, #27
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	4912      	ldr	r1, [pc, #72]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c94:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a0f      	ldr	r2, [pc, #60]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ca0:	4b0d      	ldr	r3, [pc, #52]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4a0c      	ldr	r2, [pc, #48]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004caa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cac:	f7fd fc5c 	bl	8002568 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fd fc58 	bl	8002568 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e058      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc6:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <HAL_RCC_OscConfig+0x778>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cd2:	e050      	b.n	8004d76 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e04f      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce0:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <HAL_RCC_OscConfig+0x820>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d144      	bne.n	8004d76 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cec:	4b24      	ldr	r3, [pc, #144]	; (8004d80 <HAL_RCC_OscConfig+0x820>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a23      	ldr	r2, [pc, #140]	; (8004d80 <HAL_RCC_OscConfig+0x820>)
 8004cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cf8:	4b21      	ldr	r3, [pc, #132]	; (8004d80 <HAL_RCC_OscConfig+0x820>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4a20      	ldr	r2, [pc, #128]	; (8004d80 <HAL_RCC_OscConfig+0x820>)
 8004cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d04:	f7fd fc30 	bl	8002568 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fd fc2c 	bl	8002568 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e02c      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1e:	4b18      	ldr	r3, [pc, #96]	; (8004d80 <HAL_RCC_OscConfig+0x820>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x7ac>
 8004d2a:	e024      	b.n	8004d76 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b0c      	cmp	r3, #12
 8004d30:	d01f      	beq.n	8004d72 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d32:	4b13      	ldr	r3, [pc, #76]	; (8004d80 <HAL_RCC_OscConfig+0x820>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a12      	ldr	r2, [pc, #72]	; (8004d80 <HAL_RCC_OscConfig+0x820>)
 8004d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3e:	f7fd fc13 	bl	8002568 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d46:	f7fd fc0f 	bl	8002568 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e00f      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d58:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <HAL_RCC_OscConfig+0x820>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f0      	bne.n	8004d46 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_RCC_OscConfig+0x820>)
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	4905      	ldr	r1, [pc, #20]	; (8004d80 <HAL_RCC_OscConfig+0x820>)
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCC_OscConfig+0x824>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60cb      	str	r3, [r1, #12]
 8004d70:	e001      	b.n	8004d76 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3720      	adds	r7, #32
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40021000 	.word	0x40021000
 8004d84:	feeefffc 	.word	0xfeeefffc

08004d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0e7      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d9c:	4b75      	ldr	r3, [pc, #468]	; (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d910      	bls.n	8004dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004daa:	4b72      	ldr	r3, [pc, #456]	; (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f023 0207 	bic.w	r2, r3, #7
 8004db2:	4970      	ldr	r1, [pc, #448]	; (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dba:	4b6e      	ldr	r3, [pc, #440]	; (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0cf      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d010      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	4b66      	ldr	r3, [pc, #408]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d908      	bls.n	8004dfa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de8:	4b63      	ldr	r3, [pc, #396]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	4960      	ldr	r1, [pc, #384]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d04c      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d107      	bne.n	8004e1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e0e:	4b5a      	ldr	r3, [pc, #360]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d121      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e0a6      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d107      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e26:	4b54      	ldr	r3, [pc, #336]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d115      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e09a      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d107      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e3e:	4b4e      	ldr	r3, [pc, #312]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d109      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e08e      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e4e:	4b4a      	ldr	r3, [pc, #296]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e086      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e5e:	4b46      	ldr	r3, [pc, #280]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f023 0203 	bic.w	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4943      	ldr	r1, [pc, #268]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e70:	f7fd fb7a 	bl	8002568 <HAL_GetTick>
 8004e74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e76:	e00a      	b.n	8004e8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e78:	f7fd fb76 	bl	8002568 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e06e      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8e:	4b3a      	ldr	r3, [pc, #232]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 020c 	and.w	r2, r3, #12
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d1eb      	bne.n	8004e78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d010      	beq.n	8004ece <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	4b31      	ldr	r3, [pc, #196]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d208      	bcs.n	8004ece <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ebc:	4b2e      	ldr	r3, [pc, #184]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	492b      	ldr	r1, [pc, #172]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ece:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d210      	bcs.n	8004efe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004edc:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 0207 	bic.w	r2, r3, #7
 8004ee4:	4923      	ldr	r1, [pc, #140]	; (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eec:	4b21      	ldr	r3, [pc, #132]	; (8004f74 <HAL_RCC_ClockConfig+0x1ec>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d001      	beq.n	8004efe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e036      	b.n	8004f6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f0a:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	4918      	ldr	r1, [pc, #96]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f28:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	4910      	ldr	r1, [pc, #64]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f3c:	f000 f824 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8004f40:	4602      	mov	r2, r0
 8004f42:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <HAL_RCC_ClockConfig+0x1f0>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	091b      	lsrs	r3, r3, #4
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	490b      	ldr	r1, [pc, #44]	; (8004f7c <HAL_RCC_ClockConfig+0x1f4>)
 8004f4e:	5ccb      	ldrb	r3, [r1, r3]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
 8004f58:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <HAL_RCC_ClockConfig+0x1f8>)
 8004f5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <HAL_RCC_ClockConfig+0x1fc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fd fab1 	bl	80024c8 <HAL_InitTick>
 8004f66:	4603      	mov	r3, r0
 8004f68:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f6a:	7afb      	ldrb	r3, [r7, #11]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40022000 	.word	0x40022000
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	08006b0c 	.word	0x08006b0c
 8004f80:	20000000 	.word	0x20000000
 8004f84:	20000004 	.word	0x20000004

08004f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b089      	sub	sp, #36	; 0x24
 8004f8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	2300      	movs	r3, #0
 8004f94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f96:	4b3e      	ldr	r3, [pc, #248]	; (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa0:	4b3b      	ldr	r3, [pc, #236]	; (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_RCC_GetSysClockFreq+0x34>
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b0c      	cmp	r3, #12
 8004fb4:	d121      	bne.n	8004ffa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d11e      	bne.n	8004ffa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fbc:	4b34      	ldr	r3, [pc, #208]	; (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d107      	bne.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fc8:	4b31      	ldr	r3, [pc, #196]	; (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	e005      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fd8:	4b2d      	ldr	r3, [pc, #180]	; (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fe4:	4a2b      	ldr	r2, [pc, #172]	; (8005094 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10d      	bne.n	8005010 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ff8:	e00a      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d102      	bne.n	8005006 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005000:	4b25      	ldr	r3, [pc, #148]	; (8005098 <HAL_RCC_GetSysClockFreq+0x110>)
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	e004      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d101      	bne.n	8005010 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800500c:	4b23      	ldr	r3, [pc, #140]	; (800509c <HAL_RCC_GetSysClockFreq+0x114>)
 800500e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b0c      	cmp	r3, #12
 8005014:	d134      	bne.n	8005080 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005016:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d003      	beq.n	800502e <HAL_RCC_GetSysClockFreq+0xa6>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b03      	cmp	r3, #3
 800502a:	d003      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0xac>
 800502c:	e005      	b.n	800503a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800502e:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <HAL_RCC_GetSysClockFreq+0x110>)
 8005030:	617b      	str	r3, [r7, #20]
      break;
 8005032:	e005      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005034:	4b19      	ldr	r3, [pc, #100]	; (800509c <HAL_RCC_GetSysClockFreq+0x114>)
 8005036:	617b      	str	r3, [r7, #20]
      break;
 8005038:	e002      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	617b      	str	r3, [r7, #20]
      break;
 800503e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005040:	4b13      	ldr	r3, [pc, #76]	; (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	091b      	lsrs	r3, r3, #4
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	3301      	adds	r3, #1
 800504c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	0a1b      	lsrs	r3, r3, #8
 8005054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	fb03 f202 	mul.w	r2, r3, r2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	fbb2 f3f3 	udiv	r3, r2, r3
 8005064:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005066:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <HAL_RCC_GetSysClockFreq+0x108>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	0e5b      	lsrs	r3, r3, #25
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	3301      	adds	r3, #1
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005080:	69bb      	ldr	r3, [r7, #24]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3724      	adds	r7, #36	; 0x24
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000
 8005094:	08006b24 	.word	0x08006b24
 8005098:	00f42400 	.word	0x00f42400
 800509c:	007a1200 	.word	0x007a1200

080050a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050a4:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050a6:	681b      	ldr	r3, [r3, #0]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20000000 	.word	0x20000000

080050b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050bc:	f7ff fff0 	bl	80050a0 <HAL_RCC_GetHCLKFreq>
 80050c0:	4602      	mov	r2, r0
 80050c2:	4b06      	ldr	r3, [pc, #24]	; (80050dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	4904      	ldr	r1, [pc, #16]	; (80050e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40021000 	.word	0x40021000
 80050e0:	08006b1c 	.word	0x08006b1c

080050e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050e8:	f7ff ffda 	bl	80050a0 <HAL_RCC_GetHCLKFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b06      	ldr	r3, [pc, #24]	; (8005108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	0adb      	lsrs	r3, r3, #11
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	4904      	ldr	r1, [pc, #16]	; (800510c <HAL_RCC_GetPCLK2Freq+0x28>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021000 	.word	0x40021000
 800510c:	08006b1c 	.word	0x08006b1c

08005110 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800511c:	4b2a      	ldr	r3, [pc, #168]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800511e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005128:	f7ff f9b6 	bl	8004498 <HAL_PWREx_GetVoltageRange>
 800512c:	6178      	str	r0, [r7, #20]
 800512e:	e014      	b.n	800515a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	4a24      	ldr	r2, [pc, #144]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800513a:	6593      	str	r3, [r2, #88]	; 0x58
 800513c:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800513e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005148:	f7ff f9a6 	bl	8004498 <HAL_PWREx_GetVoltageRange>
 800514c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800514e:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005152:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005158:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005160:	d10b      	bne.n	800517a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b80      	cmp	r3, #128	; 0x80
 8005166:	d919      	bls.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2ba0      	cmp	r3, #160	; 0xa0
 800516c:	d902      	bls.n	8005174 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800516e:	2302      	movs	r3, #2
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	e013      	b.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005174:	2301      	movs	r3, #1
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	e010      	b.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b80      	cmp	r3, #128	; 0x80
 800517e:	d902      	bls.n	8005186 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005180:	2303      	movs	r3, #3
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	e00a      	b.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b80      	cmp	r3, #128	; 0x80
 800518a:	d102      	bne.n	8005192 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800518c:	2302      	movs	r3, #2
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	e004      	b.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b70      	cmp	r3, #112	; 0x70
 8005196:	d101      	bne.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005198:	2301      	movs	r3, #1
 800519a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 0207 	bic.w	r2, r3, #7
 80051a4:	4909      	ldr	r1, [pc, #36]	; (80051cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051ac:	4b07      	ldr	r3, [pc, #28]	; (80051cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d001      	beq.n	80051be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40021000 	.word	0x40021000
 80051cc:	40022000 	.word	0x40022000

080051d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051d8:	2300      	movs	r3, #0
 80051da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051dc:	2300      	movs	r3, #0
 80051de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d031      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051f4:	d01a      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80051f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051fa:	d814      	bhi.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d009      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005200:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005204:	d10f      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005206:	4b5d      	ldr	r3, [pc, #372]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	4a5c      	ldr	r2, [pc, #368]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800520c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005210:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005212:	e00c      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	2100      	movs	r1, #0
 800521a:	4618      	mov	r0, r3
 800521c:	f000 f9de 	bl	80055dc <RCCEx_PLLSAI1_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005224:	e003      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	74fb      	strb	r3, [r7, #19]
      break;
 800522a:	e000      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800522c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800522e:	7cfb      	ldrb	r3, [r7, #19]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10b      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005234:	4b51      	ldr	r3, [pc, #324]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005242:	494e      	ldr	r1, [pc, #312]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800524a:	e001      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524c:	7cfb      	ldrb	r3, [r7, #19]
 800524e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 809e 	beq.w	800539a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800525e:	2300      	movs	r3, #0
 8005260:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005262:	4b46      	ldr	r3, [pc, #280]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005272:	2300      	movs	r3, #0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00d      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005278:	4b40      	ldr	r3, [pc, #256]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800527a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527c:	4a3f      	ldr	r2, [pc, #252]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800527e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005282:	6593      	str	r3, [r2, #88]	; 0x58
 8005284:	4b3d      	ldr	r3, [pc, #244]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005290:	2301      	movs	r3, #1
 8005292:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005294:	4b3a      	ldr	r3, [pc, #232]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a39      	ldr	r2, [pc, #228]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800529a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800529e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052a0:	f7fd f962 	bl	8002568 <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052a6:	e009      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a8:	f7fd f95e 	bl	8002568 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d902      	bls.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	74fb      	strb	r3, [r7, #19]
        break;
 80052ba:	e005      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052bc:	4b30      	ldr	r3, [pc, #192]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ef      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d15a      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052ce:	4b2b      	ldr	r3, [pc, #172]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01e      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d019      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052ea:	4b24      	ldr	r3, [pc, #144]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052f6:	4b21      	ldr	r3, [pc, #132]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fc:	4a1f      	ldr	r2, [pc, #124]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005306:	4b1d      	ldr	r3, [pc, #116]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530c:	4a1b      	ldr	r2, [pc, #108]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800530e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005316:	4a19      	ldr	r2, [pc, #100]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d016      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fd f91e 	bl	8002568 <HAL_GetTick>
 800532c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800532e:	e00b      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005330:	f7fd f91a 	bl	8002568 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f241 3288 	movw	r2, #5000	; 0x1388
 800533e:	4293      	cmp	r3, r2
 8005340:	d902      	bls.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	74fb      	strb	r3, [r7, #19]
            break;
 8005346:	e006      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005348:	4b0c      	ldr	r3, [pc, #48]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0ec      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005356:	7cfb      	ldrb	r3, [r7, #19]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10b      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800535c:	4b07      	ldr	r3, [pc, #28]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536a:	4904      	ldr	r1, [pc, #16]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005372:	e009      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	74bb      	strb	r3, [r7, #18]
 8005378:	e006      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800537a:	bf00      	nop
 800537c:	40021000 	.word	0x40021000
 8005380:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005384:	7cfb      	ldrb	r3, [r7, #19]
 8005386:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005388:	7c7b      	ldrb	r3, [r7, #17]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d105      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800538e:	4b8a      	ldr	r3, [pc, #552]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005392:	4a89      	ldr	r2, [pc, #548]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005398:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053a6:	4b84      	ldr	r3, [pc, #528]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ac:	f023 0203 	bic.w	r2, r3, #3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	4980      	ldr	r1, [pc, #512]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053c8:	4b7b      	ldr	r3, [pc, #492]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ce:	f023 020c 	bic.w	r2, r3, #12
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	4978      	ldr	r1, [pc, #480]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053ea:	4b73      	ldr	r3, [pc, #460]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	496f      	ldr	r1, [pc, #444]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800540c:	4b6a      	ldr	r3, [pc, #424]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541a:	4967      	ldr	r1, [pc, #412]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800542e:	4b62      	ldr	r3, [pc, #392]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	495e      	ldr	r1, [pc, #376]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005450:	4b59      	ldr	r3, [pc, #356]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005456:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	4956      	ldr	r1, [pc, #344]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005472:	4b51      	ldr	r3, [pc, #324]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	494d      	ldr	r1, [pc, #308]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d028      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005494:	4b48      	ldr	r3, [pc, #288]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	4945      	ldr	r1, [pc, #276]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b2:	d106      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b4:	4b40      	ldr	r3, [pc, #256]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4a3f      	ldr	r2, [pc, #252]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054be:	60d3      	str	r3, [r2, #12]
 80054c0:	e011      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ca:	d10c      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	2101      	movs	r1, #1
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 f882 	bl	80055dc <RCCEx_PLLSAI1_Config>
 80054d8:	4603      	mov	r3, r0
 80054da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054dc:	7cfb      	ldrb	r3, [r7, #19]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d028      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054f2:	4b31      	ldr	r3, [pc, #196]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005500:	492d      	ldr	r1, [pc, #180]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005510:	d106      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005512:	4b29      	ldr	r3, [pc, #164]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	4a28      	ldr	r2, [pc, #160]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800551c:	60d3      	str	r3, [r2, #12]
 800551e:	e011      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005528:	d10c      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3304      	adds	r3, #4
 800552e:	2101      	movs	r1, #1
 8005530:	4618      	mov	r0, r3
 8005532:	f000 f853 	bl	80055dc <RCCEx_PLLSAI1_Config>
 8005536:	4603      	mov	r3, r0
 8005538:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800553a:	7cfb      	ldrb	r3, [r7, #19]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005540:	7cfb      	ldrb	r3, [r7, #19]
 8005542:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01c      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005550:	4b19      	ldr	r3, [pc, #100]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005556:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555e:	4916      	ldr	r1, [pc, #88]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800556a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800556e:	d10c      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3304      	adds	r3, #4
 8005574:	2102      	movs	r1, #2
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f830 	bl	80055dc <RCCEx_PLLSAI1_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005580:	7cfb      	ldrb	r3, [r7, #19]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005586:	7cfb      	ldrb	r3, [r7, #19]
 8005588:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005596:	4b08      	ldr	r3, [pc, #32]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a4:	4904      	ldr	r1, [pc, #16]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000

080055bc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80055c0:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a04      	ldr	r2, [pc, #16]	; (80055d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80055c6:	f043 0304 	orr.w	r3, r3, #4
 80055ca:	6013      	str	r3, [r2, #0]
}
 80055cc:	bf00      	nop
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40021000 	.word	0x40021000

080055dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055ea:	4b74      	ldr	r3, [pc, #464]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d018      	beq.n	8005628 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055f6:	4b71      	ldr	r3, [pc, #452]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f003 0203 	and.w	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d10d      	bne.n	8005622 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
       ||
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800560e:	4b6b      	ldr	r3, [pc, #428]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
       ||
 800561e:	429a      	cmp	r2, r3
 8005620:	d047      	beq.n	80056b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	73fb      	strb	r3, [r7, #15]
 8005626:	e044      	b.n	80056b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b03      	cmp	r3, #3
 800562e:	d018      	beq.n	8005662 <RCCEx_PLLSAI1_Config+0x86>
 8005630:	2b03      	cmp	r3, #3
 8005632:	d825      	bhi.n	8005680 <RCCEx_PLLSAI1_Config+0xa4>
 8005634:	2b01      	cmp	r3, #1
 8005636:	d002      	beq.n	800563e <RCCEx_PLLSAI1_Config+0x62>
 8005638:	2b02      	cmp	r3, #2
 800563a:	d009      	beq.n	8005650 <RCCEx_PLLSAI1_Config+0x74>
 800563c:	e020      	b.n	8005680 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800563e:	4b5f      	ldr	r3, [pc, #380]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d11d      	bne.n	8005686 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800564e:	e01a      	b.n	8005686 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005650:	4b5a      	ldr	r3, [pc, #360]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005658:	2b00      	cmp	r3, #0
 800565a:	d116      	bne.n	800568a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005660:	e013      	b.n	800568a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005662:	4b56      	ldr	r3, [pc, #344]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10f      	bne.n	800568e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800566e:	4b53      	ldr	r3, [pc, #332]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d109      	bne.n	800568e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800567e:	e006      	b.n	800568e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
      break;
 8005684:	e004      	b.n	8005690 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005686:	bf00      	nop
 8005688:	e002      	b.n	8005690 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800568a:	bf00      	nop
 800568c:	e000      	b.n	8005690 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800568e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10d      	bne.n	80056b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005696:	4b49      	ldr	r3, [pc, #292]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6819      	ldr	r1, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	430b      	orrs	r3, r1
 80056ac:	4943      	ldr	r1, [pc, #268]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d17c      	bne.n	80057b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056b8:	4b40      	ldr	r3, [pc, #256]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a3f      	ldr	r2, [pc, #252]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80056be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c4:	f7fc ff50 	bl	8002568 <HAL_GetTick>
 80056c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056ca:	e009      	b.n	80056e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056cc:	f7fc ff4c 	bl	8002568 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d902      	bls.n	80056e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	73fb      	strb	r3, [r7, #15]
        break;
 80056de:	e005      	b.n	80056ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056e0:	4b36      	ldr	r3, [pc, #216]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1ef      	bne.n	80056cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d15f      	bne.n	80057b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d110      	bne.n	800571a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056f8:	4b30      	ldr	r3, [pc, #192]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005700:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6892      	ldr	r2, [r2, #8]
 8005708:	0211      	lsls	r1, r2, #8
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68d2      	ldr	r2, [r2, #12]
 800570e:	06d2      	lsls	r2, r2, #27
 8005710:	430a      	orrs	r2, r1
 8005712:	492a      	ldr	r1, [pc, #168]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005714:	4313      	orrs	r3, r2
 8005716:	610b      	str	r3, [r1, #16]
 8005718:	e027      	b.n	800576a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d112      	bne.n	8005746 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005720:	4b26      	ldr	r3, [pc, #152]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005728:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6892      	ldr	r2, [r2, #8]
 8005730:	0211      	lsls	r1, r2, #8
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6912      	ldr	r2, [r2, #16]
 8005736:	0852      	lsrs	r2, r2, #1
 8005738:	3a01      	subs	r2, #1
 800573a:	0552      	lsls	r2, r2, #21
 800573c:	430a      	orrs	r2, r1
 800573e:	491f      	ldr	r1, [pc, #124]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005740:	4313      	orrs	r3, r2
 8005742:	610b      	str	r3, [r1, #16]
 8005744:	e011      	b.n	800576a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005746:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800574e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6892      	ldr	r2, [r2, #8]
 8005756:	0211      	lsls	r1, r2, #8
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6952      	ldr	r2, [r2, #20]
 800575c:	0852      	lsrs	r2, r2, #1
 800575e:	3a01      	subs	r2, #1
 8005760:	0652      	lsls	r2, r2, #25
 8005762:	430a      	orrs	r2, r1
 8005764:	4915      	ldr	r1, [pc, #84]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005766:	4313      	orrs	r3, r2
 8005768:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800576a:	4b14      	ldr	r3, [pc, #80]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a13      	ldr	r2, [pc, #76]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005774:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005776:	f7fc fef7 	bl	8002568 <HAL_GetTick>
 800577a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800577c:	e009      	b.n	8005792 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800577e:	f7fc fef3 	bl	8002568 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d902      	bls.n	8005792 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	73fb      	strb	r3, [r7, #15]
          break;
 8005790:	e005      	b.n	800579e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005792:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0ef      	beq.n	800577e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d106      	bne.n	80057b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	4903      	ldr	r1, [pc, #12]	; (80057bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40021000 	.word	0x40021000

080057c0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e03c      	b.n	800584c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fc fd3e 	bl	8002268 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0201 	bic.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fa97 	bl	8005d38 <USART_SetConfig>
 800580a:	4603      	mov	r3, r0
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e01b      	b.n	800584c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005822:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005832:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fba5 	bl	8005f94 <USART_CheckIdleState>
 800584a:	4603      	mov	r3, r0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	; 0x28
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	f040 809a 	bne.w	80059a6 <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_USART_Transmit+0x2a>
 8005878:	88fb      	ldrh	r3, [r7, #6]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e092      	b.n	80059a8 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_USART_Transmit+0x3c>
 800588c:	2302      	movs	r3, #2
 800588e:	e08b      	b.n	80059a8 <HAL_USART_Transmit+0x154>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2212      	movs	r2, #18
 80058a2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a6:	f7fc fe5f 	bl	8002568 <HAL_GetTick>
 80058aa:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c0:	d108      	bne.n	80058d4 <HAL_USART_Transmit+0x80>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	e003      	b.n	80058dc <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80058dc:	e02b      	b.n	8005936 <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f9ef 	bl	8005ccc <USART_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e057      	b.n	80059a8 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	881a      	ldrh	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800590a:	b292      	uxth	r2, r2
 800590c:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3302      	adds	r3, #2
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	e008      	b.n	8005928 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	b292      	uxth	r2, r2
 8005920:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	3301      	adds	r3, #1
 8005926:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1ce      	bne.n	80058de <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2200      	movs	r2, #0
 8005948:	2140      	movs	r1, #64	; 0x40
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f9be 	bl	8005ccc <USART_WaitOnFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e026      	b.n	80059a8 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2240      	movs	r2, #64	; 0x40
 8005960:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2208      	movs	r2, #8
 8005968:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	8b1b      	ldrh	r3, [r3, #24]
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0208 	orr.w	r2, r2, #8
 800597a:	b292      	uxth	r2, r2
 800597c:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	8b1b      	ldrh	r3, [r3, #24]
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0210 	orr.w	r2, r2, #16
 800598e:	b292      	uxth	r2, r2
 8005990:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	e000      	b.n	80059a8 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 80059a6:	2302      	movs	r3, #2
  }
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3720      	adds	r7, #32
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	617b      	str	r3, [r7, #20]
  /* If no error occurs */
#if defined(USART_CR2_SLVEN)
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
                                      USART_ISR_UDR));
#else
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80059d6:	4013      	ands	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
#endif /* USART_CR2_SLVEN */
  if (errorflags == 0U)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d113      	bne.n	8005a08 <HAL_USART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00e      	beq.n	8005a08 <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <HAL_USART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (husart->RxISR != NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 810d 	beq.w	8005c18 <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
      }
      return;
 8005a06:	e107      	b.n	8005c18 <HAL_USART_IRQHandler+0x268>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
#else
  if ((errorflags != 0U)
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80e3 	beq.w	8005bd6 <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d105      	bne.n	8005a26 <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80d8 	beq.w	8005bd6 <HAL_USART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00e      	beq.n	8005a4e <HAL_USART_IRQHandler+0x9e>
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a46:	f043 0201 	orr.w	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00e      	beq.n	8005a76 <HAL_USART_IRQHandler+0xc6>
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2202      	movs	r2, #2
 8005a68:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6e:	f043 0204 	orr.w	r2, r3, #4
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00e      	beq.n	8005a9e <HAL_USART_IRQHandler+0xee>
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2204      	movs	r2, #4
 8005a90:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a96:	f043 0202 	orr.w	r2, r3, #2
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	64da      	str	r2, [r3, #76]	; 0x4c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d013      	beq.n	8005ad0 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d104      	bne.n	8005abc <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d009      	beq.n	8005ad0 <HAL_USART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac8:	f043 0208 	orr.w	r2, r3, #8
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00f      	beq.n	8005afa <HAL_USART_IRQHandler+0x14a>
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aec:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
#endif /* USART_CR2_SLVEN */

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 808c 	beq.w	8005c1c <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00c      	beq.n	8005b28 <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d007      	beq.n	8005b28 <HAL_USART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (husart->RxISR != NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d002      	beq.n	8005b46 <HAL_USART_IRQHandler+0x196>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d03e      	beq.n	8005bc4 <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f88e 	bl	8005c68 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b56:	2b40      	cmp	r3, #64	; 0x40
 8005b58:	d130      	bne.n	8005bbc <HAL_USART_IRQHandler+0x20c>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b68:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d008      	beq.n	8005b84 <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	2200      	movs	r2, #0
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fd fce3 	bl	800354a <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d013      	beq.n	8005bb4 <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b90:	4a25      	ldr	r2, [pc, #148]	; (8005c28 <HAL_USART_IRQHandler+0x278>)
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fd fcd6 	bl	800354a <HAL_DMA_Abort_IT>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d016      	beq.n	8005bd2 <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005bae:	4610      	mov	r0, r2
 8005bb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005bb2:	e00e      	b.n	8005bd2 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f84d 	bl	8005c54 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005bba:	e00a      	b.n	8005bd2 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f849 	bl	8005c54 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005bc2:	e006      	b.n	8005bd2 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f845 	bl	8005c54 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    return;
 8005bd0:	e024      	b.n	8005c1c <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005bd2:	bf00      	nop
    return;
 8005bd4:	e022      	b.n	8005c1c <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00d      	beq.n	8005bfc <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d008      	beq.n	8005bfc <HAL_USART_IRQHandler+0x24c>
#endif /* USART_CR1_FIFOEN */
  {
    if (husart->TxISR != NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d016      	beq.n	8005c20 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	4798      	blx	r3
    }
    return;
 8005bfa:	e011      	b.n	8005c20 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00d      	beq.n	8005c22 <HAL_USART_IRQHandler+0x272>
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fa02 	bl	800601a <USART_EndTransmit_IT>
    return;
 8005c16:	e004      	b.n	8005c22 <HAL_USART_IRQHandler+0x272>
      return;
 8005c18:	bf00      	nop
 8005c1a:	e002      	b.n	8005c22 <HAL_USART_IRQHandler+0x272>
    return;
 8005c1c:	bf00      	nop
 8005c1e:	e000      	b.n	8005c22 <HAL_USART_IRQHandler+0x272>
    return;
 8005c20:	bf00      	nop
    HAL_USARTEx_RxFifoFullCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	08005ca5 	.word	0x08005ca5

08005c2c <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005c7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0201 	bic.w	r2, r2, #1
 8005c8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb0:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff ffc8 	bl	8005c54 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005cdc:	e018      	b.n	8005d10 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce4:	d014      	beq.n	8005d10 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce6:	f7fc fc3f 	bl	8002568 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d302      	bcc.n	8005cfc <USART_WaitOnFlagUntilTimeout+0x30>
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d109      	bne.n	8005d10 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e00f      	b.n	8005d30 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69da      	ldr	r2, [r3, #28]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	bf0c      	ite	eq
 8005d20:	2301      	moveq	r3, #1
 8005d22:	2300      	movne	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d0d7      	beq.n	8005cde <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	4b87      	ldr	r3, [pc, #540]	; (8005f84 <USART_SetConfig+0x24c>)
 8005d66:	4013      	ands	r3, r2
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6812      	ldr	r2, [r2, #0]
 8005d6c:	6979      	ldr	r1, [r7, #20]
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8005d72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d76:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a74      	ldr	r2, [pc, #464]	; (8005f88 <USART_SetConfig+0x250>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d121      	bne.n	8005dfe <USART_SetConfig+0xc6>
 8005dba:	4b74      	ldr	r3, [pc, #464]	; (8005f8c <USART_SetConfig+0x254>)
 8005dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d817      	bhi.n	8005df8 <USART_SetConfig+0xc0>
 8005dc8:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <USART_SetConfig+0x98>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005de1 	.word	0x08005de1
 8005dd4:	08005ded 	.word	0x08005ded
 8005dd8:	08005de7 	.word	0x08005de7
 8005ddc:	08005df3 	.word	0x08005df3
 8005de0:	2301      	movs	r3, #1
 8005de2:	77fb      	strb	r3, [r7, #31]
 8005de4:	e045      	b.n	8005e72 <USART_SetConfig+0x13a>
 8005de6:	2302      	movs	r3, #2
 8005de8:	77fb      	strb	r3, [r7, #31]
 8005dea:	e042      	b.n	8005e72 <USART_SetConfig+0x13a>
 8005dec:	2304      	movs	r3, #4
 8005dee:	77fb      	strb	r3, [r7, #31]
 8005df0:	e03f      	b.n	8005e72 <USART_SetConfig+0x13a>
 8005df2:	2308      	movs	r3, #8
 8005df4:	77fb      	strb	r3, [r7, #31]
 8005df6:	e03c      	b.n	8005e72 <USART_SetConfig+0x13a>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e039      	b.n	8005e72 <USART_SetConfig+0x13a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a63      	ldr	r2, [pc, #396]	; (8005f90 <USART_SetConfig+0x258>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d132      	bne.n	8005e6e <USART_SetConfig+0x136>
 8005e08:	4b60      	ldr	r3, [pc, #384]	; (8005f8c <USART_SetConfig+0x254>)
 8005e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0e:	f003 030c 	and.w	r3, r3, #12
 8005e12:	2b0c      	cmp	r3, #12
 8005e14:	d828      	bhi.n	8005e68 <USART_SetConfig+0x130>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <USART_SetConfig+0xe4>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e51 	.word	0x08005e51
 8005e20:	08005e69 	.word	0x08005e69
 8005e24:	08005e69 	.word	0x08005e69
 8005e28:	08005e69 	.word	0x08005e69
 8005e2c:	08005e5d 	.word	0x08005e5d
 8005e30:	08005e69 	.word	0x08005e69
 8005e34:	08005e69 	.word	0x08005e69
 8005e38:	08005e69 	.word	0x08005e69
 8005e3c:	08005e57 	.word	0x08005e57
 8005e40:	08005e69 	.word	0x08005e69
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005e69 	.word	0x08005e69
 8005e4c:	08005e63 	.word	0x08005e63
 8005e50:	2300      	movs	r3, #0
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e00d      	b.n	8005e72 <USART_SetConfig+0x13a>
 8005e56:	2302      	movs	r3, #2
 8005e58:	77fb      	strb	r3, [r7, #31]
 8005e5a:	e00a      	b.n	8005e72 <USART_SetConfig+0x13a>
 8005e5c:	2304      	movs	r3, #4
 8005e5e:	77fb      	strb	r3, [r7, #31]
 8005e60:	e007      	b.n	8005e72 <USART_SetConfig+0x13a>
 8005e62:	2308      	movs	r3, #8
 8005e64:	77fb      	strb	r3, [r7, #31]
 8005e66:	e004      	b.n	8005e72 <USART_SetConfig+0x13a>
 8005e68:	2310      	movs	r3, #16
 8005e6a:	77fb      	strb	r3, [r7, #31]
 8005e6c:	e001      	b.n	8005e72 <USART_SetConfig+0x13a>
 8005e6e:	2310      	movs	r3, #16
 8005e70:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8005e72:	7ffb      	ldrb	r3, [r7, #31]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d85a      	bhi.n	8005f2e <USART_SetConfig+0x1f6>
 8005e78:	a201      	add	r2, pc, #4	; (adr r2, 8005e80 <USART_SetConfig+0x148>)
 8005e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7e:	bf00      	nop
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ec3 	.word	0x08005ec3
 8005e88:	08005ee1 	.word	0x08005ee1
 8005e8c:	08005f2f 	.word	0x08005f2f
 8005e90:	08005efb 	.word	0x08005efb
 8005e94:	08005f2f 	.word	0x08005f2f
 8005e98:	08005f2f 	.word	0x08005f2f
 8005e9c:	08005f2f 	.word	0x08005f2f
 8005ea0:	08005f19 	.word	0x08005f19
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ea4:	f7ff f908 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8005ea8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	005a      	lsls	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	085b      	lsrs	r3, r3, #1
 8005eb4:	441a      	add	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005ec0:	e038      	b.n	8005f34 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ec2:	f7ff f90f 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 8005ec6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	005a      	lsls	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	085b      	lsrs	r3, r3, #1
 8005ed2:	441a      	add	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005ede:	e029      	b.n	8005f34 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	085b      	lsrs	r3, r3, #1
 8005ee6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005eea:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6852      	ldr	r2, [r2, #4]
 8005ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005ef8:	e01c      	b.n	8005f34 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005efa:	f7ff f845 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8005efe:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	005a      	lsls	r2, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	085b      	lsrs	r3, r3, #1
 8005f0a:	441a      	add	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f14:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005f16:	e00d      	b.n	8005f34 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005f2c:	e002      	b.n	8005f34 <USART_SetConfig+0x1fc>
    default:
      ret = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	77bb      	strb	r3, [r7, #30]
      break;
 8005f32:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d916      	bls.n	8005f68 <USART_SetConfig+0x230>
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f40:	d212      	bcs.n	8005f68 <USART_SetConfig+0x230>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f023 030f 	bic.w	r3, r3, #15
 8005f4a:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	085b      	lsrs	r3, r3, #1
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	89fb      	ldrh	r3, [r7, #14]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	89fa      	ldrh	r2, [r7, #14]
 8005f64:	60da      	str	r2, [r3, #12]
 8005f66:	e001      	b.n	8005f6c <USART_SetConfig+0x234>
  }
  else
  {
    ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8005f78:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3720      	adds	r7, #32
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	efff69f3 	.word	0xefff69f3
 8005f88:	40013800 	.word	0x40013800
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	40004400 	.word	0x40004400

08005f94 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fa2:	f7fc fae1 	bl	8002568 <HAL_GetTick>
 8005fa6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d10e      	bne.n	8005fd4 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff fe81 	bl	8005ccc <USART_WaitOnFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e01e      	b.n	8006012 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d10e      	bne.n	8006000 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff fe6b 	bl	8005ccc <USART_WaitOnFlagUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e008      	b.n	8006012 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006030:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0201 	bic.w	r2, r2, #1
 8006040:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	63da      	str	r2, [r3, #60]	; 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b12      	cmp	r3, #18
 8006052:	d115      	bne.n	8006080 <USART_EndTransmit_IT+0x66>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2208      	movs	r2, #8
 800605a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	8b1b      	ldrh	r3, [r3, #24]
 8006062:	b29a      	uxth	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0208 	orr.w	r2, r2, #8
 800606c:	b292      	uxth	r2, r2
 800606e:	831a      	strh	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff fdd7 	bl	8005c2c <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800607e:	e00b      	b.n	8006098 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    HAL_USART_TxRxCpltCallback(husart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff fdd4 	bl	8005c40 <HAL_USART_TxRxCpltCallback>
}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <malloc>:
 80060a0:	4b02      	ldr	r3, [pc, #8]	; (80060ac <malloc+0xc>)
 80060a2:	4601      	mov	r1, r0
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	f000 b82b 	b.w	8006100 <_malloc_r>
 80060aa:	bf00      	nop
 80060ac:	20000058 	.word	0x20000058

080060b0 <free>:
 80060b0:	4b02      	ldr	r3, [pc, #8]	; (80060bc <free+0xc>)
 80060b2:	4601      	mov	r1, r0
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	f000 b921 	b.w	80062fc <_free_r>
 80060ba:	bf00      	nop
 80060bc:	20000058 	.word	0x20000058

080060c0 <sbrk_aligned>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	4e0e      	ldr	r6, [pc, #56]	; (80060fc <sbrk_aligned+0x3c>)
 80060c4:	460c      	mov	r4, r1
 80060c6:	6831      	ldr	r1, [r6, #0]
 80060c8:	4605      	mov	r5, r0
 80060ca:	b911      	cbnz	r1, 80060d2 <sbrk_aligned+0x12>
 80060cc:	f000 f8cc 	bl	8006268 <_sbrk_r>
 80060d0:	6030      	str	r0, [r6, #0]
 80060d2:	4621      	mov	r1, r4
 80060d4:	4628      	mov	r0, r5
 80060d6:	f000 f8c7 	bl	8006268 <_sbrk_r>
 80060da:	1c43      	adds	r3, r0, #1
 80060dc:	d00a      	beq.n	80060f4 <sbrk_aligned+0x34>
 80060de:	1cc4      	adds	r4, r0, #3
 80060e0:	f024 0403 	bic.w	r4, r4, #3
 80060e4:	42a0      	cmp	r0, r4
 80060e6:	d007      	beq.n	80060f8 <sbrk_aligned+0x38>
 80060e8:	1a21      	subs	r1, r4, r0
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 f8bc 	bl	8006268 <_sbrk_r>
 80060f0:	3001      	adds	r0, #1
 80060f2:	d101      	bne.n	80060f8 <sbrk_aligned+0x38>
 80060f4:	f04f 34ff 	mov.w	r4, #4294967295
 80060f8:	4620      	mov	r0, r4
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	2000024c 	.word	0x2000024c

08006100 <_malloc_r>:
 8006100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006104:	1ccd      	adds	r5, r1, #3
 8006106:	f025 0503 	bic.w	r5, r5, #3
 800610a:	3508      	adds	r5, #8
 800610c:	2d0c      	cmp	r5, #12
 800610e:	bf38      	it	cc
 8006110:	250c      	movcc	r5, #12
 8006112:	2d00      	cmp	r5, #0
 8006114:	4607      	mov	r7, r0
 8006116:	db01      	blt.n	800611c <_malloc_r+0x1c>
 8006118:	42a9      	cmp	r1, r5
 800611a:	d905      	bls.n	8006128 <_malloc_r+0x28>
 800611c:	230c      	movs	r3, #12
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	2600      	movs	r6, #0
 8006122:	4630      	mov	r0, r6
 8006124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006128:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80061fc <_malloc_r+0xfc>
 800612c:	f000 f868 	bl	8006200 <__malloc_lock>
 8006130:	f8d8 3000 	ldr.w	r3, [r8]
 8006134:	461c      	mov	r4, r3
 8006136:	bb5c      	cbnz	r4, 8006190 <_malloc_r+0x90>
 8006138:	4629      	mov	r1, r5
 800613a:	4638      	mov	r0, r7
 800613c:	f7ff ffc0 	bl	80060c0 <sbrk_aligned>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	4604      	mov	r4, r0
 8006144:	d155      	bne.n	80061f2 <_malloc_r+0xf2>
 8006146:	f8d8 4000 	ldr.w	r4, [r8]
 800614a:	4626      	mov	r6, r4
 800614c:	2e00      	cmp	r6, #0
 800614e:	d145      	bne.n	80061dc <_malloc_r+0xdc>
 8006150:	2c00      	cmp	r4, #0
 8006152:	d048      	beq.n	80061e6 <_malloc_r+0xe6>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	4631      	mov	r1, r6
 8006158:	4638      	mov	r0, r7
 800615a:	eb04 0903 	add.w	r9, r4, r3
 800615e:	f000 f883 	bl	8006268 <_sbrk_r>
 8006162:	4581      	cmp	r9, r0
 8006164:	d13f      	bne.n	80061e6 <_malloc_r+0xe6>
 8006166:	6821      	ldr	r1, [r4, #0]
 8006168:	1a6d      	subs	r5, r5, r1
 800616a:	4629      	mov	r1, r5
 800616c:	4638      	mov	r0, r7
 800616e:	f7ff ffa7 	bl	80060c0 <sbrk_aligned>
 8006172:	3001      	adds	r0, #1
 8006174:	d037      	beq.n	80061e6 <_malloc_r+0xe6>
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	442b      	add	r3, r5
 800617a:	6023      	str	r3, [r4, #0]
 800617c:	f8d8 3000 	ldr.w	r3, [r8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d038      	beq.n	80061f6 <_malloc_r+0xf6>
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	42a2      	cmp	r2, r4
 8006188:	d12b      	bne.n	80061e2 <_malloc_r+0xe2>
 800618a:	2200      	movs	r2, #0
 800618c:	605a      	str	r2, [r3, #4]
 800618e:	e00f      	b.n	80061b0 <_malloc_r+0xb0>
 8006190:	6822      	ldr	r2, [r4, #0]
 8006192:	1b52      	subs	r2, r2, r5
 8006194:	d41f      	bmi.n	80061d6 <_malloc_r+0xd6>
 8006196:	2a0b      	cmp	r2, #11
 8006198:	d917      	bls.n	80061ca <_malloc_r+0xca>
 800619a:	1961      	adds	r1, r4, r5
 800619c:	42a3      	cmp	r3, r4
 800619e:	6025      	str	r5, [r4, #0]
 80061a0:	bf18      	it	ne
 80061a2:	6059      	strne	r1, [r3, #4]
 80061a4:	6863      	ldr	r3, [r4, #4]
 80061a6:	bf08      	it	eq
 80061a8:	f8c8 1000 	streq.w	r1, [r8]
 80061ac:	5162      	str	r2, [r4, r5]
 80061ae:	604b      	str	r3, [r1, #4]
 80061b0:	4638      	mov	r0, r7
 80061b2:	f104 060b 	add.w	r6, r4, #11
 80061b6:	f000 f829 	bl	800620c <__malloc_unlock>
 80061ba:	f026 0607 	bic.w	r6, r6, #7
 80061be:	1d23      	adds	r3, r4, #4
 80061c0:	1af2      	subs	r2, r6, r3
 80061c2:	d0ae      	beq.n	8006122 <_malloc_r+0x22>
 80061c4:	1b9b      	subs	r3, r3, r6
 80061c6:	50a3      	str	r3, [r4, r2]
 80061c8:	e7ab      	b.n	8006122 <_malloc_r+0x22>
 80061ca:	42a3      	cmp	r3, r4
 80061cc:	6862      	ldr	r2, [r4, #4]
 80061ce:	d1dd      	bne.n	800618c <_malloc_r+0x8c>
 80061d0:	f8c8 2000 	str.w	r2, [r8]
 80061d4:	e7ec      	b.n	80061b0 <_malloc_r+0xb0>
 80061d6:	4623      	mov	r3, r4
 80061d8:	6864      	ldr	r4, [r4, #4]
 80061da:	e7ac      	b.n	8006136 <_malloc_r+0x36>
 80061dc:	4634      	mov	r4, r6
 80061de:	6876      	ldr	r6, [r6, #4]
 80061e0:	e7b4      	b.n	800614c <_malloc_r+0x4c>
 80061e2:	4613      	mov	r3, r2
 80061e4:	e7cc      	b.n	8006180 <_malloc_r+0x80>
 80061e6:	230c      	movs	r3, #12
 80061e8:	603b      	str	r3, [r7, #0]
 80061ea:	4638      	mov	r0, r7
 80061ec:	f000 f80e 	bl	800620c <__malloc_unlock>
 80061f0:	e797      	b.n	8006122 <_malloc_r+0x22>
 80061f2:	6025      	str	r5, [r4, #0]
 80061f4:	e7dc      	b.n	80061b0 <_malloc_r+0xb0>
 80061f6:	605b      	str	r3, [r3, #4]
 80061f8:	deff      	udf	#255	; 0xff
 80061fa:	bf00      	nop
 80061fc:	20000248 	.word	0x20000248

08006200 <__malloc_lock>:
 8006200:	4801      	ldr	r0, [pc, #4]	; (8006208 <__malloc_lock+0x8>)
 8006202:	f000 b86b 	b.w	80062dc <__retarget_lock_acquire_recursive>
 8006206:	bf00      	nop
 8006208:	2000038c 	.word	0x2000038c

0800620c <__malloc_unlock>:
 800620c:	4801      	ldr	r0, [pc, #4]	; (8006214 <__malloc_unlock+0x8>)
 800620e:	f000 b866 	b.w	80062de <__retarget_lock_release_recursive>
 8006212:	bf00      	nop
 8006214:	2000038c 	.word	0x2000038c

08006218 <siprintf>:
 8006218:	b40e      	push	{r1, r2, r3}
 800621a:	b500      	push	{lr}
 800621c:	b09c      	sub	sp, #112	; 0x70
 800621e:	ab1d      	add	r3, sp, #116	; 0x74
 8006220:	9002      	str	r0, [sp, #8]
 8006222:	9006      	str	r0, [sp, #24]
 8006224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006228:	4809      	ldr	r0, [pc, #36]	; (8006250 <siprintf+0x38>)
 800622a:	9107      	str	r1, [sp, #28]
 800622c:	9104      	str	r1, [sp, #16]
 800622e:	4909      	ldr	r1, [pc, #36]	; (8006254 <siprintf+0x3c>)
 8006230:	f853 2b04 	ldr.w	r2, [r3], #4
 8006234:	9105      	str	r1, [sp, #20]
 8006236:	6800      	ldr	r0, [r0, #0]
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	a902      	add	r1, sp, #8
 800623c:	f000 f904 	bl	8006448 <_svfiprintf_r>
 8006240:	9b02      	ldr	r3, [sp, #8]
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	b01c      	add	sp, #112	; 0x70
 8006248:	f85d eb04 	ldr.w	lr, [sp], #4
 800624c:	b003      	add	sp, #12
 800624e:	4770      	bx	lr
 8006250:	20000058 	.word	0x20000058
 8006254:	ffff0208 	.word	0xffff0208

08006258 <memset>:
 8006258:	4402      	add	r2, r0
 800625a:	4603      	mov	r3, r0
 800625c:	4293      	cmp	r3, r2
 800625e:	d100      	bne.n	8006262 <memset+0xa>
 8006260:	4770      	bx	lr
 8006262:	f803 1b01 	strb.w	r1, [r3], #1
 8006266:	e7f9      	b.n	800625c <memset+0x4>

08006268 <_sbrk_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4d06      	ldr	r5, [pc, #24]	; (8006284 <_sbrk_r+0x1c>)
 800626c:	2300      	movs	r3, #0
 800626e:	4604      	mov	r4, r0
 8006270:	4608      	mov	r0, r1
 8006272:	602b      	str	r3, [r5, #0]
 8006274:	f7fc f89e 	bl	80023b4 <_sbrk>
 8006278:	1c43      	adds	r3, r0, #1
 800627a:	d102      	bne.n	8006282 <_sbrk_r+0x1a>
 800627c:	682b      	ldr	r3, [r5, #0]
 800627e:	b103      	cbz	r3, 8006282 <_sbrk_r+0x1a>
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	bd38      	pop	{r3, r4, r5, pc}
 8006284:	20000388 	.word	0x20000388

08006288 <__errno>:
 8006288:	4b01      	ldr	r3, [pc, #4]	; (8006290 <__errno+0x8>)
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	20000058 	.word	0x20000058

08006294 <__libc_init_array>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	4d0d      	ldr	r5, [pc, #52]	; (80062cc <__libc_init_array+0x38>)
 8006298:	4c0d      	ldr	r4, [pc, #52]	; (80062d0 <__libc_init_array+0x3c>)
 800629a:	1b64      	subs	r4, r4, r5
 800629c:	10a4      	asrs	r4, r4, #2
 800629e:	2600      	movs	r6, #0
 80062a0:	42a6      	cmp	r6, r4
 80062a2:	d109      	bne.n	80062b8 <__libc_init_array+0x24>
 80062a4:	4d0b      	ldr	r5, [pc, #44]	; (80062d4 <__libc_init_array+0x40>)
 80062a6:	4c0c      	ldr	r4, [pc, #48]	; (80062d8 <__libc_init_array+0x44>)
 80062a8:	f000 fbae 	bl	8006a08 <_init>
 80062ac:	1b64      	subs	r4, r4, r5
 80062ae:	10a4      	asrs	r4, r4, #2
 80062b0:	2600      	movs	r6, #0
 80062b2:	42a6      	cmp	r6, r4
 80062b4:	d105      	bne.n	80062c2 <__libc_init_array+0x2e>
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062bc:	4798      	blx	r3
 80062be:	3601      	adds	r6, #1
 80062c0:	e7ee      	b.n	80062a0 <__libc_init_array+0xc>
 80062c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c6:	4798      	blx	r3
 80062c8:	3601      	adds	r6, #1
 80062ca:	e7f2      	b.n	80062b2 <__libc_init_array+0x1e>
 80062cc:	08006b90 	.word	0x08006b90
 80062d0:	08006b90 	.word	0x08006b90
 80062d4:	08006b90 	.word	0x08006b90
 80062d8:	08006b94 	.word	0x08006b94

080062dc <__retarget_lock_acquire_recursive>:
 80062dc:	4770      	bx	lr

080062de <__retarget_lock_release_recursive>:
 80062de:	4770      	bx	lr

080062e0 <memcpy>:
 80062e0:	440a      	add	r2, r1
 80062e2:	4291      	cmp	r1, r2
 80062e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80062e8:	d100      	bne.n	80062ec <memcpy+0xc>
 80062ea:	4770      	bx	lr
 80062ec:	b510      	push	{r4, lr}
 80062ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062f6:	4291      	cmp	r1, r2
 80062f8:	d1f9      	bne.n	80062ee <memcpy+0xe>
 80062fa:	bd10      	pop	{r4, pc}

080062fc <_free_r>:
 80062fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062fe:	2900      	cmp	r1, #0
 8006300:	d044      	beq.n	800638c <_free_r+0x90>
 8006302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006306:	9001      	str	r0, [sp, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f1a1 0404 	sub.w	r4, r1, #4
 800630e:	bfb8      	it	lt
 8006310:	18e4      	addlt	r4, r4, r3
 8006312:	f7ff ff75 	bl	8006200 <__malloc_lock>
 8006316:	4a1e      	ldr	r2, [pc, #120]	; (8006390 <_free_r+0x94>)
 8006318:	9801      	ldr	r0, [sp, #4]
 800631a:	6813      	ldr	r3, [r2, #0]
 800631c:	b933      	cbnz	r3, 800632c <_free_r+0x30>
 800631e:	6063      	str	r3, [r4, #4]
 8006320:	6014      	str	r4, [r2, #0]
 8006322:	b003      	add	sp, #12
 8006324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006328:	f7ff bf70 	b.w	800620c <__malloc_unlock>
 800632c:	42a3      	cmp	r3, r4
 800632e:	d908      	bls.n	8006342 <_free_r+0x46>
 8006330:	6825      	ldr	r5, [r4, #0]
 8006332:	1961      	adds	r1, r4, r5
 8006334:	428b      	cmp	r3, r1
 8006336:	bf01      	itttt	eq
 8006338:	6819      	ldreq	r1, [r3, #0]
 800633a:	685b      	ldreq	r3, [r3, #4]
 800633c:	1949      	addeq	r1, r1, r5
 800633e:	6021      	streq	r1, [r4, #0]
 8006340:	e7ed      	b.n	800631e <_free_r+0x22>
 8006342:	461a      	mov	r2, r3
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	b10b      	cbz	r3, 800634c <_free_r+0x50>
 8006348:	42a3      	cmp	r3, r4
 800634a:	d9fa      	bls.n	8006342 <_free_r+0x46>
 800634c:	6811      	ldr	r1, [r2, #0]
 800634e:	1855      	adds	r5, r2, r1
 8006350:	42a5      	cmp	r5, r4
 8006352:	d10b      	bne.n	800636c <_free_r+0x70>
 8006354:	6824      	ldr	r4, [r4, #0]
 8006356:	4421      	add	r1, r4
 8006358:	1854      	adds	r4, r2, r1
 800635a:	42a3      	cmp	r3, r4
 800635c:	6011      	str	r1, [r2, #0]
 800635e:	d1e0      	bne.n	8006322 <_free_r+0x26>
 8006360:	681c      	ldr	r4, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	6053      	str	r3, [r2, #4]
 8006366:	440c      	add	r4, r1
 8006368:	6014      	str	r4, [r2, #0]
 800636a:	e7da      	b.n	8006322 <_free_r+0x26>
 800636c:	d902      	bls.n	8006374 <_free_r+0x78>
 800636e:	230c      	movs	r3, #12
 8006370:	6003      	str	r3, [r0, #0]
 8006372:	e7d6      	b.n	8006322 <_free_r+0x26>
 8006374:	6825      	ldr	r5, [r4, #0]
 8006376:	1961      	adds	r1, r4, r5
 8006378:	428b      	cmp	r3, r1
 800637a:	bf04      	itt	eq
 800637c:	6819      	ldreq	r1, [r3, #0]
 800637e:	685b      	ldreq	r3, [r3, #4]
 8006380:	6063      	str	r3, [r4, #4]
 8006382:	bf04      	itt	eq
 8006384:	1949      	addeq	r1, r1, r5
 8006386:	6021      	streq	r1, [r4, #0]
 8006388:	6054      	str	r4, [r2, #4]
 800638a:	e7ca      	b.n	8006322 <_free_r+0x26>
 800638c:	b003      	add	sp, #12
 800638e:	bd30      	pop	{r4, r5, pc}
 8006390:	20000248 	.word	0x20000248

08006394 <__ssputs_r>:
 8006394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006398:	688e      	ldr	r6, [r1, #8]
 800639a:	461f      	mov	r7, r3
 800639c:	42be      	cmp	r6, r7
 800639e:	680b      	ldr	r3, [r1, #0]
 80063a0:	4682      	mov	sl, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	4690      	mov	r8, r2
 80063a6:	d82c      	bhi.n	8006402 <__ssputs_r+0x6e>
 80063a8:	898a      	ldrh	r2, [r1, #12]
 80063aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063ae:	d026      	beq.n	80063fe <__ssputs_r+0x6a>
 80063b0:	6965      	ldr	r5, [r4, #20]
 80063b2:	6909      	ldr	r1, [r1, #16]
 80063b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063b8:	eba3 0901 	sub.w	r9, r3, r1
 80063bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063c0:	1c7b      	adds	r3, r7, #1
 80063c2:	444b      	add	r3, r9
 80063c4:	106d      	asrs	r5, r5, #1
 80063c6:	429d      	cmp	r5, r3
 80063c8:	bf38      	it	cc
 80063ca:	461d      	movcc	r5, r3
 80063cc:	0553      	lsls	r3, r2, #21
 80063ce:	d527      	bpl.n	8006420 <__ssputs_r+0x8c>
 80063d0:	4629      	mov	r1, r5
 80063d2:	f7ff fe95 	bl	8006100 <_malloc_r>
 80063d6:	4606      	mov	r6, r0
 80063d8:	b360      	cbz	r0, 8006434 <__ssputs_r+0xa0>
 80063da:	6921      	ldr	r1, [r4, #16]
 80063dc:	464a      	mov	r2, r9
 80063de:	f7ff ff7f 	bl	80062e0 <memcpy>
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ec:	81a3      	strh	r3, [r4, #12]
 80063ee:	6126      	str	r6, [r4, #16]
 80063f0:	6165      	str	r5, [r4, #20]
 80063f2:	444e      	add	r6, r9
 80063f4:	eba5 0509 	sub.w	r5, r5, r9
 80063f8:	6026      	str	r6, [r4, #0]
 80063fa:	60a5      	str	r5, [r4, #8]
 80063fc:	463e      	mov	r6, r7
 80063fe:	42be      	cmp	r6, r7
 8006400:	d900      	bls.n	8006404 <__ssputs_r+0x70>
 8006402:	463e      	mov	r6, r7
 8006404:	6820      	ldr	r0, [r4, #0]
 8006406:	4632      	mov	r2, r6
 8006408:	4641      	mov	r1, r8
 800640a:	f000 faab 	bl	8006964 <memmove>
 800640e:	68a3      	ldr	r3, [r4, #8]
 8006410:	1b9b      	subs	r3, r3, r6
 8006412:	60a3      	str	r3, [r4, #8]
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	4433      	add	r3, r6
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	2000      	movs	r0, #0
 800641c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006420:	462a      	mov	r2, r5
 8006422:	f000 fab9 	bl	8006998 <_realloc_r>
 8006426:	4606      	mov	r6, r0
 8006428:	2800      	cmp	r0, #0
 800642a:	d1e0      	bne.n	80063ee <__ssputs_r+0x5a>
 800642c:	6921      	ldr	r1, [r4, #16]
 800642e:	4650      	mov	r0, sl
 8006430:	f7ff ff64 	bl	80062fc <_free_r>
 8006434:	230c      	movs	r3, #12
 8006436:	f8ca 3000 	str.w	r3, [sl]
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006440:	81a3      	strh	r3, [r4, #12]
 8006442:	f04f 30ff 	mov.w	r0, #4294967295
 8006446:	e7e9      	b.n	800641c <__ssputs_r+0x88>

08006448 <_svfiprintf_r>:
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	4698      	mov	r8, r3
 800644e:	898b      	ldrh	r3, [r1, #12]
 8006450:	061b      	lsls	r3, r3, #24
 8006452:	b09d      	sub	sp, #116	; 0x74
 8006454:	4607      	mov	r7, r0
 8006456:	460d      	mov	r5, r1
 8006458:	4614      	mov	r4, r2
 800645a:	d50e      	bpl.n	800647a <_svfiprintf_r+0x32>
 800645c:	690b      	ldr	r3, [r1, #16]
 800645e:	b963      	cbnz	r3, 800647a <_svfiprintf_r+0x32>
 8006460:	2140      	movs	r1, #64	; 0x40
 8006462:	f7ff fe4d 	bl	8006100 <_malloc_r>
 8006466:	6028      	str	r0, [r5, #0]
 8006468:	6128      	str	r0, [r5, #16]
 800646a:	b920      	cbnz	r0, 8006476 <_svfiprintf_r+0x2e>
 800646c:	230c      	movs	r3, #12
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	f04f 30ff 	mov.w	r0, #4294967295
 8006474:	e0d0      	b.n	8006618 <_svfiprintf_r+0x1d0>
 8006476:	2340      	movs	r3, #64	; 0x40
 8006478:	616b      	str	r3, [r5, #20]
 800647a:	2300      	movs	r3, #0
 800647c:	9309      	str	r3, [sp, #36]	; 0x24
 800647e:	2320      	movs	r3, #32
 8006480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006484:	f8cd 800c 	str.w	r8, [sp, #12]
 8006488:	2330      	movs	r3, #48	; 0x30
 800648a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006630 <_svfiprintf_r+0x1e8>
 800648e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006492:	f04f 0901 	mov.w	r9, #1
 8006496:	4623      	mov	r3, r4
 8006498:	469a      	mov	sl, r3
 800649a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800649e:	b10a      	cbz	r2, 80064a4 <_svfiprintf_r+0x5c>
 80064a0:	2a25      	cmp	r2, #37	; 0x25
 80064a2:	d1f9      	bne.n	8006498 <_svfiprintf_r+0x50>
 80064a4:	ebba 0b04 	subs.w	fp, sl, r4
 80064a8:	d00b      	beq.n	80064c2 <_svfiprintf_r+0x7a>
 80064aa:	465b      	mov	r3, fp
 80064ac:	4622      	mov	r2, r4
 80064ae:	4629      	mov	r1, r5
 80064b0:	4638      	mov	r0, r7
 80064b2:	f7ff ff6f 	bl	8006394 <__ssputs_r>
 80064b6:	3001      	adds	r0, #1
 80064b8:	f000 80a9 	beq.w	800660e <_svfiprintf_r+0x1c6>
 80064bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064be:	445a      	add	r2, fp
 80064c0:	9209      	str	r2, [sp, #36]	; 0x24
 80064c2:	f89a 3000 	ldrb.w	r3, [sl]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 80a1 	beq.w	800660e <_svfiprintf_r+0x1c6>
 80064cc:	2300      	movs	r3, #0
 80064ce:	f04f 32ff 	mov.w	r2, #4294967295
 80064d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064d6:	f10a 0a01 	add.w	sl, sl, #1
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	9307      	str	r3, [sp, #28]
 80064de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064e2:	931a      	str	r3, [sp, #104]	; 0x68
 80064e4:	4654      	mov	r4, sl
 80064e6:	2205      	movs	r2, #5
 80064e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ec:	4850      	ldr	r0, [pc, #320]	; (8006630 <_svfiprintf_r+0x1e8>)
 80064ee:	f7f9 fe6f 	bl	80001d0 <memchr>
 80064f2:	9a04      	ldr	r2, [sp, #16]
 80064f4:	b9d8      	cbnz	r0, 800652e <_svfiprintf_r+0xe6>
 80064f6:	06d0      	lsls	r0, r2, #27
 80064f8:	bf44      	itt	mi
 80064fa:	2320      	movmi	r3, #32
 80064fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006500:	0711      	lsls	r1, r2, #28
 8006502:	bf44      	itt	mi
 8006504:	232b      	movmi	r3, #43	; 0x2b
 8006506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800650a:	f89a 3000 	ldrb.w	r3, [sl]
 800650e:	2b2a      	cmp	r3, #42	; 0x2a
 8006510:	d015      	beq.n	800653e <_svfiprintf_r+0xf6>
 8006512:	9a07      	ldr	r2, [sp, #28]
 8006514:	4654      	mov	r4, sl
 8006516:	2000      	movs	r0, #0
 8006518:	f04f 0c0a 	mov.w	ip, #10
 800651c:	4621      	mov	r1, r4
 800651e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006522:	3b30      	subs	r3, #48	; 0x30
 8006524:	2b09      	cmp	r3, #9
 8006526:	d94d      	bls.n	80065c4 <_svfiprintf_r+0x17c>
 8006528:	b1b0      	cbz	r0, 8006558 <_svfiprintf_r+0x110>
 800652a:	9207      	str	r2, [sp, #28]
 800652c:	e014      	b.n	8006558 <_svfiprintf_r+0x110>
 800652e:	eba0 0308 	sub.w	r3, r0, r8
 8006532:	fa09 f303 	lsl.w	r3, r9, r3
 8006536:	4313      	orrs	r3, r2
 8006538:	9304      	str	r3, [sp, #16]
 800653a:	46a2      	mov	sl, r4
 800653c:	e7d2      	b.n	80064e4 <_svfiprintf_r+0x9c>
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	1d19      	adds	r1, r3, #4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	9103      	str	r1, [sp, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	bfbb      	ittet	lt
 800654a:	425b      	neglt	r3, r3
 800654c:	f042 0202 	orrlt.w	r2, r2, #2
 8006550:	9307      	strge	r3, [sp, #28]
 8006552:	9307      	strlt	r3, [sp, #28]
 8006554:	bfb8      	it	lt
 8006556:	9204      	strlt	r2, [sp, #16]
 8006558:	7823      	ldrb	r3, [r4, #0]
 800655a:	2b2e      	cmp	r3, #46	; 0x2e
 800655c:	d10c      	bne.n	8006578 <_svfiprintf_r+0x130>
 800655e:	7863      	ldrb	r3, [r4, #1]
 8006560:	2b2a      	cmp	r3, #42	; 0x2a
 8006562:	d134      	bne.n	80065ce <_svfiprintf_r+0x186>
 8006564:	9b03      	ldr	r3, [sp, #12]
 8006566:	1d1a      	adds	r2, r3, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	9203      	str	r2, [sp, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	bfb8      	it	lt
 8006570:	f04f 33ff 	movlt.w	r3, #4294967295
 8006574:	3402      	adds	r4, #2
 8006576:	9305      	str	r3, [sp, #20]
 8006578:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006640 <_svfiprintf_r+0x1f8>
 800657c:	7821      	ldrb	r1, [r4, #0]
 800657e:	2203      	movs	r2, #3
 8006580:	4650      	mov	r0, sl
 8006582:	f7f9 fe25 	bl	80001d0 <memchr>
 8006586:	b138      	cbz	r0, 8006598 <_svfiprintf_r+0x150>
 8006588:	9b04      	ldr	r3, [sp, #16]
 800658a:	eba0 000a 	sub.w	r0, r0, sl
 800658e:	2240      	movs	r2, #64	; 0x40
 8006590:	4082      	lsls	r2, r0
 8006592:	4313      	orrs	r3, r2
 8006594:	3401      	adds	r4, #1
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800659c:	4825      	ldr	r0, [pc, #148]	; (8006634 <_svfiprintf_r+0x1ec>)
 800659e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065a2:	2206      	movs	r2, #6
 80065a4:	f7f9 fe14 	bl	80001d0 <memchr>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d038      	beq.n	800661e <_svfiprintf_r+0x1d6>
 80065ac:	4b22      	ldr	r3, [pc, #136]	; (8006638 <_svfiprintf_r+0x1f0>)
 80065ae:	bb1b      	cbnz	r3, 80065f8 <_svfiprintf_r+0x1b0>
 80065b0:	9b03      	ldr	r3, [sp, #12]
 80065b2:	3307      	adds	r3, #7
 80065b4:	f023 0307 	bic.w	r3, r3, #7
 80065b8:	3308      	adds	r3, #8
 80065ba:	9303      	str	r3, [sp, #12]
 80065bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065be:	4433      	add	r3, r6
 80065c0:	9309      	str	r3, [sp, #36]	; 0x24
 80065c2:	e768      	b.n	8006496 <_svfiprintf_r+0x4e>
 80065c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80065c8:	460c      	mov	r4, r1
 80065ca:	2001      	movs	r0, #1
 80065cc:	e7a6      	b.n	800651c <_svfiprintf_r+0xd4>
 80065ce:	2300      	movs	r3, #0
 80065d0:	3401      	adds	r4, #1
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	4619      	mov	r1, r3
 80065d6:	f04f 0c0a 	mov.w	ip, #10
 80065da:	4620      	mov	r0, r4
 80065dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065e0:	3a30      	subs	r2, #48	; 0x30
 80065e2:	2a09      	cmp	r2, #9
 80065e4:	d903      	bls.n	80065ee <_svfiprintf_r+0x1a6>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0c6      	beq.n	8006578 <_svfiprintf_r+0x130>
 80065ea:	9105      	str	r1, [sp, #20]
 80065ec:	e7c4      	b.n	8006578 <_svfiprintf_r+0x130>
 80065ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80065f2:	4604      	mov	r4, r0
 80065f4:	2301      	movs	r3, #1
 80065f6:	e7f0      	b.n	80065da <_svfiprintf_r+0x192>
 80065f8:	ab03      	add	r3, sp, #12
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	462a      	mov	r2, r5
 80065fe:	4b0f      	ldr	r3, [pc, #60]	; (800663c <_svfiprintf_r+0x1f4>)
 8006600:	a904      	add	r1, sp, #16
 8006602:	4638      	mov	r0, r7
 8006604:	f3af 8000 	nop.w
 8006608:	1c42      	adds	r2, r0, #1
 800660a:	4606      	mov	r6, r0
 800660c:	d1d6      	bne.n	80065bc <_svfiprintf_r+0x174>
 800660e:	89ab      	ldrh	r3, [r5, #12]
 8006610:	065b      	lsls	r3, r3, #25
 8006612:	f53f af2d 	bmi.w	8006470 <_svfiprintf_r+0x28>
 8006616:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006618:	b01d      	add	sp, #116	; 0x74
 800661a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661e:	ab03      	add	r3, sp, #12
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	462a      	mov	r2, r5
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <_svfiprintf_r+0x1f4>)
 8006626:	a904      	add	r1, sp, #16
 8006628:	4638      	mov	r0, r7
 800662a:	f000 f879 	bl	8006720 <_printf_i>
 800662e:	e7eb      	b.n	8006608 <_svfiprintf_r+0x1c0>
 8006630:	08006b54 	.word	0x08006b54
 8006634:	08006b5e 	.word	0x08006b5e
 8006638:	00000000 	.word	0x00000000
 800663c:	08006395 	.word	0x08006395
 8006640:	08006b5a 	.word	0x08006b5a

08006644 <_printf_common>:
 8006644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006648:	4616      	mov	r6, r2
 800664a:	4699      	mov	r9, r3
 800664c:	688a      	ldr	r2, [r1, #8]
 800664e:	690b      	ldr	r3, [r1, #16]
 8006650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006654:	4293      	cmp	r3, r2
 8006656:	bfb8      	it	lt
 8006658:	4613      	movlt	r3, r2
 800665a:	6033      	str	r3, [r6, #0]
 800665c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006660:	4607      	mov	r7, r0
 8006662:	460c      	mov	r4, r1
 8006664:	b10a      	cbz	r2, 800666a <_printf_common+0x26>
 8006666:	3301      	adds	r3, #1
 8006668:	6033      	str	r3, [r6, #0]
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	0699      	lsls	r1, r3, #26
 800666e:	bf42      	ittt	mi
 8006670:	6833      	ldrmi	r3, [r6, #0]
 8006672:	3302      	addmi	r3, #2
 8006674:	6033      	strmi	r3, [r6, #0]
 8006676:	6825      	ldr	r5, [r4, #0]
 8006678:	f015 0506 	ands.w	r5, r5, #6
 800667c:	d106      	bne.n	800668c <_printf_common+0x48>
 800667e:	f104 0a19 	add.w	sl, r4, #25
 8006682:	68e3      	ldr	r3, [r4, #12]
 8006684:	6832      	ldr	r2, [r6, #0]
 8006686:	1a9b      	subs	r3, r3, r2
 8006688:	42ab      	cmp	r3, r5
 800668a:	dc26      	bgt.n	80066da <_printf_common+0x96>
 800668c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006690:	1e13      	subs	r3, r2, #0
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	bf18      	it	ne
 8006696:	2301      	movne	r3, #1
 8006698:	0692      	lsls	r2, r2, #26
 800669a:	d42b      	bmi.n	80066f4 <_printf_common+0xb0>
 800669c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066a0:	4649      	mov	r1, r9
 80066a2:	4638      	mov	r0, r7
 80066a4:	47c0      	blx	r8
 80066a6:	3001      	adds	r0, #1
 80066a8:	d01e      	beq.n	80066e8 <_printf_common+0xa4>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	6922      	ldr	r2, [r4, #16]
 80066ae:	f003 0306 	and.w	r3, r3, #6
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	bf02      	ittt	eq
 80066b6:	68e5      	ldreq	r5, [r4, #12]
 80066b8:	6833      	ldreq	r3, [r6, #0]
 80066ba:	1aed      	subeq	r5, r5, r3
 80066bc:	68a3      	ldr	r3, [r4, #8]
 80066be:	bf0c      	ite	eq
 80066c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066c4:	2500      	movne	r5, #0
 80066c6:	4293      	cmp	r3, r2
 80066c8:	bfc4      	itt	gt
 80066ca:	1a9b      	subgt	r3, r3, r2
 80066cc:	18ed      	addgt	r5, r5, r3
 80066ce:	2600      	movs	r6, #0
 80066d0:	341a      	adds	r4, #26
 80066d2:	42b5      	cmp	r5, r6
 80066d4:	d11a      	bne.n	800670c <_printf_common+0xc8>
 80066d6:	2000      	movs	r0, #0
 80066d8:	e008      	b.n	80066ec <_printf_common+0xa8>
 80066da:	2301      	movs	r3, #1
 80066dc:	4652      	mov	r2, sl
 80066de:	4649      	mov	r1, r9
 80066e0:	4638      	mov	r0, r7
 80066e2:	47c0      	blx	r8
 80066e4:	3001      	adds	r0, #1
 80066e6:	d103      	bne.n	80066f0 <_printf_common+0xac>
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f0:	3501      	adds	r5, #1
 80066f2:	e7c6      	b.n	8006682 <_printf_common+0x3e>
 80066f4:	18e1      	adds	r1, r4, r3
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	2030      	movs	r0, #48	; 0x30
 80066fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066fe:	4422      	add	r2, r4
 8006700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006708:	3302      	adds	r3, #2
 800670a:	e7c7      	b.n	800669c <_printf_common+0x58>
 800670c:	2301      	movs	r3, #1
 800670e:	4622      	mov	r2, r4
 8006710:	4649      	mov	r1, r9
 8006712:	4638      	mov	r0, r7
 8006714:	47c0      	blx	r8
 8006716:	3001      	adds	r0, #1
 8006718:	d0e6      	beq.n	80066e8 <_printf_common+0xa4>
 800671a:	3601      	adds	r6, #1
 800671c:	e7d9      	b.n	80066d2 <_printf_common+0x8e>
	...

08006720 <_printf_i>:
 8006720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006724:	7e0f      	ldrb	r7, [r1, #24]
 8006726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006728:	2f78      	cmp	r7, #120	; 0x78
 800672a:	4691      	mov	r9, r2
 800672c:	4680      	mov	r8, r0
 800672e:	460c      	mov	r4, r1
 8006730:	469a      	mov	sl, r3
 8006732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006736:	d807      	bhi.n	8006748 <_printf_i+0x28>
 8006738:	2f62      	cmp	r7, #98	; 0x62
 800673a:	d80a      	bhi.n	8006752 <_printf_i+0x32>
 800673c:	2f00      	cmp	r7, #0
 800673e:	f000 80d4 	beq.w	80068ea <_printf_i+0x1ca>
 8006742:	2f58      	cmp	r7, #88	; 0x58
 8006744:	f000 80c0 	beq.w	80068c8 <_printf_i+0x1a8>
 8006748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800674c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006750:	e03a      	b.n	80067c8 <_printf_i+0xa8>
 8006752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006756:	2b15      	cmp	r3, #21
 8006758:	d8f6      	bhi.n	8006748 <_printf_i+0x28>
 800675a:	a101      	add	r1, pc, #4	; (adr r1, 8006760 <_printf_i+0x40>)
 800675c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006760:	080067b9 	.word	0x080067b9
 8006764:	080067cd 	.word	0x080067cd
 8006768:	08006749 	.word	0x08006749
 800676c:	08006749 	.word	0x08006749
 8006770:	08006749 	.word	0x08006749
 8006774:	08006749 	.word	0x08006749
 8006778:	080067cd 	.word	0x080067cd
 800677c:	08006749 	.word	0x08006749
 8006780:	08006749 	.word	0x08006749
 8006784:	08006749 	.word	0x08006749
 8006788:	08006749 	.word	0x08006749
 800678c:	080068d1 	.word	0x080068d1
 8006790:	080067f9 	.word	0x080067f9
 8006794:	0800688b 	.word	0x0800688b
 8006798:	08006749 	.word	0x08006749
 800679c:	08006749 	.word	0x08006749
 80067a0:	080068f3 	.word	0x080068f3
 80067a4:	08006749 	.word	0x08006749
 80067a8:	080067f9 	.word	0x080067f9
 80067ac:	08006749 	.word	0x08006749
 80067b0:	08006749 	.word	0x08006749
 80067b4:	08006893 	.word	0x08006893
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	1d1a      	adds	r2, r3, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	602a      	str	r2, [r5, #0]
 80067c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067c8:	2301      	movs	r3, #1
 80067ca:	e09f      	b.n	800690c <_printf_i+0x1ec>
 80067cc:	6820      	ldr	r0, [r4, #0]
 80067ce:	682b      	ldr	r3, [r5, #0]
 80067d0:	0607      	lsls	r7, r0, #24
 80067d2:	f103 0104 	add.w	r1, r3, #4
 80067d6:	6029      	str	r1, [r5, #0]
 80067d8:	d501      	bpl.n	80067de <_printf_i+0xbe>
 80067da:	681e      	ldr	r6, [r3, #0]
 80067dc:	e003      	b.n	80067e6 <_printf_i+0xc6>
 80067de:	0646      	lsls	r6, r0, #25
 80067e0:	d5fb      	bpl.n	80067da <_printf_i+0xba>
 80067e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80067e6:	2e00      	cmp	r6, #0
 80067e8:	da03      	bge.n	80067f2 <_printf_i+0xd2>
 80067ea:	232d      	movs	r3, #45	; 0x2d
 80067ec:	4276      	negs	r6, r6
 80067ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067f2:	485a      	ldr	r0, [pc, #360]	; (800695c <_printf_i+0x23c>)
 80067f4:	230a      	movs	r3, #10
 80067f6:	e012      	b.n	800681e <_printf_i+0xfe>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	6820      	ldr	r0, [r4, #0]
 80067fc:	1d19      	adds	r1, r3, #4
 80067fe:	6029      	str	r1, [r5, #0]
 8006800:	0605      	lsls	r5, r0, #24
 8006802:	d501      	bpl.n	8006808 <_printf_i+0xe8>
 8006804:	681e      	ldr	r6, [r3, #0]
 8006806:	e002      	b.n	800680e <_printf_i+0xee>
 8006808:	0641      	lsls	r1, r0, #25
 800680a:	d5fb      	bpl.n	8006804 <_printf_i+0xe4>
 800680c:	881e      	ldrh	r6, [r3, #0]
 800680e:	4853      	ldr	r0, [pc, #332]	; (800695c <_printf_i+0x23c>)
 8006810:	2f6f      	cmp	r7, #111	; 0x6f
 8006812:	bf0c      	ite	eq
 8006814:	2308      	moveq	r3, #8
 8006816:	230a      	movne	r3, #10
 8006818:	2100      	movs	r1, #0
 800681a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800681e:	6865      	ldr	r5, [r4, #4]
 8006820:	60a5      	str	r5, [r4, #8]
 8006822:	2d00      	cmp	r5, #0
 8006824:	bfa2      	ittt	ge
 8006826:	6821      	ldrge	r1, [r4, #0]
 8006828:	f021 0104 	bicge.w	r1, r1, #4
 800682c:	6021      	strge	r1, [r4, #0]
 800682e:	b90e      	cbnz	r6, 8006834 <_printf_i+0x114>
 8006830:	2d00      	cmp	r5, #0
 8006832:	d04b      	beq.n	80068cc <_printf_i+0x1ac>
 8006834:	4615      	mov	r5, r2
 8006836:	fbb6 f1f3 	udiv	r1, r6, r3
 800683a:	fb03 6711 	mls	r7, r3, r1, r6
 800683e:	5dc7      	ldrb	r7, [r0, r7]
 8006840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006844:	4637      	mov	r7, r6
 8006846:	42bb      	cmp	r3, r7
 8006848:	460e      	mov	r6, r1
 800684a:	d9f4      	bls.n	8006836 <_printf_i+0x116>
 800684c:	2b08      	cmp	r3, #8
 800684e:	d10b      	bne.n	8006868 <_printf_i+0x148>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	07de      	lsls	r6, r3, #31
 8006854:	d508      	bpl.n	8006868 <_printf_i+0x148>
 8006856:	6923      	ldr	r3, [r4, #16]
 8006858:	6861      	ldr	r1, [r4, #4]
 800685a:	4299      	cmp	r1, r3
 800685c:	bfde      	ittt	le
 800685e:	2330      	movle	r3, #48	; 0x30
 8006860:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006864:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006868:	1b52      	subs	r2, r2, r5
 800686a:	6122      	str	r2, [r4, #16]
 800686c:	f8cd a000 	str.w	sl, [sp]
 8006870:	464b      	mov	r3, r9
 8006872:	aa03      	add	r2, sp, #12
 8006874:	4621      	mov	r1, r4
 8006876:	4640      	mov	r0, r8
 8006878:	f7ff fee4 	bl	8006644 <_printf_common>
 800687c:	3001      	adds	r0, #1
 800687e:	d14a      	bne.n	8006916 <_printf_i+0x1f6>
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	b004      	add	sp, #16
 8006886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	f043 0320 	orr.w	r3, r3, #32
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	4833      	ldr	r0, [pc, #204]	; (8006960 <_printf_i+0x240>)
 8006894:	2778      	movs	r7, #120	; 0x78
 8006896:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	6829      	ldr	r1, [r5, #0]
 800689e:	061f      	lsls	r7, r3, #24
 80068a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80068a4:	d402      	bmi.n	80068ac <_printf_i+0x18c>
 80068a6:	065f      	lsls	r7, r3, #25
 80068a8:	bf48      	it	mi
 80068aa:	b2b6      	uxthmi	r6, r6
 80068ac:	07df      	lsls	r7, r3, #31
 80068ae:	bf48      	it	mi
 80068b0:	f043 0320 	orrmi.w	r3, r3, #32
 80068b4:	6029      	str	r1, [r5, #0]
 80068b6:	bf48      	it	mi
 80068b8:	6023      	strmi	r3, [r4, #0]
 80068ba:	b91e      	cbnz	r6, 80068c4 <_printf_i+0x1a4>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	f023 0320 	bic.w	r3, r3, #32
 80068c2:	6023      	str	r3, [r4, #0]
 80068c4:	2310      	movs	r3, #16
 80068c6:	e7a7      	b.n	8006818 <_printf_i+0xf8>
 80068c8:	4824      	ldr	r0, [pc, #144]	; (800695c <_printf_i+0x23c>)
 80068ca:	e7e4      	b.n	8006896 <_printf_i+0x176>
 80068cc:	4615      	mov	r5, r2
 80068ce:	e7bd      	b.n	800684c <_printf_i+0x12c>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	6826      	ldr	r6, [r4, #0]
 80068d4:	6961      	ldr	r1, [r4, #20]
 80068d6:	1d18      	adds	r0, r3, #4
 80068d8:	6028      	str	r0, [r5, #0]
 80068da:	0635      	lsls	r5, r6, #24
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	d501      	bpl.n	80068e4 <_printf_i+0x1c4>
 80068e0:	6019      	str	r1, [r3, #0]
 80068e2:	e002      	b.n	80068ea <_printf_i+0x1ca>
 80068e4:	0670      	lsls	r0, r6, #25
 80068e6:	d5fb      	bpl.n	80068e0 <_printf_i+0x1c0>
 80068e8:	8019      	strh	r1, [r3, #0]
 80068ea:	2300      	movs	r3, #0
 80068ec:	6123      	str	r3, [r4, #16]
 80068ee:	4615      	mov	r5, r2
 80068f0:	e7bc      	b.n	800686c <_printf_i+0x14c>
 80068f2:	682b      	ldr	r3, [r5, #0]
 80068f4:	1d1a      	adds	r2, r3, #4
 80068f6:	602a      	str	r2, [r5, #0]
 80068f8:	681d      	ldr	r5, [r3, #0]
 80068fa:	6862      	ldr	r2, [r4, #4]
 80068fc:	2100      	movs	r1, #0
 80068fe:	4628      	mov	r0, r5
 8006900:	f7f9 fc66 	bl	80001d0 <memchr>
 8006904:	b108      	cbz	r0, 800690a <_printf_i+0x1ea>
 8006906:	1b40      	subs	r0, r0, r5
 8006908:	6060      	str	r0, [r4, #4]
 800690a:	6863      	ldr	r3, [r4, #4]
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	2300      	movs	r3, #0
 8006910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006914:	e7aa      	b.n	800686c <_printf_i+0x14c>
 8006916:	6923      	ldr	r3, [r4, #16]
 8006918:	462a      	mov	r2, r5
 800691a:	4649      	mov	r1, r9
 800691c:	4640      	mov	r0, r8
 800691e:	47d0      	blx	sl
 8006920:	3001      	adds	r0, #1
 8006922:	d0ad      	beq.n	8006880 <_printf_i+0x160>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	079b      	lsls	r3, r3, #30
 8006928:	d413      	bmi.n	8006952 <_printf_i+0x232>
 800692a:	68e0      	ldr	r0, [r4, #12]
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	4298      	cmp	r0, r3
 8006930:	bfb8      	it	lt
 8006932:	4618      	movlt	r0, r3
 8006934:	e7a6      	b.n	8006884 <_printf_i+0x164>
 8006936:	2301      	movs	r3, #1
 8006938:	4632      	mov	r2, r6
 800693a:	4649      	mov	r1, r9
 800693c:	4640      	mov	r0, r8
 800693e:	47d0      	blx	sl
 8006940:	3001      	adds	r0, #1
 8006942:	d09d      	beq.n	8006880 <_printf_i+0x160>
 8006944:	3501      	adds	r5, #1
 8006946:	68e3      	ldr	r3, [r4, #12]
 8006948:	9903      	ldr	r1, [sp, #12]
 800694a:	1a5b      	subs	r3, r3, r1
 800694c:	42ab      	cmp	r3, r5
 800694e:	dcf2      	bgt.n	8006936 <_printf_i+0x216>
 8006950:	e7eb      	b.n	800692a <_printf_i+0x20a>
 8006952:	2500      	movs	r5, #0
 8006954:	f104 0619 	add.w	r6, r4, #25
 8006958:	e7f5      	b.n	8006946 <_printf_i+0x226>
 800695a:	bf00      	nop
 800695c:	08006b65 	.word	0x08006b65
 8006960:	08006b76 	.word	0x08006b76

08006964 <memmove>:
 8006964:	4288      	cmp	r0, r1
 8006966:	b510      	push	{r4, lr}
 8006968:	eb01 0402 	add.w	r4, r1, r2
 800696c:	d902      	bls.n	8006974 <memmove+0x10>
 800696e:	4284      	cmp	r4, r0
 8006970:	4623      	mov	r3, r4
 8006972:	d807      	bhi.n	8006984 <memmove+0x20>
 8006974:	1e43      	subs	r3, r0, #1
 8006976:	42a1      	cmp	r1, r4
 8006978:	d008      	beq.n	800698c <memmove+0x28>
 800697a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800697e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006982:	e7f8      	b.n	8006976 <memmove+0x12>
 8006984:	4402      	add	r2, r0
 8006986:	4601      	mov	r1, r0
 8006988:	428a      	cmp	r2, r1
 800698a:	d100      	bne.n	800698e <memmove+0x2a>
 800698c:	bd10      	pop	{r4, pc}
 800698e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006996:	e7f7      	b.n	8006988 <memmove+0x24>

08006998 <_realloc_r>:
 8006998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800699c:	4680      	mov	r8, r0
 800699e:	4614      	mov	r4, r2
 80069a0:	460e      	mov	r6, r1
 80069a2:	b921      	cbnz	r1, 80069ae <_realloc_r+0x16>
 80069a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a8:	4611      	mov	r1, r2
 80069aa:	f7ff bba9 	b.w	8006100 <_malloc_r>
 80069ae:	b92a      	cbnz	r2, 80069bc <_realloc_r+0x24>
 80069b0:	f7ff fca4 	bl	80062fc <_free_r>
 80069b4:	4625      	mov	r5, r4
 80069b6:	4628      	mov	r0, r5
 80069b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069bc:	f000 f81b 	bl	80069f6 <_malloc_usable_size_r>
 80069c0:	4284      	cmp	r4, r0
 80069c2:	4607      	mov	r7, r0
 80069c4:	d802      	bhi.n	80069cc <_realloc_r+0x34>
 80069c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069ca:	d812      	bhi.n	80069f2 <_realloc_r+0x5a>
 80069cc:	4621      	mov	r1, r4
 80069ce:	4640      	mov	r0, r8
 80069d0:	f7ff fb96 	bl	8006100 <_malloc_r>
 80069d4:	4605      	mov	r5, r0
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d0ed      	beq.n	80069b6 <_realloc_r+0x1e>
 80069da:	42bc      	cmp	r4, r7
 80069dc:	4622      	mov	r2, r4
 80069de:	4631      	mov	r1, r6
 80069e0:	bf28      	it	cs
 80069e2:	463a      	movcs	r2, r7
 80069e4:	f7ff fc7c 	bl	80062e0 <memcpy>
 80069e8:	4631      	mov	r1, r6
 80069ea:	4640      	mov	r0, r8
 80069ec:	f7ff fc86 	bl	80062fc <_free_r>
 80069f0:	e7e1      	b.n	80069b6 <_realloc_r+0x1e>
 80069f2:	4635      	mov	r5, r6
 80069f4:	e7df      	b.n	80069b6 <_realloc_r+0x1e>

080069f6 <_malloc_usable_size_r>:
 80069f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069fa:	1f18      	subs	r0, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bfbc      	itt	lt
 8006a00:	580b      	ldrlt	r3, [r1, r0]
 8006a02:	18c0      	addlt	r0, r0, r3
 8006a04:	4770      	bx	lr
	...

08006a08 <_init>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	bf00      	nop
 8006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0e:	bc08      	pop	{r3}
 8006a10:	469e      	mov	lr, r3
 8006a12:	4770      	bx	lr

08006a14 <_fini>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	bf00      	nop
 8006a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	469e      	mov	lr, r3
 8006a1e:	4770      	bx	lr

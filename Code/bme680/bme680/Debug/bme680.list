
bme680.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08006e10  08006e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f94  08006f94  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f94  08006f94  00016f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f9c  08006f9c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f9c  08006f9c  00016f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  2000005c  08007000  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200003a4  08007000  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd5a  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025ec  00000000  00000000  0002fe29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00032418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b90  00000000  00000000  00033330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022213  00000000  00000000  00033ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000120be  00000000  00000000  000560d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1c65  00000000  00000000  00068191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004450  00000000  00000000  00139df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0013e248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006df8 	.word	0x08006df8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006df8 	.word	0x08006df8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9a3 	b.w	80005e8 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f835 	bl	8000320 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f828 	bl	8000320 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f817 	bl	8000320 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f809 	bl	8000320 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f001 fa65 	bl	8001ac4 <null_ptr_check>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80005fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d120      	bne.n	8000648 <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f8ee 	bl	80007e8 <bme680_soft_reset>
 800060c:	4603      	mov	r3, r0
 800060e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8000610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d117      	bne.n	8000648 <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2201      	movs	r2, #1
 800061e:	20d0      	movs	r0, #208	; 0xd0
 8000620:	f000 f818 	bl	8000654 <bme680_get_regs>
 8000624:	4603      	mov	r3, r0
 8000626:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8000628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d10b      	bne.n	8000648 <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b61      	cmp	r3, #97	; 0x61
 8000636:	d105      	bne.n	8000644 <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 fbcf 	bl	8000ddc <get_calib_data>
 800063e:	4603      	mov	r3, r0
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	e001      	b.n	8000648 <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 8000644:	23fd      	movs	r3, #253	; 0xfd
 8000646:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8000648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b087      	sub	sp, #28
 8000658:	af00      	add	r7, sp, #0
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4603      	mov	r3, r0
 8000660:	73fb      	strb	r3, [r7, #15]
 8000662:	4613      	mov	r3, r2
 8000664:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f001 fa2c 	bl	8001ac4 <null_ptr_check>
 800066c:	4603      	mov	r3, r0
 800066e:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 8000670:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d126      	bne.n	80006c6 <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	789b      	ldrb	r3, [r3, #2]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d10e      	bne.n	800069e <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	4618      	mov	r0, r3
 8000686:	f001 f94e 	bl	8001926 <set_mem_page>
 800068a:	4603      	mov	r3, r0
 800068c:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 800068e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d103      	bne.n	800069e <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800069c:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7858      	ldrb	r0, [r3, #1]
 80006a6:	89bb      	ldrh	r3, [r7, #12]
 80006a8:	7bf9      	ldrb	r1, [r7, #15]
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	47a0      	blx	r4
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 80006c2:	23fe      	movs	r3, #254	; 0xfe
 80006c4:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80006c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	371c      	adds	r7, #28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd90      	pop	{r4, r7, pc}

080006d2 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80006d2:	b5b0      	push	{r4, r5, r7, lr}
 80006d4:	b090      	sub	sp, #64	; 0x40
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	60f8      	str	r0, [r7, #12]
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	4613      	mov	r3, r2
 80006e0:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	2224      	movs	r2, #36	; 0x24
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 ffaa 	bl	8006648 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80006f4:	6838      	ldr	r0, [r7, #0]
 80006f6:	f001 f9e5 	bl	8001ac4 <null_ptr_check>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (rslt == BME680_OK) {
 8000700:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8000704:	2b00      	cmp	r3, #0
 8000706:	d169      	bne.n	80007dc <bme680_set_regs+0x10a>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d061      	beq.n	80007d2 <bme680_set_regs+0x100>
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b13      	cmp	r3, #19
 8000712:	d85e      	bhi.n	80007d2 <bme680_set_regs+0x100>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8000714:	2300      	movs	r3, #0
 8000716:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000718:	e034      	b.n	8000784 <bme680_set_regs+0xb2>
				if (dev->intf == BME680_SPI_INTF) {
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d118      	bne.n	8000754 <bme680_set_regs+0x82>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8000722:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000724:	68fa      	ldr	r2, [r7, #12]
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	6839      	ldr	r1, [r7, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f001 f8fa 	bl	8001926 <set_mem_page>
 8000732:	4603      	mov	r3, r0
 8000734:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8000738:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	4413      	add	r3, r2
 800073e:	781a      	ldrb	r2, [r3, #0]
 8000740:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	3340      	adds	r3, #64	; 0x40
 800074c:	443b      	add	r3, r7
 800074e:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8000752:	e009      	b.n	8000768 <bme680_set_regs+0x96>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8000754:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	441a      	add	r2, r3
 800075a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	7812      	ldrb	r2, [r2, #0]
 8000760:	3340      	adds	r3, #64	; 0x40
 8000762:	443b      	add	r3, r7
 8000764:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8000768:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	441a      	add	r2, r3
 800076e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	3301      	adds	r3, #1
 8000774:	7812      	ldrb	r2, [r2, #0]
 8000776:	3340      	adds	r3, #64	; 0x40
 8000778:	443b      	add	r3, r7
 800077a:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 800077e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000780:	3301      	adds	r3, #1
 8000782:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	b29b      	uxth	r3, r3
 8000788:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800078a:	429a      	cmp	r2, r3
 800078c:	d3c5      	bcc.n	800071a <bme680_set_regs+0x48>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 800078e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8000792:	2b00      	cmp	r3, #0
 8000794:	d121      	bne.n	80007da <bme680_set_regs+0x108>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	7858      	ldrb	r0, [r3, #1]
 800079e:	7d39      	ldrb	r1, [r7, #20]
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	3b01      	subs	r3, #1
 80007aa:	b29d      	uxth	r5, r3
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	462b      	mov	r3, r5
 80007b4:	47a0      	blx	r4
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if (dev->com_rslt != 0)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d007      	beq.n	80007da <bme680_set_regs+0x108>
					rslt = BME680_E_COM_FAIL;
 80007ca:	23fe      	movs	r3, #254	; 0xfe
 80007cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (rslt == BME680_OK) {
 80007d0:	e003      	b.n	80007da <bme680_set_regs+0x108>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 80007d2:	23fc      	movs	r3, #252	; 0xfc
 80007d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80007d8:	e000      	b.n	80007dc <bme680_set_regs+0x10a>
			if (rslt == BME680_OK) {
 80007da:	bf00      	nop
		}
	}

	return rslt;
 80007dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3740      	adds	r7, #64	; 0x40
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bdb0      	pop	{r4, r5, r7, pc}

080007e8 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 80007f0:	23e0      	movs	r3, #224	; 0xe0
 80007f2:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80007f4:	23b6      	movs	r3, #182	; 0xb6
 80007f6:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f001 f963 	bl	8001ac4 <null_ptr_check>
 80007fe:	4603      	mov	r3, r0
 8000800:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d127      	bne.n	800085a <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d104      	bne.n	800081c <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f001 f8ec 	bl	80019f0 <get_mem_page>
 8000818:	4603      	mov	r3, r0
 800081a:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 800081c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d11a      	bne.n	800085a <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000824:	f107 010d 	add.w	r1, r7, #13
 8000828:	f107 000e 	add.w	r0, r7, #14
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	f7ff ff4f 	bl	80006d2 <bme680_set_regs>
 8000834:	4603      	mov	r3, r0
 8000836:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800083c:	200a      	movs	r0, #10
 800083e:	4798      	blx	r3

			if (rslt == BME680_OK) {
 8000840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d108      	bne.n	800085a <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	789b      	ldrb	r3, [r3, #2]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d104      	bne.n	800085a <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f001 f8cd 	bl	80019f0 <get_mem_page>
 8000856:	4603      	mov	r3, r0
 8000858:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 800085a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b088      	sub	sp, #32
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	6039      	str	r1, [r7, #0]
 8000870:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	2300      	movs	r3, #0
 8000880:	833b      	strh	r3, [r7, #24]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	2300      	movs	r3, #0
 8000888:	823b      	strh	r3, [r7, #16]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000890:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000892:	6838      	ldr	r0, [r7, #0]
 8000894:	f001 f916 	bl	8001ac4 <null_ptr_check>
 8000898:	4603      	mov	r3, r0
 800089a:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 800089c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f040 81a2 	bne.w	8000bea <bme680_set_sensor_settings+0x384>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	f003 0308 	and.w	r3, r3, #8
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d004      	beq.n	80008ba <bme680_set_sensor_settings+0x54>
			rslt = set_gas_config(dev);
 80008b0:	6838      	ldr	r0, [r7, #0]
 80008b2:	f000 fbbf 	bl	8001034 <set_gas_config>
 80008b6:	4603      	mov	r3, r0
 80008b8:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (rslt == BME680_OK)
 80008c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d104      	bne.n	80008d4 <bme680_set_sensor_settings+0x6e>
			rslt = bme680_set_sensor_mode(dev);
 80008ca:	6838      	ldr	r0, [r7, #0]
 80008cc:	f000 f993 	bl	8000bf6 <bme680_set_sensor_mode>
 80008d0:	4603      	mov	r3, r0
 80008d2:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d03d      	beq.n	800095a <bme680_set_sensor_settings+0xf4>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	2207      	movs	r2, #7
 80008e8:	2100      	movs	r1, #0
 80008ea:	f001 f8b0 	bl	8001a4e <boundary_check>
 80008ee:	4603      	mov	r3, r0
 80008f0:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 80008f2:	2375      	movs	r3, #117	; 0x75
 80008f4:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80008f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d108      	bne.n	8000910 <bme680_set_sensor_settings+0xaa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80008fe:	f107 011b 	add.w	r1, r7, #27
 8000902:	7f38      	ldrb	r0, [r7, #28]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	2201      	movs	r2, #1
 8000908:	f7ff fea4 	bl	8000654 <bme680_get_regs>
 800090c:	4603      	mov	r3, r0
 800090e:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	2b00      	cmp	r3, #0
 8000918:	d010      	beq.n	800093c <bme680_set_sensor_settings+0xd6>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 800091a:	7efb      	ldrb	r3, [r7, #27]
 800091c:	b25b      	sxtb	r3, r3
 800091e:	f023 031c 	bic.w	r3, r3, #28
 8000922:	b25a      	sxtb	r2, r3
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	b25b      	sxtb	r3, r3
 800092e:	f003 031c 	and.w	r3, r3, #28
 8000932:	b25b      	sxtb	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b25b      	sxtb	r3, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 800093c:	7fbb      	ldrb	r3, [r7, #30]
 800093e:	3320      	adds	r3, #32
 8000940:	443b      	add	r3, r7
 8000942:	7f3a      	ldrb	r2, [r7, #28]
 8000944:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000948:	7fbb      	ldrb	r3, [r7, #30]
 800094a:	7efa      	ldrb	r2, [r7, #27]
 800094c:	3320      	adds	r3, #32
 800094e:	443b      	add	r3, r7
 8000950:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000954:	7fbb      	ldrb	r3, [r7, #30]
 8000956:	3301      	adds	r3, #1
 8000958:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	f003 0320 	and.w	r3, r3, #32
 8000960:	2b00      	cmp	r3, #0
 8000962:	d037      	beq.n	80009d4 <bme680_set_sensor_settings+0x16e>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	2208      	movs	r2, #8
 800096e:	2100      	movs	r1, #0
 8000970:	f001 f86d 	bl	8001a4e <boundary_check>
 8000974:	4603      	mov	r3, r0
 8000976:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 8000978:	2370      	movs	r3, #112	; 0x70
 800097a:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 800097c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d108      	bne.n	8000996 <bme680_set_sensor_settings+0x130>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000984:	f107 011b 	add.w	r1, r7, #27
 8000988:	7f38      	ldrb	r0, [r7, #28]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	2201      	movs	r2, #1
 800098e:	f7ff fe61 	bl	8000654 <bme680_get_regs>
 8000992:	4603      	mov	r3, r0
 8000994:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8000996:	7efb      	ldrb	r3, [r7, #27]
 8000998:	b25b      	sxtb	r3, r3
 800099a:	f023 0308 	bic.w	r3, r3, #8
 800099e:	b25a      	sxtb	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	f003 0308 	and.w	r3, r3, #8
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 80009b6:	7fbb      	ldrb	r3, [r7, #30]
 80009b8:	3320      	adds	r3, #32
 80009ba:	443b      	add	r3, r7
 80009bc:	7f3a      	ldrb	r2, [r7, #28]
 80009be:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80009c2:	7fbb      	ldrb	r3, [r7, #30]
 80009c4:	7efa      	ldrb	r2, [r7, #27]
 80009c6:	3320      	adds	r3, #32
 80009c8:	443b      	add	r3, r7
 80009ca:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80009ce:	7fbb      	ldrb	r3, [r7, #30]
 80009d0:	3301      	adds	r3, #1
 80009d2:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d050      	beq.n	8000a80 <bme680_set_sensor_settings+0x21a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	2205      	movs	r2, #5
 80009e8:	2100      	movs	r1, #0
 80009ea:	f001 f830 	bl	8001a4e <boundary_check>
 80009ee:	4603      	mov	r3, r0
 80009f0:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80009f2:	2374      	movs	r3, #116	; 0x74
 80009f4:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80009f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d108      	bne.n	8000a10 <bme680_set_sensor_settings+0x1aa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80009fe:	f107 011b 	add.w	r1, r7, #27
 8000a02:	7f38      	ldrb	r0, [r7, #28]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	2201      	movs	r2, #1
 8000a08:	f7ff fe24 	bl	8000654 <bme680_get_regs>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d00d      	beq.n	8000a36 <bme680_set_sensor_settings+0x1d0>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8000a1a:	7efb      	ldrb	r3, [r7, #27]
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	f003 031f 	and.w	r3, r3, #31
 8000a22:	b25a      	sxtb	r2, r3
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000a2a:	015b      	lsls	r3, r3, #5
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d010      	beq.n	8000a62 <bme680_set_sensor_settings+0x1fc>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8000a40:	7efb      	ldrb	r3, [r7, #27]
 8000a42:	b25b      	sxtb	r3, r3
 8000a44:	f023 031c 	bic.w	r3, r3, #28
 8000a48:	b25a      	sxtb	r2, r3
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	f003 031c 	and.w	r3, r3, #28
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 8000a62:	7fbb      	ldrb	r3, [r7, #30]
 8000a64:	3320      	adds	r3, #32
 8000a66:	443b      	add	r3, r7
 8000a68:	7f3a      	ldrb	r2, [r7, #28]
 8000a6a:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000a6e:	7fbb      	ldrb	r3, [r7, #30]
 8000a70:	7efa      	ldrb	r2, [r7, #27]
 8000a72:	3320      	adds	r3, #32
 8000a74:	443b      	add	r3, r7
 8000a76:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000a7a:	7fbb      	ldrb	r3, [r7, #30]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d037      	beq.n	8000afa <bme680_set_sensor_settings+0x294>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	2205      	movs	r2, #5
 8000a94:	2100      	movs	r1, #0
 8000a96:	f000 ffda 	bl	8001a4e <boundary_check>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 8000a9e:	2372      	movs	r3, #114	; 0x72
 8000aa0:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000aa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d108      	bne.n	8000abc <bme680_set_sensor_settings+0x256>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000aaa:	f107 011b 	add.w	r1, r7, #27
 8000aae:	7f38      	ldrb	r0, [r7, #28]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f7ff fdce 	bl	8000654 <bme680_get_regs>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8000abc:	7efb      	ldrb	r3, [r7, #27]
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	f023 0307 	bic.w	r3, r3, #7
 8000ac4:	b25a      	sxtb	r2, r3
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8000adc:	7fbb      	ldrb	r3, [r7, #30]
 8000ade:	3320      	adds	r3, #32
 8000ae0:	443b      	add	r3, r7
 8000ae2:	7f3a      	ldrb	r2, [r7, #28]
 8000ae4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000ae8:	7fbb      	ldrb	r3, [r7, #30]
 8000aea:	7efa      	ldrb	r2, [r7, #27]
 8000aec:	3320      	adds	r3, #32
 8000aee:	443b      	add	r3, r7
 8000af0:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000af4:	7fbb      	ldrb	r3, [r7, #30]
 8000af6:	3301      	adds	r3, #1
 8000af8:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d060      	beq.n	8000bc6 <bme680_set_sensor_settings+0x360>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2100      	movs	r1, #0
 8000b10:	f000 ff9d 	bl	8001a4e <boundary_check>
 8000b14:	4603      	mov	r3, r0
 8000b16:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 8000b18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d109      	bne.n	8000b34 <bme680_set_sensor_settings+0x2ce>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	220a      	movs	r2, #10
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f000 ff8f 	bl	8001a4e <boundary_check>
 8000b30:	4603      	mov	r3, r0
 8000b32:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 8000b34:	2371      	movs	r3, #113	; 0x71
 8000b36:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8000b38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d108      	bne.n	8000b52 <bme680_set_sensor_settings+0x2ec>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8000b40:	f107 011b 	add.w	r1, r7, #27
 8000b44:	7f38      	ldrb	r0, [r7, #28]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f7ff fd83 	bl	8000654 <bme680_get_regs>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d010      	beq.n	8000b7e <bme680_set_sensor_settings+0x318>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8000b5c:	7efb      	ldrb	r3, [r7, #27]
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	f023 0310 	bic.w	r3, r3, #16
 8000b64:	b25a      	sxtb	r2, r3
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000b6c:	011b      	lsls	r3, r3, #4
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00f      	beq.n	8000ba8 <bme680_set_sensor_settings+0x342>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8000b88:	7efb      	ldrb	r3, [r7, #27]
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	f023 030f 	bic.w	r3, r3, #15
 8000b90:	b25a      	sxtb	r2, r3
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b25b      	sxtb	r3, r3
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8000ba8:	7fbb      	ldrb	r3, [r7, #30]
 8000baa:	3320      	adds	r3, #32
 8000bac:	443b      	add	r3, r7
 8000bae:	7f3a      	ldrb	r2, [r7, #28]
 8000bb0:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8000bb4:	7fbb      	ldrb	r3, [r7, #30]
 8000bb6:	7efa      	ldrb	r2, [r7, #27]
 8000bb8:	3320      	adds	r3, #32
 8000bba:	443b      	add	r3, r7
 8000bbc:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8000bc0:	7fbb      	ldrb	r3, [r7, #30]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 8000bc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d109      	bne.n	8000be2 <bme680_set_sensor_settings+0x37c>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8000bce:	7fba      	ldrb	r2, [r7, #30]
 8000bd0:	f107 010c 	add.w	r1, r7, #12
 8000bd4:	f107 0014 	add.w	r0, r7, #20
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f7ff fd7a 	bl	80006d2 <bme680_set_regs>
 8000bde:	4603      	mov	r3, r0
 8000be0:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	7f7a      	ldrb	r2, [r7, #29]
 8000be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	return rslt;
 8000bea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b084      	sub	sp, #16
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8000c02:	2374      	movs	r3, #116	; 0x74
 8000c04:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 ff5c 	bl	8001ac4 <null_ptr_check>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14c      	bne.n	8000cb2 <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8000c18:	f107 010d 	add.w	r1, r7, #13
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2074      	movs	r0, #116	; 0x74
 8000c22:	f7ff fd17 	bl	8000654 <bme680_get_regs>
 8000c26:	4603      	mov	r3, r0
 8000c28:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d119      	bne.n	8000c66 <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8000c32:	7b7b      	ldrb	r3, [r7, #13]
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 8000c3a:	7bbb      	ldrb	r3, [r7, #14]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d012      	beq.n	8000c66 <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8000c40:	7b7b      	ldrb	r3, [r7, #13]
 8000c42:	f023 0303 	bic.w	r3, r3, #3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8000c4a:	f107 010d 	add.w	r1, r7, #13
 8000c4e:	f107 000c 	add.w	r0, r7, #12
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2201      	movs	r2, #1
 8000c56:	f7ff fd3c 	bl	80006d2 <bme680_set_regs>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c62:	200a      	movs	r0, #10
 8000c64:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8000c66:	7bbb      	ldrb	r3, [r7, #14]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1d5      	bne.n	8000c18 <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d01d      	beq.n	8000cb2 <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8000c76:	7b7b      	ldrb	r3, [r7, #13]
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	f023 0303 	bic.w	r3, r3, #3
 8000c7e:	b25a      	sxtb	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 8000c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d109      	bne.n	8000cb2 <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8000c9e:	f107 010d 	add.w	r1, r7, #13
 8000ca2:	f107 000c 	add.w	r0, r7, #12
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f7ff fd12 	bl	80006d2 <bme680_set_regs>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8000cca:	4a2c      	ldr	r2, [pc, #176]	; (8000d7c <bme680_get_profile_dur+0xbc>)
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd4:	6018      	str	r0, [r3, #0]
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ce0:	3318      	adds	r3, #24
 8000ce2:	443b      	add	r3, r7
 8000ce4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000ce8:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000cf0:	3318      	adds	r3, #24
 8000cf2:	443b      	add	r3, r7
 8000cf4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d06:	3318      	adds	r3, #24
 8000d08:	443b      	add	r3, r7
 8000d0a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	4413      	add	r3, r2
 8000d14:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8000d1c:	fb02 f303 	mul.w	r3, r2, r3
 8000d20:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8000d28:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	f603 1351 	addw	r3, r3, #2385	; 0x951
 8000d30:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000d38:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <bme680_get_profile_dur+0xc0>)
 8000d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d42:	099b      	lsrs	r3, r3, #6
 8000d44:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d008      	beq.n	8000d70 <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	881a      	ldrh	r2, [r3, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8000d68:	4413      	add	r3, r2
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	801a      	strh	r2, [r3, #0]
	}
}
 8000d70:	bf00      	nop
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	08006e10 	.word	0x08006e10
 8000d80:	10624dd3 	.word	0x10624dd3

08000d84 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000d8e:	6838      	ldr	r0, [r7, #0]
 8000d90:	f000 fe98 	bl	8001ac4 <null_ptr_check>
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d117      	bne.n	8000dd0 <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8000da0:	6839      	ldr	r1, [r7, #0]
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 fd05 	bl	80017b2 <read_field_data>
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8000dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10d      	bne.n	8000dd0 <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	da04      	bge.n	8000dc8 <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000dc6:	e003      	b.n	8000dd0 <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
	}

	return rslt;
 8000dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08e      	sub	sp, #56	; 0x38
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	2225      	movs	r2, #37	; 0x25
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f005 fc29 	bl	8006648 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 8000df6:	2300      	movs	r3, #0
 8000df8:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 fe62 	bl	8001ac4 <null_ptr_check>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BME680_OK) {
 8000e06:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f040 810c 	bne.w	8001028 <get_calib_data+0x24c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 8000e10:	f107 010c 	add.w	r1, r7, #12
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2219      	movs	r2, #25
 8000e18:	2089      	movs	r0, #137	; 0x89
 8000e1a:	f7ff fc1b 	bl	8000654 <bme680_get_regs>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 8000e24:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d10b      	bne.n	8000e44 <get_calib_data+0x68>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	f103 0119 	add.w	r1, r3, #25
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2210      	movs	r2, #16
 8000e38:	20e1      	movs	r0, #225	; 0xe1
 8000e3a:	f7ff fc0b 	bl	8000654 <bme680_get_regs>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8000e44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8000e5c:	7bbb      	ldrb	r3, [r7, #14]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	7b7b      	ldrb	r3, [r7, #13]
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	b25a      	sxtb	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8000e76:	7cbb      	ldrb	r3, [r7, #18]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	7c7b      	ldrb	r3, [r7, #17]
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 8000e8a:	7d3b      	ldrb	r3, [r7, #20]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	7cfb      	ldrb	r3, [r7, #19]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8000e9c:	7d7b      	ldrb	r3, [r7, #21]
 8000e9e:	b25a      	sxtb	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8000ea6:	7e3b      	ldrb	r3, [r7, #24]
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	b21a      	sxth	r2, r3
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	b21b      	sxth	r3, r3
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8000eb8:	7ebb      	ldrb	r3, [r7, #26]
 8000eba:	021b      	lsls	r3, r3, #8
 8000ebc:	b21a      	sxth	r2, r3
 8000ebe:	7e7b      	ldrb	r3, [r7, #25]
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 8000eca:	7f3b      	ldrb	r3, [r7, #28]
 8000ecc:	b25a      	sxtb	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8000ed4:	7efb      	ldrb	r3, [r7, #27]
 8000ed6:	b25a      	sxtb	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 8000ede:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	7ffb      	ldrb	r3, [r7, #31]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b21a      	sxth	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 8000ef2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b21a      	sxth	r2, r3
 8000efa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8000f08:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8000f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f16:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8000f30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f34:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8000f4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f50:	b25a      	sxtb	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 8000f56:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f5a:	b25a      	sxtb	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8000f60:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f64:	b25a      	sxtb	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8000f6a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 8000f72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f76:	b25a      	sxtb	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8000f7c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000f80:	b25a      	sxtb	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8000f86:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8000f9c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000fa0:	b25a      	sxtb	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 8000fa6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d135      	bne.n	800101a <get_calib_data+0x23e>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8000fae:	f107 010b 	add.w	r1, r7, #11
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2002      	movs	r0, #2
 8000fb8:	f7ff fb4c 	bl	8000654 <bme680_get_regs>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8000fc2:	7afb      	ldrb	r3, [r7, #11]
 8000fc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	da00      	bge.n	8000fce <get_calib_data+0x1f2>
 8000fcc:	330f      	adds	r3, #15
 8000fce:	111b      	asrs	r3, r3, #4
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if (rslt == BME680_OK) {
 8000fd8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d11c      	bne.n	800101a <get_calib_data+0x23e>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8000fe0:	f107 010b 	add.w	r1, r7, #11
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fb33 	bl	8000654 <bme680_get_regs>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 8000ff4:	7afb      	ldrb	r3, [r7, #11]
 8000ff6:	b25a      	sxtb	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				if (rslt == BME680_OK)
 8000ffe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001002:	2b00      	cmp	r3, #0
 8001004:	d109      	bne.n	800101a <get_calib_data+0x23e>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8001006:	f107 010b 	add.w	r1, r7, #11
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	2004      	movs	r0, #4
 8001010:	f7ff fb20 	bl	8000654 <bme680_get_regs>
 8001014:	4603      	mov	r3, r0
 8001016:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 800101a:	7afb      	ldrb	r3, [r7, #11]
 800101c:	b25b      	sxtb	r3, r3
 800101e:	111b      	asrs	r3, r3, #4
 8001020:	b25a      	sxtb	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	return rslt;
 8001028:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800102c:	4618      	mov	r0, r3
 800102e:	3738      	adds	r7, #56	; 0x38
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 fd41 	bl	8001ac4 <null_ptr_check>
 8001042:	4603      	mov	r3, r0
 8001044:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d132      	bne.n	80010b4 <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 800104e:	2300      	movs	r3, #0
 8001050:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 8001052:	2300      	movs	r3, #0
 8001054:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800105c:	2b01      	cmp	r3, #1
 800105e:	d119      	bne.n	8001094 <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8001060:	235a      	movs	r3, #90	; 0x5a
 8001062:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	4618      	mov	r0, r3
 800106e:	f000 faff 	bl	8001670 <calc_heater_res>
 8001072:	4603      	mov	r3, r0
 8001074:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fb71 	bl	8001768 <calc_heater_dur>
 8001086:	4603      	mov	r3, r0
 8001088:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001092:	e001      	b.n	8001098 <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 8001098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d109      	bne.n	80010b4 <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80010a0:	f107 0108 	add.w	r1, r7, #8
 80010a4:	f107 000c 	add.w	r0, r7, #12
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2202      	movs	r2, #2
 80010ac:	f7ff fb11 	bl	80006d2 <bme680_set_regs>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80010b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 80010c0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80010c4:	b091      	sub	sp, #68	; 0x44
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	61f8      	str	r0, [r7, #28]
 80010ca:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	10da      	asrs	r2, r3, #3
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	8adb      	ldrh	r3, [r3, #22]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	17da      	asrs	r2, r3, #31
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010e2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	17da      	asrs	r2, r3, #31
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	617a      	str	r2, [r7, #20]
 80010f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010fa:	460a      	mov	r2, r1
 80010fc:	fb02 f203 	mul.w	r2, r2, r3
 8001100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001102:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001106:	4601      	mov	r1, r0
 8001108:	fb01 f303 	mul.w	r3, r1, r3
 800110c:	4413      	add	r3, r2
 800110e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001110:	6939      	ldr	r1, [r7, #16]
 8001112:	fba2 4501 	umull	r4, r5, r2, r1
 8001116:	442b      	add	r3, r5
 8001118:	461d      	mov	r5, r3
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	0ae2      	lsrs	r2, r4, #11
 8001124:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8001128:	12eb      	asrs	r3, r5, #11
 800112a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 800112e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	f04f 0100 	mov.w	r1, #0
 800113a:	0850      	lsrs	r0, r2, #1
 800113c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8001140:	1059      	asrs	r1, r3, #1
 8001142:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	0862      	lsrs	r2, r4, #1
 8001150:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8001154:	106b      	asrs	r3, r5, #1
 8001156:	fb02 f501 	mul.w	r5, r2, r1
 800115a:	fb00 f403 	mul.w	r4, r0, r3
 800115e:	442c      	add	r4, r5
 8001160:	fba0 ab02 	umull	sl, fp, r0, r2
 8001164:	eb04 030b 	add.w	r3, r4, fp
 8001168:	469b      	mov	fp, r3
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	ea4f 321a 	mov.w	r2, sl, lsr #12
 8001176:	ea42 520b 	orr.w	r2, r2, fp, lsl #20
 800117a:	ea4f 332b 	mov.w	r3, fp, asr #12
 800117e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	17da      	asrs	r2, r3, #31
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	60fa      	str	r2, [r7, #12]
 8001190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001192:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001196:	462a      	mov	r2, r5
 8001198:	fb02 f203 	mul.w	r2, r2, r3
 800119c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119e:	4621      	mov	r1, r4
 80011a0:	fb01 f303 	mul.w	r3, r1, r3
 80011a4:	4413      	add	r3, r2
 80011a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011a8:	4621      	mov	r1, r4
 80011aa:	fba2 8901 	umull	r8, r9, r2, r1
 80011ae:	444b      	add	r3, r9
 80011b0:	4699      	mov	r9, r3
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	ea4f 3298 	mov.w	r2, r8, lsr #14
 80011be:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 80011c2:	ea4f 33a9 	mov.w	r3, r9, asr #14
 80011c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	dev->calib.t_fine = (int32_t) (var2 + var3);
 80011ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ce:	4413      	add	r3, r2
 80011d0:	461a      	mov	r2, r3
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	3380      	adds	r3, #128	; 0x80
 80011e2:	121b      	asrs	r3, r3, #8
 80011e4:	84fb      	strh	r3, [r7, #38]	; 0x26

	return calc_temp;
 80011e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3744      	adds	r7, #68	; 0x44
 80011ee:	46bd      	mov	sp, r7
 80011f0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80011f4:	4770      	bx	lr

080011f6 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b087      	sub	sp, #28
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	105b      	asrs	r3, r3, #1
 8001206:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 800120a:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	109b      	asrs	r3, r3, #2
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	1092      	asrs	r2, r2, #2
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	f992 2026 	ldrsb.w	r2, [r2, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	109b      	asrs	r3, r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800122e:	461a      	mov	r2, r3
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	fb02 f303 	mul.w	r3, r2, r3
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	109a      	asrs	r2, r3, #2
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001248:	041b      	lsls	r3, r3, #16
 800124a:	4413      	add	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	109b      	asrs	r3, r3, #2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	1092      	asrs	r2, r2, #2
 8001256:	fb02 f303 	mul.w	r3, r2, r3
 800125a:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	f992 2020 	ldrsb.w	r2, [r2, #32]
 8001262:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001264:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001268:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001270:	4619      	mov	r1, r3
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	fb01 f303 	mul.w	r3, r1, r3
 8001278:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800127a:	4413      	add	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	149b      	asrs	r3, r3, #18
 8001282:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	8b92      	ldrh	r2, [r2, #28]
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	13db      	asrs	r3, r3, #15
 8001294:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800129c:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	131b      	asrs	r3, r3, #12
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	f640 4335 	movw	r3, #3125	; 0xc35
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b8:	db06      	blt.n	80012c8 <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	fb92 f3f3 	sdiv	r3, r2, r3
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e005      	b.n	80012d4 <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005a      	lsls	r2, r3, #1
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d2:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80012da:	4619      	mov	r1, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 80012e8:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80012ea:	fb01 f303 	mul.w	r3, r1, r3
 80012ee:	131b      	asrs	r3, r3, #12
 80012f0:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	135b      	asrs	r3, r3, #13
 8001302:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	121b      	asrs	r3, r3, #8
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	1212      	asrs	r2, r2, #8
 800130c:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001314:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 800131e:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001322:	145b      	asrs	r3, r3, #17
 8001324:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	441a      	add	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
 8001336:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001338:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 800133a:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	4413      	add	r3, r2
 8001340:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 8001342:	697b      	ldr	r3, [r7, #20]

}
 8001344:	4618      	mov	r0, r3
 8001346:	371c      	adds	r7, #28
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8001350:	b490      	push	{r4, r7}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	3380      	adds	r3, #128	; 0x80
 8001368:	121b      	asrs	r3, r3, #8
 800136a:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 800136c:	88fa      	ldrh	r2, [r7, #6]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	891b      	ldrh	r3, [r3, #8]
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800137c:	4619      	mov	r1, r3
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	fb01 f303 	mul.w	r3, r1, r3
 8001384:	493d      	ldr	r1, [pc, #244]	; (800147c <calc_humidity+0x12c>)
 8001386:	fb81 0103 	smull	r0, r1, r1, r3
 800138a:	1149      	asrs	r1, r1, #5
 800138c:	17db      	asrs	r3, r3, #31
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	895b      	ldrh	r3, [r3, #10]
 800139a:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80013a2:	461a      	mov	r2, r3
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	4a34      	ldr	r2, [pc, #208]	; (800147c <calc_humidity+0x12c>)
 80013ac:	fb82 1203 	smull	r1, r2, r2, r3
 80013b0:	1152      	asrs	r2, r2, #5
 80013b2:	17db      	asrs	r3, r3, #31
 80013b4:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80013bc:	4619      	mov	r1, r3
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	fb01 f303 	mul.w	r3, r1, r3
 80013c4:	492d      	ldr	r1, [pc, #180]	; (800147c <calc_humidity+0x12c>)
 80013c6:	fb81 4103 	smull	r4, r1, r1, r3
 80013ca:	1149      	asrs	r1, r1, #5
 80013cc:	17db      	asrs	r3, r3, #31
 80013ce:	1acb      	subs	r3, r1, r3
 80013d0:	6a39      	ldr	r1, [r7, #32]
 80013d2:	fb01 f303 	mul.w	r3, r1, r3
 80013d6:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 80013d8:	4928      	ldr	r1, [pc, #160]	; (800147c <calc_humidity+0x12c>)
 80013da:	fb81 4103 	smull	r4, r1, r1, r3
 80013de:	1149      	asrs	r1, r1, #5
 80013e0:	17db      	asrs	r3, r3, #31
 80013e2:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80013e4:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 80013e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 80013ea:	fb00 f303 	mul.w	r3, r0, r3
	var2 = ((int32_t) dev->calib.par_h2
 80013ee:	129b      	asrs	r3, r3, #10
 80013f0:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	7bdb      	ldrb	r3, [r3, #15]
 8001400:	01db      	lsls	r3, r3, #7
 8001402:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800140a:	461a      	mov	r2, r3
 800140c:	6a3b      	ldr	r3, [r7, #32]
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	4a1a      	ldr	r2, [pc, #104]	; (800147c <calc_humidity+0x12c>)
 8001414:	fb82 1203 	smull	r1, r2, r2, r3
 8001418:	1152      	asrs	r2, r2, #5
 800141a:	17db      	asrs	r3, r3, #31
 800141c:	1ad2      	subs	r2, r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4413      	add	r3, r2
 8001422:	111b      	asrs	r3, r3, #4
 8001424:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	139b      	asrs	r3, r3, #14
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	1392      	asrs	r2, r2, #14
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	129b      	asrs	r3, r3, #10
 8001434:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	105b      	asrs	r3, r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4413      	add	r3, r2
 8001448:	129b      	asrs	r3, r3, #10
 800144a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	131b      	asrs	r3, r3, #12
 8001454:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	4a09      	ldr	r2, [pc, #36]	; (8001480 <calc_humidity+0x130>)
 800145a:	4293      	cmp	r3, r2
 800145c:	dd02      	ble.n	8001464 <calc_humidity+0x114>
		calc_hum = 100000;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <calc_humidity+0x130>)
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
 8001462:	e004      	b.n	800146e <calc_humidity+0x11e>
	else if (calc_hum < 0)
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	2b00      	cmp	r3, #0
 8001468:	da01      	bge.n	800146e <calc_humidity+0x11e>
		calc_hum = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001470:	4618      	mov	r0, r3
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bc90      	pop	{r4, r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	51eb851f 	.word	0x51eb851f
 8001480:	000186a0 	.word	0x000186a0

08001484 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8001484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001488:	b0bc      	sub	sp, #240	; 0xf0
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	64ba      	str	r2, [r7, #72]	; 0x48
 8001490:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001494:	460b      	mov	r3, r1
 8001496:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 800149a:	4b73      	ldr	r3, [pc, #460]	; (8001668 <calc_gas_resistance+0x1e4>)
 800149c:	f107 0594 	add.w	r5, r7, #148	; 0x94
 80014a0:	461c      	mov	r4, r3
 80014a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 80014b6:	4b6d      	ldr	r3, [pc, #436]	; (800166c <calc_gas_resistance+0x1e8>)
 80014b8:	f107 0554 	add.w	r5, r7, #84	; 0x54
 80014bc:	461c      	mov	r4, r3
 80014be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80014d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014d4:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	17da      	asrs	r2, r3, #31
 80014dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80014de:	63fa      	str	r2, [r7, #60]	; 0x3c
 80014e0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80014e4:	4622      	mov	r2, r4
 80014e6:	462b      	mov	r3, r5
 80014e8:	f04f 0000 	mov.w	r0, #0
 80014ec:	f04f 0100 	mov.w	r1, #0
 80014f0:	0099      	lsls	r1, r3, #2
 80014f2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014f6:	0090      	lsls	r0, r2, #2
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4621      	mov	r1, r4
 80014fe:	1851      	adds	r1, r2, r1
 8001500:	6339      	str	r1, [r7, #48]	; 0x30
 8001502:	4629      	mov	r1, r5
 8001504:	eb43 0101 	adc.w	r1, r3, r1
 8001508:	6379      	str	r1, [r7, #52]	; 0x34
 800150a:	f240 533c 	movw	r3, #1340	; 0x53c
 800150e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001512:	4602      	mov	r2, r0
 8001514:	18d3      	adds	r3, r2, r3
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
 8001518:	460b      	mov	r3, r1
 800151a:	f143 0300 	adc.w	r3, r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
		((int64_t) lookupTable1[gas_range])) >> 16;
 8001520:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	33a8      	adds	r3, #168	; 0xa8
 8001528:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800152c:	4413      	add	r3, r2
 800152e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001532:	2200      	movs	r2, #0
 8001534:	643b      	str	r3, [r7, #64]	; 0x40
 8001536:	647a      	str	r2, [r7, #68]	; 0x44
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001538:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800153c:	460b      	mov	r3, r1
 800153e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001542:	4622      	mov	r2, r4
 8001544:	fb02 f203 	mul.w	r2, r2, r3
 8001548:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 800154c:	462b      	mov	r3, r5
 800154e:	4604      	mov	r4, r0
 8001550:	460d      	mov	r5, r1
 8001552:	4621      	mov	r1, r4
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	4622      	mov	r2, r4
 800155c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800155e:	fba2 8901 	umull	r8, r9, r2, r1
 8001562:	444b      	add	r3, r9
 8001564:	4699      	mov	r9, r3
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001572:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001576:	ea4f 4329 	mov.w	r3, r9, asr #16
 800157a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 800157e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001582:	2200      	movs	r2, #0
 8001584:	623b      	str	r3, [r7, #32]
 8001586:	627a      	str	r2, [r7, #36]	; 0x24
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001594:	4629      	mov	r1, r5
 8001596:	03cb      	lsls	r3, r1, #15
 8001598:	4621      	mov	r1, r4
 800159a:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 800159e:	4621      	mov	r1, r4
 80015a0:	03ca      	lsls	r2, r1, #15
 80015a2:	f112 417f 	adds.w	r1, r2, #4278190080	; 0xff000000
 80015a6:	61b9      	str	r1, [r7, #24]
 80015a8:	f143 33ff 	adc.w	r3, r3, #4294967295
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80015b2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80015b6:	4621      	mov	r1, r4
 80015b8:	1889      	adds	r1, r1, r2
 80015ba:	6139      	str	r1, [r7, #16]
 80015bc:	4629      	mov	r1, r5
 80015be:	eb43 0101 	adc.w	r1, r3, r1
 80015c2:	6179      	str	r1, [r7, #20]
 80015c4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80015c8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 80015cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	33a8      	adds	r3, #168	; 0xa8
 80015d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80015d8:	4413      	add	r3, r2
 80015da:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80015de:	2200      	movs	r2, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	60fa      	str	r2, [r7, #12]
 80015e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80015e8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015ec:	462a      	mov	r2, r5
 80015ee:	fb02 f203 	mul.w	r2, r2, r3
 80015f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015f6:	4621      	mov	r1, r4
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001602:	4621      	mov	r1, r4
 8001604:	fba2 ab01 	umull	sl, fp, r2, r1
 8001608:	445b      	add	r3, fp
 800160a:	469b      	mov	fp, r3
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	ea4f 225a 	mov.w	r2, sl, lsr #9
 8001618:	ea42 52cb 	orr.w	r2, r2, fp, lsl #23
 800161c:	ea4f 236b 	mov.w	r3, fp, asr #9
 8001620:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8001624:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	0842      	lsrs	r2, r0, #1
 8001632:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001636:	104b      	asrs	r3, r1, #1
 8001638:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800163c:	1814      	adds	r4, r2, r0
 800163e:	603c      	str	r4, [r7, #0]
 8001640:	414b      	adcs	r3, r1
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800164c:	f7fe fe18 	bl	8000280 <__aeabi_ldivmod>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4613      	mov	r3, r2
 8001656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	return calc_gas_res;
 800165a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 800165e:	4618      	mov	r0, r3
 8001660:	37f0      	adds	r7, #240	; 0xf0
 8001662:	46bd      	mov	sp, r7
 8001664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001668:	08006e18 	.word	0x08006e18
 800166c:	08006e58 	.word	0x08006e58

08001670 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 8001670:	b480      	push	{r7}
 8001672:	b08b      	sub	sp, #44	; 0x2c
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001682:	d902      	bls.n	800168a <calc_heater_res+0x1a>
		temp = 400;
 8001684:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001688:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001690:	461a      	mov	r2, r3
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	4a2f      	ldr	r2, [pc, #188]	; (800175c <calc_heater_res+0xec>)
 800169e:	fb82 1203 	smull	r1, r2, r2, r3
 80016a2:	1192      	asrs	r2, r2, #6
 80016a4:	17db      	asrs	r3, r3, #31
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80016b2:	f503 7244 	add.w	r2, r3, #784	; 0x310
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016bc:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 80016c0:	f203 1399 	addw	r3, r3, #409	; 0x199
 80016c4:	88f9      	ldrh	r1, [r7, #6]
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	4925      	ldr	r1, [pc, #148]	; (8001760 <calc_heater_res+0xf0>)
 80016cc:	fb81 0103 	smull	r0, r1, r1, r3
 80016d0:	10c9      	asrs	r1, r1, #3
 80016d2:	17db      	asrs	r3, r3, #31
 80016d4:	1acb      	subs	r3, r1, r3
 80016d6:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 80016da:	4921      	ldr	r1, [pc, #132]	; (8001760 <calc_heater_res+0xf0>)
 80016dc:	fb81 0103 	smull	r0, r1, r1, r3
 80016e0:	1089      	asrs	r1, r1, #2
 80016e2:	17db      	asrs	r3, r3, #31
 80016e4:	1acb      	subs	r3, r1, r3
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	0fda      	lsrs	r2, r3, #31
 80016f0:	4413      	add	r3, r2
 80016f2:	105b      	asrs	r3, r3, #1
 80016f4:	461a      	mov	r2, r3
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	4413      	add	r3, r2
 80016fa:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001702:	3304      	adds	r3, #4
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	fb92 f3f3 	sdiv	r3, r2, r3
 800170a:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001712:	461a      	mov	r2, r3
 8001714:	4613      	mov	r3, r2
 8001716:	019b      	lsls	r3, r3, #6
 8001718:	4413      	add	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001722:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fb92 f3f3 	sdiv	r3, r2, r3
 800172c:	f1a3 02fa 	sub.w	r2, r3, #250	; 0xfa
 8001730:	4613      	mov	r3, r2
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	4413      	add	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	3332      	adds	r3, #50	; 0x32
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <calc_heater_res+0xf4>)
 8001740:	fb82 1203 	smull	r1, r2, r2, r3
 8001744:	1152      	asrs	r2, r2, #5
 8001746:	17db      	asrs	r3, r3, #31
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 800174c:	7bfb      	ldrb	r3, [r7, #15]
}
 800174e:	4618      	mov	r0, r3
 8001750:	372c      	adds	r7, #44	; 0x2c
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	10624dd3 	.word	0x10624dd3
 8001760:	66666667 	.word	0x66666667
 8001764:	51eb851f 	.word	0x51eb851f

08001768 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 800177c:	d308      	bcc.n	8001790 <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 800177e:	23ff      	movs	r3, #255	; 0xff
 8001780:	73bb      	strb	r3, [r7, #14]
 8001782:	e00f      	b.n	80017a4 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	3301      	adds	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	2b3f      	cmp	r3, #63	; 0x3f
 8001794:	d8f6      	bhi.n	8001784 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	019b      	lsls	r3, r3, #6
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 80017a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b08a      	sub	sp, #40	; 0x28
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 80017ce:	230a      	movs	r3, #10
 80017d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80017d4:	6838      	ldr	r0, [r7, #0]
 80017d6:	f000 f975 	bl	8001ac4 <null_ptr_check>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	do {
		if (rslt == BME680_OK) {
 80017e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f040 8087 	bne.w	80018f8 <read_field_data+0x146>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80017ea:	f107 0108 	add.w	r1, r7, #8
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	220f      	movs	r2, #15
 80017f2:	201d      	movs	r0, #29
 80017f4:	f7fe ff2e 	bl	8000654 <bme680_get_regs>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80017fe:	7a3b      	ldrb	r3, [r7, #8]
 8001800:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001804:	b2da      	uxtb	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 800180a:	7a3b      	ldrb	r3, [r7, #8]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	b2da      	uxtb	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 8001816:	7a7a      	ldrb	r2, [r7, #9]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800181c:	7abb      	ldrb	r3, [r7, #10]
 800181e:	031a      	lsls	r2, r3, #12
 8001820:	7afb      	ldrb	r3, [r7, #11]
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 8001826:	7b3a      	ldrb	r2, [r7, #12]
 8001828:	0912      	lsrs	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800182c:	4313      	orrs	r3, r2
 800182e:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8001830:	7b7b      	ldrb	r3, [r7, #13]
 8001832:	031a      	lsls	r2, r3, #12
 8001834:	7bbb      	ldrb	r3, [r7, #14]
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	0912      	lsrs	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8001840:	4313      	orrs	r3, r2
 8001842:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8001844:	7c3b      	ldrb	r3, [r7, #16]
 8001846:	b29b      	uxth	r3, r3
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b29a      	uxth	r2, r3
 800184c:	7c7b      	ldrb	r3, [r7, #17]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4313      	orrs	r3, r2
 8001852:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8001854:	7d7b      	ldrb	r3, [r7, #21]
 8001856:	b29b      	uxth	r3, r3
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	b29a      	uxth	r2, r3
 800185c:	7dbb      	ldrb	r3, [r7, #22]
 800185e:	099b      	lsrs	r3, r3, #6
 8001860:	b2db      	uxtb	r3, r3
 8001862:	b29b      	uxth	r3, r3
 8001864:	4313      	orrs	r3, r2
 8001866:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8001868:	7dbb      	ldrb	r3, [r7, #22]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b25a      	sxtb	r2, r3
 8001876:	7dbb      	ldrb	r3, [r7, #22]
 8001878:	b25b      	sxtb	r3, r3
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	b25b      	sxtb	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b25b      	sxtb	r3, r3
 8001884:	b2da      	uxtb	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b25a      	sxtb	r2, r3
 8001890:	7dbb      	ldrb	r3, [r7, #22]
 8001892:	b25b      	sxtb	r3, r3
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	b25b      	sxtb	r3, r3
 800189a:	4313      	orrs	r3, r2
 800189c:	b25b      	sxtb	r3, r3
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da20      	bge.n	80018f0 <read_field_data+0x13e>
				data->temperature = calc_temperature(adc_temp, dev);
 80018ae:	6839      	ldr	r1, [r7, #0]
 80018b0:	69f8      	ldr	r0, [r7, #28]
 80018b2:	f7ff fc05 	bl	80010c0 <calc_temperature>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	6a38      	ldr	r0, [r7, #32]
 80018c2:	f7ff fc98 	bl	80011f6 <calc_pressure>
 80018c6:	4602      	mov	r2, r0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 80018cc:	8b7b      	ldrh	r3, [r7, #26]
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fd3d 	bl	8001350 <calc_humidity>
 80018d6:	4602      	mov	r2, r0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80018dc:	7df9      	ldrb	r1, [r7, #23]
 80018de:	8b3b      	ldrh	r3, [r7, #24]
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fdce 	bl	8001484 <calc_gas_resistance>
 80018e8:	4602      	mov	r2, r0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	611a      	str	r2, [r3, #16]
				break;
 80018ee:	e00d      	b.n	800190c <read_field_data+0x15a>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f4:	200a      	movs	r0, #10
 80018f6:	4798      	blx	r3
		}
		tries--;
 80018f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018fc:	3b01      	subs	r3, #1
 80018fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	} while (tries);
 8001902:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001906:	2b00      	cmp	r3, #0
 8001908:	f47f af6a 	bne.w	80017e0 <read_field_data+0x2e>

	if (!tries)
 800190c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <read_field_data+0x168>
		rslt = BME680_W_NO_NEW_DATA;
 8001914:	2302      	movs	r3, #2
 8001916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return rslt;
 800191a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800191e:	4618      	mov	r0, r3
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 8001926:	b590      	push	{r4, r7, lr}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	6039      	str	r1, [r7, #0]
 8001930:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 8001932:	6838      	ldr	r0, [r7, #0]
 8001934:	f000 f8c6 	bl	8001ac4 <null_ptr_check>
 8001938:	4603      	mov	r3, r0
 800193a:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 800193c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d14f      	bne.n	80019e4 <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	da02      	bge.n	8001952 <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 800194c:	2300      	movs	r3, #0
 800194e:	73bb      	strb	r3, [r7, #14]
 8001950:	e001      	b.n	8001956 <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 8001952:	2310      	movs	r3, #16
 8001954:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	78db      	ldrb	r3, [r3, #3]
 800195a:	7bba      	ldrb	r2, [r7, #14]
 800195c:	429a      	cmp	r2, r3
 800195e:	d041      	beq.n	80019e4 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	7bba      	ldrb	r2, [r7, #14]
 8001964:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	7858      	ldrb	r0, [r3, #1]
 800196e:	f107 020d 	add.w	r2, r7, #13
 8001972:	2301      	movs	r3, #1
 8001974:	21f3      	movs	r1, #243	; 0xf3
 8001976:	47a0      	blx	r4
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (dev->com_rslt != 0)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 800198c:	23fe      	movs	r3, #254	; 0xfe
 800198e:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 8001990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d125      	bne.n	80019e4 <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8001998:	7b7b      	ldrb	r3, [r7, #13]
 800199a:	f023 0310 	bic.w	r3, r3, #16
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	78db      	ldrb	r3, [r3, #3]
 80019a6:	b25b      	sxtb	r3, r3
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	b25a      	sxtb	r2, r3
 80019ae:	7b7b      	ldrb	r3, [r7, #13]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	7858      	ldrb	r0, [r3, #1]
 80019c2:	f107 020d 	add.w	r2, r7, #13
 80019c6:	2301      	movs	r3, #1
 80019c8:	2173      	movs	r1, #115	; 0x73
 80019ca:	47a0      	blx	r4
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 80019e0:	23fe      	movs	r3, #254	; 0xfe
 80019e2:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 80019e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd90      	pop	{r4, r7, pc}

080019f0 <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f863 	bl	8001ac4 <null_ptr_check>
 80019fe:	4603      	mov	r3, r0
 8001a00:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d11b      	bne.n	8001a42 <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7858      	ldrb	r0, [r3, #1]
 8001a12:	f107 020e 	add.w	r2, r7, #14
 8001a16:	2301      	movs	r3, #1
 8001a18:	21f3      	movs	r1, #243	; 0xf3
 8001a1a:	47a0      	blx	r4
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 8001a30:	23fe      	movs	r3, #254	; 0xfe
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e005      	b.n	8001a42 <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8001a36:	7bbb      	ldrb	r3, [r7, #14]
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}

08001a4e <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b087      	sub	sp, #28
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	72fb      	strb	r3, [r7, #11]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d022      	beq.n	8001ab0 <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	7afa      	ldrb	r2, [r7, #11]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d90b      	bls.n	8001a8c <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	7afa      	ldrb	r2, [r7, #11]
 8001a78:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	7aba      	ldrb	r2, [r7, #10]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d20e      	bcs.n	8001ab4 <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	7aba      	ldrb	r2, [r7, #10]
 8001a9a:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001aa2:	f043 0302 	orr.w	r3, r3, #2
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001aae:	e001      	b.n	8001ab4 <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8001ab0:	23ff      	movs	r3, #255	; 0xff
 8001ab2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001ab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <null_ptr_check+0x26>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <null_ptr_check+0x26>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <null_ptr_check+0x26>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 8001aea:	23ff      	movs	r3, #255	; 0xff
 8001aec:	73fb      	strb	r3, [r7, #15]
 8001aee:	e001      	b.n	8001af4 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b04:	b5b0      	push	{r4, r5, r7, lr}
 8001b06:	b096      	sub	sp, #88	; 0x58
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b0a:	f000 fcfa 	bl	8002502 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b0e:	f000 f901 	bl	8001d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b12:	f000 fa31 	bl	8001f78 <MX_GPIO_Init>
  MX_USART2_Init();
 8001b16:	f000 fa03 	bl	8001f20 <MX_USART2_Init>
  MX_I2C1_Init();
 8001b1a:	f000 f9c1 	bl	8001ea0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001b1e:	f000 f95b 	bl	8001dd8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */



  // Configure the BME680 driver
  gas_sensor.dev_id = BME680_I2C_ADDR_SECONDARY;
 8001b22:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <main+0x1cc>)
 8001b24:	2277      	movs	r2, #119	; 0x77
 8001b26:	705a      	strb	r2, [r3, #1]
  gas_sensor.intf = BME680_I2C_INTF;
 8001b28:	4b69      	ldr	r3, [pc, #420]	; (8001cd0 <main+0x1cc>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	709a      	strb	r2, [r3, #2]
  gas_sensor.read = bme680I2cRead;
 8001b2e:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <main+0x1cc>)
 8001b30:	4a68      	ldr	r2, [pc, #416]	; (8001cd4 <main+0x1d0>)
 8001b32:	649a      	str	r2, [r3, #72]	; 0x48
  gas_sensor.write = bme680I2cWrite;
 8001b34:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <main+0x1cc>)
 8001b36:	4a68      	ldr	r2, [pc, #416]	; (8001cd8 <main+0x1d4>)
 8001b38:	64da      	str	r2, [r3, #76]	; 0x4c
  gas_sensor.delay_ms = HAL_Delay;
 8001b3a:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <main+0x1cc>)
 8001b3c:	4a67      	ldr	r2, [pc, #412]	; (8001cdc <main+0x1d8>)
 8001b3e:	651a      	str	r2, [r3, #80]	; 0x50
  gas_sensor.amb_temp = 25;
 8001b40:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <main+0x1cc>)
 8001b42:	2219      	movs	r2, #25
 8001b44:	711a      	strb	r2, [r3, #4]

  // Initialize the driver
  if (bme680_init(&gas_sensor) != BME680_OK) {
 8001b46:	4862      	ldr	r0, [pc, #392]	; (8001cd0 <main+0x1cc>)
 8001b48:	f7fe fd50 	bl	80005ec <bme680_init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00a      	beq.n	8001b68 <main+0x64>
    char bme_msg[] = "BME680 Initialization Error\r\n";
 8001b52:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <main+0x1dc>)
 8001b54:	f107 0420 	add.w	r4, r7, #32
 8001b58:	461d      	mov	r5, r3
 8001b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b62:	c407      	stmia	r4!, {r0, r1, r2}
 8001b64:	8023      	strh	r3, [r4, #0]
 8001b66:	e00b      	b.n	8001b80 <main+0x7c>
    //noteDebugSerialOutput(bme_msg);
  } else {
    char bme_msg[] = "BME680 Initialized and Ready\r\n";
 8001b68:	4b5e      	ldr	r3, [pc, #376]	; (8001ce4 <main+0x1e0>)
 8001b6a:	463c      	mov	r4, r7
 8001b6c:	461d      	mov	r5, r3
 8001b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b76:	c407      	stmia	r4!, {r0, r1, r2}
 8001b78:	8023      	strh	r3, [r4, #0]
 8001b7a:	3402      	adds	r4, #2
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	7023      	strb	r3, [r4, #0]
    //noteDebugSerialOutput(bme_msg);
  }

  // Select desired oversampling rates
  gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 8001b80:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <main+0x1cc>)
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  gas_sensor.tph_sett.os_pres = BME680_OS_4X;
 8001b88:	4b51      	ldr	r3, [pc, #324]	; (8001cd0 <main+0x1cc>)
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  gas_sensor.tph_sett.os_temp = BME680_OS_8X;
 8001b90:	4b4f      	ldr	r3, [pc, #316]	; (8001cd0 <main+0x1cc>)
 8001b92:	2204      	movs	r2, #4
 8001b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  // Set sensor to "always on"
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8001b98:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <main+0x1cc>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  // Set oversampling settings
  uint8_t required_settings = (BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL);
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  rslt = bme680_set_sensor_settings(required_settings, &gas_sensor);
 8001ba6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4948      	ldr	r1, [pc, #288]	; (8001cd0 <main+0x1cc>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fe59 	bl	8000866 <bme680_set_sensor_settings>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <main+0x1e4>)
 8001bba:	701a      	strb	r2, [r3, #0]

  // Set sensor mode
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8001bbc:	4844      	ldr	r0, [pc, #272]	; (8001cd0 <main+0x1cc>)
 8001bbe:	f7ff f81a 	bl	8000bf6 <bme680_set_sensor_mode>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <main+0x1e4>)
 8001bc8:	701a      	strb	r2, [r3, #0]

  // Query minimum sampling period
  uint16_t min_sampling_period;
  bme680_get_profile_dur(&min_sampling_period, &gas_sensor);
 8001bca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bce:	4940      	ldr	r1, [pc, #256]	; (8001cd0 <main+0x1cc>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f875 	bl	8000cc0 <bme680_get_profile_dur>
  while (1)
  {
    /* USER CODE END WHILE */

	  // Allow BME680 to sample environment
	  HAL_Delay(min_sampling_period);
 8001bd6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fd06 	bl	80025ec <HAL_Delay>

	  // Query the sample data
	  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8001be0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001be4:	493a      	ldr	r1, [pc, #232]	; (8001cd0 <main+0x1cc>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f8cc 	bl	8000d84 <bme680_get_sensor_data>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <main+0x1e4>)
 8001bf2:	701a      	strb	r2, [r3, #0]

	  // Format results into a human readable string
	  sprintf(i2c_reading_buf,
	    "T: %u.%u degC\r\n",
	    (unsigned int)data.temperature / 100,
 8001bf4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001bf8:	461a      	mov	r2, r3
	  sprintf(i2c_reading_buf,
 8001bfa:	4b3c      	ldr	r3, [pc, #240]	; (8001cec <main+0x1e8>)
 8001bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8001c00:	0959      	lsrs	r1, r3, #5
	    (unsigned int)data.temperature % 100);
 8001c02:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001c06:	461a      	mov	r2, r3
	  sprintf(i2c_reading_buf,
 8001c08:	4b38      	ldr	r3, [pc, #224]	; (8001cec <main+0x1e8>)
 8001c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2064      	movs	r0, #100	; 0x64
 8001c12:	fb00 f303 	mul.w	r3, r0, r3
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	460a      	mov	r2, r1
 8001c1a:	4935      	ldr	r1, [pc, #212]	; (8001cf0 <main+0x1ec>)
 8001c1c:	4835      	ldr	r0, [pc, #212]	; (8001cf4 <main+0x1f0>)
 8001c1e:	f004 fcf3 	bl	8006608 <siprintf>

	  HAL_USART_Transmit(&husart2, i2c_reading_buf, 27, 10);
 8001c22:	230a      	movs	r3, #10
 8001c24:	221b      	movs	r2, #27
 8001c26:	4933      	ldr	r1, [pc, #204]	; (8001cf4 <main+0x1f0>)
 8001c28:	4833      	ldr	r0, [pc, #204]	; (8001cf8 <main+0x1f4>)
 8001c2a:	f004 f80b 	bl	8005c44 <HAL_USART_Transmit>

	  sprintf(i2c_reading_buf,
	    "H: %u.%u %%rH\r\n",
	    (unsigned int)data.humidity / 1000,
 8001c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	  sprintf(i2c_reading_buf,
 8001c30:	4a32      	ldr	r2, [pc, #200]	; (8001cfc <main+0x1f8>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0999      	lsrs	r1, r3, #6
	    (unsigned int)data.humidity % 1000);
 8001c38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
	  sprintf(i2c_reading_buf,
 8001c3a:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <main+0x1f8>)
 8001c3c:	fba3 0302 	umull	r0, r3, r3, r2
 8001c40:	099b      	lsrs	r3, r3, #6
 8001c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c46:	fb00 f303 	mul.w	r3, r0, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	460a      	mov	r2, r1
 8001c4e:	492c      	ldr	r1, [pc, #176]	; (8001d00 <main+0x1fc>)
 8001c50:	4828      	ldr	r0, [pc, #160]	; (8001cf4 <main+0x1f0>)
 8001c52:	f004 fcd9 	bl	8006608 <siprintf>

	  // Publish result to connected PC
	  HAL_USART_Transmit(&husart2, i2c_reading_buf, 27, 10);
 8001c56:	230a      	movs	r3, #10
 8001c58:	221b      	movs	r2, #27
 8001c5a:	4926      	ldr	r1, [pc, #152]	; (8001cf4 <main+0x1f0>)
 8001c5c:	4826      	ldr	r0, [pc, #152]	; (8001cf8 <main+0x1f4>)
 8001c5e:	f003 fff1 	bl	8005c44 <HAL_USART_Transmit>

	  // Wait between samples
	  HAL_Delay(DELAY_PERIOD_MS);
 8001c62:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c66:	f000 fcc1 	bl	80025ec <HAL_Delay>



	  HAL_ADC_Start(&hadc1);
 8001c6a:	4826      	ldr	r0, [pc, #152]	; (8001d04 <main+0x200>)
 8001c6c:	f000 ffec 	bl	8002c48 <HAL_ADC_Start>

	  //polling analog values and setting timeout to 20ms
	  HAL_ADC_PollForConversion(&hadc1, 20);
 8001c70:	2114      	movs	r1, #20
 8001c72:	4824      	ldr	r0, [pc, #144]	; (8001d04 <main+0x200>)
 8001c74:	f001 f84b 	bl	8002d0e <HAL_ADC_PollForConversion>
	  ppm = HAL_ADC_GetValue(&hadc1);
 8001c78:	4822      	ldr	r0, [pc, #136]	; (8001d04 <main+0x200>)
 8001c7a:	f001 f8d7 	bl	8002e2c <HAL_ADC_GetValue>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <main+0x204>)
 8001c84:	801a      	strh	r2, [r3, #0]

	  sprintf(msg, "Air Quality: %u. %u ppm\r\n", ppm);
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <main+0x204>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	491f      	ldr	r1, [pc, #124]	; (8001d0c <main+0x208>)
 8001c8e:	4820      	ldr	r0, [pc, #128]	; (8001d10 <main+0x20c>)
 8001c90:	f004 fcba 	bl	8006608 <siprintf>
	  HAL_USART_Transmit(&husart2, (uint8_t *)msg, strlen(ppm), 10);
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <main+0x204>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fa99 	bl	80001d0 <strlen>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	230a      	movs	r3, #10
 8001ca4:	491a      	ldr	r1, [pc, #104]	; (8001d10 <main+0x20c>)
 8001ca6:	4814      	ldr	r0, [pc, #80]	; (8001cf8 <main+0x1f4>)
 8001ca8:	f003 ffcc 	bl	8005c44 <HAL_USART_Transmit>
	  HAL_Delay(DELAY_PERIOD_MS);
 8001cac:	f241 3088 	movw	r0, #5000	; 0x1388
 8001cb0:	f000 fc9c 	bl	80025ec <HAL_Delay>



	  // Request the next sample
	  if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <main+0x1cc>)
 8001cb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d18b      	bne.n	8001bd6 <main+0xd2>
	    rslt = bme680_set_sensor_mode(&gas_sensor);
 8001cbe:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <main+0x1cc>)
 8001cc0:	f7fe ff99 	bl	8000bf6 <bme680_set_sensor_mode>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <main+0x1e4>)
 8001cca:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(min_sampling_period);
 8001ccc:	e783      	b.n	8001bd6 <main+0xd2>
 8001cce:	bf00      	nop
 8001cd0:	20000180 	.word	0x20000180
 8001cd4:	0800200d 	.word	0x0800200d
 8001cd8:	0800208d 	.word	0x0800208d
 8001cdc:	080025ed 	.word	0x080025ed
 8001ce0:	08006ed4 	.word	0x08006ed4
 8001ce4:	08006ef4 	.word	0x08006ef4
 8001ce8:	2000023c 	.word	0x2000023c
 8001cec:	51eb851f 	.word	0x51eb851f
 8001cf0:	08006e98 	.word	0x08006e98
 8001cf4:	200001d8 	.word	0x200001d8
 8001cf8:	20000130 	.word	0x20000130
 8001cfc:	10624dd3 	.word	0x10624dd3
 8001d00:	08006ea8 	.word	0x08006ea8
 8001d04:	20000078 	.word	0x20000078
 8001d08:	2000023e 	.word	0x2000023e
 8001d0c:	08006eb8 	.word	0x08006eb8
 8001d10:	20000240 	.word	0x20000240

08001d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b096      	sub	sp, #88	; 0x58
 8001d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	2244      	movs	r2, #68	; 0x44
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f004 fc90 	bl	8006648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d3a:	f002 fdb3 	bl	80048a4 <HAL_PWREx_ControlVoltageScaling>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d44:	f000 f9e0 	bl	8002108 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d48:	f002 fd8e 	bl	8004868 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <SystemClock_Config+0xc0>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d52:	4a20      	ldr	r2, [pc, #128]	; (8001dd4 <SystemClock_Config+0xc0>)
 8001d54:	f023 0318 	bic.w	r3, r3, #24
 8001d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001d5c:	2314      	movs	r3, #20
 8001d5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d60:	2301      	movs	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d64:	2301      	movs	r3, #1
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d6c:	2360      	movs	r3, #96	; 0x60
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d70:	2302      	movs	r3, #2
 8001d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d74:	2301      	movs	r3, #1
 8001d76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001d7c:	2310      	movs	r3, #16
 8001d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d80:	2307      	movs	r3, #7
 8001d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d84:	2302      	movs	r3, #2
 8001d86:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4618      	mov	r0, r3
 8001d92:	f002 fddd 	bl	8004950 <HAL_RCC_OscConfig>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001d9c:	f000 f9b4 	bl	8002108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da0:	230f      	movs	r3, #15
 8001da2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da4:	2303      	movs	r3, #3
 8001da6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001db4:	463b      	mov	r3, r7
 8001db6:	2101      	movs	r1, #1
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 f9dd 	bl	8005178 <HAL_RCC_ClockConfig>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001dc4:	f000 f9a0 	bl	8002108 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001dc8:	f003 fdf0 	bl	80059ac <HAL_RCCEx_EnableMSIPLLMode>
}
 8001dcc:	bf00      	nop
 8001dce:	3758      	adds	r7, #88	; 0x58
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dde:	463b      	mov	r3, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
 8001dec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001dee:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001df0:	4a29      	ldr	r2, [pc, #164]	; (8001e98 <MX_ADC1_Init+0xc0>)
 8001df2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dfa:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e00:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e06:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e0e:	2204      	movs	r2, #4
 8001e10:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e4e:	4811      	ldr	r0, [pc, #68]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e50:	f000 fdb8 	bl	80029c4 <HAL_ADC_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001e5a:	f000 f955 	bl	8002108 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <MX_ADC1_Init+0xc4>)
 8001e60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e62:	2306      	movs	r3, #6
 8001e64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e6a:	237f      	movs	r3, #127	; 0x7f
 8001e6c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e76:	463b      	mov	r3, r7
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4806      	ldr	r0, [pc, #24]	; (8001e94 <MX_ADC1_Init+0xbc>)
 8001e7c:	f000 ffe4 	bl	8002e48 <HAL_ADC_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001e86:	f000 f93f 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000078 	.word	0x20000078
 8001e98:	50040000 	.word	0x50040000
 8001e9c:	2e300800 	.word	0x2e300800

08001ea0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <MX_I2C1_Init+0x74>)
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <MX_I2C1_Init+0x78>)
 8001ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <MX_I2C1_Init+0x74>)
 8001eac:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <MX_I2C1_Init+0x7c>)
 8001eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <MX_I2C1_Init+0x74>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <MX_I2C1_Init+0x74>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <MX_I2C1_Init+0x74>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <MX_I2C1_Init+0x74>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <MX_I2C1_Init+0x74>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <MX_I2C1_Init+0x74>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <MX_I2C1_Init+0x74>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eda:	480e      	ldr	r0, [pc, #56]	; (8001f14 <MX_I2C1_Init+0x74>)
 8001edc:	f001 fef0 	bl	8003cc0 <HAL_I2C_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ee6:	f000 f90f 	bl	8002108 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001eea:	2100      	movs	r1, #0
 8001eec:	4809      	ldr	r0, [pc, #36]	; (8001f14 <MX_I2C1_Init+0x74>)
 8001eee:	f002 fc23 	bl	8004738 <HAL_I2CEx_ConfigAnalogFilter>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ef8:	f000 f906 	bl	8002108 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001efc:	2100      	movs	r1, #0
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_I2C1_Init+0x74>)
 8001f00:	f002 fc65 	bl	80047ce <HAL_I2CEx_ConfigDigitalFilter>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f0a:	f000 f8fd 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200000dc 	.word	0x200000dc
 8001f18:	40005400 	.word	0x40005400
 8001f1c:	00707cbb 	.word	0x00707cbb

08001f20 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <MX_USART2_Init+0x50>)
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <MX_USART2_Init+0x54>)
 8001f28:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <MX_USART2_Init+0x50>)
 8001f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f30:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <MX_USART2_Init+0x50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <MX_USART2_Init+0x50>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <MX_USART2_Init+0x50>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <MX_USART2_Init+0x50>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <MX_USART2_Init+0x50>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <MX_USART2_Init+0x50>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <MX_USART2_Init+0x50>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001f5c:	4804      	ldr	r0, [pc, #16]	; (8001f70 <MX_USART2_Init+0x50>)
 8001f5e:	f003 fe27 	bl	8005bb0 <HAL_USART_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8001f68:	f000 f8ce 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000130 	.word	0x20000130
 8001f74:	40004400 	.word	0x40004400

08001f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <MX_GPIO_Init+0x8c>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <MX_GPIO_Init+0x8c>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <MX_GPIO_Init+0x8c>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <MX_GPIO_Init+0x8c>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	4a16      	ldr	r2, [pc, #88]	; (8002004 <MX_GPIO_Init+0x8c>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <MX_GPIO_Init+0x8c>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_GPIO_Init+0x8c>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <MX_GPIO_Init+0x8c>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <MX_GPIO_Init+0x8c>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2108      	movs	r1, #8
 8001fda:	480b      	ldr	r0, [pc, #44]	; (8002008 <MX_GPIO_Init+0x90>)
 8001fdc:	f001 fe58 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4804      	ldr	r0, [pc, #16]	; (8002008 <MX_GPIO_Init+0x90>)
 8001ff8:	f001 fce0 	bl	80039bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ffc:	bf00      	nop
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	48000400 	.word	0x48000400

0800200c <bme680I2cRead>:

/* USER CODE BEGIN 4 */



int8_t bme680I2cRead(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af02      	add	r7, sp, #8
 8002012:	603a      	str	r2, [r7, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
 800201a:	460b      	mov	r3, r1
 800201c:	71bb      	strb	r3, [r7, #6]
 800201e:	4613      	mov	r3, r2
 8002020:	80bb      	strh	r3, [r7, #4]
  int8_t result;
  static const size_t I2C_READ_TIMEOUT = 250;

  if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, I2C_READ_TIMEOUT) != HAL_OK) {
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	b29b      	uxth	r3, r3
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	b299      	uxth	r1, r3
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <bme680I2cRead+0x78>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	1dba      	adds	r2, r7, #6
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2301      	movs	r3, #1
 8002034:	4814      	ldr	r0, [pc, #80]	; (8002088 <bme680I2cRead+0x7c>)
 8002036:	f001 fedf 	bl	8003df8 <HAL_I2C_Master_Transmit>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <bme680I2cRead+0x3a>
    result = -1;
 8002040:	23ff      	movs	r3, #255	; 0xff
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e017      	b.n	8002076 <bme680I2cRead+0x6a>
  } else if (HAL_I2C_Master_Receive (&hi2c1, (dev_id << 1) | 0x01, reg_data, len, I2C_READ_TIMEOUT) != HAL_OK) {
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	b21b      	sxth	r3, r3
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	b21b      	sxth	r3, r3
 8002052:	b299      	uxth	r1, r3
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <bme680I2cRead+0x78>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	88ba      	ldrh	r2, [r7, #4]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	4613      	mov	r3, r2
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	4809      	ldr	r0, [pc, #36]	; (8002088 <bme680I2cRead+0x7c>)
 8002062:	f001 ffe1 	bl	8004028 <HAL_I2C_Master_Receive>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <bme680I2cRead+0x66>
    result = -1;
 800206c:	23ff      	movs	r3, #255	; 0xff
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e001      	b.n	8002076 <bme680I2cRead+0x6a>
  } else {
    result = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
  }

  return result;
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	08006f14 	.word	0x08006f14
 8002088:	200000dc 	.word	0x200000dc

0800208c <bme680I2cWrite>:

int8_t bme680I2cWrite(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af02      	add	r7, sp, #8
 8002092:	603a      	str	r2, [r7, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	460b      	mov	r3, r1
 800209c:	71bb      	strb	r3, [r7, #6]
 800209e:	4613      	mov	r3, r2
 80020a0:	80bb      	strh	r3, [r7, #4]
  int8_t result;
  int8_t *buf;

  // Allocate and load I2C transmit buffer
  buf = malloc(len + 1);
 80020a2:	88bb      	ldrh	r3, [r7, #4]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4618      	mov	r0, r3
 80020a8:	f004 f9f2 	bl	8006490 <malloc>
 80020ac:	4603      	mov	r3, r0
 80020ae:	60bb      	str	r3, [r7, #8]
  buf[0] = reg_addr;
 80020b0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	701a      	strb	r2, [r3, #0]
  memcpy(buf + 1, reg_data, len);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	3301      	adds	r3, #1
 80020bc:	88ba      	ldrh	r2, [r7, #4]
 80020be:	6839      	ldr	r1, [r7, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 fb05 	bl	80066d0 <memcpy>

  if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t *) buf, len + 1, HAL_MAX_DELAY) != HAL_OK) {
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	b299      	uxth	r1, r3
 80020ce:	88bb      	ldrh	r3, [r7, #4]
 80020d0:	3301      	adds	r3, #1
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295
 80020d8:	9200      	str	r2, [sp, #0]
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4809      	ldr	r0, [pc, #36]	; (8002104 <bme680I2cWrite+0x78>)
 80020de:	f001 fe8b 	bl	8003df8 <HAL_I2C_Master_Transmit>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <bme680I2cWrite+0x62>
    result = -1;
 80020e8:	23ff      	movs	r3, #255	; 0xff
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	e001      	b.n	80020f2 <bme680I2cWrite+0x66>
  } else {
    result = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
  }

  free(buf);
 80020f2:	68b8      	ldr	r0, [r7, #8]
 80020f4:	f004 f9d4 	bl	80064a0 <free>
  return result;
 80020f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200000dc 	.word	0x200000dc

08002108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002110:	e7fe      	b.n	8002110 <Error_Handler+0x8>
	...

08002114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_MspInit+0x44>)
 800211c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <HAL_MspInit+0x44>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6613      	str	r3, [r2, #96]	; 0x60
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_MspInit+0x44>)
 8002128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_MspInit+0x44>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_MspInit+0x44>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	6593      	str	r3, [r2, #88]	; 0x58
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_MspInit+0x44>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000

0800215c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b09e      	sub	sp, #120	; 0x78
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	2254      	movs	r2, #84	; 0x54
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f004 fa63 	bl	8006648 <memset>
  if(hadc->Instance==ADC1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a25      	ldr	r2, [pc, #148]	; (800221c <HAL_ADC_MspInit+0xc0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d143      	bne.n	8002214 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800218c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002190:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002192:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002196:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002198:	2301      	movs	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800219c:	2301      	movs	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80021a0:	2318      	movs	r3, #24
 80021a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80021a4:	2307      	movs	r3, #7
 80021a6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80021a8:	2302      	movs	r3, #2
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80021ac:	2302      	movs	r3, #2
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80021b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b6:	f107 0310 	add.w	r3, r7, #16
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 fa00 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80021c6:	f7ff ff9f 	bl	8002108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_ADC_MspInit+0xc4>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	4a14      	ldr	r2, [pc, #80]	; (8002220 <HAL_ADC_MspInit+0xc4>)
 80021d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_ADC_MspInit+0xc4>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_ADC_MspInit+0xc4>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <HAL_ADC_MspInit+0xc4>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_ADC_MspInit+0xc4>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021fa:	2340      	movs	r3, #64	; 0x40
 80021fc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021fe:	230b      	movs	r3, #11
 8002200:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800220a:	4619      	mov	r1, r3
 800220c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002210:	f001 fbd4 	bl	80039bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002214:	bf00      	nop
 8002216:	3778      	adds	r7, #120	; 0x78
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	50040000 	.word	0x50040000
 8002220:	40021000 	.word	0x40021000

08002224 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b09e      	sub	sp, #120	; 0x78
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	2254      	movs	r2, #84	; 0x54
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f004 f9ff 	bl	8006648 <memset>
  if(hi2c->Instance==I2C1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <HAL_I2C_MspInit+0xa8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d137      	bne.n	80022c4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002254:	2340      	movs	r3, #64	; 0x40
 8002256:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002258:	2300      	movs	r3, #0
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	4618      	mov	r0, r3
 8002262:	f003 f9ad 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800226c:	f7ff ff4c 	bl	8002108 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_I2C_MspInit+0xac>)
 8002272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002274:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <HAL_I2C_MspInit+0xac>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_I2C_MspInit+0xac>)
 800227e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002288:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800228c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800228e:	2312      	movs	r3, #18
 8002290:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800229a:	2304      	movs	r3, #4
 800229c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022a2:	4619      	mov	r1, r3
 80022a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a8:	f001 fb88 	bl	80039bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_I2C_MspInit+0xac>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <HAL_I2C_MspInit+0xac>)
 80022b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022b6:	6593      	str	r3, [r2, #88]	; 0x58
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_I2C_MspInit+0xac>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022c4:	bf00      	nop
 80022c6:	3778      	adds	r7, #120	; 0x78
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40005400 	.word	0x40005400
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b09e      	sub	sp, #120	; 0x78
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	2254      	movs	r2, #84	; 0x54
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f004 f9a7 	bl	8006648 <memset>
  if(husart->Instance==USART2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a2c      	ldr	r2, [pc, #176]	; (80023b0 <HAL_USART_MspInit+0xdc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d150      	bne.n	80023a6 <HAL_USART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002304:	2302      	movs	r3, #2
 8002306:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002308:	2300      	movs	r3, #0
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800230c:	f107 0310 	add.w	r3, r7, #16
 8002310:	4618      	mov	r0, r3
 8002312:	f003 f955 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 800231c:	f7ff fef4 	bl	8002108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002320:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_USART_MspInit+0xe0>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	4a23      	ldr	r2, [pc, #140]	; (80023b4 <HAL_USART_MspInit+0xe0>)
 8002326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232a:	6593      	str	r3, [r2, #88]	; 0x58
 800232c:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <HAL_USART_MspInit+0xe0>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002338:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <HAL_USART_MspInit+0xe0>)
 800233a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233c:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_USART_MspInit+0xe0>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_USART_MspInit+0xe0>)
 8002346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_4;
 8002350:	2314      	movs	r3, #20
 8002352:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235c:	2303      	movs	r3, #3
 800235e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002360:	2307      	movs	r3, #7
 8002362:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002368:	4619      	mov	r1, r3
 800236a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236e:	f001 fb25 	bl	80039bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002376:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002384:	2303      	movs	r3, #3
 8002386:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800238c:	4619      	mov	r1, r3
 800238e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002392:	f001 fb13 	bl	80039bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	2026      	movs	r0, #38	; 0x26
 800239c:	f001 fa97 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023a0:	2026      	movs	r0, #38	; 0x26
 80023a2:	f001 fab0 	bl	8003906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023a6:	bf00      	nop
 80023a8:	3778      	adds	r7, #120	; 0x78
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40004400 	.word	0x40004400
 80023b4:	40021000 	.word	0x40021000

080023b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023bc:	e7fe      	b.n	80023bc <NMI_Handler+0x4>

080023be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <HardFault_Handler+0x4>

080023c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <MemManage_Handler+0x4>

080023ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <BusFault_Handler+0x4>

080023d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <UsageFault_Handler+0x4>

080023d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002404:	f000 f8d2 	bl	80025ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}

0800240c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <USART2_IRQHandler+0x10>)
 8002412:	f003 fcc5 	bl	8005da0 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000130 	.word	0x20000130

08002420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002428:	4a14      	ldr	r2, [pc, #80]	; (800247c <_sbrk+0x5c>)
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <_sbrk+0x60>)
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <_sbrk+0x64>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <_sbrk+0x64>)
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <_sbrk+0x68>)
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <_sbrk+0x64>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	429a      	cmp	r2, r3
 800244e:	d207      	bcs.n	8002460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002450:	f004 f912 	bl	8006678 <__errno>
 8002454:	4603      	mov	r3, r0
 8002456:	220c      	movs	r2, #12
 8002458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
 800245e:	e009      	b.n	8002474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <_sbrk+0x64>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <_sbrk+0x64>)
 8002470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002472:	68fb      	ldr	r3, [r7, #12]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20010000 	.word	0x20010000
 8002480:	00000400 	.word	0x00000400
 8002484:	20000254 	.word	0x20000254
 8002488:	200003a8 	.word	0x200003a8

0800248c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <SystemInit+0x20>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	4a05      	ldr	r2, [pc, #20]	; (80024ac <SystemInit+0x20>)
 8002498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800249c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024b4:	f7ff ffea 	bl	800248c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b8:	480c      	ldr	r0, [pc, #48]	; (80024ec <LoopForever+0x6>)
  ldr r1, =_edata
 80024ba:	490d      	ldr	r1, [pc, #52]	; (80024f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024bc:	4a0d      	ldr	r2, [pc, #52]	; (80024f4 <LoopForever+0xe>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c0:	e002      	b.n	80024c8 <LoopCopyDataInit>

080024c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c6:	3304      	adds	r3, #4

080024c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024cc:	d3f9      	bcc.n	80024c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024d0:	4c0a      	ldr	r4, [pc, #40]	; (80024fc <LoopForever+0x16>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d4:	e001      	b.n	80024da <LoopFillZerobss>

080024d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d8:	3204      	adds	r2, #4

080024da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024dc:	d3fb      	bcc.n	80024d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024de:	f004 f8d1 	bl	8006684 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024e2:	f7ff fb0f 	bl	8001b04 <main>

080024e6 <LoopForever>:

LoopForever:
    b LoopForever
 80024e6:	e7fe      	b.n	80024e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80024f4:	08006fa4 	.word	0x08006fa4
  ldr r2, =_sbss
 80024f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80024fc:	200003a4 	.word	0x200003a4

08002500 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002500:	e7fe      	b.n	8002500 <ADC1_IRQHandler>

08002502 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800250c:	2003      	movs	r0, #3
 800250e:	f001 f9d3 	bl	80038b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002512:	2000      	movs	r0, #0
 8002514:	f000 f80e 	bl	8002534 <HAL_InitTick>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	71fb      	strb	r3, [r7, #7]
 8002522:	e001      	b.n	8002528 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002524:	f7ff fdf6 	bl	8002114 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002528:	79fb      	ldrb	r3, [r7, #7]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <HAL_InitTick+0x6c>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d023      	beq.n	8002590 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <HAL_InitTick+0x70>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <HAL_InitTick+0x6c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	4619      	mov	r1, r3
 8002552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002556:	fbb3 f3f1 	udiv	r3, r3, r1
 800255a:	fbb2 f3f3 	udiv	r3, r2, r3
 800255e:	4618      	mov	r0, r3
 8002560:	f001 f9df 	bl	8003922 <HAL_SYSTICK_Config>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10f      	bne.n	800258a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b0f      	cmp	r3, #15
 800256e:	d809      	bhi.n	8002584 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002570:	2200      	movs	r2, #0
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f001 f9a9 	bl	80038ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800257c:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <HAL_InitTick+0x74>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e007      	b.n	8002594 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	e004      	b.n	8002594 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	e001      	b.n	8002594 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000008 	.word	0x20000008
 80025a4:	20000000 	.word	0x20000000
 80025a8:	20000004 	.word	0x20000004

080025ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_IncTick+0x20>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_IncTick+0x24>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <HAL_IncTick+0x24>)
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000008 	.word	0x20000008
 80025d0:	20000258 	.word	0x20000258

080025d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return uwTick;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_GetTick+0x14>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000258 	.word	0x20000258

080025ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f4:	f7ff ffee 	bl	80025d4 <HAL_GetTick>
 80025f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d005      	beq.n	8002612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_Delay+0x44>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4413      	add	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002612:	bf00      	nop
 8002614:	f7ff ffde 	bl	80025d4 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	429a      	cmp	r2, r3
 8002622:	d8f7      	bhi.n	8002614 <HAL_Delay+0x28>
  {
  }
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000008 	.word	0x20000008

08002634 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	609a      	str	r2, [r3, #8]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3360      	adds	r3, #96	; 0x60
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <LL_ADC_SetOffset+0x44>)
 80026be:	4013      	ands	r3, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	03fff000 	.word	0x03fff000

080026e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3360      	adds	r3, #96	; 0x60
 80026f2:	461a      	mov	r2, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3360      	adds	r3, #96	; 0x60
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	431a      	orrs	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3330      	adds	r3, #48	; 0x30
 800277c:	461a      	mov	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	4413      	add	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	211f      	movs	r1, #31
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	401a      	ands	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	0e9b      	lsrs	r3, r3, #26
 80027a4:	f003 011f 	and.w	r1, r3, #31
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	431a      	orrs	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027b8:	bf00      	nop
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3314      	adds	r3, #20
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	0e5b      	lsrs	r3, r3, #25
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	0d1b      	lsrs	r3, r3, #20
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	2107      	movs	r1, #7
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	401a      	ands	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	0d1b      	lsrs	r3, r3, #20
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	431a      	orrs	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002834:	43db      	mvns	r3, r3
 8002836:	401a      	ands	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0318 	and.w	r3, r3, #24
 800283e:	4908      	ldr	r1, [pc, #32]	; (8002860 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002840:	40d9      	lsrs	r1, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	400b      	ands	r3, r1
 8002846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284a:	431a      	orrs	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	0007ffff 	.word	0x0007ffff

08002864 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002874:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6093      	str	r3, [r2, #8]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800289c:	d101      	bne.n	80028a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80028c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028ec:	d101      	bne.n	80028f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002910:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002914:	f043 0201 	orr.w	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <LL_ADC_IsEnabled+0x18>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <LL_ADC_IsEnabled+0x1a>
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800295e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002962:	f043 0204 	orr.w	r2, r3, #4
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b04      	cmp	r3, #4
 8002988:	d101      	bne.n	800298e <LL_ADC_REG_IsConversionOngoing+0x18>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d101      	bne.n	80029b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e126      	b.n	8002c2c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fbb5 	bl	800215c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff3f 	bl	8002888 <LL_ADC_IsDeepPowerDownEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d004      	beq.n	8002a1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff25 	bl	8002864 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff5a 	bl	80028d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d115      	bne.n	8002a56 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff3e 	bl	80028b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a34:	4b7f      	ldr	r3, [pc, #508]	; (8002c34 <HAL_ADC_Init+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	099b      	lsrs	r3, r3, #6
 8002a3a:	4a7f      	ldr	r2, [pc, #508]	; (8002c38 <HAL_ADC_Init+0x274>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	3301      	adds	r3, #1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a48:	e002      	b.n	8002a50 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f9      	bne.n	8002a4a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ff3c 	bl	80028d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10d      	bne.n	8002a82 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	f043 0210 	orr.w	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ff75 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002a8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f040 80bf 	bne.w	8002c1a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 80bb 	bne.w	8002c1a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002aac:	f043 0202 	orr.w	r2, r3, #2
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff35 	bl	8002928 <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ac4:	485d      	ldr	r0, [pc, #372]	; (8002c3c <HAL_ADC_Init+0x278>)
 8002ac6:	f7ff ff2f 	bl	8002928 <LL_ADC_IsEnabled>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	485a      	ldr	r0, [pc, #360]	; (8002c40 <HAL_ADC_Init+0x27c>)
 8002ad8:	f7ff fdac 	bl	8002634 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7e5b      	ldrb	r3, [r3, #25]
 8002ae0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002aec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002af2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002afa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d106      	bne.n	8002b18 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	045b      	lsls	r3, r3, #17
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	4b42      	ldr	r3, [pc, #264]	; (8002c44 <HAL_ADC_Init+0x280>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	69b9      	ldr	r1, [r7, #24]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff25 	bl	800299c <LL_ADC_INJ_IsConversionOngoing>
 8002b52:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d13d      	bne.n	8002bd6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d13a      	bne.n	8002bd6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b64:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b6c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b7c:	f023 0302 	bic.w	r3, r3, #2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	69b9      	ldr	r1, [r7, #24]
 8002b86:	430b      	orrs	r3, r1
 8002b88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d118      	bne.n	8002bc6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b9e:	f023 0304 	bic.w	r3, r3, #4
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002baa:	4311      	orrs	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	611a      	str	r2, [r3, #16]
 8002bc4:	e007      	b.n	8002bd6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	f023 010f 	bic.w	r1, r3, #15
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf6:	e007      	b.n	8002c08 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 020f 	bic.w	r2, r2, #15
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	f023 0303 	bic.w	r3, r3, #3
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
 8002c18:	e007      	b.n	8002c2a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000000 	.word	0x20000000
 8002c38:	053e2d63 	.word	0x053e2d63
 8002c3c:	50040000 	.word	0x50040000
 8002c40:	50040300 	.word	0x50040300
 8002c44:	fff0c007 	.word	0xfff0c007

08002c48 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fe8e 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d14f      	bne.n	8002d00 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_Start+0x26>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e04b      	b.n	8002d06 <HAL_ADC_Start+0xbe>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fcc8 	bl	800360c <ADC_Enable>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d137      	bne.n	8002cf6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca6:	d106      	bne.n	8002cb6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	f023 0206 	bic.w	r2, r3, #6
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	659a      	str	r2, [r3, #88]	; 0x58
 8002cb4:	e002      	b.n	8002cbc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	221c      	movs	r2, #28
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ce2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fe2d 	bl	800294e <LL_ADC_REG_StartConversion>
 8002cf4:	e006      	b.n	8002d04 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002cfe:	e001      	b.n	8002d04 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
 8002d02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d102      	bne.n	8002d26 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002d20:	2308      	movs	r3, #8
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	e010      	b.n	8002d48 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e06f      	b.n	8002e24 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002d44:	2304      	movs	r3, #4
 8002d46:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d48:	f7ff fc44 	bl	80025d4 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d4e:	e021      	b.n	8002d94 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d56:	d01d      	beq.n	8002d94 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d58:	f7ff fc3c 	bl	80025d4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d302      	bcc.n	8002d6e <HAL_ADC_PollForConversion+0x60>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d112      	bne.n	8002d94 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f043 0204 	orr.w	r2, r3, #4
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e047      	b.n	8002e24 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0d6      	beq.n	8002d50 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fcc7 	bl	8002746 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01c      	beq.n	8002df8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7e5b      	ldrb	r3, [r3, #25]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d118      	bne.n	8002df8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d111      	bne.n	8002df8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d104      	bne.n	8002e10 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e008      	b.n	8002e22 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	220c      	movs	r2, #12
 8002e20:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b0b6      	sub	sp, #216	; 0xd8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x22>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e3bb      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x79a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fd7d 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 83a0 	bne.w	80035c4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d824      	bhi.n	8002ede <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	3b02      	subs	r3, #2
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d81b      	bhi.n	8002ed6 <HAL_ADC_ConfigChannel+0x8e>
 8002e9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <HAL_ADC_ConfigChannel+0x5c>)
 8002ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea4:	08002eb5 	.word	0x08002eb5
 8002ea8:	08002ebd 	.word	0x08002ebd
 8002eac:	08002ec5 	.word	0x08002ec5
 8002eb0:	08002ecd 	.word	0x08002ecd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002eb4:	230c      	movs	r3, #12
 8002eb6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002eba:	e010      	b.n	8002ede <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002ebc:	2312      	movs	r3, #18
 8002ebe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ec2:	e00c      	b.n	8002ede <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002ec4:	2318      	movs	r3, #24
 8002ec6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002eca:	e008      	b.n	8002ede <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ed4:	e003      	b.n	8002ede <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002ed6:	2306      	movs	r3, #6
 8002ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002edc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002eec:	f7ff fc3e 	bl	800276c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fd3e 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002efa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fd4a 	bl	800299c <LL_ADC_INJ_IsConversionOngoing>
 8002f08:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f040 81a4 	bne.w	800325e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 819f 	bne.w	800325e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6819      	ldr	r1, [r3, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f7ff fc49 	bl	80027c4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	08db      	lsrs	r3, r3, #3
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d00a      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	6919      	ldr	r1, [r3, #16]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f64:	f7ff fb9a 	bl	800269c <LL_ADC_SetOffset>
 8002f68:	e179      	b.n	800325e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fbb7 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x14e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fbac 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	0e9b      	lsrs	r3, r3, #26
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	e01e      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x18c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fba1 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	e004      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002fc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1a4>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	0e9b      	lsrs	r3, r3, #26
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	e018      	b.n	800301e <HAL_ADC_ConfigChannel+0x1d6>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003008:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003010:	2320      	movs	r3, #32
 8003012:	e004      	b.n	800301e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003014:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800301e:	429a      	cmp	r2, r3
 8003020:	d106      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2200      	movs	r2, #0
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fb70 	bl	8002710 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fb54 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 800303c:	4603      	mov	r3, r0
 800303e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <HAL_ADC_ConfigChannel+0x214>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2101      	movs	r1, #1
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fb49 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	0e9b      	lsrs	r3, r3, #26
 8003056:	f003 021f 	and.w	r2, r3, #31
 800305a:	e01e      	b.n	800309a <HAL_ADC_ConfigChannel+0x252>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2101      	movs	r1, #1
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fb3e 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8003068:	4603      	mov	r3, r0
 800306a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800307a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800307e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003082:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800308a:	2320      	movs	r3, #32
 800308c:	e004      	b.n	8003098 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800308e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d105      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x26a>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	0e9b      	lsrs	r3, r3, #26
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	e018      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x29c>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80030c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80030ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80030d6:	2320      	movs	r3, #32
 80030d8:	e004      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80030da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d106      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2101      	movs	r1, #1
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fb0d 	bl	8002710 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2102      	movs	r1, #2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff faf1 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x2da>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2102      	movs	r1, #2
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fae6 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8003118:	4603      	mov	r3, r0
 800311a:	0e9b      	lsrs	r3, r3, #26
 800311c:	f003 021f 	and.w	r2, r3, #31
 8003120:	e01e      	b.n	8003160 <HAL_ADC_ConfigChannel+0x318>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2102      	movs	r1, #2
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fadb 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 800312e:	4603      	mov	r3, r0
 8003130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003148:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e004      	b.n	800315e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003168:	2b00      	cmp	r3, #0
 800316a:	d105      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x330>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	0e9b      	lsrs	r3, r3, #26
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	e014      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x35a>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800318c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003194:	2320      	movs	r3, #32
 8003196:	e004      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d106      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2200      	movs	r2, #0
 80031ac:	2102      	movs	r1, #2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff faae 	bl	8002710 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2103      	movs	r1, #3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fa92 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x398>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2103      	movs	r1, #3
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fa87 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 80031d6:	4603      	mov	r3, r0
 80031d8:	0e9b      	lsrs	r3, r3, #26
 80031da:	f003 021f 	and.w	r2, r3, #31
 80031de:	e017      	b.n	8003210 <HAL_ADC_ConfigChannel+0x3c8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2103      	movs	r1, #3
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fa7c 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 80031ec:	4603      	mov	r3, r0
 80031ee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80031fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003202:	2320      	movs	r3, #32
 8003204:	e003      	b.n	800320e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003208:	fab3 f383 	clz	r3, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x3e0>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	e011      	b.n	800324c <HAL_ADC_ConfigChannel+0x404>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003230:	fa93 f3a3 	rbit	r3, r3
 8003234:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003238:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800323a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003240:	2320      	movs	r3, #32
 8003242:	e003      	b.n	800324c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003244:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800324c:	429a      	cmp	r2, r3
 800324e:	d106      	bne.n	800325e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2200      	movs	r2, #0
 8003256:	2103      	movs	r1, #3
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fa59 	bl	8002710 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fb60 	bl	8002928 <LL_ADC_IsEnabled>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 8140 	bne.w	80034f0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6819      	ldr	r1, [r3, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	461a      	mov	r2, r3
 800327e:	f7ff facd 	bl	800281c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	4a8f      	ldr	r2, [pc, #572]	; (80034c4 <HAL_ADC_ConfigChannel+0x67c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	f040 8131 	bne.w	80034f0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10b      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x46e>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	0e9b      	lsrs	r3, r3, #26
 80032a4:	3301      	adds	r3, #1
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	2b09      	cmp	r3, #9
 80032ac:	bf94      	ite	ls
 80032ae:	2301      	movls	r3, #1
 80032b0:	2300      	movhi	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	e019      	b.n	80032ea <HAL_ADC_ConfigChannel+0x4a2>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80032c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80032c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e003      	b.n	80032da <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80032d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2b09      	cmp	r3, #9
 80032e2:	bf94      	ite	ls
 80032e4:	2301      	movls	r3, #1
 80032e6:	2300      	movhi	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d079      	beq.n	80033e2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d107      	bne.n	800330a <HAL_ADC_ConfigChannel+0x4c2>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0e9b      	lsrs	r3, r3, #26
 8003300:	3301      	adds	r3, #1
 8003302:	069b      	lsls	r3, r3, #26
 8003304:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003308:	e015      	b.n	8003336 <HAL_ADC_ConfigChannel+0x4ee>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800331a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800331c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003322:	2320      	movs	r3, #32
 8003324:	e003      	b.n	800332e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3301      	adds	r3, #1
 8003330:	069b      	lsls	r3, r3, #26
 8003332:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x50e>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	0e9b      	lsrs	r3, r3, #26
 8003348:	3301      	adds	r3, #1
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	2101      	movs	r1, #1
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	e017      	b.n	8003386 <HAL_ADC_ConfigChannel+0x53e>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003366:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800336e:	2320      	movs	r3, #32
 8003370:	e003      	b.n	800337a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	b2db      	uxtb	r3, r3
 800337a:	3301      	adds	r3, #1
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2101      	movs	r1, #1
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	ea42 0103 	orr.w	r1, r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x564>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	0e9b      	lsrs	r3, r3, #26
 800339c:	3301      	adds	r3, #1
 800339e:	f003 021f 	and.w	r2, r3, #31
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	051b      	lsls	r3, r3, #20
 80033aa:	e018      	b.n	80033de <HAL_ADC_ConfigChannel+0x596>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80033c4:	2320      	movs	r3, #32
 80033c6:	e003      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80033c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	3301      	adds	r3, #1
 80033d2:	f003 021f 	and.w	r2, r3, #31
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033de:	430b      	orrs	r3, r1
 80033e0:	e081      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d107      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x5b6>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	0e9b      	lsrs	r3, r3, #26
 80033f4:	3301      	adds	r3, #1
 80033f6:	069b      	lsls	r3, r3, #26
 80033f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033fc:	e015      	b.n	800342a <HAL_ADC_ConfigChannel+0x5e2>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003416:	2320      	movs	r3, #32
 8003418:	e003      	b.n	8003422 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	fab3 f383 	clz	r3, r3
 8003420:	b2db      	uxtb	r3, r3
 8003422:	3301      	adds	r3, #1
 8003424:	069b      	lsls	r3, r3, #26
 8003426:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <HAL_ADC_ConfigChannel+0x602>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	0e9b      	lsrs	r3, r3, #26
 800343c:	3301      	adds	r3, #1
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2101      	movs	r1, #1
 8003444:	fa01 f303 	lsl.w	r3, r1, r3
 8003448:	e017      	b.n	800347a <HAL_ADC_ConfigChannel+0x632>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	61bb      	str	r3, [r7, #24]
  return result;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003462:	2320      	movs	r3, #32
 8003464:	e003      	b.n	800346e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	ea42 0103 	orr.w	r1, r2, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10d      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x65e>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	0e9b      	lsrs	r3, r3, #26
 8003490:	3301      	adds	r3, #1
 8003492:	f003 021f 	and.w	r2, r3, #31
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	3b1e      	subs	r3, #30
 800349e:	051b      	lsls	r3, r3, #20
 80034a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034a4:	e01e      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x69c>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	60fb      	str	r3, [r7, #12]
  return result;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d104      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80034be:	2320      	movs	r3, #32
 80034c0:	e006      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x688>
 80034c2:	bf00      	nop
 80034c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	3301      	adds	r3, #1
 80034d2:	f003 021f 	and.w	r2, r3, #31
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	3b1e      	subs	r3, #30
 80034de:	051b      	lsls	r3, r3, #20
 80034e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ea:	4619      	mov	r1, r3
 80034ec:	f7ff f96a 	bl	80027c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4b3d      	ldr	r3, [pc, #244]	; (80035ec <HAL_ADC_ConfigChannel+0x7a4>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d06c      	beq.n	80035d6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034fc:	483c      	ldr	r0, [pc, #240]	; (80035f0 <HAL_ADC_ConfigChannel+0x7a8>)
 80034fe:	f7ff f8bf 	bl	8002680 <LL_ADC_GetCommonPathInternalCh>
 8003502:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a3a      	ldr	r2, [pc, #232]	; (80035f4 <HAL_ADC_ConfigChannel+0x7ac>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d127      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d121      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a35      	ldr	r2, [pc, #212]	; (80035f8 <HAL_ADC_ConfigChannel+0x7b0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d157      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800352a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800352e:	4619      	mov	r1, r3
 8003530:	482f      	ldr	r0, [pc, #188]	; (80035f0 <HAL_ADC_ConfigChannel+0x7a8>)
 8003532:	f7ff f892 	bl	800265a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003536:	4b31      	ldr	r3, [pc, #196]	; (80035fc <HAL_ADC_ConfigChannel+0x7b4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	4a30      	ldr	r2, [pc, #192]	; (8003600 <HAL_ADC_ConfigChannel+0x7b8>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	099b      	lsrs	r3, r3, #6
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	4613      	mov	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003550:	e002      	b.n	8003558 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	3b01      	subs	r3, #1
 8003556:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f9      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800355e:	e03a      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a27      	ldr	r2, [pc, #156]	; (8003604 <HAL_ADC_ConfigChannel+0x7bc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d113      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800356a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800356e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1f      	ldr	r2, [pc, #124]	; (80035f8 <HAL_ADC_ConfigChannel+0x7b0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d12a      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003580:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003584:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003588:	4619      	mov	r1, r3
 800358a:	4819      	ldr	r0, [pc, #100]	; (80035f0 <HAL_ADC_ConfigChannel+0x7a8>)
 800358c:	f7ff f865 	bl	800265a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003590:	e021      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_ADC_ConfigChannel+0x7c0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d11c      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800359c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d116      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <HAL_ADC_ConfigChannel+0x7b0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d111      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035ba:	4619      	mov	r1, r3
 80035bc:	480c      	ldr	r0, [pc, #48]	; (80035f0 <HAL_ADC_ConfigChannel+0x7a8>)
 80035be:	f7ff f84c 	bl	800265a <LL_ADC_SetCommonPathInternalCh>
 80035c2:	e008      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035de:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	37d8      	adds	r7, #216	; 0xd8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	80080000 	.word	0x80080000
 80035f0:	50040300 	.word	0x50040300
 80035f4:	c7520000 	.word	0xc7520000
 80035f8:	50040000 	.word	0x50040000
 80035fc:	20000000 	.word	0x20000000
 8003600:	053e2d63 	.word	0x053e2d63
 8003604:	cb840000 	.word	0xcb840000
 8003608:	80000001 	.word	0x80000001

0800360c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003614:	2300      	movs	r3, #0
 8003616:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff f983 	bl	8002928 <LL_ADC_IsEnabled>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d169      	bne.n	80036fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	4b36      	ldr	r3, [pc, #216]	; (8003708 <ADC_Enable+0xfc>)
 8003630:	4013      	ands	r3, r2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00d      	beq.n	8003652 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	f043 0210 	orr.w	r2, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	f043 0201 	orr.w	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e055      	b.n	80036fe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff f952 	bl	8002900 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800365c:	482b      	ldr	r0, [pc, #172]	; (800370c <ADC_Enable+0x100>)
 800365e:	f7ff f80f 	bl	8002680 <LL_ADC_GetCommonPathInternalCh>
 8003662:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800366c:	4b28      	ldr	r3, [pc, #160]	; (8003710 <ADC_Enable+0x104>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	099b      	lsrs	r3, r3, #6
 8003672:	4a28      	ldr	r2, [pc, #160]	; (8003714 <ADC_Enable+0x108>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	099b      	lsrs	r3, r3, #6
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	4613      	mov	r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003686:	e002      	b.n	800368e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	3b01      	subs	r3, #1
 800368c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f9      	bne.n	8003688 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003694:	f7fe ff9e 	bl	80025d4 <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800369a:	e028      	b.n	80036ee <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff f941 	bl	8002928 <LL_ADC_IsEnabled>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d104      	bne.n	80036b6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff f925 	bl	8002900 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036b6:	f7fe ff8d 	bl	80025d4 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d914      	bls.n	80036ee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d00d      	beq.n	80036ee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	f043 0210 	orr.w	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e007      	b.n	80036fe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d1cf      	bne.n	800369c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	8000003f 	.word	0x8000003f
 800370c:	50040300 	.word	0x50040300
 8003710:	20000000 	.word	0x20000000
 8003714:	053e2d63 	.word	0x053e2d63

08003718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003734:	4013      	ands	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800374a:	4a04      	ldr	r2, [pc, #16]	; (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	60d3      	str	r3, [r2, #12]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <__NVIC_GetPriorityGrouping+0x18>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f003 0307 	and.w	r3, r3, #7
}
 800376e:	4618      	mov	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	2b00      	cmp	r3, #0
 800378c:	db0b      	blt.n	80037a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	4907      	ldr	r1, [pc, #28]	; (80037b4 <__NVIC_EnableIRQ+0x38>)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2001      	movs	r0, #1
 800379e:	fa00 f202 	lsl.w	r2, r0, r2
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000e100 	.word	0xe000e100

080037b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	db0a      	blt.n	80037e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	490c      	ldr	r1, [pc, #48]	; (8003804 <__NVIC_SetPriority+0x4c>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	440b      	add	r3, r1
 80037dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e0:	e00a      	b.n	80037f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4908      	ldr	r1, [pc, #32]	; (8003808 <__NVIC_SetPriority+0x50>)
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	3b04      	subs	r3, #4
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	440b      	add	r3, r1
 80037f6:	761a      	strb	r2, [r3, #24]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	; 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f1c3 0307 	rsb	r3, r3, #7
 8003826:	2b04      	cmp	r3, #4
 8003828:	bf28      	it	cs
 800382a:	2304      	movcs	r3, #4
 800382c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3304      	adds	r3, #4
 8003832:	2b06      	cmp	r3, #6
 8003834:	d902      	bls.n	800383c <NVIC_EncodePriority+0x30>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3b03      	subs	r3, #3
 800383a:	e000      	b.n	800383e <NVIC_EncodePriority+0x32>
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	f04f 32ff 	mov.w	r2, #4294967295
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	401a      	ands	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003854:	f04f 31ff 	mov.w	r1, #4294967295
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	43d9      	mvns	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	4313      	orrs	r3, r2
         );
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	; 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003884:	d301      	bcc.n	800388a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003886:	2301      	movs	r3, #1
 8003888:	e00f      	b.n	80038aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <SysTick_Config+0x40>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3b01      	subs	r3, #1
 8003890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003892:	210f      	movs	r1, #15
 8003894:	f04f 30ff 	mov.w	r0, #4294967295
 8003898:	f7ff ff8e 	bl	80037b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <SysTick_Config+0x40>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <SysTick_Config+0x40>)
 80038a4:	2207      	movs	r2, #7
 80038a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	e000e010 	.word	0xe000e010

080038b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ff29 	bl	8003718 <__NVIC_SetPriorityGrouping>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	4603      	mov	r3, r0
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038e0:	f7ff ff3e 	bl	8003760 <__NVIC_GetPriorityGrouping>
 80038e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	6978      	ldr	r0, [r7, #20]
 80038ec:	f7ff ff8e 	bl	800380c <NVIC_EncodePriority>
 80038f0:	4602      	mov	r2, r0
 80038f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff5d 	bl	80037b8 <__NVIC_SetPriority>
}
 80038fe:	bf00      	nop
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ff31 	bl	800377c <__NVIC_EnableIRQ>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff ffa2 	bl	8003874 <SysTick_Config>
 8003930:	4603      	mov	r3, r0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d005      	beq.n	800395e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2204      	movs	r2, #4
 8003956:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	e029      	b.n	80039b2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 020e 	bic.w	r2, r2, #14
 800396c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	f003 021c 	and.w	r2, r3, #28
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2101      	movs	r1, #1
 800398c:	fa01 f202 	lsl.w	r2, r1, r2
 8003990:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
    }
  }
  return status;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ca:	e148      	b.n	8003c5e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	2101      	movs	r1, #1
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	fa01 f303 	lsl.w	r3, r1, r3
 80039d8:	4013      	ands	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 813a 	beq.w	8003c58 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d005      	beq.n	80039fc <HAL_GPIO_Init+0x40>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d130      	bne.n	8003a5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	2203      	movs	r2, #3
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4013      	ands	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a32:	2201      	movs	r2, #1
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	f003 0201 	and.w	r2, r3, #1
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d017      	beq.n	8003a9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	2203      	movs	r2, #3
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d123      	bne.n	8003aee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	08da      	lsrs	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3208      	adds	r2, #8
 8003aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	220f      	movs	r2, #15
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	08da      	lsrs	r2, r3, #3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3208      	adds	r2, #8
 8003ae8:	6939      	ldr	r1, [r7, #16]
 8003aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	2203      	movs	r2, #3
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4013      	ands	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 0203 	and.w	r2, r3, #3
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8094 	beq.w	8003c58 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b30:	4b52      	ldr	r3, [pc, #328]	; (8003c7c <HAL_GPIO_Init+0x2c0>)
 8003b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b34:	4a51      	ldr	r2, [pc, #324]	; (8003c7c <HAL_GPIO_Init+0x2c0>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	6613      	str	r3, [r2, #96]	; 0x60
 8003b3c:	4b4f      	ldr	r3, [pc, #316]	; (8003c7c <HAL_GPIO_Init+0x2c0>)
 8003b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b48:	4a4d      	ldr	r2, [pc, #308]	; (8003c80 <HAL_GPIO_Init+0x2c4>)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	3302      	adds	r3, #2
 8003b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	220f      	movs	r2, #15
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b72:	d00d      	beq.n	8003b90 <HAL_GPIO_Init+0x1d4>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a43      	ldr	r2, [pc, #268]	; (8003c84 <HAL_GPIO_Init+0x2c8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <HAL_GPIO_Init+0x1d0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a42      	ldr	r2, [pc, #264]	; (8003c88 <HAL_GPIO_Init+0x2cc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_GPIO_Init+0x1cc>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e004      	b.n	8003b92 <HAL_GPIO_Init+0x1d6>
 8003b88:	2307      	movs	r3, #7
 8003b8a:	e002      	b.n	8003b92 <HAL_GPIO_Init+0x1d6>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <HAL_GPIO_Init+0x1d6>
 8003b90:	2300      	movs	r3, #0
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	f002 0203 	and.w	r2, r2, #3
 8003b98:	0092      	lsls	r2, r2, #2
 8003b9a:	4093      	lsls	r3, r2
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ba2:	4937      	ldr	r1, [pc, #220]	; (8003c80 <HAL_GPIO_Init+0x2c4>)
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	3302      	adds	r3, #2
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bb0:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bd4:	4a2d      	ldr	r2, [pc, #180]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bda:	4b2c      	ldr	r3, [pc, #176]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4013      	ands	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bfe:	4a23      	ldr	r2, [pc, #140]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c04:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c28:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c2e:	4b17      	ldr	r3, [pc, #92]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c52:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f47f aeaf 	bne.w	80039cc <HAL_GPIO_Init+0x10>
  }
}
 8003c6e:	bf00      	nop
 8003c70:	bf00      	nop
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40010000 	.word	0x40010000
 8003c84:	48000400 	.word	0x48000400
 8003c88:	48000800 	.word	0x48000800
 8003c8c:	40010400 	.word	0x40010400

08003c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca0:	787b      	ldrb	r3, [r7, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cac:	e002      	b.n	8003cb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e08d      	b.n	8003dee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fe fa9c 	bl	8002224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2224      	movs	r2, #36	; 0x24
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	e006      	b.n	8003d48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d108      	bne.n	8003d62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5e:	605a      	str	r2, [r3, #4]
 8003d60:	e007      	b.n	8003d72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69d9      	ldr	r1, [r3, #28]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	607a      	str	r2, [r7, #4]
 8003e02:	461a      	mov	r2, r3
 8003e04:	460b      	mov	r3, r1
 8003e06:	817b      	strh	r3, [r7, #10]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	f040 80fd 	bne.w	8004014 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_I2C_Master_Transmit+0x30>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e0f6      	b.n	8004016 <HAL_I2C_Master_Transmit+0x21e>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e30:	f7fe fbd0 	bl	80025d4 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	2319      	movs	r3, #25
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 fa0a 	bl	800425c <I2C_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e0e1      	b.n	8004016 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2221      	movs	r2, #33	; 0x21
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	893a      	ldrh	r2, [r7, #8]
 8003e72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2bff      	cmp	r3, #255	; 0xff
 8003e82:	d906      	bls.n	8003e92 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	22ff      	movs	r2, #255	; 0xff
 8003e88:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003e8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e007      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003e9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ea0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d024      	beq.n	8003ef4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	781a      	ldrb	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	8979      	ldrh	r1, [r7, #10]
 8003ee6:	4b4e      	ldr	r3, [pc, #312]	; (8004020 <HAL_I2C_Master_Transmit+0x228>)
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fbf1 	bl	80046d4 <I2C_TransferConfig>
 8003ef2:	e066      	b.n	8003fc2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	8979      	ldrh	r1, [r7, #10]
 8003efc:	4b48      	ldr	r3, [pc, #288]	; (8004020 <HAL_I2C_Master_Transmit+0x228>)
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fbe6 	bl	80046d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f08:	e05b      	b.n	8003fc2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	6a39      	ldr	r1, [r7, #32]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f9f3 	bl	80042fa <I2C_WaitOnTXISFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07b      	b.n	8004016 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	781a      	ldrb	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d034      	beq.n	8003fc2 <HAL_I2C_Master_Transmit+0x1ca>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d130      	bne.n	8003fc2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	2200      	movs	r2, #0
 8003f68:	2180      	movs	r1, #128	; 0x80
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f976 	bl	800425c <I2C_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e04d      	b.n	8004016 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2bff      	cmp	r3, #255	; 0xff
 8003f82:	d90e      	bls.n	8003fa2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	22ff      	movs	r2, #255	; 0xff
 8003f88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	8979      	ldrh	r1, [r7, #10]
 8003f92:	2300      	movs	r3, #0
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fb9a 	bl	80046d4 <I2C_TransferConfig>
 8003fa0:	e00f      	b.n	8003fc2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	8979      	ldrh	r1, [r7, #10]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fb89 	bl	80046d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d19e      	bne.n	8003f0a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	6a39      	ldr	r1, [r7, #32]
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f9d9 	bl	8004388 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e01a      	b.n	8004016 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6859      	ldr	r1, [r3, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <HAL_I2C_Master_Transmit+0x22c>)
 8003ff4:	400b      	ands	r3, r1
 8003ff6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	80002000 	.word	0x80002000
 8004024:	fe00e800 	.word	0xfe00e800

08004028 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	607a      	str	r2, [r7, #4]
 8004032:	461a      	mov	r2, r3
 8004034:	460b      	mov	r3, r1
 8004036:	817b      	strh	r3, [r7, #10]
 8004038:	4613      	mov	r3, r2
 800403a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b20      	cmp	r3, #32
 8004046:	f040 80db 	bne.w	8004200 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_I2C_Master_Receive+0x30>
 8004054:	2302      	movs	r3, #2
 8004056:	e0d4      	b.n	8004202 <HAL_I2C_Master_Receive+0x1da>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004060:	f7fe fab8 	bl	80025d4 <HAL_GetTick>
 8004064:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	2319      	movs	r3, #25
 800406c:	2201      	movs	r2, #1
 800406e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f8f2 	bl	800425c <I2C_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0bf      	b.n	8004202 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2222      	movs	r2, #34	; 0x22
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2210      	movs	r2, #16
 800408e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	893a      	ldrh	r2, [r7, #8]
 80040a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2bff      	cmp	r3, #255	; 0xff
 80040b2:	d90e      	bls.n	80040d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	22ff      	movs	r2, #255	; 0xff
 80040b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	8979      	ldrh	r1, [r7, #10]
 80040c2:	4b52      	ldr	r3, [pc, #328]	; (800420c <HAL_I2C_Master_Receive+0x1e4>)
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fb02 	bl	80046d4 <I2C_TransferConfig>
 80040d0:	e06d      	b.n	80041ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	8979      	ldrh	r1, [r7, #10]
 80040e4:	4b49      	ldr	r3, [pc, #292]	; (800420c <HAL_I2C_Master_Receive+0x1e4>)
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 faf1 	bl	80046d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80040f2:	e05c      	b.n	80041ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	6a39      	ldr	r1, [r7, #32]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f989 	bl	8004410 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e07c      	b.n	8004202 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d034      	beq.n	80041ae <HAL_I2C_Master_Receive+0x186>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	d130      	bne.n	80041ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	2200      	movs	r2, #0
 8004154:	2180      	movs	r1, #128	; 0x80
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f880 	bl	800425c <I2C_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e04d      	b.n	8004202 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416a:	b29b      	uxth	r3, r3
 800416c:	2bff      	cmp	r3, #255	; 0xff
 800416e:	d90e      	bls.n	800418e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	22ff      	movs	r2, #255	; 0xff
 8004174:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417a:	b2da      	uxtb	r2, r3
 800417c:	8979      	ldrh	r1, [r7, #10]
 800417e:	2300      	movs	r3, #0
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 faa4 	bl	80046d4 <I2C_TransferConfig>
 800418c:	e00f      	b.n	80041ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	b2da      	uxtb	r2, r3
 800419e:	8979      	ldrh	r1, [r7, #10]
 80041a0:	2300      	movs	r3, #0
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fa93 	bl	80046d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d19d      	bne.n	80040f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	6a39      	ldr	r1, [r7, #32]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f8e3 	bl	8004388 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e01a      	b.n	8004202 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2220      	movs	r2, #32
 80041d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6859      	ldr	r1, [r3, #4]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <HAL_I2C_Master_Receive+0x1e8>)
 80041e0:	400b      	ands	r3, r1
 80041e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e000      	b.n	8004202 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004200:	2302      	movs	r3, #2
  }
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	80002400 	.word	0x80002400
 8004210:	fe00e800 	.word	0xfe00e800

08004214 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b02      	cmp	r3, #2
 8004228:	d103      	bne.n	8004232 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2200      	movs	r2, #0
 8004230:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b01      	cmp	r3, #1
 800423e:	d007      	beq.n	8004250 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	619a      	str	r2, [r3, #24]
  }
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800426c:	e031      	b.n	80042d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d02d      	beq.n	80042d2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004276:	f7fe f9ad 	bl	80025d4 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d302      	bcc.n	800428c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d122      	bne.n	80042d2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4013      	ands	r3, r2
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	429a      	cmp	r2, r3
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d113      	bne.n	80042d2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e00f      	b.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699a      	ldr	r2, [r3, #24]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4013      	ands	r3, r2
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	429a      	cmp	r2, r3
 80042e0:	bf0c      	ite	eq
 80042e2:	2301      	moveq	r3, #1
 80042e4:	2300      	movne	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d0be      	beq.n	800426e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004306:	e033      	b.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f901 	bl	8004514 <I2C_IsErrorOccurred>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e031      	b.n	8004380 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d025      	beq.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004324:	f7fe f956 	bl	80025d4 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	429a      	cmp	r2, r3
 8004332:	d302      	bcc.n	800433a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d11a      	bne.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b02      	cmp	r3, #2
 8004346:	d013      	beq.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e007      	b.n	8004380 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	d1c4      	bne.n	8004308 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004394:	e02f      	b.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f8ba 	bl	8004514 <I2C_IsErrorOccurred>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e02d      	b.n	8004406 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043aa:	f7fe f913 	bl	80025d4 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d302      	bcc.n	80043c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d11a      	bne.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d013      	beq.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e007      	b.n	8004406 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b20      	cmp	r3, #32
 8004402:	d1c8      	bne.n	8004396 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800441c:	e06b      	b.n	80044f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f876 	bl	8004514 <I2C_IsErrorOccurred>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e069      	b.n	8004506 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b20      	cmp	r3, #32
 800443e:	d138      	bne.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	d105      	bne.n	800445a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e055      	b.n	8004506 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b10      	cmp	r3, #16
 8004466:	d107      	bne.n	8004478 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2210      	movs	r2, #16
 800446e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2204      	movs	r2, #4
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
 8004476:	e002      	b.n	800447e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2220      	movs	r2, #32
 8004484:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6859      	ldr	r1, [r3, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b1f      	ldr	r3, [pc, #124]	; (8004510 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004492:	400b      	ands	r3, r1
 8004494:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e029      	b.n	8004506 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7fe f88f 	bl	80025d4 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d116      	bne.n	80044f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d00f      	beq.n	80044f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	f043 0220 	orr.w	r2, r3, #32
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e007      	b.n	8004506 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d18c      	bne.n	800441e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	fe00e800 	.word	0xfe00e800

08004514 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	d068      	beq.n	8004612 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2210      	movs	r2, #16
 8004546:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004548:	e049      	b.n	80045de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d045      	beq.n	80045de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7fe f83f 	bl	80025d4 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <I2C_IsErrorOccurred+0x54>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d13a      	bne.n	80045de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004572:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800457a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458a:	d121      	bne.n	80045d0 <I2C_IsErrorOccurred+0xbc>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004592:	d01d      	beq.n	80045d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	2b20      	cmp	r3, #32
 8004598:	d01a      	beq.n	80045d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045aa:	f7fe f813 	bl	80025d4 <HAL_GetTick>
 80045ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045b0:	e00e      	b.n	80045d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045b2:	f7fe f80f 	bl	80025d4 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b19      	cmp	r3, #25
 80045be:	d907      	bls.n	80045d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f043 0320 	orr.w	r3, r3, #32
 80045c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80045ce:	e006      	b.n	80045de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d1e9      	bne.n	80045b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d003      	beq.n	80045f4 <I2C_IsErrorOccurred+0xe0>
 80045ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0aa      	beq.n	800454a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d103      	bne.n	8004604 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2220      	movs	r2, #32
 8004602:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	f043 0304 	orr.w	r3, r3, #4
 800460a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00b      	beq.n	800463c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f043 0308 	orr.w	r3, r3, #8
 800464c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004656:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	f043 0302 	orr.w	r3, r3, #2
 800466e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004678:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01c      	beq.n	80046c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff fdc3 	bl	8004214 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6859      	ldr	r1, [r3, #4]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <I2C_IsErrorOccurred+0x1bc>)
 800469a:	400b      	ands	r3, r1
 800469c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80046c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3728      	adds	r7, #40	; 0x28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	fe00e800 	.word	0xfe00e800

080046d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	460b      	mov	r3, r1
 80046e0:	817b      	strh	r3, [r7, #10]
 80046e2:	4613      	mov	r3, r2
 80046e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046e6:	897b      	ldrh	r3, [r7, #10]
 80046e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046ec:	7a7b      	ldrb	r3, [r7, #9]
 80046ee:	041b      	lsls	r3, r3, #16
 80046f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004702:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	0d5b      	lsrs	r3, r3, #21
 800470e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004712:	4b08      	ldr	r3, [pc, #32]	; (8004734 <I2C_TransferConfig+0x60>)
 8004714:	430b      	orrs	r3, r1
 8004716:	43db      	mvns	r3, r3
 8004718:	ea02 0103 	and.w	r1, r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	03ff63ff 	.word	0x03ff63ff

08004738 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b20      	cmp	r3, #32
 800474c:	d138      	bne.n	80047c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004758:	2302      	movs	r3, #2
 800475a:	e032      	b.n	80047c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2224      	movs	r2, #36	; 0x24
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800478a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6819      	ldr	r1, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e000      	b.n	80047c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d139      	bne.n	8004858 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e033      	b.n	800485a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2224      	movs	r2, #36	; 0x24
 80047fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0201 	bic.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004820:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	e000      	b.n	800485a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
  }
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a04      	ldr	r2, [pc, #16]	; (8004884 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004876:	6013      	str	r3, [r2, #0]
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40007000 	.word	0x40007000

08004888 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40007000 	.word	0x40007000

080048a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b2:	d130      	bne.n	8004916 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80048b4:	4b23      	ldr	r3, [pc, #140]	; (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c0:	d038      	beq.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048c2:	4b20      	ldr	r3, [pc, #128]	; (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048ca:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048d2:	4b1d      	ldr	r3, [pc, #116]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2232      	movs	r2, #50	; 0x32
 80048d8:	fb02 f303 	mul.w	r3, r2, r3
 80048dc:	4a1b      	ldr	r2, [pc, #108]	; (800494c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	0c9b      	lsrs	r3, r3, #18
 80048e4:	3301      	adds	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048e8:	e002      	b.n	80048f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048f0:	4b14      	ldr	r3, [pc, #80]	; (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fc:	d102      	bne.n	8004904 <HAL_PWREx_ControlVoltageScaling+0x60>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f2      	bne.n	80048ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004910:	d110      	bne.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e00f      	b.n	8004936 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800491e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004922:	d007      	beq.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004924:	4b07      	ldr	r3, [pc, #28]	; (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800492c:	4a05      	ldr	r2, [pc, #20]	; (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004932:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40007000 	.word	0x40007000
 8004948:	20000000 	.word	0x20000000
 800494c:	431bde83 	.word	0x431bde83

08004950 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f000 bc02 	b.w	8005168 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004964:	4b96      	ldr	r3, [pc, #600]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 030c 	and.w	r3, r3, #12
 800496c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800496e:	4b94      	ldr	r3, [pc, #592]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80e4 	beq.w	8004b4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <HAL_RCC_OscConfig+0x4c>
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b0c      	cmp	r3, #12
 8004990:	f040 808b 	bne.w	8004aaa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b01      	cmp	r3, #1
 8004998:	f040 8087 	bne.w	8004aaa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800499c:	4b88      	ldr	r3, [pc, #544]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_OscConfig+0x64>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e3d9      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	4b81      	ldr	r3, [pc, #516]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d004      	beq.n	80049ce <HAL_RCC_OscConfig+0x7e>
 80049c4:	4b7e      	ldr	r3, [pc, #504]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049cc:	e005      	b.n	80049da <HAL_RCC_OscConfig+0x8a>
 80049ce:	4b7c      	ldr	r3, [pc, #496]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049da:	4293      	cmp	r3, r2
 80049dc:	d223      	bcs.n	8004a26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fd8c 	bl	8005500 <RCC_SetFlashLatencyFromMSIRange>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e3ba      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049f2:	4b73      	ldr	r3, [pc, #460]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a72      	ldr	r2, [pc, #456]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049f8:	f043 0308 	orr.w	r3, r3, #8
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b70      	ldr	r3, [pc, #448]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	496d      	ldr	r1, [pc, #436]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a10:	4b6b      	ldr	r3, [pc, #428]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	4968      	ldr	r1, [pc, #416]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	604b      	str	r3, [r1, #4]
 8004a24:	e025      	b.n	8004a72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a26:	4b66      	ldr	r3, [pc, #408]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a65      	ldr	r2, [pc, #404]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a2c:	f043 0308 	orr.w	r3, r3, #8
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	4b63      	ldr	r3, [pc, #396]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	4960      	ldr	r1, [pc, #384]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a44:	4b5e      	ldr	r3, [pc, #376]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	021b      	lsls	r3, r3, #8
 8004a52:	495b      	ldr	r1, [pc, #364]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fd4c 	bl	8005500 <RCC_SetFlashLatencyFromMSIRange>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e37a      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a72:	f000 fc81 	bl	8005378 <HAL_RCC_GetSysClockFreq>
 8004a76:	4602      	mov	r2, r0
 8004a78:	4b51      	ldr	r3, [pc, #324]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	4950      	ldr	r1, [pc, #320]	; (8004bc4 <HAL_RCC_OscConfig+0x274>)
 8004a84:	5ccb      	ldrb	r3, [r1, r3]
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8e:	4a4e      	ldr	r2, [pc, #312]	; (8004bc8 <HAL_RCC_OscConfig+0x278>)
 8004a90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a92:	4b4e      	ldr	r3, [pc, #312]	; (8004bcc <HAL_RCC_OscConfig+0x27c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fd fd4c 	bl	8002534 <HAL_InitTick>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d052      	beq.n	8004b4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	e35e      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d032      	beq.n	8004b18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ab2:	4b43      	ldr	r3, [pc, #268]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a42      	ldr	r2, [pc, #264]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004abe:	f7fd fd89 	bl	80025d4 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ac6:	f7fd fd85 	bl	80025d4 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e347      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ad8:	4b39      	ldr	r3, [pc, #228]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ae4:	4b36      	ldr	r3, [pc, #216]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a35      	ldr	r2, [pc, #212]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004aea:	f043 0308 	orr.w	r3, r3, #8
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	4b33      	ldr	r3, [pc, #204]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	4930      	ldr	r1, [pc, #192]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b02:	4b2f      	ldr	r3, [pc, #188]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	492b      	ldr	r1, [pc, #172]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	604b      	str	r3, [r1, #4]
 8004b16:	e01a      	b.n	8004b4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b18:	4b29      	ldr	r3, [pc, #164]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a28      	ldr	r2, [pc, #160]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b24:	f7fd fd56 	bl	80025d4 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b2c:	f7fd fd52 	bl	80025d4 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e314      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b3e:	4b20      	ldr	r3, [pc, #128]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x1dc>
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d073      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d005      	beq.n	8004b6c <HAL_RCC_OscConfig+0x21c>
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b0c      	cmp	r3, #12
 8004b64:	d10e      	bne.n	8004b84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d10b      	bne.n	8004b84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6c:	4b14      	ldr	r3, [pc, #80]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d063      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2f0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d15f      	bne.n	8004c40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e2f1      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8c:	d106      	bne.n	8004b9c <HAL_RCC_OscConfig+0x24c>
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a0b      	ldr	r2, [pc, #44]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e025      	b.n	8004be8 <HAL_RCC_OscConfig+0x298>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba4:	d114      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x280>
 8004ba6:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a05      	ldr	r2, [pc, #20]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a02      	ldr	r2, [pc, #8]	; (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	e013      	b.n	8004be8 <HAL_RCC_OscConfig+0x298>
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	08006f18 	.word	0x08006f18
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	20000004 	.word	0x20000004
 8004bd0:	4ba0      	ldr	r3, [pc, #640]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a9f      	ldr	r2, [pc, #636]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4b9d      	ldr	r3, [pc, #628]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a9c      	ldr	r2, [pc, #624]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fd fcf0 	bl	80025d4 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7fd fcec 	bl	80025d4 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	; 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e2ae      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c0a:	4b92      	ldr	r3, [pc, #584]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x2a8>
 8004c16:	e014      	b.n	8004c42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fd fcdc 	bl	80025d4 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fd fcd8 	bl	80025d4 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e29a      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c32:	4b88      	ldr	r3, [pc, #544]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x2d0>
 8004c3e:	e000      	b.n	8004c42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d060      	beq.n	8004d10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d005      	beq.n	8004c60 <HAL_RCC_OscConfig+0x310>
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b0c      	cmp	r3, #12
 8004c58:	d119      	bne.n	8004c8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d116      	bne.n	8004c8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c60:	4b7c      	ldr	r3, [pc, #496]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_RCC_OscConfig+0x328>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e277      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c78:	4b76      	ldr	r3, [pc, #472]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	4973      	ldr	r1, [pc, #460]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c8c:	e040      	b.n	8004d10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d023      	beq.n	8004cde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c96:	4b6f      	ldr	r3, [pc, #444]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a6e      	ldr	r2, [pc, #440]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca2:	f7fd fc97 	bl	80025d4 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004caa:	f7fd fc93 	bl	80025d4 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e255      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cbc:	4b65      	ldr	r3, [pc, #404]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0f0      	beq.n	8004caa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc8:	4b62      	ldr	r3, [pc, #392]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	061b      	lsls	r3, r3, #24
 8004cd6:	495f      	ldr	r1, [pc, #380]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]
 8004cdc:	e018      	b.n	8004d10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cde:	4b5d      	ldr	r3, [pc, #372]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a5c      	ldr	r2, [pc, #368]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cea:	f7fd fc73 	bl	80025d4 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf2:	f7fd fc6f 	bl	80025d4 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e231      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d04:	4b53      	ldr	r3, [pc, #332]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f0      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d03c      	beq.n	8004d96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01c      	beq.n	8004d5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d24:	4b4b      	ldr	r3, [pc, #300]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2a:	4a4a      	ldr	r2, [pc, #296]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d34:	f7fd fc4e 	bl	80025d4 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d3c:	f7fd fc4a 	bl	80025d4 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e20c      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d4e:	4b41      	ldr	r3, [pc, #260]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0ef      	beq.n	8004d3c <HAL_RCC_OscConfig+0x3ec>
 8004d5c:	e01b      	b.n	8004d96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d64:	4a3b      	ldr	r2, [pc, #236]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6e:	f7fd fc31 	bl	80025d4 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d76:	f7fd fc2d 	bl	80025d4 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e1ef      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d88:	4b32      	ldr	r3, [pc, #200]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ef      	bne.n	8004d76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 80a6 	beq.w	8004ef0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da4:	2300      	movs	r3, #0
 8004da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004da8:	4b2a      	ldr	r3, [pc, #168]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10d      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db4:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db8:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004dc0:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd0:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <HAL_RCC_OscConfig+0x508>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d118      	bne.n	8004e0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ddc:	4b1e      	ldr	r3, [pc, #120]	; (8004e58 <HAL_RCC_OscConfig+0x508>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <HAL_RCC_OscConfig+0x508>)
 8004de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de8:	f7fd fbf4 	bl	80025d4 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df0:	f7fd fbf0 	bl	80025d4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e1b2      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e02:	4b15      	ldr	r3, [pc, #84]	; (8004e58 <HAL_RCC_OscConfig+0x508>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d108      	bne.n	8004e28 <HAL_RCC_OscConfig+0x4d8>
 8004e16:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1c:	4a0d      	ldr	r2, [pc, #52]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e26:	e029      	b.n	8004e7c <HAL_RCC_OscConfig+0x52c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b05      	cmp	r3, #5
 8004e2e:	d115      	bne.n	8004e5c <HAL_RCC_OscConfig+0x50c>
 8004e30:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e36:	4a07      	ldr	r2, [pc, #28]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e38:	f043 0304 	orr.w	r3, r3, #4
 8004e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e40:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e46:	4a03      	ldr	r2, [pc, #12]	; (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e50:	e014      	b.n	8004e7c <HAL_RCC_OscConfig+0x52c>
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	4b9a      	ldr	r3, [pc, #616]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	4a99      	ldr	r2, [pc, #612]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e6c:	4b96      	ldr	r3, [pc, #600]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	4a95      	ldr	r2, [pc, #596]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004e74:	f023 0304 	bic.w	r3, r3, #4
 8004e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d016      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fd fba6 	bl	80025d4 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8c:	f7fd fba2 	bl	80025d4 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e162      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ea2:	4b89      	ldr	r3, [pc, #548]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ed      	beq.n	8004e8c <HAL_RCC_OscConfig+0x53c>
 8004eb0:	e015      	b.n	8004ede <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb2:	f7fd fb8f 	bl	80025d4 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fd fb8b 	bl	80025d4 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e14b      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ed0:	4b7d      	ldr	r3, [pc, #500]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1ed      	bne.n	8004eba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ede:	7ffb      	ldrb	r3, [r7, #31]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d105      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee4:	4b78      	ldr	r3, [pc, #480]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee8:	4a77      	ldr	r2, [pc, #476]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d03c      	beq.n	8004f76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01c      	beq.n	8004f3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f04:	4b70      	ldr	r3, [pc, #448]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f0a:	4a6f      	ldr	r2, [pc, #444]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7fd fb5e 	bl	80025d4 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f1c:	f7fd fb5a 	bl	80025d4 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e11c      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f2e:	4b66      	ldr	r3, [pc, #408]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0ef      	beq.n	8004f1c <HAL_RCC_OscConfig+0x5cc>
 8004f3c:	e01b      	b.n	8004f76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f3e:	4b62      	ldr	r3, [pc, #392]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f44:	4a60      	ldr	r2, [pc, #384]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004f46:	f023 0301 	bic.w	r3, r3, #1
 8004f4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4e:	f7fd fb41 	bl	80025d4 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f56:	f7fd fb3d 	bl	80025d4 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e0ff      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f68:	4b57      	ldr	r3, [pc, #348]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1ef      	bne.n	8004f56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80f3 	beq.w	8005166 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	f040 80c9 	bne.w	800511c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f8a:	4b4f      	ldr	r3, [pc, #316]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f003 0203 	and.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d12c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d123      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d11b      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d113      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	085b      	lsrs	r3, r3, #1
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d109      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	085b      	lsrs	r3, r3, #1
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d06b      	beq.n	80050d0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b0c      	cmp	r3, #12
 8004ffc:	d062      	beq.n	80050c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ffe:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e0ac      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800500e:	4b2e      	ldr	r3, [pc, #184]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a2d      	ldr	r2, [pc, #180]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8005014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005018:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800501a:	f7fd fadb 	bl	80025d4 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005022:	f7fd fad7 	bl	80025d4 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e099      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005034:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f0      	bne.n	8005022 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005040:	4b21      	ldr	r3, [pc, #132]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	4b21      	ldr	r3, [pc, #132]	; (80050cc <HAL_RCC_OscConfig+0x77c>)
 8005046:	4013      	ands	r3, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005050:	3a01      	subs	r2, #1
 8005052:	0112      	lsls	r2, r2, #4
 8005054:	4311      	orrs	r1, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800505a:	0212      	lsls	r2, r2, #8
 800505c:	4311      	orrs	r1, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005062:	0852      	lsrs	r2, r2, #1
 8005064:	3a01      	subs	r2, #1
 8005066:	0552      	lsls	r2, r2, #21
 8005068:	4311      	orrs	r1, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800506e:	0852      	lsrs	r2, r2, #1
 8005070:	3a01      	subs	r2, #1
 8005072:	0652      	lsls	r2, r2, #25
 8005074:	4311      	orrs	r1, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800507a:	06d2      	lsls	r2, r2, #27
 800507c:	430a      	orrs	r2, r1
 800507e:	4912      	ldr	r1, [pc, #72]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8005080:	4313      	orrs	r3, r2
 8005082:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005084:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a0f      	ldr	r2, [pc, #60]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 800508a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800508e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005090:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4a0c      	ldr	r2, [pc, #48]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 8005096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800509a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800509c:	f7fd fa9a 	bl	80025d4 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a4:	f7fd fa96 	bl	80025d4 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e058      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b6:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <HAL_RCC_OscConfig+0x778>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f0      	beq.n	80050a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050c2:	e050      	b.n	8005166 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e04f      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
 80050c8:	40021000 	.word	0x40021000
 80050cc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d0:	4b27      	ldr	r3, [pc, #156]	; (8005170 <HAL_RCC_OscConfig+0x820>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d144      	bne.n	8005166 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050dc:	4b24      	ldr	r3, [pc, #144]	; (8005170 <HAL_RCC_OscConfig+0x820>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a23      	ldr	r2, [pc, #140]	; (8005170 <HAL_RCC_OscConfig+0x820>)
 80050e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050e8:	4b21      	ldr	r3, [pc, #132]	; (8005170 <HAL_RCC_OscConfig+0x820>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4a20      	ldr	r2, [pc, #128]	; (8005170 <HAL_RCC_OscConfig+0x820>)
 80050ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050f4:	f7fd fa6e 	bl	80025d4 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fc:	f7fd fa6a 	bl	80025d4 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e02c      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800510e:	4b18      	ldr	r3, [pc, #96]	; (8005170 <HAL_RCC_OscConfig+0x820>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0f0      	beq.n	80050fc <HAL_RCC_OscConfig+0x7ac>
 800511a:	e024      	b.n	8005166 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b0c      	cmp	r3, #12
 8005120:	d01f      	beq.n	8005162 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005122:	4b13      	ldr	r3, [pc, #76]	; (8005170 <HAL_RCC_OscConfig+0x820>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a12      	ldr	r2, [pc, #72]	; (8005170 <HAL_RCC_OscConfig+0x820>)
 8005128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800512c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512e:	f7fd fa51 	bl	80025d4 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005136:	f7fd fa4d 	bl	80025d4 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e00f      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005148:	4b09      	ldr	r3, [pc, #36]	; (8005170 <HAL_RCC_OscConfig+0x820>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f0      	bne.n	8005136 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005154:	4b06      	ldr	r3, [pc, #24]	; (8005170 <HAL_RCC_OscConfig+0x820>)
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	4905      	ldr	r1, [pc, #20]	; (8005170 <HAL_RCC_OscConfig+0x820>)
 800515a:	4b06      	ldr	r3, [pc, #24]	; (8005174 <HAL_RCC_OscConfig+0x824>)
 800515c:	4013      	ands	r3, r2
 800515e:	60cb      	str	r3, [r1, #12]
 8005160:	e001      	b.n	8005166 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3720      	adds	r7, #32
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000
 8005174:	feeefffc 	.word	0xfeeefffc

08005178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0e7      	b.n	800535c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800518c:	4b75      	ldr	r3, [pc, #468]	; (8005364 <HAL_RCC_ClockConfig+0x1ec>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d910      	bls.n	80051bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519a:	4b72      	ldr	r3, [pc, #456]	; (8005364 <HAL_RCC_ClockConfig+0x1ec>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f023 0207 	bic.w	r2, r3, #7
 80051a2:	4970      	ldr	r1, [pc, #448]	; (8005364 <HAL_RCC_ClockConfig+0x1ec>)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051aa:	4b6e      	ldr	r3, [pc, #440]	; (8005364 <HAL_RCC_ClockConfig+0x1ec>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d001      	beq.n	80051bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0cf      	b.n	800535c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d010      	beq.n	80051ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	4b66      	ldr	r3, [pc, #408]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d908      	bls.n	80051ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d8:	4b63      	ldr	r3, [pc, #396]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	4960      	ldr	r1, [pc, #384]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d04c      	beq.n	8005290 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d107      	bne.n	800520e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051fe:	4b5a      	ldr	r3, [pc, #360]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d121      	bne.n	800524e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e0a6      	b.n	800535c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d107      	bne.n	8005226 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005216:	4b54      	ldr	r3, [pc, #336]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d115      	bne.n	800524e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e09a      	b.n	800535c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d107      	bne.n	800523e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800522e:	4b4e      	ldr	r3, [pc, #312]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e08e      	b.n	800535c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800523e:	4b4a      	ldr	r3, [pc, #296]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e086      	b.n	800535c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800524e:	4b46      	ldr	r3, [pc, #280]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f023 0203 	bic.w	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	4943      	ldr	r1, [pc, #268]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 800525c:	4313      	orrs	r3, r2
 800525e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005260:	f7fd f9b8 	bl	80025d4 <HAL_GetTick>
 8005264:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005266:	e00a      	b.n	800527e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005268:	f7fd f9b4 	bl	80025d4 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	; 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e06e      	b.n	800535c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527e:	4b3a      	ldr	r3, [pc, #232]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 020c 	and.w	r2, r3, #12
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	429a      	cmp	r2, r3
 800528e:	d1eb      	bne.n	8005268 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d010      	beq.n	80052be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	4b31      	ldr	r3, [pc, #196]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d208      	bcs.n	80052be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ac:	4b2e      	ldr	r3, [pc, #184]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	492b      	ldr	r1, [pc, #172]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052be:	4b29      	ldr	r3, [pc, #164]	; (8005364 <HAL_RCC_ClockConfig+0x1ec>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d210      	bcs.n	80052ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052cc:	4b25      	ldr	r3, [pc, #148]	; (8005364 <HAL_RCC_ClockConfig+0x1ec>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f023 0207 	bic.w	r2, r3, #7
 80052d4:	4923      	ldr	r1, [pc, #140]	; (8005364 <HAL_RCC_ClockConfig+0x1ec>)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	4313      	orrs	r3, r2
 80052da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052dc:	4b21      	ldr	r3, [pc, #132]	; (8005364 <HAL_RCC_ClockConfig+0x1ec>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d001      	beq.n	80052ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e036      	b.n	800535c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d008      	beq.n	800530c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052fa:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	4918      	ldr	r1, [pc, #96]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 8005308:	4313      	orrs	r3, r2
 800530a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b00      	cmp	r3, #0
 8005316:	d009      	beq.n	800532c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005318:	4b13      	ldr	r3, [pc, #76]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4910      	ldr	r1, [pc, #64]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 8005328:	4313      	orrs	r3, r2
 800532a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800532c:	f000 f824 	bl	8005378 <HAL_RCC_GetSysClockFreq>
 8005330:	4602      	mov	r2, r0
 8005332:	4b0d      	ldr	r3, [pc, #52]	; (8005368 <HAL_RCC_ClockConfig+0x1f0>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	490b      	ldr	r1, [pc, #44]	; (800536c <HAL_RCC_ClockConfig+0x1f4>)
 800533e:	5ccb      	ldrb	r3, [r1, r3]
 8005340:	f003 031f 	and.w	r3, r3, #31
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
 8005348:	4a09      	ldr	r2, [pc, #36]	; (8005370 <HAL_RCC_ClockConfig+0x1f8>)
 800534a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800534c:	4b09      	ldr	r3, [pc, #36]	; (8005374 <HAL_RCC_ClockConfig+0x1fc>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4618      	mov	r0, r3
 8005352:	f7fd f8ef 	bl	8002534 <HAL_InitTick>
 8005356:	4603      	mov	r3, r0
 8005358:	72fb      	strb	r3, [r7, #11]

  return status;
 800535a:	7afb      	ldrb	r3, [r7, #11]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40022000 	.word	0x40022000
 8005368:	40021000 	.word	0x40021000
 800536c:	08006f18 	.word	0x08006f18
 8005370:	20000000 	.word	0x20000000
 8005374:	20000004 	.word	0x20000004

08005378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005378:	b480      	push	{r7}
 800537a:	b089      	sub	sp, #36	; 0x24
 800537c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	2300      	movs	r3, #0
 8005384:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005386:	4b3e      	ldr	r3, [pc, #248]	; (8005480 <HAL_RCC_GetSysClockFreq+0x108>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005390:	4b3b      	ldr	r3, [pc, #236]	; (8005480 <HAL_RCC_GetSysClockFreq+0x108>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_RCC_GetSysClockFreq+0x34>
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b0c      	cmp	r3, #12
 80053a4:	d121      	bne.n	80053ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d11e      	bne.n	80053ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053ac:	4b34      	ldr	r3, [pc, #208]	; (8005480 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d107      	bne.n	80053c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053b8:	4b31      	ldr	r3, [pc, #196]	; (8005480 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053be:	0a1b      	lsrs	r3, r3, #8
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	61fb      	str	r3, [r7, #28]
 80053c6:	e005      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053c8:	4b2d      	ldr	r3, [pc, #180]	; (8005480 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053d4:	4a2b      	ldr	r2, [pc, #172]	; (8005484 <HAL_RCC_GetSysClockFreq+0x10c>)
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10d      	bne.n	8005400 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053e8:	e00a      	b.n	8005400 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d102      	bne.n	80053f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053f0:	4b25      	ldr	r3, [pc, #148]	; (8005488 <HAL_RCC_GetSysClockFreq+0x110>)
 80053f2:	61bb      	str	r3, [r7, #24]
 80053f4:	e004      	b.n	8005400 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d101      	bne.n	8005400 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053fc:	4b23      	ldr	r3, [pc, #140]	; (800548c <HAL_RCC_GetSysClockFreq+0x114>)
 80053fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b0c      	cmp	r3, #12
 8005404:	d134      	bne.n	8005470 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005406:	4b1e      	ldr	r3, [pc, #120]	; (8005480 <HAL_RCC_GetSysClockFreq+0x108>)
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d003      	beq.n	800541e <HAL_RCC_GetSysClockFreq+0xa6>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b03      	cmp	r3, #3
 800541a:	d003      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0xac>
 800541c:	e005      	b.n	800542a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800541e:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <HAL_RCC_GetSysClockFreq+0x110>)
 8005420:	617b      	str	r3, [r7, #20]
      break;
 8005422:	e005      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005424:	4b19      	ldr	r3, [pc, #100]	; (800548c <HAL_RCC_GetSysClockFreq+0x114>)
 8005426:	617b      	str	r3, [r7, #20]
      break;
 8005428:	e002      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	617b      	str	r3, [r7, #20]
      break;
 800542e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005430:	4b13      	ldr	r3, [pc, #76]	; (8005480 <HAL_RCC_GetSysClockFreq+0x108>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	3301      	adds	r3, #1
 800543c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800543e:	4b10      	ldr	r3, [pc, #64]	; (8005480 <HAL_RCC_GetSysClockFreq+0x108>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	fb03 f202 	mul.w	r2, r3, r2
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <HAL_RCC_GetSysClockFreq+0x108>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	0e5b      	lsrs	r3, r3, #25
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	3301      	adds	r3, #1
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	fbb2 f3f3 	udiv	r3, r2, r3
 800546e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005470:	69bb      	ldr	r3, [r7, #24]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3724      	adds	r7, #36	; 0x24
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40021000 	.word	0x40021000
 8005484:	08006f30 	.word	0x08006f30
 8005488:	00f42400 	.word	0x00f42400
 800548c:	007a1200 	.word	0x007a1200

08005490 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005494:	4b03      	ldr	r3, [pc, #12]	; (80054a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005496:	681b      	ldr	r3, [r3, #0]
}
 8005498:	4618      	mov	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000000 	.word	0x20000000

080054a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054ac:	f7ff fff0 	bl	8005490 <HAL_RCC_GetHCLKFreq>
 80054b0:	4602      	mov	r2, r0
 80054b2:	4b06      	ldr	r3, [pc, #24]	; (80054cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	0a1b      	lsrs	r3, r3, #8
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	4904      	ldr	r1, [pc, #16]	; (80054d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054be:	5ccb      	ldrb	r3, [r1, r3]
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40021000 	.word	0x40021000
 80054d0:	08006f28 	.word	0x08006f28

080054d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054d8:	f7ff ffda 	bl	8005490 <HAL_RCC_GetHCLKFreq>
 80054dc:	4602      	mov	r2, r0
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	0adb      	lsrs	r3, r3, #11
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	4904      	ldr	r1, [pc, #16]	; (80054fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80054ea:	5ccb      	ldrb	r3, [r1, r3]
 80054ec:	f003 031f 	and.w	r3, r3, #31
 80054f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40021000 	.word	0x40021000
 80054fc:	08006f28 	.word	0x08006f28

08005500 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005508:	2300      	movs	r3, #0
 800550a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800550c:	4b2a      	ldr	r3, [pc, #168]	; (80055b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800550e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005518:	f7ff f9b6 	bl	8004888 <HAL_PWREx_GetVoltageRange>
 800551c:	6178      	str	r0, [r7, #20]
 800551e:	e014      	b.n	800554a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005520:	4b25      	ldr	r3, [pc, #148]	; (80055b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005524:	4a24      	ldr	r2, [pc, #144]	; (80055b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552a:	6593      	str	r3, [r2, #88]	; 0x58
 800552c:	4b22      	ldr	r3, [pc, #136]	; (80055b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800552e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005538:	f7ff f9a6 	bl	8004888 <HAL_PWREx_GetVoltageRange>
 800553c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800553e:	4b1e      	ldr	r3, [pc, #120]	; (80055b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005542:	4a1d      	ldr	r2, [pc, #116]	; (80055b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005548:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005550:	d10b      	bne.n	800556a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b80      	cmp	r3, #128	; 0x80
 8005556:	d919      	bls.n	800558c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2ba0      	cmp	r3, #160	; 0xa0
 800555c:	d902      	bls.n	8005564 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800555e:	2302      	movs	r3, #2
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	e013      	b.n	800558c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005564:	2301      	movs	r3, #1
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	e010      	b.n	800558c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d902      	bls.n	8005576 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005570:	2303      	movs	r3, #3
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	e00a      	b.n	800558c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b80      	cmp	r3, #128	; 0x80
 800557a:	d102      	bne.n	8005582 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800557c:	2302      	movs	r3, #2
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	e004      	b.n	800558c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b70      	cmp	r3, #112	; 0x70
 8005586:	d101      	bne.n	800558c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005588:	2301      	movs	r3, #1
 800558a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f023 0207 	bic.w	r2, r3, #7
 8005594:	4909      	ldr	r1, [pc, #36]	; (80055bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800559c:	4b07      	ldr	r3, [pc, #28]	; (80055bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d001      	beq.n	80055ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40021000 	.word	0x40021000
 80055bc:	40022000 	.word	0x40022000

080055c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055c8:	2300      	movs	r3, #0
 80055ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055cc:	2300      	movs	r3, #0
 80055ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d031      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055e4:	d01a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80055e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055ea:	d814      	bhi.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d009      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80055f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055f4:	d10f      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80055f6:	4b5d      	ldr	r3, [pc, #372]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	4a5c      	ldr	r2, [pc, #368]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005600:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005602:	e00c      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3304      	adds	r3, #4
 8005608:	2100      	movs	r1, #0
 800560a:	4618      	mov	r0, r3
 800560c:	f000 f9de 	bl	80059cc <RCCEx_PLLSAI1_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005614:	e003      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	74fb      	strb	r3, [r7, #19]
      break;
 800561a:	e000      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800561c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800561e:	7cfb      	ldrb	r3, [r7, #19]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10b      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005624:	4b51      	ldr	r3, [pc, #324]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	494e      	ldr	r1, [pc, #312]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005634:	4313      	orrs	r3, r2
 8005636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800563a:	e001      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 809e 	beq.w	800578a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800564e:	2300      	movs	r3, #0
 8005650:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005652:	4b46      	ldr	r3, [pc, #280]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00d      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005668:	4b40      	ldr	r3, [pc, #256]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566c:	4a3f      	ldr	r2, [pc, #252]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005672:	6593      	str	r3, [r2, #88]	; 0x58
 8005674:	4b3d      	ldr	r3, [pc, #244]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005680:	2301      	movs	r3, #1
 8005682:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005684:	4b3a      	ldr	r3, [pc, #232]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a39      	ldr	r2, [pc, #228]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800568a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005690:	f7fc ffa0 	bl	80025d4 <HAL_GetTick>
 8005694:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005696:	e009      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005698:	f7fc ff9c 	bl	80025d4 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d902      	bls.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	74fb      	strb	r3, [r7, #19]
        break;
 80056aa:	e005      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056ac:	4b30      	ldr	r3, [pc, #192]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0ef      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80056b8:	7cfb      	ldrb	r3, [r7, #19]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d15a      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056be:	4b2b      	ldr	r3, [pc, #172]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01e      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d019      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056da:	4b24      	ldr	r3, [pc, #144]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056e6:	4b21      	ldr	r3, [pc, #132]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ec:	4a1f      	ldr	r2, [pc, #124]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056f6:	4b1d      	ldr	r3, [pc, #116]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fc:	4a1b      	ldr	r2, [pc, #108]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005706:	4a19      	ldr	r2, [pc, #100]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d016      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005718:	f7fc ff5c 	bl	80025d4 <HAL_GetTick>
 800571c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800571e:	e00b      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005720:	f7fc ff58 	bl	80025d4 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f241 3288 	movw	r2, #5000	; 0x1388
 800572e:	4293      	cmp	r3, r2
 8005730:	d902      	bls.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	74fb      	strb	r3, [r7, #19]
            break;
 8005736:	e006      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005738:	4b0c      	ldr	r3, [pc, #48]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0ec      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005746:	7cfb      	ldrb	r3, [r7, #19]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10b      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800574c:	4b07      	ldr	r3, [pc, #28]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005752:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575a:	4904      	ldr	r1, [pc, #16]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005762:	e009      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005764:	7cfb      	ldrb	r3, [r7, #19]
 8005766:	74bb      	strb	r3, [r7, #18]
 8005768:	e006      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800576a:	bf00      	nop
 800576c:	40021000 	.word	0x40021000
 8005770:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	7cfb      	ldrb	r3, [r7, #19]
 8005776:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005778:	7c7b      	ldrb	r3, [r7, #17]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d105      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800577e:	4b8a      	ldr	r3, [pc, #552]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005782:	4a89      	ldr	r2, [pc, #548]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005788:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005796:	4b84      	ldr	r3, [pc, #528]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	f023 0203 	bic.w	r2, r3, #3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	4980      	ldr	r1, [pc, #512]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057b8:	4b7b      	ldr	r3, [pc, #492]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057be:	f023 020c 	bic.w	r2, r3, #12
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	4978      	ldr	r1, [pc, #480]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057da:	4b73      	ldr	r3, [pc, #460]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	496f      	ldr	r1, [pc, #444]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00a      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057fc:	4b6a      	ldr	r3, [pc, #424]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005802:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580a:	4967      	ldr	r1, [pc, #412]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800581e:	4b62      	ldr	r3, [pc, #392]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005824:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	495e      	ldr	r1, [pc, #376]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005840:	4b59      	ldr	r3, [pc, #356]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005846:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	4956      	ldr	r1, [pc, #344]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005862:	4b51      	ldr	r3, [pc, #324]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005870:	494d      	ldr	r1, [pc, #308]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d028      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005884:	4b48      	ldr	r3, [pc, #288]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	4945      	ldr	r1, [pc, #276]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058a2:	d106      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a4:	4b40      	ldr	r3, [pc, #256]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	4a3f      	ldr	r2, [pc, #252]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058ae:	60d3      	str	r3, [r2, #12]
 80058b0:	e011      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058ba:	d10c      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3304      	adds	r3, #4
 80058c0:	2101      	movs	r1, #1
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f882 	bl	80059cc <RCCEx_PLLSAI1_Config>
 80058c8:	4603      	mov	r3, r0
 80058ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058cc:	7cfb      	ldrb	r3, [r7, #19]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80058d2:	7cfb      	ldrb	r3, [r7, #19]
 80058d4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d028      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058e2:	4b31      	ldr	r3, [pc, #196]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f0:	492d      	ldr	r1, [pc, #180]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005900:	d106      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005902:	4b29      	ldr	r3, [pc, #164]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	4a28      	ldr	r2, [pc, #160]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800590c:	60d3      	str	r3, [r2, #12]
 800590e:	e011      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005918:	d10c      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3304      	adds	r3, #4
 800591e:	2101      	movs	r1, #1
 8005920:	4618      	mov	r0, r3
 8005922:	f000 f853 	bl	80059cc <RCCEx_PLLSAI1_Config>
 8005926:	4603      	mov	r3, r0
 8005928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800592a:	7cfb      	ldrb	r3, [r7, #19]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005930:	7cfb      	ldrb	r3, [r7, #19]
 8005932:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01c      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005940:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800594e:	4916      	ldr	r1, [pc, #88]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800595e:	d10c      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	3304      	adds	r3, #4
 8005964:	2102      	movs	r1, #2
 8005966:	4618      	mov	r0, r3
 8005968:	f000 f830 	bl	80059cc <RCCEx_PLLSAI1_Config>
 800596c:	4603      	mov	r3, r0
 800596e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005970:	7cfb      	ldrb	r3, [r7, #19]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005976:	7cfb      	ldrb	r3, [r7, #19]
 8005978:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005986:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005994:	4904      	ldr	r1, [pc, #16]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800599c:	7cbb      	ldrb	r3, [r7, #18]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40021000 	.word	0x40021000

080059ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80059b0:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a04      	ldr	r2, [pc, #16]	; (80059c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059b6:	f043 0304 	orr.w	r3, r3, #4
 80059ba:	6013      	str	r3, [r2, #0]
}
 80059bc:	bf00      	nop
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40021000 	.word	0x40021000

080059cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059da:	4b74      	ldr	r3, [pc, #464]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d018      	beq.n	8005a18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059e6:	4b71      	ldr	r3, [pc, #452]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f003 0203 	and.w	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d10d      	bne.n	8005a12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
       ||
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80059fe:	4b6b      	ldr	r3, [pc, #428]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	091b      	lsrs	r3, r3, #4
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
       ||
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d047      	beq.n	8005aa2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	73fb      	strb	r3, [r7, #15]
 8005a16:	e044      	b.n	8005aa2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d018      	beq.n	8005a52 <RCCEx_PLLSAI1_Config+0x86>
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d825      	bhi.n	8005a70 <RCCEx_PLLSAI1_Config+0xa4>
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d002      	beq.n	8005a2e <RCCEx_PLLSAI1_Config+0x62>
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d009      	beq.n	8005a40 <RCCEx_PLLSAI1_Config+0x74>
 8005a2c:	e020      	b.n	8005a70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a2e:	4b5f      	ldr	r3, [pc, #380]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d11d      	bne.n	8005a76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a3e:	e01a      	b.n	8005a76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a40:	4b5a      	ldr	r3, [pc, #360]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d116      	bne.n	8005a7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a50:	e013      	b.n	8005a7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a52:	4b56      	ldr	r3, [pc, #344]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10f      	bne.n	8005a7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a5e:	4b53      	ldr	r3, [pc, #332]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d109      	bne.n	8005a7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a6e:	e006      	b.n	8005a7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]
      break;
 8005a74:	e004      	b.n	8005a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a76:	bf00      	nop
 8005a78:	e002      	b.n	8005a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a7a:	bf00      	nop
 8005a7c:	e000      	b.n	8005a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10d      	bne.n	8005aa2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a86:	4b49      	ldr	r3, [pc, #292]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6819      	ldr	r1, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	4943      	ldr	r1, [pc, #268]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d17c      	bne.n	8005ba2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005aa8:	4b40      	ldr	r3, [pc, #256]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a3f      	ldr	r2, [pc, #252]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab4:	f7fc fd8e 	bl	80025d4 <HAL_GetTick>
 8005ab8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005aba:	e009      	b.n	8005ad0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005abc:	f7fc fd8a 	bl	80025d4 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d902      	bls.n	8005ad0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	73fb      	strb	r3, [r7, #15]
        break;
 8005ace:	e005      	b.n	8005adc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ad0:	4b36      	ldr	r3, [pc, #216]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1ef      	bne.n	8005abc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d15f      	bne.n	8005ba2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d110      	bne.n	8005b0a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ae8:	4b30      	ldr	r3, [pc, #192]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005af0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6892      	ldr	r2, [r2, #8]
 8005af8:	0211      	lsls	r1, r2, #8
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	68d2      	ldr	r2, [r2, #12]
 8005afe:	06d2      	lsls	r2, r2, #27
 8005b00:	430a      	orrs	r2, r1
 8005b02:	492a      	ldr	r1, [pc, #168]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	610b      	str	r3, [r1, #16]
 8005b08:	e027      	b.n	8005b5a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d112      	bne.n	8005b36 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b10:	4b26      	ldr	r3, [pc, #152]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005b18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6892      	ldr	r2, [r2, #8]
 8005b20:	0211      	lsls	r1, r2, #8
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6912      	ldr	r2, [r2, #16]
 8005b26:	0852      	lsrs	r2, r2, #1
 8005b28:	3a01      	subs	r2, #1
 8005b2a:	0552      	lsls	r2, r2, #21
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	491f      	ldr	r1, [pc, #124]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	610b      	str	r3, [r1, #16]
 8005b34:	e011      	b.n	8005b5a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b36:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6892      	ldr	r2, [r2, #8]
 8005b46:	0211      	lsls	r1, r2, #8
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6952      	ldr	r2, [r2, #20]
 8005b4c:	0852      	lsrs	r2, r2, #1
 8005b4e:	3a01      	subs	r2, #1
 8005b50:	0652      	lsls	r2, r2, #25
 8005b52:	430a      	orrs	r2, r1
 8005b54:	4915      	ldr	r1, [pc, #84]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b5a:	4b14      	ldr	r3, [pc, #80]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a13      	ldr	r2, [pc, #76]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b66:	f7fc fd35 	bl	80025d4 <HAL_GetTick>
 8005b6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b6c:	e009      	b.n	8005b82 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b6e:	f7fc fd31 	bl	80025d4 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d902      	bls.n	8005b82 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	73fb      	strb	r3, [r7, #15]
          break;
 8005b80:	e005      	b.n	8005b8e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b82:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0ef      	beq.n	8005b6e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	4903      	ldr	r1, [pc, #12]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000

08005bb0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e03c      	b.n	8005c3c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fc fb7c 	bl	80022d4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0201 	bic.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fa97 	bl	8006128 <USART_SetConfig>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e01b      	b.n	8005c3c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c12:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c22:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fba5 	bl	8006384 <USART_CheckIdleState>
 8005c3a:	4603      	mov	r3, r0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08a      	sub	sp, #40	; 0x28
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	4613      	mov	r3, r2
 8005c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	f040 809a 	bne.w	8005d96 <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_USART_Transmit+0x2a>
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e092      	b.n	8005d98 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_USART_Transmit+0x3c>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e08b      	b.n	8005d98 <HAL_USART_Transmit+0x154>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2212      	movs	r2, #18
 8005c92:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c96:	f7fc fc9d 	bl	80025d4 <HAL_GetTick>
 8005c9a:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	88fa      	ldrh	r2, [r7, #6]
 8005ca0:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb0:	d108      	bne.n	8005cc4 <HAL_USART_Transmit+0x80>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	e003      	b.n	8005ccc <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8005ccc:	e02b      	b.n	8005d26 <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2180      	movs	r1, #128	; 0x80
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f9ef 	bl	80060bc <USART_WaitOnFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e057      	b.n	8005d98 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10b      	bne.n	8005d06 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	881a      	ldrh	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cfa:	b292      	uxth	r2, r2
 8005cfc:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	3302      	adds	r3, #2
 8005d02:	61bb      	str	r3, [r7, #24]
 8005d04:	e008      	b.n	8005d18 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	781a      	ldrb	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	b292      	uxth	r2, r2
 8005d10:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	3301      	adds	r3, #1
 8005d16:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1ce      	bne.n	8005cce <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2200      	movs	r2, #0
 8005d38:	2140      	movs	r1, #64	; 0x40
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f9be 	bl	80060bc <USART_WaitOnFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e026      	b.n	8005d98 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2240      	movs	r2, #64	; 0x40
 8005d50:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2208      	movs	r2, #8
 8005d58:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	8b1b      	ldrh	r3, [r3, #24]
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0208 	orr.w	r2, r2, #8
 8005d6a:	b292      	uxth	r2, r2
 8005d6c:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	8b1b      	ldrh	r3, [r3, #24]
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0210 	orr.w	r2, r2, #16
 8005d7e:	b292      	uxth	r2, r2
 8005d80:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e000      	b.n	8005d98 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005d96:	2302      	movs	r3, #2
  }
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	617b      	str	r3, [r7, #20]
  /* If no error occurs */
#if defined(USART_CR2_SLVEN)
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
                                      USART_ISR_UDR));
#else
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
#endif /* USART_CR2_SLVEN */
  if (errorflags == 0U)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d113      	bne.n	8005df8 <HAL_USART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00e      	beq.n	8005df8 <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d009      	beq.n	8005df8 <HAL_USART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (husart->RxISR != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 810d 	beq.w	8006008 <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	4798      	blx	r3
      }
      return;
 8005df6:	e107      	b.n	8006008 <HAL_USART_IRQHandler+0x268>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
#else
  if ((errorflags != 0U)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 80e3 	beq.w	8005fc6 <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 80d8 	beq.w	8005fc6 <HAL_USART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00e      	beq.n	8005e3e <HAL_USART_IRQHandler+0x9e>
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e36:	f043 0201 	orr.w	r2, r3, #1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00e      	beq.n	8005e66 <HAL_USART_IRQHandler+0xc6>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d009      	beq.n	8005e66 <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2202      	movs	r2, #2
 8005e58:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5e:	f043 0204 	orr.w	r2, r3, #4
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00e      	beq.n	8005e8e <HAL_USART_IRQHandler+0xee>
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d009      	beq.n	8005e8e <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2204      	movs	r2, #4
 8005e80:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e86:	f043 0202 	orr.w	r2, r3, #2
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	64da      	str	r2, [r3, #76]	; 0x4c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d013      	beq.n	8005ec0 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d009      	beq.n	8005ec0 <HAL_USART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2208      	movs	r2, #8
 8005eb2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb8:	f043 0208 	orr.w	r2, r3, #8
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00f      	beq.n	8005eea <HAL_USART_IRQHandler+0x14a>
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005edc:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
#endif /* USART_CR2_SLVEN */

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 808c 	beq.w	800600c <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00c      	beq.n	8005f18 <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <HAL_USART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (husart->RxISR != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2c:	2b40      	cmp	r3, #64	; 0x40
 8005f2e:	d002      	beq.n	8005f36 <HAL_USART_IRQHandler+0x196>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d03e      	beq.n	8005fb4 <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f88e 	bl	8006058 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	d130      	bne.n	8005fac <HAL_USART_IRQHandler+0x20c>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f58:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d008      	beq.n	8005f74 <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	2200      	movs	r2, #0
 8005f68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fd fce3 	bl	800393a <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d013      	beq.n	8005fa4 <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f80:	4a25      	ldr	r2, [pc, #148]	; (8006018 <HAL_USART_IRQHandler+0x278>)
 8005f82:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fd fcd6 	bl	800393a <HAL_DMA_Abort_IT>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d016      	beq.n	8005fc2 <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005fa2:	e00e      	b.n	8005fc2 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f84d 	bl	8006044 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005faa:	e00a      	b.n	8005fc2 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f849 	bl	8006044 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005fb2:	e006      	b.n	8005fc2 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f845 	bl	8006044 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    return;
 8005fc0:	e024      	b.n	800600c <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005fc2:	bf00      	nop
    return;
 8005fc4:	e022      	b.n	800600c <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00d      	beq.n	8005fec <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d008      	beq.n	8005fec <HAL_USART_IRQHandler+0x24c>
#endif /* USART_CR1_FIFOEN */
  {
    if (husart->TxISR != NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d016      	beq.n	8006010 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	4798      	blx	r3
    }
    return;
 8005fea:	e011      	b.n	8006010 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00d      	beq.n	8006012 <HAL_USART_IRQHandler+0x272>
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fa02 	bl	800640a <USART_EndTransmit_IT>
    return;
 8006006:	e004      	b.n	8006012 <HAL_USART_IRQHandler+0x272>
      return;
 8006008:	bf00      	nop
 800600a:	e002      	b.n	8006012 <HAL_USART_IRQHandler+0x272>
    return;
 800600c:	bf00      	nop
 800600e:	e000      	b.n	8006012 <HAL_USART_IRQHandler+0x272>
    return;
 8006010:	bf00      	nop
    HAL_USARTEx_RxFifoFullCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006012:	3720      	adds	r7, #32
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	08006095 	.word	0x08006095

0800601c <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800606e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff ffc8 	bl	8006044 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80060b4:	bf00      	nop
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	603b      	str	r3, [r7, #0]
 80060c8:	4613      	mov	r3, r2
 80060ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80060cc:	e018      	b.n	8006100 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d014      	beq.n	8006100 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d6:	f7fc fa7d 	bl	80025d4 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d302      	bcc.n	80060ec <USART_WaitOnFlagUntilTimeout+0x30>
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e00f      	b.n	8006120 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69da      	ldr	r2, [r3, #28]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	4013      	ands	r3, r2
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	429a      	cmp	r2, r3
 800610e:	bf0c      	ite	eq
 8006110:	2301      	moveq	r3, #1
 8006112:	2300      	movne	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	461a      	mov	r2, r3
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	429a      	cmp	r2, r3
 800611c:	d0d7      	beq.n	80060ce <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8006134:	2300      	movs	r3, #0
 8006136:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	431a      	orrs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800614c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	4b87      	ldr	r3, [pc, #540]	; (8006374 <USART_SetConfig+0x24c>)
 8006156:	4013      	ands	r3, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	6979      	ldr	r1, [r7, #20]
 800615e:	430b      	orrs	r3, r1
 8006160:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8006162:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006166:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	4313      	orrs	r3, r2
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	430a      	orrs	r2, r1
 800619e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a74      	ldr	r2, [pc, #464]	; (8006378 <USART_SetConfig+0x250>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d121      	bne.n	80061ee <USART_SetConfig+0xc6>
 80061aa:	4b74      	ldr	r3, [pc, #464]	; (800637c <USART_SetConfig+0x254>)
 80061ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d817      	bhi.n	80061e8 <USART_SetConfig+0xc0>
 80061b8:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <USART_SetConfig+0x98>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061d1 	.word	0x080061d1
 80061c4:	080061dd 	.word	0x080061dd
 80061c8:	080061d7 	.word	0x080061d7
 80061cc:	080061e3 	.word	0x080061e3
 80061d0:	2301      	movs	r3, #1
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e045      	b.n	8006262 <USART_SetConfig+0x13a>
 80061d6:	2302      	movs	r3, #2
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e042      	b.n	8006262 <USART_SetConfig+0x13a>
 80061dc:	2304      	movs	r3, #4
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e03f      	b.n	8006262 <USART_SetConfig+0x13a>
 80061e2:	2308      	movs	r3, #8
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e03c      	b.n	8006262 <USART_SetConfig+0x13a>
 80061e8:	2310      	movs	r3, #16
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e039      	b.n	8006262 <USART_SetConfig+0x13a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a63      	ldr	r2, [pc, #396]	; (8006380 <USART_SetConfig+0x258>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d132      	bne.n	800625e <USART_SetConfig+0x136>
 80061f8:	4b60      	ldr	r3, [pc, #384]	; (800637c <USART_SetConfig+0x254>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b0c      	cmp	r3, #12
 8006204:	d828      	bhi.n	8006258 <USART_SetConfig+0x130>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <USART_SetConfig+0xe4>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006241 	.word	0x08006241
 8006210:	08006259 	.word	0x08006259
 8006214:	08006259 	.word	0x08006259
 8006218:	08006259 	.word	0x08006259
 800621c:	0800624d 	.word	0x0800624d
 8006220:	08006259 	.word	0x08006259
 8006224:	08006259 	.word	0x08006259
 8006228:	08006259 	.word	0x08006259
 800622c:	08006247 	.word	0x08006247
 8006230:	08006259 	.word	0x08006259
 8006234:	08006259 	.word	0x08006259
 8006238:	08006259 	.word	0x08006259
 800623c:	08006253 	.word	0x08006253
 8006240:	2300      	movs	r3, #0
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e00d      	b.n	8006262 <USART_SetConfig+0x13a>
 8006246:	2302      	movs	r3, #2
 8006248:	77fb      	strb	r3, [r7, #31]
 800624a:	e00a      	b.n	8006262 <USART_SetConfig+0x13a>
 800624c:	2304      	movs	r3, #4
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e007      	b.n	8006262 <USART_SetConfig+0x13a>
 8006252:	2308      	movs	r3, #8
 8006254:	77fb      	strb	r3, [r7, #31]
 8006256:	e004      	b.n	8006262 <USART_SetConfig+0x13a>
 8006258:	2310      	movs	r3, #16
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	e001      	b.n	8006262 <USART_SetConfig+0x13a>
 800625e:	2310      	movs	r3, #16
 8006260:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8006262:	7ffb      	ldrb	r3, [r7, #31]
 8006264:	2b08      	cmp	r3, #8
 8006266:	d85a      	bhi.n	800631e <USART_SetConfig+0x1f6>
 8006268:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <USART_SetConfig+0x148>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	08006295 	.word	0x08006295
 8006274:	080062b3 	.word	0x080062b3
 8006278:	080062d1 	.word	0x080062d1
 800627c:	0800631f 	.word	0x0800631f
 8006280:	080062eb 	.word	0x080062eb
 8006284:	0800631f 	.word	0x0800631f
 8006288:	0800631f 	.word	0x0800631f
 800628c:	0800631f 	.word	0x0800631f
 8006290:	08006309 	.word	0x08006309
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8006294:	f7ff f908 	bl	80054a8 <HAL_RCC_GetPCLK1Freq>
 8006298:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	005a      	lsls	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	085b      	lsrs	r3, r3, #1
 80062a4:	441a      	add	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80062b0:	e038      	b.n	8006324 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80062b2:	f7ff f90f 	bl	80054d4 <HAL_RCC_GetPCLK2Freq>
 80062b6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	005a      	lsls	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	085b      	lsrs	r3, r3, #1
 80062c2:	441a      	add	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80062ce:	e029      	b.n	8006324 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	085b      	lsrs	r3, r3, #1
 80062d6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80062da:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6852      	ldr	r2, [r2, #4]
 80062e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80062e8:	e01c      	b.n	8006324 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80062ea:	f7ff f845 	bl	8005378 <HAL_RCC_GetSysClockFreq>
 80062ee:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	005a      	lsls	r2, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	085b      	lsrs	r3, r3, #1
 80062fa:	441a      	add	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	fbb2 f3f3 	udiv	r3, r2, r3
 8006304:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8006306:	e00d      	b.n	8006324 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	fbb2 f3f3 	udiv	r3, r2, r3
 800631a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800631c:	e002      	b.n	8006324 <USART_SetConfig+0x1fc>
    default:
      ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	77bb      	strb	r3, [r7, #30]
      break;
 8006322:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	2b0f      	cmp	r3, #15
 8006328:	d916      	bls.n	8006358 <USART_SetConfig+0x230>
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006330:	d212      	bcs.n	8006358 <USART_SetConfig+0x230>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	b29b      	uxth	r3, r3
 8006336:	f023 030f 	bic.w	r3, r3, #15
 800633a:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	085b      	lsrs	r3, r3, #1
 8006340:	b29b      	uxth	r3, r3
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	b29a      	uxth	r2, r3
 8006348:	89fb      	ldrh	r3, [r7, #14]
 800634a:	4313      	orrs	r3, r2
 800634c:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	89fa      	ldrh	r2, [r7, #14]
 8006354:	60da      	str	r2, [r3, #12]
 8006356:	e001      	b.n	800635c <USART_SetConfig+0x234>
  }
  else
  {
    ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8006368:	7fbb      	ldrb	r3, [r7, #30]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3720      	adds	r7, #32
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	efff69f3 	.word	0xefff69f3
 8006378:	40013800 	.word	0x40013800
 800637c:	40021000 	.word	0x40021000
 8006380:	40004400 	.word	0x40004400

08006384 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af02      	add	r7, sp, #8
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006392:	f7fc f91f 	bl	80025d4 <HAL_GetTick>
 8006396:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b08      	cmp	r3, #8
 80063a4:	d10e      	bne.n	80063c4 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80063a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff fe81 	bl	80060bc <USART_WaitOnFlagUntilTimeout>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e01e      	b.n	8006402 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d10e      	bne.n	80063f0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80063d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff fe6b 	bl	80060bc <USART_WaitOnFlagUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e008      	b.n	8006402 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b082      	sub	sp, #8
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006420:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0201 	bic.w	r2, r2, #1
 8006430:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	63da      	str	r2, [r3, #60]	; 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b12      	cmp	r3, #18
 8006442:	d115      	bne.n	8006470 <USART_EndTransmit_IT+0x66>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2208      	movs	r2, #8
 800644a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	8b1b      	ldrh	r3, [r3, #24]
 8006452:	b29a      	uxth	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0208 	orr.w	r2, r2, #8
 800645c:	b292      	uxth	r2, r2
 800645e:	831a      	strh	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff fdd7 	bl	800601c <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800646e:	e00b      	b.n	8006488 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    HAL_USART_TxRxCpltCallback(husart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff fdd4 	bl	8006030 <HAL_USART_TxRxCpltCallback>
}
 8006488:	bf00      	nop
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <malloc>:
 8006490:	4b02      	ldr	r3, [pc, #8]	; (800649c <malloc+0xc>)
 8006492:	4601      	mov	r1, r0
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	f000 b82b 	b.w	80064f0 <_malloc_r>
 800649a:	bf00      	nop
 800649c:	20000058 	.word	0x20000058

080064a0 <free>:
 80064a0:	4b02      	ldr	r3, [pc, #8]	; (80064ac <free+0xc>)
 80064a2:	4601      	mov	r1, r0
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	f000 b921 	b.w	80066ec <_free_r>
 80064aa:	bf00      	nop
 80064ac:	20000058 	.word	0x20000058

080064b0 <sbrk_aligned>:
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	4e0e      	ldr	r6, [pc, #56]	; (80064ec <sbrk_aligned+0x3c>)
 80064b4:	460c      	mov	r4, r1
 80064b6:	6831      	ldr	r1, [r6, #0]
 80064b8:	4605      	mov	r5, r0
 80064ba:	b911      	cbnz	r1, 80064c2 <sbrk_aligned+0x12>
 80064bc:	f000 f8cc 	bl	8006658 <_sbrk_r>
 80064c0:	6030      	str	r0, [r6, #0]
 80064c2:	4621      	mov	r1, r4
 80064c4:	4628      	mov	r0, r5
 80064c6:	f000 f8c7 	bl	8006658 <_sbrk_r>
 80064ca:	1c43      	adds	r3, r0, #1
 80064cc:	d00a      	beq.n	80064e4 <sbrk_aligned+0x34>
 80064ce:	1cc4      	adds	r4, r0, #3
 80064d0:	f024 0403 	bic.w	r4, r4, #3
 80064d4:	42a0      	cmp	r0, r4
 80064d6:	d007      	beq.n	80064e8 <sbrk_aligned+0x38>
 80064d8:	1a21      	subs	r1, r4, r0
 80064da:	4628      	mov	r0, r5
 80064dc:	f000 f8bc 	bl	8006658 <_sbrk_r>
 80064e0:	3001      	adds	r0, #1
 80064e2:	d101      	bne.n	80064e8 <sbrk_aligned+0x38>
 80064e4:	f04f 34ff 	mov.w	r4, #4294967295
 80064e8:	4620      	mov	r0, r4
 80064ea:	bd70      	pop	{r4, r5, r6, pc}
 80064ec:	20000260 	.word	0x20000260

080064f0 <_malloc_r>:
 80064f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064f4:	1ccd      	adds	r5, r1, #3
 80064f6:	f025 0503 	bic.w	r5, r5, #3
 80064fa:	3508      	adds	r5, #8
 80064fc:	2d0c      	cmp	r5, #12
 80064fe:	bf38      	it	cc
 8006500:	250c      	movcc	r5, #12
 8006502:	2d00      	cmp	r5, #0
 8006504:	4607      	mov	r7, r0
 8006506:	db01      	blt.n	800650c <_malloc_r+0x1c>
 8006508:	42a9      	cmp	r1, r5
 800650a:	d905      	bls.n	8006518 <_malloc_r+0x28>
 800650c:	230c      	movs	r3, #12
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	2600      	movs	r6, #0
 8006512:	4630      	mov	r0, r6
 8006514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006518:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065ec <_malloc_r+0xfc>
 800651c:	f000 f868 	bl	80065f0 <__malloc_lock>
 8006520:	f8d8 3000 	ldr.w	r3, [r8]
 8006524:	461c      	mov	r4, r3
 8006526:	bb5c      	cbnz	r4, 8006580 <_malloc_r+0x90>
 8006528:	4629      	mov	r1, r5
 800652a:	4638      	mov	r0, r7
 800652c:	f7ff ffc0 	bl	80064b0 <sbrk_aligned>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	4604      	mov	r4, r0
 8006534:	d155      	bne.n	80065e2 <_malloc_r+0xf2>
 8006536:	f8d8 4000 	ldr.w	r4, [r8]
 800653a:	4626      	mov	r6, r4
 800653c:	2e00      	cmp	r6, #0
 800653e:	d145      	bne.n	80065cc <_malloc_r+0xdc>
 8006540:	2c00      	cmp	r4, #0
 8006542:	d048      	beq.n	80065d6 <_malloc_r+0xe6>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	4631      	mov	r1, r6
 8006548:	4638      	mov	r0, r7
 800654a:	eb04 0903 	add.w	r9, r4, r3
 800654e:	f000 f883 	bl	8006658 <_sbrk_r>
 8006552:	4581      	cmp	r9, r0
 8006554:	d13f      	bne.n	80065d6 <_malloc_r+0xe6>
 8006556:	6821      	ldr	r1, [r4, #0]
 8006558:	1a6d      	subs	r5, r5, r1
 800655a:	4629      	mov	r1, r5
 800655c:	4638      	mov	r0, r7
 800655e:	f7ff ffa7 	bl	80064b0 <sbrk_aligned>
 8006562:	3001      	adds	r0, #1
 8006564:	d037      	beq.n	80065d6 <_malloc_r+0xe6>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	442b      	add	r3, r5
 800656a:	6023      	str	r3, [r4, #0]
 800656c:	f8d8 3000 	ldr.w	r3, [r8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d038      	beq.n	80065e6 <_malloc_r+0xf6>
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	42a2      	cmp	r2, r4
 8006578:	d12b      	bne.n	80065d2 <_malloc_r+0xe2>
 800657a:	2200      	movs	r2, #0
 800657c:	605a      	str	r2, [r3, #4]
 800657e:	e00f      	b.n	80065a0 <_malloc_r+0xb0>
 8006580:	6822      	ldr	r2, [r4, #0]
 8006582:	1b52      	subs	r2, r2, r5
 8006584:	d41f      	bmi.n	80065c6 <_malloc_r+0xd6>
 8006586:	2a0b      	cmp	r2, #11
 8006588:	d917      	bls.n	80065ba <_malloc_r+0xca>
 800658a:	1961      	adds	r1, r4, r5
 800658c:	42a3      	cmp	r3, r4
 800658e:	6025      	str	r5, [r4, #0]
 8006590:	bf18      	it	ne
 8006592:	6059      	strne	r1, [r3, #4]
 8006594:	6863      	ldr	r3, [r4, #4]
 8006596:	bf08      	it	eq
 8006598:	f8c8 1000 	streq.w	r1, [r8]
 800659c:	5162      	str	r2, [r4, r5]
 800659e:	604b      	str	r3, [r1, #4]
 80065a0:	4638      	mov	r0, r7
 80065a2:	f104 060b 	add.w	r6, r4, #11
 80065a6:	f000 f829 	bl	80065fc <__malloc_unlock>
 80065aa:	f026 0607 	bic.w	r6, r6, #7
 80065ae:	1d23      	adds	r3, r4, #4
 80065b0:	1af2      	subs	r2, r6, r3
 80065b2:	d0ae      	beq.n	8006512 <_malloc_r+0x22>
 80065b4:	1b9b      	subs	r3, r3, r6
 80065b6:	50a3      	str	r3, [r4, r2]
 80065b8:	e7ab      	b.n	8006512 <_malloc_r+0x22>
 80065ba:	42a3      	cmp	r3, r4
 80065bc:	6862      	ldr	r2, [r4, #4]
 80065be:	d1dd      	bne.n	800657c <_malloc_r+0x8c>
 80065c0:	f8c8 2000 	str.w	r2, [r8]
 80065c4:	e7ec      	b.n	80065a0 <_malloc_r+0xb0>
 80065c6:	4623      	mov	r3, r4
 80065c8:	6864      	ldr	r4, [r4, #4]
 80065ca:	e7ac      	b.n	8006526 <_malloc_r+0x36>
 80065cc:	4634      	mov	r4, r6
 80065ce:	6876      	ldr	r6, [r6, #4]
 80065d0:	e7b4      	b.n	800653c <_malloc_r+0x4c>
 80065d2:	4613      	mov	r3, r2
 80065d4:	e7cc      	b.n	8006570 <_malloc_r+0x80>
 80065d6:	230c      	movs	r3, #12
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	4638      	mov	r0, r7
 80065dc:	f000 f80e 	bl	80065fc <__malloc_unlock>
 80065e0:	e797      	b.n	8006512 <_malloc_r+0x22>
 80065e2:	6025      	str	r5, [r4, #0]
 80065e4:	e7dc      	b.n	80065a0 <_malloc_r+0xb0>
 80065e6:	605b      	str	r3, [r3, #4]
 80065e8:	deff      	udf	#255	; 0xff
 80065ea:	bf00      	nop
 80065ec:	2000025c 	.word	0x2000025c

080065f0 <__malloc_lock>:
 80065f0:	4801      	ldr	r0, [pc, #4]	; (80065f8 <__malloc_lock+0x8>)
 80065f2:	f000 b86b 	b.w	80066cc <__retarget_lock_acquire_recursive>
 80065f6:	bf00      	nop
 80065f8:	200003a0 	.word	0x200003a0

080065fc <__malloc_unlock>:
 80065fc:	4801      	ldr	r0, [pc, #4]	; (8006604 <__malloc_unlock+0x8>)
 80065fe:	f000 b866 	b.w	80066ce <__retarget_lock_release_recursive>
 8006602:	bf00      	nop
 8006604:	200003a0 	.word	0x200003a0

08006608 <siprintf>:
 8006608:	b40e      	push	{r1, r2, r3}
 800660a:	b500      	push	{lr}
 800660c:	b09c      	sub	sp, #112	; 0x70
 800660e:	ab1d      	add	r3, sp, #116	; 0x74
 8006610:	9002      	str	r0, [sp, #8]
 8006612:	9006      	str	r0, [sp, #24]
 8006614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006618:	4809      	ldr	r0, [pc, #36]	; (8006640 <siprintf+0x38>)
 800661a:	9107      	str	r1, [sp, #28]
 800661c:	9104      	str	r1, [sp, #16]
 800661e:	4909      	ldr	r1, [pc, #36]	; (8006644 <siprintf+0x3c>)
 8006620:	f853 2b04 	ldr.w	r2, [r3], #4
 8006624:	9105      	str	r1, [sp, #20]
 8006626:	6800      	ldr	r0, [r0, #0]
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	a902      	add	r1, sp, #8
 800662c:	f000 f904 	bl	8006838 <_svfiprintf_r>
 8006630:	9b02      	ldr	r3, [sp, #8]
 8006632:	2200      	movs	r2, #0
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	b01c      	add	sp, #112	; 0x70
 8006638:	f85d eb04 	ldr.w	lr, [sp], #4
 800663c:	b003      	add	sp, #12
 800663e:	4770      	bx	lr
 8006640:	20000058 	.word	0x20000058
 8006644:	ffff0208 	.word	0xffff0208

08006648 <memset>:
 8006648:	4402      	add	r2, r0
 800664a:	4603      	mov	r3, r0
 800664c:	4293      	cmp	r3, r2
 800664e:	d100      	bne.n	8006652 <memset+0xa>
 8006650:	4770      	bx	lr
 8006652:	f803 1b01 	strb.w	r1, [r3], #1
 8006656:	e7f9      	b.n	800664c <memset+0x4>

08006658 <_sbrk_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	4d06      	ldr	r5, [pc, #24]	; (8006674 <_sbrk_r+0x1c>)
 800665c:	2300      	movs	r3, #0
 800665e:	4604      	mov	r4, r0
 8006660:	4608      	mov	r0, r1
 8006662:	602b      	str	r3, [r5, #0]
 8006664:	f7fb fedc 	bl	8002420 <_sbrk>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	d102      	bne.n	8006672 <_sbrk_r+0x1a>
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	b103      	cbz	r3, 8006672 <_sbrk_r+0x1a>
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	bd38      	pop	{r3, r4, r5, pc}
 8006674:	2000039c 	.word	0x2000039c

08006678 <__errno>:
 8006678:	4b01      	ldr	r3, [pc, #4]	; (8006680 <__errno+0x8>)
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	20000058 	.word	0x20000058

08006684 <__libc_init_array>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4d0d      	ldr	r5, [pc, #52]	; (80066bc <__libc_init_array+0x38>)
 8006688:	4c0d      	ldr	r4, [pc, #52]	; (80066c0 <__libc_init_array+0x3c>)
 800668a:	1b64      	subs	r4, r4, r5
 800668c:	10a4      	asrs	r4, r4, #2
 800668e:	2600      	movs	r6, #0
 8006690:	42a6      	cmp	r6, r4
 8006692:	d109      	bne.n	80066a8 <__libc_init_array+0x24>
 8006694:	4d0b      	ldr	r5, [pc, #44]	; (80066c4 <__libc_init_array+0x40>)
 8006696:	4c0c      	ldr	r4, [pc, #48]	; (80066c8 <__libc_init_array+0x44>)
 8006698:	f000 fbae 	bl	8006df8 <_init>
 800669c:	1b64      	subs	r4, r4, r5
 800669e:	10a4      	asrs	r4, r4, #2
 80066a0:	2600      	movs	r6, #0
 80066a2:	42a6      	cmp	r6, r4
 80066a4:	d105      	bne.n	80066b2 <__libc_init_array+0x2e>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ac:	4798      	blx	r3
 80066ae:	3601      	adds	r6, #1
 80066b0:	e7ee      	b.n	8006690 <__libc_init_array+0xc>
 80066b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b6:	4798      	blx	r3
 80066b8:	3601      	adds	r6, #1
 80066ba:	e7f2      	b.n	80066a2 <__libc_init_array+0x1e>
 80066bc:	08006f9c 	.word	0x08006f9c
 80066c0:	08006f9c 	.word	0x08006f9c
 80066c4:	08006f9c 	.word	0x08006f9c
 80066c8:	08006fa0 	.word	0x08006fa0

080066cc <__retarget_lock_acquire_recursive>:
 80066cc:	4770      	bx	lr

080066ce <__retarget_lock_release_recursive>:
 80066ce:	4770      	bx	lr

080066d0 <memcpy>:
 80066d0:	440a      	add	r2, r1
 80066d2:	4291      	cmp	r1, r2
 80066d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066d8:	d100      	bne.n	80066dc <memcpy+0xc>
 80066da:	4770      	bx	lr
 80066dc:	b510      	push	{r4, lr}
 80066de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066e6:	4291      	cmp	r1, r2
 80066e8:	d1f9      	bne.n	80066de <memcpy+0xe>
 80066ea:	bd10      	pop	{r4, pc}

080066ec <_free_r>:
 80066ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066ee:	2900      	cmp	r1, #0
 80066f0:	d044      	beq.n	800677c <_free_r+0x90>
 80066f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f6:	9001      	str	r0, [sp, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f1a1 0404 	sub.w	r4, r1, #4
 80066fe:	bfb8      	it	lt
 8006700:	18e4      	addlt	r4, r4, r3
 8006702:	f7ff ff75 	bl	80065f0 <__malloc_lock>
 8006706:	4a1e      	ldr	r2, [pc, #120]	; (8006780 <_free_r+0x94>)
 8006708:	9801      	ldr	r0, [sp, #4]
 800670a:	6813      	ldr	r3, [r2, #0]
 800670c:	b933      	cbnz	r3, 800671c <_free_r+0x30>
 800670e:	6063      	str	r3, [r4, #4]
 8006710:	6014      	str	r4, [r2, #0]
 8006712:	b003      	add	sp, #12
 8006714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006718:	f7ff bf70 	b.w	80065fc <__malloc_unlock>
 800671c:	42a3      	cmp	r3, r4
 800671e:	d908      	bls.n	8006732 <_free_r+0x46>
 8006720:	6825      	ldr	r5, [r4, #0]
 8006722:	1961      	adds	r1, r4, r5
 8006724:	428b      	cmp	r3, r1
 8006726:	bf01      	itttt	eq
 8006728:	6819      	ldreq	r1, [r3, #0]
 800672a:	685b      	ldreq	r3, [r3, #4]
 800672c:	1949      	addeq	r1, r1, r5
 800672e:	6021      	streq	r1, [r4, #0]
 8006730:	e7ed      	b.n	800670e <_free_r+0x22>
 8006732:	461a      	mov	r2, r3
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	b10b      	cbz	r3, 800673c <_free_r+0x50>
 8006738:	42a3      	cmp	r3, r4
 800673a:	d9fa      	bls.n	8006732 <_free_r+0x46>
 800673c:	6811      	ldr	r1, [r2, #0]
 800673e:	1855      	adds	r5, r2, r1
 8006740:	42a5      	cmp	r5, r4
 8006742:	d10b      	bne.n	800675c <_free_r+0x70>
 8006744:	6824      	ldr	r4, [r4, #0]
 8006746:	4421      	add	r1, r4
 8006748:	1854      	adds	r4, r2, r1
 800674a:	42a3      	cmp	r3, r4
 800674c:	6011      	str	r1, [r2, #0]
 800674e:	d1e0      	bne.n	8006712 <_free_r+0x26>
 8006750:	681c      	ldr	r4, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	6053      	str	r3, [r2, #4]
 8006756:	440c      	add	r4, r1
 8006758:	6014      	str	r4, [r2, #0]
 800675a:	e7da      	b.n	8006712 <_free_r+0x26>
 800675c:	d902      	bls.n	8006764 <_free_r+0x78>
 800675e:	230c      	movs	r3, #12
 8006760:	6003      	str	r3, [r0, #0]
 8006762:	e7d6      	b.n	8006712 <_free_r+0x26>
 8006764:	6825      	ldr	r5, [r4, #0]
 8006766:	1961      	adds	r1, r4, r5
 8006768:	428b      	cmp	r3, r1
 800676a:	bf04      	itt	eq
 800676c:	6819      	ldreq	r1, [r3, #0]
 800676e:	685b      	ldreq	r3, [r3, #4]
 8006770:	6063      	str	r3, [r4, #4]
 8006772:	bf04      	itt	eq
 8006774:	1949      	addeq	r1, r1, r5
 8006776:	6021      	streq	r1, [r4, #0]
 8006778:	6054      	str	r4, [r2, #4]
 800677a:	e7ca      	b.n	8006712 <_free_r+0x26>
 800677c:	b003      	add	sp, #12
 800677e:	bd30      	pop	{r4, r5, pc}
 8006780:	2000025c 	.word	0x2000025c

08006784 <__ssputs_r>:
 8006784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006788:	688e      	ldr	r6, [r1, #8]
 800678a:	461f      	mov	r7, r3
 800678c:	42be      	cmp	r6, r7
 800678e:	680b      	ldr	r3, [r1, #0]
 8006790:	4682      	mov	sl, r0
 8006792:	460c      	mov	r4, r1
 8006794:	4690      	mov	r8, r2
 8006796:	d82c      	bhi.n	80067f2 <__ssputs_r+0x6e>
 8006798:	898a      	ldrh	r2, [r1, #12]
 800679a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800679e:	d026      	beq.n	80067ee <__ssputs_r+0x6a>
 80067a0:	6965      	ldr	r5, [r4, #20]
 80067a2:	6909      	ldr	r1, [r1, #16]
 80067a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067a8:	eba3 0901 	sub.w	r9, r3, r1
 80067ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067b0:	1c7b      	adds	r3, r7, #1
 80067b2:	444b      	add	r3, r9
 80067b4:	106d      	asrs	r5, r5, #1
 80067b6:	429d      	cmp	r5, r3
 80067b8:	bf38      	it	cc
 80067ba:	461d      	movcc	r5, r3
 80067bc:	0553      	lsls	r3, r2, #21
 80067be:	d527      	bpl.n	8006810 <__ssputs_r+0x8c>
 80067c0:	4629      	mov	r1, r5
 80067c2:	f7ff fe95 	bl	80064f0 <_malloc_r>
 80067c6:	4606      	mov	r6, r0
 80067c8:	b360      	cbz	r0, 8006824 <__ssputs_r+0xa0>
 80067ca:	6921      	ldr	r1, [r4, #16]
 80067cc:	464a      	mov	r2, r9
 80067ce:	f7ff ff7f 	bl	80066d0 <memcpy>
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067dc:	81a3      	strh	r3, [r4, #12]
 80067de:	6126      	str	r6, [r4, #16]
 80067e0:	6165      	str	r5, [r4, #20]
 80067e2:	444e      	add	r6, r9
 80067e4:	eba5 0509 	sub.w	r5, r5, r9
 80067e8:	6026      	str	r6, [r4, #0]
 80067ea:	60a5      	str	r5, [r4, #8]
 80067ec:	463e      	mov	r6, r7
 80067ee:	42be      	cmp	r6, r7
 80067f0:	d900      	bls.n	80067f4 <__ssputs_r+0x70>
 80067f2:	463e      	mov	r6, r7
 80067f4:	6820      	ldr	r0, [r4, #0]
 80067f6:	4632      	mov	r2, r6
 80067f8:	4641      	mov	r1, r8
 80067fa:	f000 faab 	bl	8006d54 <memmove>
 80067fe:	68a3      	ldr	r3, [r4, #8]
 8006800:	1b9b      	subs	r3, r3, r6
 8006802:	60a3      	str	r3, [r4, #8]
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	4433      	add	r3, r6
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	2000      	movs	r0, #0
 800680c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006810:	462a      	mov	r2, r5
 8006812:	f000 fab9 	bl	8006d88 <_realloc_r>
 8006816:	4606      	mov	r6, r0
 8006818:	2800      	cmp	r0, #0
 800681a:	d1e0      	bne.n	80067de <__ssputs_r+0x5a>
 800681c:	6921      	ldr	r1, [r4, #16]
 800681e:	4650      	mov	r0, sl
 8006820:	f7ff ff64 	bl	80066ec <_free_r>
 8006824:	230c      	movs	r3, #12
 8006826:	f8ca 3000 	str.w	r3, [sl]
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006830:	81a3      	strh	r3, [r4, #12]
 8006832:	f04f 30ff 	mov.w	r0, #4294967295
 8006836:	e7e9      	b.n	800680c <__ssputs_r+0x88>

08006838 <_svfiprintf_r>:
 8006838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683c:	4698      	mov	r8, r3
 800683e:	898b      	ldrh	r3, [r1, #12]
 8006840:	061b      	lsls	r3, r3, #24
 8006842:	b09d      	sub	sp, #116	; 0x74
 8006844:	4607      	mov	r7, r0
 8006846:	460d      	mov	r5, r1
 8006848:	4614      	mov	r4, r2
 800684a:	d50e      	bpl.n	800686a <_svfiprintf_r+0x32>
 800684c:	690b      	ldr	r3, [r1, #16]
 800684e:	b963      	cbnz	r3, 800686a <_svfiprintf_r+0x32>
 8006850:	2140      	movs	r1, #64	; 0x40
 8006852:	f7ff fe4d 	bl	80064f0 <_malloc_r>
 8006856:	6028      	str	r0, [r5, #0]
 8006858:	6128      	str	r0, [r5, #16]
 800685a:	b920      	cbnz	r0, 8006866 <_svfiprintf_r+0x2e>
 800685c:	230c      	movs	r3, #12
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	f04f 30ff 	mov.w	r0, #4294967295
 8006864:	e0d0      	b.n	8006a08 <_svfiprintf_r+0x1d0>
 8006866:	2340      	movs	r3, #64	; 0x40
 8006868:	616b      	str	r3, [r5, #20]
 800686a:	2300      	movs	r3, #0
 800686c:	9309      	str	r3, [sp, #36]	; 0x24
 800686e:	2320      	movs	r3, #32
 8006870:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006874:	f8cd 800c 	str.w	r8, [sp, #12]
 8006878:	2330      	movs	r3, #48	; 0x30
 800687a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a20 <_svfiprintf_r+0x1e8>
 800687e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006882:	f04f 0901 	mov.w	r9, #1
 8006886:	4623      	mov	r3, r4
 8006888:	469a      	mov	sl, r3
 800688a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800688e:	b10a      	cbz	r2, 8006894 <_svfiprintf_r+0x5c>
 8006890:	2a25      	cmp	r2, #37	; 0x25
 8006892:	d1f9      	bne.n	8006888 <_svfiprintf_r+0x50>
 8006894:	ebba 0b04 	subs.w	fp, sl, r4
 8006898:	d00b      	beq.n	80068b2 <_svfiprintf_r+0x7a>
 800689a:	465b      	mov	r3, fp
 800689c:	4622      	mov	r2, r4
 800689e:	4629      	mov	r1, r5
 80068a0:	4638      	mov	r0, r7
 80068a2:	f7ff ff6f 	bl	8006784 <__ssputs_r>
 80068a6:	3001      	adds	r0, #1
 80068a8:	f000 80a9 	beq.w	80069fe <_svfiprintf_r+0x1c6>
 80068ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ae:	445a      	add	r2, fp
 80068b0:	9209      	str	r2, [sp, #36]	; 0x24
 80068b2:	f89a 3000 	ldrb.w	r3, [sl]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 80a1 	beq.w	80069fe <_svfiprintf_r+0x1c6>
 80068bc:	2300      	movs	r3, #0
 80068be:	f04f 32ff 	mov.w	r2, #4294967295
 80068c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068c6:	f10a 0a01 	add.w	sl, sl, #1
 80068ca:	9304      	str	r3, [sp, #16]
 80068cc:	9307      	str	r3, [sp, #28]
 80068ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068d2:	931a      	str	r3, [sp, #104]	; 0x68
 80068d4:	4654      	mov	r4, sl
 80068d6:	2205      	movs	r2, #5
 80068d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068dc:	4850      	ldr	r0, [pc, #320]	; (8006a20 <_svfiprintf_r+0x1e8>)
 80068de:	f7f9 fc7f 	bl	80001e0 <memchr>
 80068e2:	9a04      	ldr	r2, [sp, #16]
 80068e4:	b9d8      	cbnz	r0, 800691e <_svfiprintf_r+0xe6>
 80068e6:	06d0      	lsls	r0, r2, #27
 80068e8:	bf44      	itt	mi
 80068ea:	2320      	movmi	r3, #32
 80068ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068f0:	0711      	lsls	r1, r2, #28
 80068f2:	bf44      	itt	mi
 80068f4:	232b      	movmi	r3, #43	; 0x2b
 80068f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068fa:	f89a 3000 	ldrb.w	r3, [sl]
 80068fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006900:	d015      	beq.n	800692e <_svfiprintf_r+0xf6>
 8006902:	9a07      	ldr	r2, [sp, #28]
 8006904:	4654      	mov	r4, sl
 8006906:	2000      	movs	r0, #0
 8006908:	f04f 0c0a 	mov.w	ip, #10
 800690c:	4621      	mov	r1, r4
 800690e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006912:	3b30      	subs	r3, #48	; 0x30
 8006914:	2b09      	cmp	r3, #9
 8006916:	d94d      	bls.n	80069b4 <_svfiprintf_r+0x17c>
 8006918:	b1b0      	cbz	r0, 8006948 <_svfiprintf_r+0x110>
 800691a:	9207      	str	r2, [sp, #28]
 800691c:	e014      	b.n	8006948 <_svfiprintf_r+0x110>
 800691e:	eba0 0308 	sub.w	r3, r0, r8
 8006922:	fa09 f303 	lsl.w	r3, r9, r3
 8006926:	4313      	orrs	r3, r2
 8006928:	9304      	str	r3, [sp, #16]
 800692a:	46a2      	mov	sl, r4
 800692c:	e7d2      	b.n	80068d4 <_svfiprintf_r+0x9c>
 800692e:	9b03      	ldr	r3, [sp, #12]
 8006930:	1d19      	adds	r1, r3, #4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	9103      	str	r1, [sp, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	bfbb      	ittet	lt
 800693a:	425b      	neglt	r3, r3
 800693c:	f042 0202 	orrlt.w	r2, r2, #2
 8006940:	9307      	strge	r3, [sp, #28]
 8006942:	9307      	strlt	r3, [sp, #28]
 8006944:	bfb8      	it	lt
 8006946:	9204      	strlt	r2, [sp, #16]
 8006948:	7823      	ldrb	r3, [r4, #0]
 800694a:	2b2e      	cmp	r3, #46	; 0x2e
 800694c:	d10c      	bne.n	8006968 <_svfiprintf_r+0x130>
 800694e:	7863      	ldrb	r3, [r4, #1]
 8006950:	2b2a      	cmp	r3, #42	; 0x2a
 8006952:	d134      	bne.n	80069be <_svfiprintf_r+0x186>
 8006954:	9b03      	ldr	r3, [sp, #12]
 8006956:	1d1a      	adds	r2, r3, #4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	9203      	str	r2, [sp, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	bfb8      	it	lt
 8006960:	f04f 33ff 	movlt.w	r3, #4294967295
 8006964:	3402      	adds	r4, #2
 8006966:	9305      	str	r3, [sp, #20]
 8006968:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006a30 <_svfiprintf_r+0x1f8>
 800696c:	7821      	ldrb	r1, [r4, #0]
 800696e:	2203      	movs	r2, #3
 8006970:	4650      	mov	r0, sl
 8006972:	f7f9 fc35 	bl	80001e0 <memchr>
 8006976:	b138      	cbz	r0, 8006988 <_svfiprintf_r+0x150>
 8006978:	9b04      	ldr	r3, [sp, #16]
 800697a:	eba0 000a 	sub.w	r0, r0, sl
 800697e:	2240      	movs	r2, #64	; 0x40
 8006980:	4082      	lsls	r2, r0
 8006982:	4313      	orrs	r3, r2
 8006984:	3401      	adds	r4, #1
 8006986:	9304      	str	r3, [sp, #16]
 8006988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800698c:	4825      	ldr	r0, [pc, #148]	; (8006a24 <_svfiprintf_r+0x1ec>)
 800698e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006992:	2206      	movs	r2, #6
 8006994:	f7f9 fc24 	bl	80001e0 <memchr>
 8006998:	2800      	cmp	r0, #0
 800699a:	d038      	beq.n	8006a0e <_svfiprintf_r+0x1d6>
 800699c:	4b22      	ldr	r3, [pc, #136]	; (8006a28 <_svfiprintf_r+0x1f0>)
 800699e:	bb1b      	cbnz	r3, 80069e8 <_svfiprintf_r+0x1b0>
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	3307      	adds	r3, #7
 80069a4:	f023 0307 	bic.w	r3, r3, #7
 80069a8:	3308      	adds	r3, #8
 80069aa:	9303      	str	r3, [sp, #12]
 80069ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ae:	4433      	add	r3, r6
 80069b0:	9309      	str	r3, [sp, #36]	; 0x24
 80069b2:	e768      	b.n	8006886 <_svfiprintf_r+0x4e>
 80069b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80069b8:	460c      	mov	r4, r1
 80069ba:	2001      	movs	r0, #1
 80069bc:	e7a6      	b.n	800690c <_svfiprintf_r+0xd4>
 80069be:	2300      	movs	r3, #0
 80069c0:	3401      	adds	r4, #1
 80069c2:	9305      	str	r3, [sp, #20]
 80069c4:	4619      	mov	r1, r3
 80069c6:	f04f 0c0a 	mov.w	ip, #10
 80069ca:	4620      	mov	r0, r4
 80069cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069d0:	3a30      	subs	r2, #48	; 0x30
 80069d2:	2a09      	cmp	r2, #9
 80069d4:	d903      	bls.n	80069de <_svfiprintf_r+0x1a6>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0c6      	beq.n	8006968 <_svfiprintf_r+0x130>
 80069da:	9105      	str	r1, [sp, #20]
 80069dc:	e7c4      	b.n	8006968 <_svfiprintf_r+0x130>
 80069de:	fb0c 2101 	mla	r1, ip, r1, r2
 80069e2:	4604      	mov	r4, r0
 80069e4:	2301      	movs	r3, #1
 80069e6:	e7f0      	b.n	80069ca <_svfiprintf_r+0x192>
 80069e8:	ab03      	add	r3, sp, #12
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	462a      	mov	r2, r5
 80069ee:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <_svfiprintf_r+0x1f4>)
 80069f0:	a904      	add	r1, sp, #16
 80069f2:	4638      	mov	r0, r7
 80069f4:	f3af 8000 	nop.w
 80069f8:	1c42      	adds	r2, r0, #1
 80069fa:	4606      	mov	r6, r0
 80069fc:	d1d6      	bne.n	80069ac <_svfiprintf_r+0x174>
 80069fe:	89ab      	ldrh	r3, [r5, #12]
 8006a00:	065b      	lsls	r3, r3, #25
 8006a02:	f53f af2d 	bmi.w	8006860 <_svfiprintf_r+0x28>
 8006a06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a08:	b01d      	add	sp, #116	; 0x74
 8006a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0e:	ab03      	add	r3, sp, #12
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	462a      	mov	r2, r5
 8006a14:	4b05      	ldr	r3, [pc, #20]	; (8006a2c <_svfiprintf_r+0x1f4>)
 8006a16:	a904      	add	r1, sp, #16
 8006a18:	4638      	mov	r0, r7
 8006a1a:	f000 f879 	bl	8006b10 <_printf_i>
 8006a1e:	e7eb      	b.n	80069f8 <_svfiprintf_r+0x1c0>
 8006a20:	08006f60 	.word	0x08006f60
 8006a24:	08006f6a 	.word	0x08006f6a
 8006a28:	00000000 	.word	0x00000000
 8006a2c:	08006785 	.word	0x08006785
 8006a30:	08006f66 	.word	0x08006f66

08006a34 <_printf_common>:
 8006a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a38:	4616      	mov	r6, r2
 8006a3a:	4699      	mov	r9, r3
 8006a3c:	688a      	ldr	r2, [r1, #8]
 8006a3e:	690b      	ldr	r3, [r1, #16]
 8006a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	bfb8      	it	lt
 8006a48:	4613      	movlt	r3, r2
 8006a4a:	6033      	str	r3, [r6, #0]
 8006a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a50:	4607      	mov	r7, r0
 8006a52:	460c      	mov	r4, r1
 8006a54:	b10a      	cbz	r2, 8006a5a <_printf_common+0x26>
 8006a56:	3301      	adds	r3, #1
 8006a58:	6033      	str	r3, [r6, #0]
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	0699      	lsls	r1, r3, #26
 8006a5e:	bf42      	ittt	mi
 8006a60:	6833      	ldrmi	r3, [r6, #0]
 8006a62:	3302      	addmi	r3, #2
 8006a64:	6033      	strmi	r3, [r6, #0]
 8006a66:	6825      	ldr	r5, [r4, #0]
 8006a68:	f015 0506 	ands.w	r5, r5, #6
 8006a6c:	d106      	bne.n	8006a7c <_printf_common+0x48>
 8006a6e:	f104 0a19 	add.w	sl, r4, #25
 8006a72:	68e3      	ldr	r3, [r4, #12]
 8006a74:	6832      	ldr	r2, [r6, #0]
 8006a76:	1a9b      	subs	r3, r3, r2
 8006a78:	42ab      	cmp	r3, r5
 8006a7a:	dc26      	bgt.n	8006aca <_printf_common+0x96>
 8006a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a80:	1e13      	subs	r3, r2, #0
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	bf18      	it	ne
 8006a86:	2301      	movne	r3, #1
 8006a88:	0692      	lsls	r2, r2, #26
 8006a8a:	d42b      	bmi.n	8006ae4 <_printf_common+0xb0>
 8006a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a90:	4649      	mov	r1, r9
 8006a92:	4638      	mov	r0, r7
 8006a94:	47c0      	blx	r8
 8006a96:	3001      	adds	r0, #1
 8006a98:	d01e      	beq.n	8006ad8 <_printf_common+0xa4>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	6922      	ldr	r2, [r4, #16]
 8006a9e:	f003 0306 	and.w	r3, r3, #6
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	bf02      	ittt	eq
 8006aa6:	68e5      	ldreq	r5, [r4, #12]
 8006aa8:	6833      	ldreq	r3, [r6, #0]
 8006aaa:	1aed      	subeq	r5, r5, r3
 8006aac:	68a3      	ldr	r3, [r4, #8]
 8006aae:	bf0c      	ite	eq
 8006ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ab4:	2500      	movne	r5, #0
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	bfc4      	itt	gt
 8006aba:	1a9b      	subgt	r3, r3, r2
 8006abc:	18ed      	addgt	r5, r5, r3
 8006abe:	2600      	movs	r6, #0
 8006ac0:	341a      	adds	r4, #26
 8006ac2:	42b5      	cmp	r5, r6
 8006ac4:	d11a      	bne.n	8006afc <_printf_common+0xc8>
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	e008      	b.n	8006adc <_printf_common+0xa8>
 8006aca:	2301      	movs	r3, #1
 8006acc:	4652      	mov	r2, sl
 8006ace:	4649      	mov	r1, r9
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	47c0      	blx	r8
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d103      	bne.n	8006ae0 <_printf_common+0xac>
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae0:	3501      	adds	r5, #1
 8006ae2:	e7c6      	b.n	8006a72 <_printf_common+0x3e>
 8006ae4:	18e1      	adds	r1, r4, r3
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	2030      	movs	r0, #48	; 0x30
 8006aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006aee:	4422      	add	r2, r4
 8006af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006af4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006af8:	3302      	adds	r3, #2
 8006afa:	e7c7      	b.n	8006a8c <_printf_common+0x58>
 8006afc:	2301      	movs	r3, #1
 8006afe:	4622      	mov	r2, r4
 8006b00:	4649      	mov	r1, r9
 8006b02:	4638      	mov	r0, r7
 8006b04:	47c0      	blx	r8
 8006b06:	3001      	adds	r0, #1
 8006b08:	d0e6      	beq.n	8006ad8 <_printf_common+0xa4>
 8006b0a:	3601      	adds	r6, #1
 8006b0c:	e7d9      	b.n	8006ac2 <_printf_common+0x8e>
	...

08006b10 <_printf_i>:
 8006b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b14:	7e0f      	ldrb	r7, [r1, #24]
 8006b16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b18:	2f78      	cmp	r7, #120	; 0x78
 8006b1a:	4691      	mov	r9, r2
 8006b1c:	4680      	mov	r8, r0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	469a      	mov	sl, r3
 8006b22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b26:	d807      	bhi.n	8006b38 <_printf_i+0x28>
 8006b28:	2f62      	cmp	r7, #98	; 0x62
 8006b2a:	d80a      	bhi.n	8006b42 <_printf_i+0x32>
 8006b2c:	2f00      	cmp	r7, #0
 8006b2e:	f000 80d4 	beq.w	8006cda <_printf_i+0x1ca>
 8006b32:	2f58      	cmp	r7, #88	; 0x58
 8006b34:	f000 80c0 	beq.w	8006cb8 <_printf_i+0x1a8>
 8006b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b40:	e03a      	b.n	8006bb8 <_printf_i+0xa8>
 8006b42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b46:	2b15      	cmp	r3, #21
 8006b48:	d8f6      	bhi.n	8006b38 <_printf_i+0x28>
 8006b4a:	a101      	add	r1, pc, #4	; (adr r1, 8006b50 <_printf_i+0x40>)
 8006b4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b50:	08006ba9 	.word	0x08006ba9
 8006b54:	08006bbd 	.word	0x08006bbd
 8006b58:	08006b39 	.word	0x08006b39
 8006b5c:	08006b39 	.word	0x08006b39
 8006b60:	08006b39 	.word	0x08006b39
 8006b64:	08006b39 	.word	0x08006b39
 8006b68:	08006bbd 	.word	0x08006bbd
 8006b6c:	08006b39 	.word	0x08006b39
 8006b70:	08006b39 	.word	0x08006b39
 8006b74:	08006b39 	.word	0x08006b39
 8006b78:	08006b39 	.word	0x08006b39
 8006b7c:	08006cc1 	.word	0x08006cc1
 8006b80:	08006be9 	.word	0x08006be9
 8006b84:	08006c7b 	.word	0x08006c7b
 8006b88:	08006b39 	.word	0x08006b39
 8006b8c:	08006b39 	.word	0x08006b39
 8006b90:	08006ce3 	.word	0x08006ce3
 8006b94:	08006b39 	.word	0x08006b39
 8006b98:	08006be9 	.word	0x08006be9
 8006b9c:	08006b39 	.word	0x08006b39
 8006ba0:	08006b39 	.word	0x08006b39
 8006ba4:	08006c83 	.word	0x08006c83
 8006ba8:	682b      	ldr	r3, [r5, #0]
 8006baa:	1d1a      	adds	r2, r3, #4
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	602a      	str	r2, [r5, #0]
 8006bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e09f      	b.n	8006cfc <_printf_i+0x1ec>
 8006bbc:	6820      	ldr	r0, [r4, #0]
 8006bbe:	682b      	ldr	r3, [r5, #0]
 8006bc0:	0607      	lsls	r7, r0, #24
 8006bc2:	f103 0104 	add.w	r1, r3, #4
 8006bc6:	6029      	str	r1, [r5, #0]
 8006bc8:	d501      	bpl.n	8006bce <_printf_i+0xbe>
 8006bca:	681e      	ldr	r6, [r3, #0]
 8006bcc:	e003      	b.n	8006bd6 <_printf_i+0xc6>
 8006bce:	0646      	lsls	r6, r0, #25
 8006bd0:	d5fb      	bpl.n	8006bca <_printf_i+0xba>
 8006bd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006bd6:	2e00      	cmp	r6, #0
 8006bd8:	da03      	bge.n	8006be2 <_printf_i+0xd2>
 8006bda:	232d      	movs	r3, #45	; 0x2d
 8006bdc:	4276      	negs	r6, r6
 8006bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be2:	485a      	ldr	r0, [pc, #360]	; (8006d4c <_printf_i+0x23c>)
 8006be4:	230a      	movs	r3, #10
 8006be6:	e012      	b.n	8006c0e <_printf_i+0xfe>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	6820      	ldr	r0, [r4, #0]
 8006bec:	1d19      	adds	r1, r3, #4
 8006bee:	6029      	str	r1, [r5, #0]
 8006bf0:	0605      	lsls	r5, r0, #24
 8006bf2:	d501      	bpl.n	8006bf8 <_printf_i+0xe8>
 8006bf4:	681e      	ldr	r6, [r3, #0]
 8006bf6:	e002      	b.n	8006bfe <_printf_i+0xee>
 8006bf8:	0641      	lsls	r1, r0, #25
 8006bfa:	d5fb      	bpl.n	8006bf4 <_printf_i+0xe4>
 8006bfc:	881e      	ldrh	r6, [r3, #0]
 8006bfe:	4853      	ldr	r0, [pc, #332]	; (8006d4c <_printf_i+0x23c>)
 8006c00:	2f6f      	cmp	r7, #111	; 0x6f
 8006c02:	bf0c      	ite	eq
 8006c04:	2308      	moveq	r3, #8
 8006c06:	230a      	movne	r3, #10
 8006c08:	2100      	movs	r1, #0
 8006c0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c0e:	6865      	ldr	r5, [r4, #4]
 8006c10:	60a5      	str	r5, [r4, #8]
 8006c12:	2d00      	cmp	r5, #0
 8006c14:	bfa2      	ittt	ge
 8006c16:	6821      	ldrge	r1, [r4, #0]
 8006c18:	f021 0104 	bicge.w	r1, r1, #4
 8006c1c:	6021      	strge	r1, [r4, #0]
 8006c1e:	b90e      	cbnz	r6, 8006c24 <_printf_i+0x114>
 8006c20:	2d00      	cmp	r5, #0
 8006c22:	d04b      	beq.n	8006cbc <_printf_i+0x1ac>
 8006c24:	4615      	mov	r5, r2
 8006c26:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c2a:	fb03 6711 	mls	r7, r3, r1, r6
 8006c2e:	5dc7      	ldrb	r7, [r0, r7]
 8006c30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c34:	4637      	mov	r7, r6
 8006c36:	42bb      	cmp	r3, r7
 8006c38:	460e      	mov	r6, r1
 8006c3a:	d9f4      	bls.n	8006c26 <_printf_i+0x116>
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d10b      	bne.n	8006c58 <_printf_i+0x148>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	07de      	lsls	r6, r3, #31
 8006c44:	d508      	bpl.n	8006c58 <_printf_i+0x148>
 8006c46:	6923      	ldr	r3, [r4, #16]
 8006c48:	6861      	ldr	r1, [r4, #4]
 8006c4a:	4299      	cmp	r1, r3
 8006c4c:	bfde      	ittt	le
 8006c4e:	2330      	movle	r3, #48	; 0x30
 8006c50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c58:	1b52      	subs	r2, r2, r5
 8006c5a:	6122      	str	r2, [r4, #16]
 8006c5c:	f8cd a000 	str.w	sl, [sp]
 8006c60:	464b      	mov	r3, r9
 8006c62:	aa03      	add	r2, sp, #12
 8006c64:	4621      	mov	r1, r4
 8006c66:	4640      	mov	r0, r8
 8006c68:	f7ff fee4 	bl	8006a34 <_printf_common>
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d14a      	bne.n	8006d06 <_printf_i+0x1f6>
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295
 8006c74:	b004      	add	sp, #16
 8006c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	f043 0320 	orr.w	r3, r3, #32
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	4833      	ldr	r0, [pc, #204]	; (8006d50 <_printf_i+0x240>)
 8006c84:	2778      	movs	r7, #120	; 0x78
 8006c86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	6829      	ldr	r1, [r5, #0]
 8006c8e:	061f      	lsls	r7, r3, #24
 8006c90:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c94:	d402      	bmi.n	8006c9c <_printf_i+0x18c>
 8006c96:	065f      	lsls	r7, r3, #25
 8006c98:	bf48      	it	mi
 8006c9a:	b2b6      	uxthmi	r6, r6
 8006c9c:	07df      	lsls	r7, r3, #31
 8006c9e:	bf48      	it	mi
 8006ca0:	f043 0320 	orrmi.w	r3, r3, #32
 8006ca4:	6029      	str	r1, [r5, #0]
 8006ca6:	bf48      	it	mi
 8006ca8:	6023      	strmi	r3, [r4, #0]
 8006caa:	b91e      	cbnz	r6, 8006cb4 <_printf_i+0x1a4>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	f023 0320 	bic.w	r3, r3, #32
 8006cb2:	6023      	str	r3, [r4, #0]
 8006cb4:	2310      	movs	r3, #16
 8006cb6:	e7a7      	b.n	8006c08 <_printf_i+0xf8>
 8006cb8:	4824      	ldr	r0, [pc, #144]	; (8006d4c <_printf_i+0x23c>)
 8006cba:	e7e4      	b.n	8006c86 <_printf_i+0x176>
 8006cbc:	4615      	mov	r5, r2
 8006cbe:	e7bd      	b.n	8006c3c <_printf_i+0x12c>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	6826      	ldr	r6, [r4, #0]
 8006cc4:	6961      	ldr	r1, [r4, #20]
 8006cc6:	1d18      	adds	r0, r3, #4
 8006cc8:	6028      	str	r0, [r5, #0]
 8006cca:	0635      	lsls	r5, r6, #24
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	d501      	bpl.n	8006cd4 <_printf_i+0x1c4>
 8006cd0:	6019      	str	r1, [r3, #0]
 8006cd2:	e002      	b.n	8006cda <_printf_i+0x1ca>
 8006cd4:	0670      	lsls	r0, r6, #25
 8006cd6:	d5fb      	bpl.n	8006cd0 <_printf_i+0x1c0>
 8006cd8:	8019      	strh	r1, [r3, #0]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	6123      	str	r3, [r4, #16]
 8006cde:	4615      	mov	r5, r2
 8006ce0:	e7bc      	b.n	8006c5c <_printf_i+0x14c>
 8006ce2:	682b      	ldr	r3, [r5, #0]
 8006ce4:	1d1a      	adds	r2, r3, #4
 8006ce6:	602a      	str	r2, [r5, #0]
 8006ce8:	681d      	ldr	r5, [r3, #0]
 8006cea:	6862      	ldr	r2, [r4, #4]
 8006cec:	2100      	movs	r1, #0
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f7f9 fa76 	bl	80001e0 <memchr>
 8006cf4:	b108      	cbz	r0, 8006cfa <_printf_i+0x1ea>
 8006cf6:	1b40      	subs	r0, r0, r5
 8006cf8:	6060      	str	r0, [r4, #4]
 8006cfa:	6863      	ldr	r3, [r4, #4]
 8006cfc:	6123      	str	r3, [r4, #16]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d04:	e7aa      	b.n	8006c5c <_printf_i+0x14c>
 8006d06:	6923      	ldr	r3, [r4, #16]
 8006d08:	462a      	mov	r2, r5
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	47d0      	blx	sl
 8006d10:	3001      	adds	r0, #1
 8006d12:	d0ad      	beq.n	8006c70 <_printf_i+0x160>
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	079b      	lsls	r3, r3, #30
 8006d18:	d413      	bmi.n	8006d42 <_printf_i+0x232>
 8006d1a:	68e0      	ldr	r0, [r4, #12]
 8006d1c:	9b03      	ldr	r3, [sp, #12]
 8006d1e:	4298      	cmp	r0, r3
 8006d20:	bfb8      	it	lt
 8006d22:	4618      	movlt	r0, r3
 8006d24:	e7a6      	b.n	8006c74 <_printf_i+0x164>
 8006d26:	2301      	movs	r3, #1
 8006d28:	4632      	mov	r2, r6
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	47d0      	blx	sl
 8006d30:	3001      	adds	r0, #1
 8006d32:	d09d      	beq.n	8006c70 <_printf_i+0x160>
 8006d34:	3501      	adds	r5, #1
 8006d36:	68e3      	ldr	r3, [r4, #12]
 8006d38:	9903      	ldr	r1, [sp, #12]
 8006d3a:	1a5b      	subs	r3, r3, r1
 8006d3c:	42ab      	cmp	r3, r5
 8006d3e:	dcf2      	bgt.n	8006d26 <_printf_i+0x216>
 8006d40:	e7eb      	b.n	8006d1a <_printf_i+0x20a>
 8006d42:	2500      	movs	r5, #0
 8006d44:	f104 0619 	add.w	r6, r4, #25
 8006d48:	e7f5      	b.n	8006d36 <_printf_i+0x226>
 8006d4a:	bf00      	nop
 8006d4c:	08006f71 	.word	0x08006f71
 8006d50:	08006f82 	.word	0x08006f82

08006d54 <memmove>:
 8006d54:	4288      	cmp	r0, r1
 8006d56:	b510      	push	{r4, lr}
 8006d58:	eb01 0402 	add.w	r4, r1, r2
 8006d5c:	d902      	bls.n	8006d64 <memmove+0x10>
 8006d5e:	4284      	cmp	r4, r0
 8006d60:	4623      	mov	r3, r4
 8006d62:	d807      	bhi.n	8006d74 <memmove+0x20>
 8006d64:	1e43      	subs	r3, r0, #1
 8006d66:	42a1      	cmp	r1, r4
 8006d68:	d008      	beq.n	8006d7c <memmove+0x28>
 8006d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d72:	e7f8      	b.n	8006d66 <memmove+0x12>
 8006d74:	4402      	add	r2, r0
 8006d76:	4601      	mov	r1, r0
 8006d78:	428a      	cmp	r2, r1
 8006d7a:	d100      	bne.n	8006d7e <memmove+0x2a>
 8006d7c:	bd10      	pop	{r4, pc}
 8006d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d86:	e7f7      	b.n	8006d78 <memmove+0x24>

08006d88 <_realloc_r>:
 8006d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	4614      	mov	r4, r2
 8006d90:	460e      	mov	r6, r1
 8006d92:	b921      	cbnz	r1, 8006d9e <_realloc_r+0x16>
 8006d94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d98:	4611      	mov	r1, r2
 8006d9a:	f7ff bba9 	b.w	80064f0 <_malloc_r>
 8006d9e:	b92a      	cbnz	r2, 8006dac <_realloc_r+0x24>
 8006da0:	f7ff fca4 	bl	80066ec <_free_r>
 8006da4:	4625      	mov	r5, r4
 8006da6:	4628      	mov	r0, r5
 8006da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dac:	f000 f81b 	bl	8006de6 <_malloc_usable_size_r>
 8006db0:	4284      	cmp	r4, r0
 8006db2:	4607      	mov	r7, r0
 8006db4:	d802      	bhi.n	8006dbc <_realloc_r+0x34>
 8006db6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006dba:	d812      	bhi.n	8006de2 <_realloc_r+0x5a>
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	f7ff fb96 	bl	80064f0 <_malloc_r>
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d0ed      	beq.n	8006da6 <_realloc_r+0x1e>
 8006dca:	42bc      	cmp	r4, r7
 8006dcc:	4622      	mov	r2, r4
 8006dce:	4631      	mov	r1, r6
 8006dd0:	bf28      	it	cs
 8006dd2:	463a      	movcs	r2, r7
 8006dd4:	f7ff fc7c 	bl	80066d0 <memcpy>
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4640      	mov	r0, r8
 8006ddc:	f7ff fc86 	bl	80066ec <_free_r>
 8006de0:	e7e1      	b.n	8006da6 <_realloc_r+0x1e>
 8006de2:	4635      	mov	r5, r6
 8006de4:	e7df      	b.n	8006da6 <_realloc_r+0x1e>

08006de6 <_malloc_usable_size_r>:
 8006de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dea:	1f18      	subs	r0, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	bfbc      	itt	lt
 8006df0:	580b      	ldrlt	r3, [r1, r0]
 8006df2:	18c0      	addlt	r0, r0, r3
 8006df4:	4770      	bx	lr
	...

08006df8 <_init>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	bf00      	nop
 8006dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfe:	bc08      	pop	{r3}
 8006e00:	469e      	mov	lr, r3
 8006e02:	4770      	bx	lr

08006e04 <_fini>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	bf00      	nop
 8006e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0a:	bc08      	pop	{r3}
 8006e0c:	469e      	mov	lr, r3
 8006e0e:	4770      	bx	lr

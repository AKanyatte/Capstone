
sleep_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003850  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080039e0  080039e0  000139e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ad0  08003ad0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ad0  08003ad0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ad0  08003ad0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ad0  08003ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000005c  08003b34  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08003b34  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b926  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002089  00000000  00000000  0002b9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  0002da80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000086a  00000000  00000000  0002e5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002073c  00000000  00000000  0002ee1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfa1  00000000  00000000  0004f556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3031  00000000  00000000  0005c4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003138  00000000  00000000  0011f528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00122660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080039c8 	.word	0x080039c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080039c8 	.word	0x080039c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fb2e 	bl	80008e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f899 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f94f 	bl	8000530 <MX_GPIO_Init>
  MX_USART2_Init();
 8000292:	f000 f921 	bl	80004d8 <MX_USART2_Init>
  MX_RTC_Init();
 8000296:	f000 f8f7 	bl	8000488 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  char test[20];
  sprintf(test, "Hello. Testing Stanby Mode!\r\n");
 800029a:	463b      	mov	r3, r7
 800029c:	4940      	ldr	r1, [pc, #256]	; (80003a0 <main+0x120>)
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 feee 	bl	8003080 <siprintf>

  HAL_USART_Transmit(&husart2, (uint8_t*)test, strlen(test), 1000);
 80002a4:	463b      	mov	r3, r7
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ff92 	bl	80001d0 <strlen>
 80002ac:	4603      	mov	r3, r0
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	4639      	mov	r1, r7
 80002b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b6:	483b      	ldr	r0, [pc, #236]	; (80003a4 <main+0x124>)
 80002b8:	f002 fabc 	bl	8002834 <HAL_USART_Transmit>


  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80002bc:	4b3a      	ldr	r3, [pc, #232]	; (80003a8 <main+0x128>)
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d02c      	beq.n	8000322 <main+0xa2>
  {
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); // clear flag
 80002c8:	4b37      	ldr	r3, [pc, #220]	; (80003a8 <main+0x128>)
 80002ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ce:	619a      	str	r2, [r3, #24]
	  char *str = "Wake up from STANDBY MODE\r\n";
 80002d0:	4b36      	ldr	r3, [pc, #216]	; (80003ac <main+0x12c>)
 80002d2:	61fb      	str	r3, [r7, #28]
	  HAL_USART_Transmit(&husart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80002d4:	69f8      	ldr	r0, [r7, #28]
 80002d6:	f7ff ff7b 	bl	80001d0 <strlen>
 80002da:	4603      	mov	r3, r0
 80002dc:	b29a      	uxth	r2, r3
 80002de:	f04f 33ff 	mov.w	r3, #4294967295
 80002e2:	69f9      	ldr	r1, [r7, #28]
 80002e4:	482f      	ldr	r0, [pc, #188]	; (80003a4 <main+0x124>)
 80002e6:	f002 faa5 	bl	8002834 <HAL_USART_Transmit>

	  // Blink LED
	  for(int i = 0; i<20; i++)
 80002ea:	2300      	movs	r3, #0
 80002ec:	627b      	str	r3, [r7, #36]	; 0x24
 80002ee:	e009      	b.n	8000304 <main+0x84>
	  {
		  	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 80002f0:	2108      	movs	r1, #8
 80002f2:	482f      	ldr	r0, [pc, #188]	; (80003b0 <main+0x130>)
 80002f4:	f000 fe64 	bl	8000fc0 <HAL_GPIO_TogglePin>
		  	  HAL_Delay(200);
 80002f8:	20c8      	movs	r0, #200	; 0xc8
 80002fa:	f000 fb69 	bl	80009d0 <HAL_Delay>
	  for(int i = 0; i<20; i++)
 80002fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000300:	3301      	adds	r3, #1
 8000302:	627b      	str	r3, [r7, #36]	; 0x24
 8000304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000306:	2b13      	cmp	r3, #19
 8000308:	ddf2      	ble.n	80002f0 <main+0x70>
	  }

	  // Disable Wake up Pin
	  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 800030a:	2001      	movs	r0, #1
 800030c:	f000 fea2 	bl	8001054 <HAL_PWR_DisableWakeUpPin>

	  //Deactivate RTC Wake up
	  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_ISR_WUTF);
 8000310:	4b28      	ldr	r3, [pc, #160]	; (80003b4 <main+0x134>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4b26      	ldr	r3, [pc, #152]	; (80003b4 <main+0x134>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000320:	60da      	str	r2, [r3, #12]
  }

  // Enter standby mode
  // Clear WU flag
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000322:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <main+0x128>)
 8000324:	221f      	movs	r2, #31
 8000326:	619a      	str	r2, [r3, #24]


  char *str = "About to enter STANDBY MODE\r\n";
 8000328:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <main+0x138>)
 800032a:	61bb      	str	r3, [r7, #24]
  HAL_USART_Transmit(&husart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800032c:	69b8      	ldr	r0, [r7, #24]
 800032e:	f7ff ff4f 	bl	80001d0 <strlen>
 8000332:	4603      	mov	r3, r0
 8000334:	b29a      	uxth	r2, r3
 8000336:	f04f 33ff 	mov.w	r3, #4294967295
 800033a:	69b9      	ldr	r1, [r7, #24]
 800033c:	4819      	ldr	r0, [pc, #100]	; (80003a4 <main+0x124>)
 800033e:	f002 fa79 	bl	8002834 <HAL_USART_Transmit>


  // Blink LED
  for(int i = 0; i<5; i++)
 8000342:	2300      	movs	r3, #0
 8000344:	623b      	str	r3, [r7, #32]
 8000346:	e00a      	b.n	800035e <main+0xde>
  {
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000348:	2108      	movs	r1, #8
 800034a:	4819      	ldr	r0, [pc, #100]	; (80003b0 <main+0x130>)
 800034c:	f000 fe38 	bl	8000fc0 <HAL_GPIO_TogglePin>
  	  HAL_Delay(750);
 8000350:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000354:	f000 fb3c 	bl	80009d0 <HAL_Delay>
  for(int i = 0; i<5; i++)
 8000358:	6a3b      	ldr	r3, [r7, #32]
 800035a:	3301      	adds	r3, #1
 800035c:	623b      	str	r3, [r7, #32]
 800035e:	6a3b      	ldr	r3, [r7, #32]
 8000360:	2b04      	cmp	r3, #4
 8000362:	ddf1      	ble.n	8000348 <main+0xc8>
  }

  // Disable Wake up Pin
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000364:	2001      	movs	r0, #1
 8000366:	f000 fe55 	bl	8001014 <HAL_PWR_EnableWakeUpPin>
        RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
        Wake-up Time Base = 16 /(32KHz) = 0.0005 seconds
        ==> WakeUpCounter = ~ 30s/0.0005s = 60000 = 0xEA60
      */

  if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xEA60, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800036a:	2200      	movs	r2, #0
 800036c:	f64e 2160 	movw	r1, #60000	; 0xea60
 8000370:	4810      	ldr	r0, [pc, #64]	; (80003b4 <main+0x134>)
 8000372:	f002 f951 	bl	8002618 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <main+0x100>
  {
	  Error_Handler();
 800037c:	f000 f922 	bl	80005c4 <Error_Handler>
  }

  char *str2 = "STANDBY MODE is on\r\n";
 8000380:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <main+0x13c>)
 8000382:	617b      	str	r3, [r7, #20]
  HAL_USART_Transmit(&husart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
 8000384:	6978      	ldr	r0, [r7, #20]
 8000386:	f7ff ff23 	bl	80001d0 <strlen>
 800038a:	4603      	mov	r3, r0
 800038c:	b29a      	uxth	r2, r3
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
 8000392:	6979      	ldr	r1, [r7, #20]
 8000394:	4803      	ldr	r0, [pc, #12]	; (80003a4 <main+0x124>)
 8000396:	f002 fa4d 	bl	8002834 <HAL_USART_Transmit>
  HAL_PWR_EnterSTANDBYMode();
 800039a:	f000 fe71 	bl	8001080 <HAL_PWR_EnterSTANDBYMode>

  while (1)
 800039e:	e7fe      	b.n	800039e <main+0x11e>
 80003a0:	080039e0 	.word	0x080039e0
 80003a4:	2000009c 	.word	0x2000009c
 80003a8:	40007000 	.word	0x40007000
 80003ac:	08003a00 	.word	0x08003a00
 80003b0:	48000400 	.word	0x48000400
 80003b4:	20000078 	.word	0x20000078
 80003b8:	08003a1c 	.word	0x08003a1c
 80003bc:	08003a3c 	.word	0x08003a3c

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b096      	sub	sp, #88	; 0x58
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	2244      	movs	r2, #68	; 0x44
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f002 fe76 	bl	80030c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	463b      	mov	r3, r7
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003e6:	f000 fe73 	bl	80010d0 <HAL_PWREx_ControlVoltageScaling>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003f0:	f000 f8e8 	bl	80005c4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80003f4:	f000 fdfe 	bl	8000ff4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80003f8:	4b22      	ldr	r3, [pc, #136]	; (8000484 <SystemClock_Config+0xc4>)
 80003fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003fe:	4a21      	ldr	r2, [pc, #132]	; (8000484 <SystemClock_Config+0xc4>)
 8000400:	f023 0318 	bic.w	r3, r3, #24
 8000404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000408:	231c      	movs	r3, #28
 800040a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800040c:	2301      	movs	r3, #1
 800040e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000410:	2301      	movs	r3, #1
 8000412:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000414:	2301      	movs	r3, #1
 8000416:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800041c:	2360      	movs	r3, #96	; 0x60
 800041e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000420:	2302      	movs	r3, #2
 8000422:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000424:	2301      	movs	r3, #1
 8000426:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000428:	2301      	movs	r3, #1
 800042a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800042c:	2310      	movs	r3, #16
 800042e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000430:	2307      	movs	r3, #7
 8000432:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000434:	2302      	movs	r3, #2
 8000436:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000438:	2302      	movs	r3, #2
 800043a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	4618      	mov	r0, r3
 8000442:	f000 fe9b 	bl	800117c <HAL_RCC_OscConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800044c:	f000 f8ba 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000450:	230f      	movs	r3, #15
 8000452:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000454:	2303      	movs	r3, #3
 8000456:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000464:	463b      	mov	r3, r7
 8000466:	2101      	movs	r1, #1
 8000468:	4618      	mov	r0, r3
 800046a:	f001 fa9b 	bl	80019a4 <HAL_RCC_ClockConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000474:	f000 f8a6 	bl	80005c4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000478:	f001 feae 	bl	80021d8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800047c:	bf00      	nop
 800047e:	3758      	adds	r7, #88	; 0x58
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40021000 	.word	0x40021000

08000488 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MX_RTC_Init+0x48>)
 800048e:	4a11      	ldr	r2, [pc, #68]	; (80004d4 <MX_RTC_Init+0x4c>)
 8000490:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_RTC_Init+0x48>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <MX_RTC_Init+0x48>)
 800049a:	227f      	movs	r2, #127	; 0x7f
 800049c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_RTC_Init+0x48>)
 80004a0:	22ff      	movs	r2, #255	; 0xff
 80004a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <MX_RTC_Init+0x48>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_RTC_Init+0x48>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <MX_RTC_Init+0x48>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_RTC_Init+0x48>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <MX_RTC_Init+0x48>)
 80004be:	f001 ff8d 	bl	80023dc <HAL_RTC_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80004c8:	f000 f87c 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000078 	.word	0x20000078
 80004d4:	40002800 	.word	0x40002800

080004d8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_USART2_Init+0x50>)
 80004de:	4a13      	ldr	r2, [pc, #76]	; (800052c <MX_USART2_Init+0x54>)
 80004e0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <MX_USART2_Init+0x50>)
 80004e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004e8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <MX_USART2_Init+0x50>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <MX_USART2_Init+0x50>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <MX_USART2_Init+0x50>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <MX_USART2_Init+0x50>)
 80004fe:	220c      	movs	r2, #12
 8000500:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_USART2_Init+0x50>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <MX_USART2_Init+0x50>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_USART2_Init+0x50>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <MX_USART2_Init+0x50>)
 8000516:	f002 f943 	bl	80027a0 <HAL_USART_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000520:	f000 f850 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	2000009c 	.word	0x2000009c
 800052c:	40004400 	.word	0x40004400

08000530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 030c 	add.w	r3, r7, #12
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <MX_GPIO_Init+0x8c>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a1c      	ldr	r2, [pc, #112]	; (80005bc <MX_GPIO_Init+0x8c>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <MX_GPIO_Init+0x8c>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <MX_GPIO_Init+0x8c>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a16      	ldr	r2, [pc, #88]	; (80005bc <MX_GPIO_Init+0x8c>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_GPIO_Init+0x8c>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_GPIO_Init+0x8c>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a10      	ldr	r2, [pc, #64]	; (80005bc <MX_GPIO_Init+0x8c>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_GPIO_Init+0x8c>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <MX_GPIO_Init+0x90>)
 8000594:	f000 fcfc 	bl	8000f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000598:	2308      	movs	r3, #8
 800059a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4619      	mov	r1, r3
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_GPIO_Init+0x90>)
 80005b0:	f000 fb84 	bl	8000cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b4:	bf00      	nop
 80005b6:	3720      	adds	r7, #32
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48000400 	.word	0x48000400

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_MspInit+0x50>)
 80005d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <HAL_MspInit+0x50>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6613      	str	r3, [r2, #96]	; 0x60
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_MspInit+0x50>)
 80005e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HAL_MspInit+0x50>)
 80005f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005f2:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <HAL_MspInit+0x50>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	6593      	str	r3, [r2, #88]	; 0x58
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_MspInit+0x50>)
 80005fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2005      	movs	r0, #5
 800060c:	f000 fadf 	bl	8000bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000610:	2005      	movs	r0, #5
 8000612:	f000 faf8 	bl	8000c06 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b098      	sub	sp, #96	; 0x60
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2254      	movs	r2, #84	; 0x54
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fd43 	bl	80030c0 <memset>
  if(hrtc->Instance==RTC)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a13      	ldr	r2, [pc, #76]	; (800068c <HAL_RTC_MspInit+0x68>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d11f      	bne.n	8000684 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000648:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800064a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800064e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fbc9 	bl	8001dec <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000660:	f7ff ffb0 	bl	80005c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_RTC_MspInit+0x6c>)
 8000666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800066a:	4a09      	ldr	r2, [pc, #36]	; (8000690 <HAL_RTC_MspInit+0x6c>)
 800066c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2003      	movs	r0, #3
 800067a:	f000 faa8 	bl	8000bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800067e:	2003      	movs	r0, #3
 8000680:	f000 fac1 	bl	8000c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000684:	bf00      	nop
 8000686:	3760      	adds	r7, #96	; 0x60
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40002800 	.word	0x40002800
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b09e      	sub	sp, #120	; 0x78
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	2254      	movs	r2, #84	; 0x54
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fd03 	bl	80030c0 <memset>
  if(husart->Instance==USART2)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a2c      	ldr	r2, [pc, #176]	; (8000770 <HAL_USART_MspInit+0xdc>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d150      	bne.n	8000766 <HAL_USART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fb8b 	bl	8001dec <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 80006dc:	f7ff ff72 	bl	80005c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e0:	4b24      	ldr	r3, [pc, #144]	; (8000774 <HAL_USART_MspInit+0xe0>)
 80006e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e4:	4a23      	ldr	r2, [pc, #140]	; (8000774 <HAL_USART_MspInit+0xe0>)
 80006e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ea:	6593      	str	r3, [r2, #88]	; 0x58
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <HAL_USART_MspInit+0xe0>)
 80006ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <HAL_USART_MspInit+0xe0>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <HAL_USART_MspInit+0xe0>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_USART_MspInit+0xe0>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_4;
 8000710:	2314      	movs	r3, #20
 8000712:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000720:	2307      	movs	r3, #7
 8000722:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000728:	4619      	mov	r1, r3
 800072a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072e:	f000 fac5 	bl	8000cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000736:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000744:	2303      	movs	r3, #3
 8000746:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800074c:	4619      	mov	r1, r3
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f000 fab3 	bl	8000cbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2026      	movs	r0, #38	; 0x26
 800075c:	f000 fa37 	bl	8000bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000760:	2026      	movs	r0, #38	; 0x26
 8000762:	f000 fa50 	bl	8000c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000766:	bf00      	nop
 8000768:	3778      	adds	r7, #120	; 0x78
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40004400 	.word	0x40004400
 8000774:	40021000 	.word	0x40021000

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler+0x4>

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <MemManage_Handler+0x4>

0800078a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <UsageFault_Handler+0x4>

08000796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 f8e4 	bl	8000990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <RTC_WKUP_IRQHandler+0x10>)
 80007d2:	f001 ffb5 	bl	8002740 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000078 	.word	0x20000078

080007e0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <USART2_IRQHandler+0x10>)
 80007f6:	f002 f8cb 	bl	8002990 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000009c 	.word	0x2000009c

08000804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800080c:	4a14      	ldr	r2, [pc, #80]	; (8000860 <_sbrk+0x5c>)
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <_sbrk+0x60>)
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <_sbrk+0x64>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <_sbrk+0x68>)
 8000824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <_sbrk+0x64>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	429a      	cmp	r2, r3
 8000832:	d207      	bcs.n	8000844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000834:	f002 fc4c 	bl	80030d0 <__errno>
 8000838:	4603      	mov	r3, r0
 800083a:	220c      	movs	r2, #12
 800083c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	e009      	b.n	8000858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	4a05      	ldr	r2, [pc, #20]	; (8000868 <_sbrk+0x64>)
 8000854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000856:	68fb      	ldr	r3, [r7, #12]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20010000 	.word	0x20010000
 8000864:	00000400 	.word	0x00000400
 8000868:	200000ec 	.word	0x200000ec
 800086c:	20000240 	.word	0x20000240

08000870 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <SystemInit+0x20>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <SystemInit+0x20>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000898:	f7ff ffea 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	; (80008d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <LoopForever+0xe>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	; (80008e0 <LoopForever+0x16>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c2:	f002 fc0b 	bl	80030dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008c6:	f7ff fcdb 	bl	8000280 <main>

080008ca <LoopForever>:

LoopForever:
    b LoopForever
 80008ca:	e7fe      	b.n	80008ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008d8:	08003ad8 	.word	0x08003ad8
  ldr r2, =_sbss
 80008dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008e0:	2000023c 	.word	0x2000023c

080008e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_IRQHandler>

080008e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f961 	bl	8000bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 f80e 	bl	8000918 <HAL_InitTick>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d002      	beq.n	8000908 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	71fb      	strb	r3, [r7, #7]
 8000906:	e001      	b.n	800090c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000908:	f7ff fe62 	bl	80005d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800090c:	79fb      	ldrb	r3, [r7, #7]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_InitTick+0x6c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d023      	beq.n	8000974 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <HAL_InitTick+0x70>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HAL_InitTick+0x6c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	fbb3 f3f1 	udiv	r3, r3, r1
 800093e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f96d 	bl	8000c22 <HAL_SYSTICK_Config>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d10f      	bne.n	800096e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d809      	bhi.n	8000968 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f000 f937 	bl	8000bce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000960:	4a0a      	ldr	r2, [pc, #40]	; (800098c <HAL_InitTick+0x74>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
 8000966:	e007      	b.n	8000978 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	e004      	b.n	8000978 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
 8000972:	e001      	b.n	8000978 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000978:	7bfb      	ldrb	r3, [r7, #15]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000008 	.word	0x20000008
 8000988:	20000000 	.word	0x20000000
 800098c:	20000004 	.word	0x20000004

08000990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x20>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_IncTick+0x24>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <HAL_IncTick+0x24>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008
 80009b4:	200000f0 	.word	0x200000f0

080009b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <HAL_GetTick+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	200000f0 	.word	0x200000f0

080009d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d8:	f7ff ffee 	bl	80009b8 <HAL_GetTick>
 80009dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e8:	d005      	beq.n	80009f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_Delay+0x44>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4413      	add	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009f6:	bf00      	nop
 80009f8:	f7ff ffde 	bl	80009b8 <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d8f7      	bhi.n	80009f8 <HAL_Delay+0x28>
  {
  }
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db0b      	blt.n	8000aa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 021f 	and.w	r2, r3, #31
 8000a94:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <__NVIC_EnableIRQ+0x38>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	; (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b84:	d301      	bcc.n	8000b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00f      	b.n	8000baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <SysTick_Config+0x40>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b92:	210f      	movs	r1, #15
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f7ff ff8e 	bl	8000ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <SysTick_Config+0x40>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <SysTick_Config+0x40>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	e000e010 	.word	0xe000e010

08000bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff29 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be0:	f7ff ff3e 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000be4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	68b9      	ldr	r1, [r7, #8]
 8000bea:	6978      	ldr	r0, [r7, #20]
 8000bec:	f7ff ff8e 	bl	8000b0c <NVIC_EncodePriority>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff5d 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff31 	bl	8000a7c <__NVIC_EnableIRQ>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ffa2 	bl	8000b74 <SysTick_Config>
 8000c30:	4603      	mov	r3, r0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d005      	beq.n	8000c5e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2204      	movs	r2, #4
 8000c56:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e029      	b.n	8000cb2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 020e 	bic.w	r2, r2, #14
 8000c6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 0201 	bic.w	r2, r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f003 021c 	and.w	r2, r3, #28
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c90:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	4798      	blx	r3
    }
  }
  return status;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cca:	e148      	b.n	8000f5e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 813a 	beq.w	8000f58 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d005      	beq.n	8000cfc <HAL_GPIO_Init+0x40>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d130      	bne.n	8000d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d32:	2201      	movs	r2, #1
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	091b      	lsrs	r3, r3, #4
 8000d48:	f003 0201 	and.w	r2, r3, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d017      	beq.n	8000d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d123      	bne.n	8000dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	08da      	lsrs	r2, r3, #3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	6939      	ldr	r1, [r7, #16]
 8000dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0203 	and.w	r2, r3, #3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 8094 	beq.w	8000f58 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e30:	4b52      	ldr	r3, [pc, #328]	; (8000f7c <HAL_GPIO_Init+0x2c0>)
 8000e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e34:	4a51      	ldr	r2, [pc, #324]	; (8000f7c <HAL_GPIO_Init+0x2c0>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e3c:	4b4f      	ldr	r3, [pc, #316]	; (8000f7c <HAL_GPIO_Init+0x2c0>)
 8000e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e48:	4a4d      	ldr	r2, [pc, #308]	; (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	220f      	movs	r2, #15
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e72:	d00d      	beq.n	8000e90 <HAL_GPIO_Init+0x1d4>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a43      	ldr	r2, [pc, #268]	; (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d007      	beq.n	8000e8c <HAL_GPIO_Init+0x1d0>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a42      	ldr	r2, [pc, #264]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d101      	bne.n	8000e88 <HAL_GPIO_Init+0x1cc>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e004      	b.n	8000e92 <HAL_GPIO_Init+0x1d6>
 8000e88:	2307      	movs	r3, #7
 8000e8a:	e002      	b.n	8000e92 <HAL_GPIO_Init+0x1d6>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <HAL_GPIO_Init+0x1d6>
 8000e90:	2300      	movs	r3, #0
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	f002 0203 	and.w	r2, r2, #3
 8000e98:	0092      	lsls	r2, r2, #2
 8000e9a:	4093      	lsls	r3, r2
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ea2:	4937      	ldr	r1, [pc, #220]	; (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eb0:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ed4:	4a2d      	ldr	r2, [pc, #180]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000efe:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f28:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	fa22 f303 	lsr.w	r3, r2, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f47f aeaf 	bne.w	8000ccc <HAL_GPIO_Init+0x10>
  }
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	371c      	adds	r7, #28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010000 	.word	0x40010000
 8000f84:	48000400 	.word	0x48000400
 8000f88:	48000800 	.word	0x48000800
 8000f8c:	40010400 	.word	0x40010400

08000f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fd2:	887a      	ldrh	r2, [r7, #2]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	041a      	lsls	r2, r3, #16
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43d9      	mvns	r1, r3
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	400b      	ands	r3, r1
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	619a      	str	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40007000 	.word	0x40007000

08001014 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 031f 	and.w	r3, r3, #31
 8001026:	43db      	mvns	r3, r3
 8001028:	401a      	ands	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	095b      	lsrs	r3, r3, #5
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001030:	4313      	orrs	r3, r2
 8001032:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	4904      	ldr	r1, [pc, #16]	; (8001050 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001040:	4313      	orrs	r3, r2
 8001042:	608b      	str	r3, [r1, #8]


}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	40007000 	.word	0x40007000

08001054 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_PWR_DisableWakeUpPin+0x28>)
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 031f 	and.w	r3, r3, #31
 8001066:	43db      	mvns	r3, r3
 8001068:	4904      	ldr	r1, [pc, #16]	; (800107c <HAL_PWR_DisableWakeUpPin+0x28>)
 800106a:	4013      	ands	r3, r2
 800106c:	608b      	str	r3, [r1, #8]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40007000 	.word	0x40007000

08001080 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 0307 	bic.w	r3, r3, #7
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800108e:	f043 0303 	orr.w	r3, r3, #3
 8001092:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80010a0:	bf30      	wfi
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	40007000 	.word	0x40007000
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_PWREx_GetVoltageRange+0x18>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40007000 	.word	0x40007000

080010d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010de:	d130      	bne.n	8001142 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ec:	d038      	beq.n	8001160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010f6:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2232      	movs	r2, #50	; 0x32
 8001104:	fb02 f303 	mul.w	r3, r2, r3
 8001108:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	0c9b      	lsrs	r3, r3, #18
 8001110:	3301      	adds	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001114:	e002      	b.n	800111c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3b01      	subs	r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001128:	d102      	bne.n	8001130 <HAL_PWREx_ControlVoltageScaling+0x60>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f2      	bne.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113c:	d110      	bne.n	8001160 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e00f      	b.n	8001162 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800114a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114e:	d007      	beq.n	8001160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001158:	4a05      	ldr	r2, [pc, #20]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40007000 	.word	0x40007000
 8001174:	20000000 	.word	0x20000000
 8001178:	431bde83 	.word	0x431bde83

0800117c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	f000 bc02 	b.w	8001994 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001190:	4b96      	ldr	r3, [pc, #600]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800119a:	4b94      	ldr	r3, [pc, #592]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0310 	and.w	r3, r3, #16
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 80e4 	beq.w	800137a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d007      	beq.n	80011c8 <HAL_RCC_OscConfig+0x4c>
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2b0c      	cmp	r3, #12
 80011bc:	f040 808b 	bne.w	80012d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	f040 8087 	bne.w	80012d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011c8:	4b88      	ldr	r3, [pc, #544]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_OscConfig+0x64>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e3d9      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1a      	ldr	r2, [r3, #32]
 80011e4:	4b81      	ldr	r3, [pc, #516]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <HAL_RCC_OscConfig+0x7e>
 80011f0:	4b7e      	ldr	r3, [pc, #504]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011f8:	e005      	b.n	8001206 <HAL_RCC_OscConfig+0x8a>
 80011fa:	4b7c      	ldr	r3, [pc, #496]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 80011fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001206:	4293      	cmp	r3, r2
 8001208:	d223      	bcs.n	8001252 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fd8c 	bl	8001d2c <RCC_SetFlashLatencyFromMSIRange>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e3ba      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800121e:	4b73      	ldr	r3, [pc, #460]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a72      	ldr	r2, [pc, #456]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b70      	ldr	r3, [pc, #448]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	496d      	ldr	r1, [pc, #436]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001238:	4313      	orrs	r3, r2
 800123a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800123c:	4b6b      	ldr	r3, [pc, #428]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	4968      	ldr	r1, [pc, #416]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
 8001250:	e025      	b.n	800129e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001252:	4b66      	ldr	r3, [pc, #408]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a65      	ldr	r2, [pc, #404]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b63      	ldr	r3, [pc, #396]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	4960      	ldr	r1, [pc, #384]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 800126c:	4313      	orrs	r3, r2
 800126e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001270:	4b5e      	ldr	r3, [pc, #376]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	495b      	ldr	r1, [pc, #364]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001280:	4313      	orrs	r3, r2
 8001282:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d109      	bne.n	800129e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fd4c 	bl	8001d2c <RCC_SetFlashLatencyFromMSIRange>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e37a      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800129e:	f000 fc81 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 80012a2:	4602      	mov	r2, r0
 80012a4:	4b51      	ldr	r3, [pc, #324]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	4950      	ldr	r1, [pc, #320]	; (80013f0 <HAL_RCC_OscConfig+0x274>)
 80012b0:	5ccb      	ldrb	r3, [r1, r3]
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ba:	4a4e      	ldr	r2, [pc, #312]	; (80013f4 <HAL_RCC_OscConfig+0x278>)
 80012bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012be:	4b4e      	ldr	r3, [pc, #312]	; (80013f8 <HAL_RCC_OscConfig+0x27c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fb28 	bl	8000918 <HAL_InitTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d052      	beq.n	8001378 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	e35e      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d032      	beq.n	8001344 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012de:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a42      	ldr	r2, [pc, #264]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012ea:	f7ff fb65 	bl	80009b8 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012f2:	f7ff fb61 	bl	80009b8 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e347      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001304:	4b39      	ldr	r3, [pc, #228]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001310:	4b36      	ldr	r3, [pc, #216]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a35      	ldr	r2, [pc, #212]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001316:	f043 0308 	orr.w	r3, r3, #8
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b33      	ldr	r3, [pc, #204]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4930      	ldr	r1, [pc, #192]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	492b      	ldr	r1, [pc, #172]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
 8001342:	e01a      	b.n	800137a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a28      	ldr	r2, [pc, #160]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 800134a:	f023 0301 	bic.w	r3, r3, #1
 800134e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001350:	f7ff fb32 	bl	80009b8 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001358:	f7ff fb2e 	bl	80009b8 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e314      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x1dc>
 8001376:	e000      	b.n	800137a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001378:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d073      	beq.n	800146e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2b08      	cmp	r3, #8
 800138a:	d005      	beq.n	8001398 <HAL_RCC_OscConfig+0x21c>
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2b0c      	cmp	r3, #12
 8001390:	d10e      	bne.n	80013b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d10b      	bne.n	80013b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d063      	beq.n	800146c <HAL_RCC_OscConfig+0x2f0>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d15f      	bne.n	800146c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e2f1      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b8:	d106      	bne.n	80013c8 <HAL_RCC_OscConfig+0x24c>
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e025      	b.n	8001414 <HAL_RCC_OscConfig+0x298>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d0:	d114      	bne.n	80013fc <HAL_RCC_OscConfig+0x280>
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 80013d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a02      	ldr	r2, [pc, #8]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e013      	b.n	8001414 <HAL_RCC_OscConfig+0x298>
 80013ec:	40021000 	.word	0x40021000
 80013f0:	08003a54 	.word	0x08003a54
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000004 	.word	0x20000004
 80013fc:	4ba0      	ldr	r3, [pc, #640]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a9f      	ldr	r2, [pc, #636]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 8001402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b9d      	ldr	r3, [pc, #628]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a9c      	ldr	r2, [pc, #624]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d013      	beq.n	8001444 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff facc 	bl	80009b8 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fac8 	bl	80009b8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e2ae      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001436:	4b92      	ldr	r3, [pc, #584]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x2a8>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fab8 	bl	80009b8 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fab4 	bl	80009b8 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e29a      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145e:	4b88      	ldr	r3, [pc, #544]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x2d0>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d060      	beq.n	800153c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b04      	cmp	r3, #4
 800147e:	d005      	beq.n	800148c <HAL_RCC_OscConfig+0x310>
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2b0c      	cmp	r3, #12
 8001484:	d119      	bne.n	80014ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d116      	bne.n	80014ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800148c:	4b7c      	ldr	r3, [pc, #496]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_OscConfig+0x328>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e277      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a4:	4b76      	ldr	r3, [pc, #472]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	4973      	ldr	r1, [pc, #460]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b8:	e040      	b.n	800153c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d023      	beq.n	800150a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c2:	4b6f      	ldr	r3, [pc, #444]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6e      	ldr	r2, [pc, #440]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff fa73 	bl	80009b8 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fa6f 	bl	80009b8 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e255      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e8:	4b65      	ldr	r3, [pc, #404]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b62      	ldr	r3, [pc, #392]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	061b      	lsls	r3, r3, #24
 8001502:	495f      	ldr	r1, [pc, #380]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
 8001508:	e018      	b.n	800153c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b5d      	ldr	r3, [pc, #372]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a5c      	ldr	r2, [pc, #368]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 8001510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001516:	f7ff fa4f 	bl	80009b8 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151e:	f7ff fa4b 	bl	80009b8 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e231      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001530:	4b53      	ldr	r3, [pc, #332]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d03c      	beq.n	80015c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d01c      	beq.n	800158a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001550:	4b4b      	ldr	r3, [pc, #300]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 8001552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001556:	4a4a      	ldr	r2, [pc, #296]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fa2a 	bl	80009b8 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fa26 	bl	80009b8 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e20c      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157a:	4b41      	ldr	r3, [pc, #260]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 800157c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0ef      	beq.n	8001568 <HAL_RCC_OscConfig+0x3ec>
 8001588:	e01b      	b.n	80015c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158a:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 800158c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001590:	4a3b      	ldr	r2, [pc, #236]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159a:	f7ff fa0d 	bl	80009b8 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fa09 	bl	80009b8 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1ef      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b4:	4b32      	ldr	r3, [pc, #200]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 80015b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ef      	bne.n	80015a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80a6 	beq.w	800171c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015d4:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10d      	bne.n	80015fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	4a26      	ldr	r2, [pc, #152]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 80015e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ea:	6593      	str	r3, [r2, #88]	; 0x58
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f8:	2301      	movs	r3, #1
 80015fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_RCC_OscConfig+0x508>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d118      	bne.n	800163a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_RCC_OscConfig+0x508>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <HAL_RCC_OscConfig+0x508>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001612:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001614:	f7ff f9d0 	bl	80009b8 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161c:	f7ff f9cc 	bl	80009b8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e1b2      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_RCC_OscConfig+0x508>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d108      	bne.n	8001654 <HAL_RCC_OscConfig+0x4d8>
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 8001644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001652:	e029      	b.n	80016a8 <HAL_RCC_OscConfig+0x52c>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b05      	cmp	r3, #5
 800165a:	d115      	bne.n	8001688 <HAL_RCC_OscConfig+0x50c>
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 800165e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001662:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001672:	4a03      	ldr	r2, [pc, #12]	; (8001680 <HAL_RCC_OscConfig+0x504>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800167c:	e014      	b.n	80016a8 <HAL_RCC_OscConfig+0x52c>
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	40007000 	.word	0x40007000
 8001688:	4b9a      	ldr	r3, [pc, #616]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168e:	4a99      	ldr	r2, [pc, #612]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001698:	4b96      	ldr	r3, [pc, #600]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169e:	4a95      	ldr	r2, [pc, #596]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d016      	beq.n	80016de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff f982 	bl	80009b8 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff f97e 	bl	80009b8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e162      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ce:	4b89      	ldr	r3, [pc, #548]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ed      	beq.n	80016b8 <HAL_RCC_OscConfig+0x53c>
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff f96b 	bl	80009b8 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff f967 	bl	80009b8 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e14b      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016fc:	4b7d      	ldr	r3, [pc, #500]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ed      	bne.n	80016e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800170a:	7ffb      	ldrb	r3, [r7, #31]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001710:	4b78      	ldr	r3, [pc, #480]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	4a77      	ldr	r2, [pc, #476]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 8001716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800171a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	2b00      	cmp	r3, #0
 800172e:	d01c      	beq.n	800176a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001730:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 8001732:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001736:	4a6f      	ldr	r2, [pc, #444]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	f7ff f93a 	bl	80009b8 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001748:	f7ff f936 	bl	80009b8 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e11c      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800175a:	4b66      	ldr	r3, [pc, #408]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 800175c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0ef      	beq.n	8001748 <HAL_RCC_OscConfig+0x5cc>
 8001768:	e01b      	b.n	80017a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800176a:	4b62      	ldr	r3, [pc, #392]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 800176c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001770:	4a60      	ldr	r2, [pc, #384]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177a:	f7ff f91d 	bl	80009b8 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001782:	f7ff f919 	bl	80009b8 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0ff      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001794:	4b57      	ldr	r3, [pc, #348]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 8001796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1ef      	bne.n	8001782 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80f3 	beq.w	8001992 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	f040 80c9 	bne.w	8001948 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017b6:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 0203 	and.w	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d12c      	bne.n	8001824 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	3b01      	subs	r3, #1
 80017d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d123      	bne.n	8001824 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d11b      	bne.n	8001824 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d113      	bne.n	8001824 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001806:	085b      	lsrs	r3, r3, #1
 8001808:	3b01      	subs	r3, #1
 800180a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d109      	bne.n	8001824 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	085b      	lsrs	r3, r3, #1
 800181c:	3b01      	subs	r3, #1
 800181e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d06b      	beq.n	80018fc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d062      	beq.n	80018f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800182a:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0ac      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800183a:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 8001840:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001844:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001846:	f7ff f8b7 	bl	80009b8 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff f8b3 	bl	80009b8 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e099      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f0      	bne.n	800184e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <HAL_RCC_OscConfig+0x77c>)
 8001872:	4013      	ands	r3, r2
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800187c:	3a01      	subs	r2, #1
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	4311      	orrs	r1, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001886:	0212      	lsls	r2, r2, #8
 8001888:	4311      	orrs	r1, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800188e:	0852      	lsrs	r2, r2, #1
 8001890:	3a01      	subs	r2, #1
 8001892:	0552      	lsls	r2, r2, #21
 8001894:	4311      	orrs	r1, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800189a:	0852      	lsrs	r2, r2, #1
 800189c:	3a01      	subs	r2, #1
 800189e:	0652      	lsls	r2, r2, #25
 80018a0:	4311      	orrs	r1, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018a6:	06d2      	lsls	r2, r2, #27
 80018a8:	430a      	orrs	r2, r1
 80018aa:	4912      	ldr	r1, [pc, #72]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 80018c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018c8:	f7ff f876 	bl	80009b8 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff f872 	bl	80009b8 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e058      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <HAL_RCC_OscConfig+0x778>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ee:	e050      	b.n	8001992 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e04f      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
 80018f4:	40021000 	.word	0x40021000
 80018f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_RCC_OscConfig+0x820>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d144      	bne.n	8001992 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_RCC_OscConfig+0x820>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a23      	ldr	r2, [pc, #140]	; (800199c <HAL_RCC_OscConfig+0x820>)
 800190e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001912:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_RCC_OscConfig+0x820>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4a20      	ldr	r2, [pc, #128]	; (800199c <HAL_RCC_OscConfig+0x820>)
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001920:	f7ff f84a 	bl	80009b8 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f846 	bl	80009b8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e02c      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_RCC_OscConfig+0x820>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x7ac>
 8001946:	e024      	b.n	8001992 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b0c      	cmp	r3, #12
 800194c:	d01f      	beq.n	800198e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_RCC_OscConfig+0x820>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <HAL_RCC_OscConfig+0x820>)
 8001954:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff f82d 	bl	80009b8 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff f829 	bl	80009b8 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e00f      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_RCC_OscConfig+0x820>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_RCC_OscConfig+0x820>)
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	4905      	ldr	r1, [pc, #20]	; (800199c <HAL_RCC_OscConfig+0x820>)
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_RCC_OscConfig+0x824>)
 8001988:	4013      	ands	r3, r2
 800198a:	60cb      	str	r3, [r1, #12]
 800198c:	e001      	b.n	8001992 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	feeefffc 	.word	0xfeeefffc

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0e7      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b75      	ldr	r3, [pc, #468]	; (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d910      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b72      	ldr	r3, [pc, #456]	; (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 0207 	bic.w	r2, r3, #7
 80019ce:	4970      	ldr	r1, [pc, #448]	; (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b6e      	ldr	r3, [pc, #440]	; (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0cf      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d010      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d908      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a04:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4960      	ldr	r1, [pc, #384]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d04c      	beq.n	8001abc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2a:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d121      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0a6      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a42:	4b54      	ldr	r3, [pc, #336]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d115      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e09a      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a5a:	4b4e      	ldr	r3, [pc, #312]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e08e      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6a:	4b4a      	ldr	r3, [pc, #296]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e086      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b46      	ldr	r3, [pc, #280]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4943      	ldr	r1, [pc, #268]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a8c:	f7fe ff94 	bl	80009b8 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7fe ff90 	bl	80009b8 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e06e      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 020c 	and.w	r2, r3, #12
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1eb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d010      	beq.n	8001aea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d208      	bcs.n	8001aea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	492b      	ldr	r1, [pc, #172]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aea:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d210      	bcs.n	8001b1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 0207 	bic.w	r2, r3, #7
 8001b00:	4923      	ldr	r1, [pc, #140]	; (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e036      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d008      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b26:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	4918      	ldr	r1, [pc, #96]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d009      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4910      	ldr	r1, [pc, #64]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b58:	f000 f824 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	091b      	lsrs	r3, r3, #4
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	490b      	ldr	r1, [pc, #44]	; (8001b98 <HAL_RCC_ClockConfig+0x1f4>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
 8001b74:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001b76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_RCC_ClockConfig+0x1fc>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fecb 	bl	8000918 <HAL_InitTick>
 8001b82:	4603      	mov	r3, r0
 8001b84:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b86:	7afb      	ldrb	r3, [r7, #11]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40022000 	.word	0x40022000
 8001b94:	40021000 	.word	0x40021000
 8001b98:	08003a54 	.word	0x08003a54
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000004 	.word	0x20000004

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb2:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d121      	bne.n	8001c16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d11e      	bne.n	8001c16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bd8:	4b34      	ldr	r3, [pc, #208]	; (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d107      	bne.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001be4:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	e005      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c00:	4a2b      	ldr	r2, [pc, #172]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10d      	bne.n	8001c2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c14:	e00a      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d102      	bne.n	8001c22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	e004      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c28:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d134      	bne.n	8001c9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d003      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d003      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0xac>
 8001c48:	e005      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c4c:	617b      	str	r3, [r7, #20]
      break;
 8001c4e:	e005      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c52:	617b      	str	r3, [r7, #20]
      break;
 8001c54:	e002      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	617b      	str	r3, [r7, #20]
      break;
 8001c5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c5c:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	3301      	adds	r3, #1
 8001c68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	fb03 f202 	mul.w	r2, r3, r2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	0e5b      	lsrs	r3, r3, #25
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c9c:	69bb      	ldr	r3, [r7, #24]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08003a6c 	.word	0x08003a6c
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	007a1200 	.word	0x007a1200

08001cbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4904      	ldr	r1, [pc, #16]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	f003 031f 	and.w	r3, r3, #31
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08003a64 	.word	0x08003a64

08001d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d04:	f7ff ffda 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0adb      	lsrs	r3, r3, #11
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4904      	ldr	r1, [pc, #16]	; (8001d28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08003a64 	.word	0x08003a64

08001d2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d44:	f7ff f9b6 	bl	80010b4 <HAL_PWREx_GetVoltageRange>
 8001d48:	6178      	str	r0, [r7, #20]
 8001d4a:	e014      	b.n	8001d76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	4a24      	ldr	r2, [pc, #144]	; (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d56:	6593      	str	r3, [r2, #88]	; 0x58
 8001d58:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d64:	f7ff f9a6 	bl	80010b4 <HAL_PWREx_GetVoltageRange>
 8001d68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d7c:	d10b      	bne.n	8001d96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b80      	cmp	r3, #128	; 0x80
 8001d82:	d919      	bls.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2ba0      	cmp	r3, #160	; 0xa0
 8001d88:	d902      	bls.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	e013      	b.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d90:	2301      	movs	r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	e010      	b.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b80      	cmp	r3, #128	; 0x80
 8001d9a:	d902      	bls.n	8001da2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	e00a      	b.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b80      	cmp	r3, #128	; 0x80
 8001da6:	d102      	bne.n	8001dae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001da8:	2302      	movs	r3, #2
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	e004      	b.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b70      	cmp	r3, #112	; 0x70
 8001db2:	d101      	bne.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001db4:	2301      	movs	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 0207 	bic.w	r2, r3, #7
 8001dc0:	4909      	ldr	r1, [pc, #36]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40022000 	.word	0x40022000

08001dec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001df4:	2300      	movs	r3, #0
 8001df6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001df8:	2300      	movs	r3, #0
 8001dfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d031      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e10:	d01a      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e16:	d814      	bhi.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e20:	d10f      	bne.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e22:	4b5d      	ldr	r3, [pc, #372]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	4a5c      	ldr	r2, [pc, #368]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e2e:	e00c      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3304      	adds	r3, #4
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 f9de 	bl	80021f8 <RCCEx_PLLSAI1_Config>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e40:	e003      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	74fb      	strb	r3, [r7, #19]
      break;
 8001e46:	e000      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e4a:	7cfb      	ldrb	r3, [r7, #19]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e50:	4b51      	ldr	r3, [pc, #324]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5e:	494e      	ldr	r1, [pc, #312]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e66:	e001      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e68:	7cfb      	ldrb	r3, [r7, #19]
 8001e6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 809e 	beq.w	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e7e:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00d      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	4a3f      	ldr	r2, [pc, #252]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea0:	4b3d      	ldr	r3, [pc, #244]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eac:	2301      	movs	r3, #1
 8001eae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb0:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a39      	ldr	r2, [pc, #228]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fd7c 	bl	80009b8 <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ec2:	e009      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec4:	f7fe fd78 	bl	80009b8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d902      	bls.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	74fb      	strb	r3, [r7, #19]
        break;
 8001ed6:	e005      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ed8:	4b30      	ldr	r3, [pc, #192]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ef      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001ee4:	7cfb      	ldrb	r3, [r7, #19]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d15a      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eea:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01e      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d019      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f10:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f12:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f18:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f32:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d016      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7fe fd38 	bl	80009b8 <HAL_GetTick>
 8001f48:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4c:	f7fe fd34 	bl	80009b8 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d902      	bls.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	74fb      	strb	r3, [r7, #19]
            break;
 8001f62:	e006      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0ec      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001f72:	7cfb      	ldrb	r3, [r7, #19]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10b      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f86:	4904      	ldr	r1, [pc, #16]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f8e:	e009      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	74bb      	strb	r3, [r7, #18]
 8001f94:	e006      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa4:	7c7b      	ldrb	r3, [r7, #17]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d105      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001faa:	4b8a      	ldr	r3, [pc, #552]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	4a89      	ldr	r2, [pc, #548]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc2:	4b84      	ldr	r3, [pc, #528]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc8:	f023 0203 	bic.w	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4980      	ldr	r1, [pc, #512]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fea:	f023 020c 	bic.w	r2, r3, #12
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	4978      	ldr	r1, [pc, #480]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002006:	4b73      	ldr	r3, [pc, #460]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	496f      	ldr	r1, [pc, #444]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00a      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002028:	4b6a      	ldr	r3, [pc, #424]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	4967      	ldr	r1, [pc, #412]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800204c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002050:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002058:	495e      	ldr	r1, [pc, #376]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800206c:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002072:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	4956      	ldr	r1, [pc, #344]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800208e:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002094:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	494d      	ldr	r1, [pc, #308]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d028      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020b0:	4b48      	ldr	r3, [pc, #288]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4945      	ldr	r1, [pc, #276]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ce:	d106      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020d0:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a3f      	ldr	r2, [pc, #252]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020da:	60d3      	str	r3, [r2, #12]
 80020dc:	e011      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020e6:	d10c      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	2101      	movs	r1, #1
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f882 	bl	80021f8 <RCCEx_PLLSAI1_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020f8:	7cfb      	ldrb	r3, [r7, #19]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80020fe:	7cfb      	ldrb	r3, [r7, #19]
 8002100:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d028      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800210e:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002114:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	492d      	ldr	r1, [pc, #180]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800212c:	d106      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800212e:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002138:	60d3      	str	r3, [r2, #12]
 800213a:	e011      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002144:	d10c      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3304      	adds	r3, #4
 800214a:	2101      	movs	r1, #1
 800214c:	4618      	mov	r0, r3
 800214e:	f000 f853 	bl	80021f8 <RCCEx_PLLSAI1_Config>
 8002152:	4603      	mov	r3, r0
 8002154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002156:	7cfb      	ldrb	r3, [r7, #19]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01c      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217a:	4916      	ldr	r1, [pc, #88]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800218a:	d10c      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3304      	adds	r3, #4
 8002190:	2102      	movs	r1, #2
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f830 	bl	80021f8 <RCCEx_PLLSAI1_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80021a2:	7cfb      	ldrb	r3, [r7, #19]
 80021a4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c0:	4904      	ldr	r1, [pc, #16]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000

080021d8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000

080021f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002206:	4b74      	ldr	r3, [pc, #464]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d018      	beq.n	8002244 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002212:	4b71      	ldr	r3, [pc, #452]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f003 0203 	and.w	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d10d      	bne.n	800223e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
       ||
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800222a:	4b6b      	ldr	r3, [pc, #428]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
       ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d047      	beq.n	80022ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	e044      	b.n	80022ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d018      	beq.n	800227e <RCCEx_PLLSAI1_Config+0x86>
 800224c:	2b03      	cmp	r3, #3
 800224e:	d825      	bhi.n	800229c <RCCEx_PLLSAI1_Config+0xa4>
 8002250:	2b01      	cmp	r3, #1
 8002252:	d002      	beq.n	800225a <RCCEx_PLLSAI1_Config+0x62>
 8002254:	2b02      	cmp	r3, #2
 8002256:	d009      	beq.n	800226c <RCCEx_PLLSAI1_Config+0x74>
 8002258:	e020      	b.n	800229c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800225a:	4b5f      	ldr	r3, [pc, #380]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d11d      	bne.n	80022a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800226a:	e01a      	b.n	80022a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800226c:	4b5a      	ldr	r3, [pc, #360]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002274:	2b00      	cmp	r3, #0
 8002276:	d116      	bne.n	80022a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800227c:	e013      	b.n	80022a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800227e:	4b56      	ldr	r3, [pc, #344]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10f      	bne.n	80022aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800228a:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800229a:	e006      	b.n	80022aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
      break;
 80022a0:	e004      	b.n	80022ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022a2:	bf00      	nop
 80022a4:	e002      	b.n	80022ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022a6:	bf00      	nop
 80022a8:	e000      	b.n	80022ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10d      	bne.n	80022ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022b2:	4b49      	ldr	r3, [pc, #292]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	430b      	orrs	r3, r1
 80022c8:	4943      	ldr	r1, [pc, #268]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d17c      	bne.n	80023ce <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022d4:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a3f      	ldr	r2, [pc, #252]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e0:	f7fe fb6a 	bl	80009b8 <HAL_GetTick>
 80022e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022e6:	e009      	b.n	80022fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022e8:	f7fe fb66 	bl	80009b8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d902      	bls.n	80022fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	73fb      	strb	r3, [r7, #15]
        break;
 80022fa:	e005      	b.n	8002308 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022fc:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ef      	bne.n	80022e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d15f      	bne.n	80023ce <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d110      	bne.n	8002336 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002314:	4b30      	ldr	r3, [pc, #192]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800231c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6892      	ldr	r2, [r2, #8]
 8002324:	0211      	lsls	r1, r2, #8
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68d2      	ldr	r2, [r2, #12]
 800232a:	06d2      	lsls	r2, r2, #27
 800232c:	430a      	orrs	r2, r1
 800232e:	492a      	ldr	r1, [pc, #168]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002330:	4313      	orrs	r3, r2
 8002332:	610b      	str	r3, [r1, #16]
 8002334:	e027      	b.n	8002386 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d112      	bne.n	8002362 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002344:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6892      	ldr	r2, [r2, #8]
 800234c:	0211      	lsls	r1, r2, #8
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6912      	ldr	r2, [r2, #16]
 8002352:	0852      	lsrs	r2, r2, #1
 8002354:	3a01      	subs	r2, #1
 8002356:	0552      	lsls	r2, r2, #21
 8002358:	430a      	orrs	r2, r1
 800235a:	491f      	ldr	r1, [pc, #124]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800235c:	4313      	orrs	r3, r2
 800235e:	610b      	str	r3, [r1, #16]
 8002360:	e011      	b.n	8002386 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002362:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800236a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6892      	ldr	r2, [r2, #8]
 8002372:	0211      	lsls	r1, r2, #8
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6952      	ldr	r2, [r2, #20]
 8002378:	0852      	lsrs	r2, r2, #1
 800237a:	3a01      	subs	r2, #1
 800237c:	0652      	lsls	r2, r2, #25
 800237e:	430a      	orrs	r2, r1
 8002380:	4915      	ldr	r1, [pc, #84]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002382:	4313      	orrs	r3, r2
 8002384:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800238c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002390:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002392:	f7fe fb11 	bl	80009b8 <HAL_GetTick>
 8002396:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002398:	e009      	b.n	80023ae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800239a:	f7fe fb0d 	bl	80009b8 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d902      	bls.n	80023ae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	73fb      	strb	r3, [r7, #15]
          break;
 80023ac:	e005      	b.n	80023ba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0ef      	beq.n	800239a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d106      	bne.n	80023ce <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	4903      	ldr	r1, [pc, #12]	; (80023d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000

080023dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d079      	beq.n	80024e2 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe f90e 	bl	8000624 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b10      	cmp	r3, #16
 800241c:	d058      	beq.n	80024d0 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	22ca      	movs	r2, #202	; 0xca
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2253      	movs	r2, #83	; 0x53
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f880 	bl	8002534 <RTC_EnterInitMode>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d127      	bne.n	800248e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800244c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002450:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68d2      	ldr	r2, [r2, #12]
 8002478:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6919      	ldr	r1, [r3, #16]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	041a      	lsls	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f884 	bl	800259c <RTC_ExitInitMode>
 8002494:	4603      	mov	r3, r0
 8002496:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d113      	bne.n	80024c6 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0203 	bic.w	r2, r2, #3
 80024ac:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	22ff      	movs	r2, #255	; 0xff
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
 80024ce:	e001      	b.n	80024d4 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <HAL_RTC_WaitForSynchro+0x44>)
 80024fa:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80024fc:	f7fe fa5c 	bl	80009b8 <HAL_GetTick>
 8002500:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002502:	e009      	b.n	8002518 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002504:	f7fe fa58 	bl	80009b8 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002512:	d901      	bls.n	8002518 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e007      	b.n	8002528 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0ee      	beq.n	8002504 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	0003ff5f 	.word	0x0003ff5f

08002534 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d120      	bne.n	8002590 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f04f 32ff 	mov.w	r2, #4294967295
 8002556:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002558:	f7fe fa2e 	bl	80009b8 <HAL_GetTick>
 800255c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800255e:	e00d      	b.n	800257c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002560:	f7fe fa2a 	bl	80009b8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800256e:	d905      	bls.n	800257c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2203      	movs	r2, #3
 8002578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <RTC_EnterInitMode+0x5c>
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d1e7      	bne.n	8002560 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80025a8:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <RTC_ExitInitMode+0x78>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <RTC_ExitInitMode+0x78>)
 80025ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80025b4:	4b17      	ldr	r3, [pc, #92]	; (8002614 <RTC_ExitInitMode+0x78>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10c      	bne.n	80025da <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff93 	bl	80024ec <HAL_RTC_WaitForSynchro>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01e      	beq.n	800260a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2203      	movs	r2, #3
 80025d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	73fb      	strb	r3, [r7, #15]
 80025d8:	e017      	b.n	800260a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <RTC_ExitInitMode+0x78>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <RTC_ExitInitMode+0x78>)
 80025e0:	f023 0320 	bic.w	r3, r3, #32
 80025e4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff80 	bl	80024ec <HAL_RTC_WaitForSynchro>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2203      	movs	r2, #3
 80025f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <RTC_ExitInitMode+0x78>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	4a04      	ldr	r2, [pc, #16]	; (8002614 <RTC_ExitInitMode+0x78>)
 8002604:	f043 0320 	orr.w	r3, r3, #32
 8002608:	6093      	str	r3, [r2, #8]
  }

  return status;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40002800 	.word	0x40002800

08002618 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800262e:	2302      	movs	r3, #2
 8002630:	e07f      	b.n	8002732 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2202      	movs	r2, #2
 800263e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	22ca      	movs	r2, #202	; 0xca
 8002648:	625a      	str	r2, [r3, #36]	; 0x24
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2253      	movs	r2, #83	; 0x53
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002660:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002672:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d120      	bne.n	80026c4 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8002682:	f7fe f999 	bl	80009b8 <HAL_GetTick>
 8002686:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002688:	e015      	b.n	80026b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800268a:	f7fe f995 	bl	80009b8 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002698:	d90d      	bls.n	80026b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	22ff      	movs	r2, #255	; 0xff
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2203      	movs	r2, #3
 80026a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e03d      	b.n	8002732 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0e2      	beq.n	800268a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0107 	bic.w	r1, r3, #7
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a15      	ldr	r2, [pc, #84]	; (800273c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80026e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ea:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4a12      	ldr	r2, [pc, #72]	; (800273c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80026f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026f6:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002706:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002716:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	22ff      	movs	r2, #255	; 0xff
 800271e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40010400 	.word	0x40010400

08002740 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800274a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800274e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	b2da      	uxtb	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800276e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f80b 	bl	800278c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40010400 	.word	0x40010400

0800278c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e03c      	b.n	800282c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fd ff64 	bl	8000694 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fa97 	bl	8002d18 <USART_SetConfig>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e01b      	b.n	800282c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002802:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002812:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fba5 	bl	8002f74 <USART_CheckIdleState>
 800282a:	4603      	mov	r3, r0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b01      	cmp	r3, #1
 800284e:	f040 809a 	bne.w	8002986 <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_USART_Transmit+0x2a>
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e092      	b.n	8002988 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_USART_Transmit+0x3c>
 800286c:	2302      	movs	r3, #2
 800286e:	e08b      	b.n	8002988 <HAL_USART_Transmit+0x154>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2212      	movs	r2, #18
 8002882:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002886:	f7fe f897 	bl	80009b8 <HAL_GetTick>
 800288a:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a0:	d108      	bne.n	80028b4 <HAL_USART_Transmit+0x80>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e003      	b.n	80028bc <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80028bc:	e02b      	b.n	8002916 <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2180      	movs	r1, #128	; 0x80
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f9ef 	bl	8002cac <USART_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e057      	b.n	8002988 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10b      	bne.n	80028f6 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ea:	b292      	uxth	r2, r2
 80028ec:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	3302      	adds	r3, #2
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	e008      	b.n	8002908 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	b292      	uxth	r2, r2
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3301      	adds	r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ce      	bne.n	80028be <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2200      	movs	r2, #0
 8002928:	2140      	movs	r1, #64	; 0x40
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f9be 	bl	8002cac <USART_WaitOnFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e026      	b.n	8002988 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2240      	movs	r2, #64	; 0x40
 8002940:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2208      	movs	r2, #8
 8002948:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	8b1b      	ldrh	r3, [r3, #24]
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0208 	orr.w	r2, r2, #8
 800295a:	b292      	uxth	r2, r2
 800295c:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	8b1b      	ldrh	r3, [r3, #24]
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0210 	orr.w	r2, r2, #16
 800296e:	b292      	uxth	r2, r2
 8002970:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e000      	b.n	8002988 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
  }
}
 8002988:	4618      	mov	r0, r3
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	617b      	str	r3, [r7, #20]
  /* If no error occurs */
#if defined(USART_CR2_SLVEN)
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
                                      USART_ISR_UDR));
#else
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
#endif /* USART_CR2_SLVEN */
  if (errorflags == 0U)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d113      	bne.n	80029e8 <HAL_USART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00e      	beq.n	80029e8 <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d009      	beq.n	80029e8 <HAL_USART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (husart->RxISR != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 810d 	beq.w	8002bf8 <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	4798      	blx	r3
      }
      return;
 80029e6:	e107      	b.n	8002bf8 <HAL_USART_IRQHandler+0x268>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
#else
  if ((errorflags != 0U)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80e3 	beq.w	8002bb6 <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80d8 	beq.w	8002bb6 <HAL_USART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00e      	beq.n	8002a2e <HAL_USART_IRQHandler+0x9e>
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00e      	beq.n	8002a56 <HAL_USART_IRQHandler+0xc6>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2202      	movs	r2, #2
 8002a48:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	f043 0204 	orr.w	r2, r3, #4
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <HAL_USART_IRQHandler+0xee>
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2204      	movs	r2, #4
 8002a70:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	f043 0202 	orr.w	r2, r3, #2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	64da      	str	r2, [r3, #76]	; 0x4c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d013      	beq.n	8002ab0 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d104      	bne.n	8002a9c <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d009      	beq.n	8002ab0 <HAL_USART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa8:	f043 0208 	orr.w	r2, r3, #8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00f      	beq.n	8002ada <HAL_USART_IRQHandler+0x14a>
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002acc:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
#endif /* USART_CR2_SLVEN */

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 808c 	beq.w	8002bfc <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00c      	beq.n	8002b08 <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_USART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (husart->RxISR != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d002      	beq.n	8002b26 <HAL_USART_IRQHandler+0x196>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d03e      	beq.n	8002ba4 <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f88e 	bl	8002c48 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d130      	bne.n	8002b9c <HAL_USART_IRQHandler+0x20c>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b48:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	2200      	movs	r2, #0
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe f86b 	bl	8000c3a <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d013      	beq.n	8002b94 <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	4a25      	ldr	r2, [pc, #148]	; (8002c08 <HAL_USART_IRQHandler+0x278>)
 8002b72:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe f85e 	bl	8000c3a <HAL_DMA_Abort_IT>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d016      	beq.n	8002bb2 <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002b92:	e00e      	b.n	8002bb2 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f84d 	bl	8002c34 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002b9a:	e00a      	b.n	8002bb2 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f849 	bl	8002c34 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002ba2:	e006      	b.n	8002bb2 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f845 	bl	8002c34 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    return;
 8002bb0:	e024      	b.n	8002bfc <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002bb2:	bf00      	nop
    return;
 8002bb4:	e022      	b.n	8002bfc <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00d      	beq.n	8002bdc <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_USART_IRQHandler+0x24c>
#endif /* USART_CR1_FIFOEN */
  {
    if (husart->TxISR != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
    }
    return;
 8002bda:	e011      	b.n	8002c00 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00d      	beq.n	8002c02 <HAL_USART_IRQHandler+0x272>
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fa02 	bl	8002ffa <USART_EndTransmit_IT>
    return;
 8002bf6:	e004      	b.n	8002c02 <HAL_USART_IRQHandler+0x272>
      return;
 8002bf8:	bf00      	nop
 8002bfa:	e002      	b.n	8002c02 <HAL_USART_IRQHandler+0x272>
    return;
 8002bfc:	bf00      	nop
 8002bfe:	e000      	b.n	8002c02 <HAL_USART_IRQHandler+0x272>
    return;
 8002c00:	bf00      	nop
    HAL_USARTEx_RxFifoFullCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002c02:	3720      	adds	r7, #32
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	08002c85 	.word	0x08002c85

08002c0c <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8002c5e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7ff ffc8 	bl	8002c34 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002cbc:	e018      	b.n	8002cf0 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d014      	beq.n	8002cf0 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7fd fe77 	bl	80009b8 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <USART_WaitOnFlagUntilTimeout+0x30>
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e00f      	b.n	8002d10 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d0d7      	beq.n	8002cbe <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b87      	ldr	r3, [pc, #540]	; (8002f64 <USART_SetConfig+0x24c>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	6979      	ldr	r1, [r7, #20]
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8002d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d56:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a74      	ldr	r2, [pc, #464]	; (8002f68 <USART_SetConfig+0x250>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d121      	bne.n	8002dde <USART_SetConfig+0xc6>
 8002d9a:	4b74      	ldr	r3, [pc, #464]	; (8002f6c <USART_SetConfig+0x254>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d817      	bhi.n	8002dd8 <USART_SetConfig+0xc0>
 8002da8:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <USART_SetConfig+0x98>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002dc1 	.word	0x08002dc1
 8002db4:	08002dcd 	.word	0x08002dcd
 8002db8:	08002dc7 	.word	0x08002dc7
 8002dbc:	08002dd3 	.word	0x08002dd3
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	77fb      	strb	r3, [r7, #31]
 8002dc4:	e045      	b.n	8002e52 <USART_SetConfig+0x13a>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	77fb      	strb	r3, [r7, #31]
 8002dca:	e042      	b.n	8002e52 <USART_SetConfig+0x13a>
 8002dcc:	2304      	movs	r3, #4
 8002dce:	77fb      	strb	r3, [r7, #31]
 8002dd0:	e03f      	b.n	8002e52 <USART_SetConfig+0x13a>
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	77fb      	strb	r3, [r7, #31]
 8002dd6:	e03c      	b.n	8002e52 <USART_SetConfig+0x13a>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e039      	b.n	8002e52 <USART_SetConfig+0x13a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a63      	ldr	r2, [pc, #396]	; (8002f70 <USART_SetConfig+0x258>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d132      	bne.n	8002e4e <USART_SetConfig+0x136>
 8002de8:	4b60      	ldr	r3, [pc, #384]	; (8002f6c <USART_SetConfig+0x254>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d828      	bhi.n	8002e48 <USART_SetConfig+0x130>
 8002df6:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <USART_SetConfig+0xe4>)
 8002df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfc:	08002e31 	.word	0x08002e31
 8002e00:	08002e49 	.word	0x08002e49
 8002e04:	08002e49 	.word	0x08002e49
 8002e08:	08002e49 	.word	0x08002e49
 8002e0c:	08002e3d 	.word	0x08002e3d
 8002e10:	08002e49 	.word	0x08002e49
 8002e14:	08002e49 	.word	0x08002e49
 8002e18:	08002e49 	.word	0x08002e49
 8002e1c:	08002e37 	.word	0x08002e37
 8002e20:	08002e49 	.word	0x08002e49
 8002e24:	08002e49 	.word	0x08002e49
 8002e28:	08002e49 	.word	0x08002e49
 8002e2c:	08002e43 	.word	0x08002e43
 8002e30:	2300      	movs	r3, #0
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e00d      	b.n	8002e52 <USART_SetConfig+0x13a>
 8002e36:	2302      	movs	r3, #2
 8002e38:	77fb      	strb	r3, [r7, #31]
 8002e3a:	e00a      	b.n	8002e52 <USART_SetConfig+0x13a>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e007      	b.n	8002e52 <USART_SetConfig+0x13a>
 8002e42:	2308      	movs	r3, #8
 8002e44:	77fb      	strb	r3, [r7, #31]
 8002e46:	e004      	b.n	8002e52 <USART_SetConfig+0x13a>
 8002e48:	2310      	movs	r3, #16
 8002e4a:	77fb      	strb	r3, [r7, #31]
 8002e4c:	e001      	b.n	8002e52 <USART_SetConfig+0x13a>
 8002e4e:	2310      	movs	r3, #16
 8002e50:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8002e52:	7ffb      	ldrb	r3, [r7, #31]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d85a      	bhi.n	8002f0e <USART_SetConfig+0x1f6>
 8002e58:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <USART_SetConfig+0x148>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e85 	.word	0x08002e85
 8002e64:	08002ea3 	.word	0x08002ea3
 8002e68:	08002ec1 	.word	0x08002ec1
 8002e6c:	08002f0f 	.word	0x08002f0f
 8002e70:	08002edb 	.word	0x08002edb
 8002e74:	08002f0f 	.word	0x08002f0f
 8002e78:	08002f0f 	.word	0x08002f0f
 8002e7c:	08002f0f 	.word	0x08002f0f
 8002e80:	08002ef9 	.word	0x08002ef9
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e84:	f7fe ff26 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8002e88:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	005a      	lsls	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	441a      	add	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8002ea0:	e038      	b.n	8002f14 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ea2:	f7fe ff2d 	bl	8001d00 <HAL_RCC_GetPCLK2Freq>
 8002ea6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	005a      	lsls	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	441a      	add	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8002ebe:	e029      	b.n	8002f14 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002eca:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6852      	ldr	r2, [r2, #4]
 8002ed2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8002ed8:	e01c      	b.n	8002f14 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8002eda:	f7fe fe63 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8002ede:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	005a      	lsls	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	441a      	add	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8002ef6:	e00d      	b.n	8002f14 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8002f0c:	e002      	b.n	8002f14 <USART_SetConfig+0x1fc>
    default:
      ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	77bb      	strb	r3, [r7, #30]
      break;
 8002f12:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	d916      	bls.n	8002f48 <USART_SetConfig+0x230>
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f20:	d212      	bcs.n	8002f48 <USART_SetConfig+0x230>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	f023 030f 	bic.w	r3, r3, #15
 8002f2a:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	89fb      	ldrh	r3, [r7, #14]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	89fa      	ldrh	r2, [r7, #14]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	e001      	b.n	8002f4c <USART_SetConfig+0x234>
  }
  else
  {
    ret = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8002f58:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	efff69f3 	.word	0xefff69f3
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40004400 	.word	0x40004400

08002f74 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f82:	f7fd fd19 	bl	80009b8 <HAL_GetTick>
 8002f86:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d10e      	bne.n	8002fb4 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff fe81 	bl	8002cac <USART_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e01e      	b.n	8002ff2 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d10e      	bne.n	8002fe0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff fe6b 	bl	8002cac <USART_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e008      	b.n	8002ff2 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003010:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	63da      	str	r2, [r3, #60]	; 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b12      	cmp	r3, #18
 8003032:	d115      	bne.n	8003060 <USART_EndTransmit_IT+0x66>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2208      	movs	r2, #8
 800303a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	8b1b      	ldrh	r3, [r3, #24]
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0208 	orr.w	r2, r2, #8
 800304c:	b292      	uxth	r2, r2
 800304e:	831a      	strh	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff fdd7 	bl	8002c0c <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800305e:	e00b      	b.n	8003078 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    HAL_USART_TxRxCpltCallback(husart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fdd4 	bl	8002c20 <HAL_USART_TxRxCpltCallback>
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <siprintf>:
 8003080:	b40e      	push	{r1, r2, r3}
 8003082:	b500      	push	{lr}
 8003084:	b09c      	sub	sp, #112	; 0x70
 8003086:	ab1d      	add	r3, sp, #116	; 0x74
 8003088:	9002      	str	r0, [sp, #8]
 800308a:	9006      	str	r0, [sp, #24]
 800308c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003090:	4809      	ldr	r0, [pc, #36]	; (80030b8 <siprintf+0x38>)
 8003092:	9107      	str	r1, [sp, #28]
 8003094:	9104      	str	r1, [sp, #16]
 8003096:	4909      	ldr	r1, [pc, #36]	; (80030bc <siprintf+0x3c>)
 8003098:	f853 2b04 	ldr.w	r2, [r3], #4
 800309c:	9105      	str	r1, [sp, #20]
 800309e:	6800      	ldr	r0, [r0, #0]
 80030a0:	9301      	str	r3, [sp, #4]
 80030a2:	a902      	add	r1, sp, #8
 80030a4:	f000 f992 	bl	80033cc <_svfiprintf_r>
 80030a8:	9b02      	ldr	r3, [sp, #8]
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	b01c      	add	sp, #112	; 0x70
 80030b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80030b4:	b003      	add	sp, #12
 80030b6:	4770      	bx	lr
 80030b8:	20000058 	.word	0x20000058
 80030bc:	ffff0208 	.word	0xffff0208

080030c0 <memset>:
 80030c0:	4402      	add	r2, r0
 80030c2:	4603      	mov	r3, r0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d100      	bne.n	80030ca <memset+0xa>
 80030c8:	4770      	bx	lr
 80030ca:	f803 1b01 	strb.w	r1, [r3], #1
 80030ce:	e7f9      	b.n	80030c4 <memset+0x4>

080030d0 <__errno>:
 80030d0:	4b01      	ldr	r3, [pc, #4]	; (80030d8 <__errno+0x8>)
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000058 	.word	0x20000058

080030dc <__libc_init_array>:
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	4d0d      	ldr	r5, [pc, #52]	; (8003114 <__libc_init_array+0x38>)
 80030e0:	4c0d      	ldr	r4, [pc, #52]	; (8003118 <__libc_init_array+0x3c>)
 80030e2:	1b64      	subs	r4, r4, r5
 80030e4:	10a4      	asrs	r4, r4, #2
 80030e6:	2600      	movs	r6, #0
 80030e8:	42a6      	cmp	r6, r4
 80030ea:	d109      	bne.n	8003100 <__libc_init_array+0x24>
 80030ec:	4d0b      	ldr	r5, [pc, #44]	; (800311c <__libc_init_array+0x40>)
 80030ee:	4c0c      	ldr	r4, [pc, #48]	; (8003120 <__libc_init_array+0x44>)
 80030f0:	f000 fc6a 	bl	80039c8 <_init>
 80030f4:	1b64      	subs	r4, r4, r5
 80030f6:	10a4      	asrs	r4, r4, #2
 80030f8:	2600      	movs	r6, #0
 80030fa:	42a6      	cmp	r6, r4
 80030fc:	d105      	bne.n	800310a <__libc_init_array+0x2e>
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
 8003100:	f855 3b04 	ldr.w	r3, [r5], #4
 8003104:	4798      	blx	r3
 8003106:	3601      	adds	r6, #1
 8003108:	e7ee      	b.n	80030e8 <__libc_init_array+0xc>
 800310a:	f855 3b04 	ldr.w	r3, [r5], #4
 800310e:	4798      	blx	r3
 8003110:	3601      	adds	r6, #1
 8003112:	e7f2      	b.n	80030fa <__libc_init_array+0x1e>
 8003114:	08003ad0 	.word	0x08003ad0
 8003118:	08003ad0 	.word	0x08003ad0
 800311c:	08003ad0 	.word	0x08003ad0
 8003120:	08003ad4 	.word	0x08003ad4

08003124 <__retarget_lock_acquire_recursive>:
 8003124:	4770      	bx	lr

08003126 <__retarget_lock_release_recursive>:
 8003126:	4770      	bx	lr

08003128 <_free_r>:
 8003128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800312a:	2900      	cmp	r1, #0
 800312c:	d044      	beq.n	80031b8 <_free_r+0x90>
 800312e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003132:	9001      	str	r0, [sp, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f1a1 0404 	sub.w	r4, r1, #4
 800313a:	bfb8      	it	lt
 800313c:	18e4      	addlt	r4, r4, r3
 800313e:	f000 f8df 	bl	8003300 <__malloc_lock>
 8003142:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <_free_r+0x94>)
 8003144:	9801      	ldr	r0, [sp, #4]
 8003146:	6813      	ldr	r3, [r2, #0]
 8003148:	b933      	cbnz	r3, 8003158 <_free_r+0x30>
 800314a:	6063      	str	r3, [r4, #4]
 800314c:	6014      	str	r4, [r2, #0]
 800314e:	b003      	add	sp, #12
 8003150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003154:	f000 b8da 	b.w	800330c <__malloc_unlock>
 8003158:	42a3      	cmp	r3, r4
 800315a:	d908      	bls.n	800316e <_free_r+0x46>
 800315c:	6825      	ldr	r5, [r4, #0]
 800315e:	1961      	adds	r1, r4, r5
 8003160:	428b      	cmp	r3, r1
 8003162:	bf01      	itttt	eq
 8003164:	6819      	ldreq	r1, [r3, #0]
 8003166:	685b      	ldreq	r3, [r3, #4]
 8003168:	1949      	addeq	r1, r1, r5
 800316a:	6021      	streq	r1, [r4, #0]
 800316c:	e7ed      	b.n	800314a <_free_r+0x22>
 800316e:	461a      	mov	r2, r3
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	b10b      	cbz	r3, 8003178 <_free_r+0x50>
 8003174:	42a3      	cmp	r3, r4
 8003176:	d9fa      	bls.n	800316e <_free_r+0x46>
 8003178:	6811      	ldr	r1, [r2, #0]
 800317a:	1855      	adds	r5, r2, r1
 800317c:	42a5      	cmp	r5, r4
 800317e:	d10b      	bne.n	8003198 <_free_r+0x70>
 8003180:	6824      	ldr	r4, [r4, #0]
 8003182:	4421      	add	r1, r4
 8003184:	1854      	adds	r4, r2, r1
 8003186:	42a3      	cmp	r3, r4
 8003188:	6011      	str	r1, [r2, #0]
 800318a:	d1e0      	bne.n	800314e <_free_r+0x26>
 800318c:	681c      	ldr	r4, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	6053      	str	r3, [r2, #4]
 8003192:	440c      	add	r4, r1
 8003194:	6014      	str	r4, [r2, #0]
 8003196:	e7da      	b.n	800314e <_free_r+0x26>
 8003198:	d902      	bls.n	80031a0 <_free_r+0x78>
 800319a:	230c      	movs	r3, #12
 800319c:	6003      	str	r3, [r0, #0]
 800319e:	e7d6      	b.n	800314e <_free_r+0x26>
 80031a0:	6825      	ldr	r5, [r4, #0]
 80031a2:	1961      	adds	r1, r4, r5
 80031a4:	428b      	cmp	r3, r1
 80031a6:	bf04      	itt	eq
 80031a8:	6819      	ldreq	r1, [r3, #0]
 80031aa:	685b      	ldreq	r3, [r3, #4]
 80031ac:	6063      	str	r3, [r4, #4]
 80031ae:	bf04      	itt	eq
 80031b0:	1949      	addeq	r1, r1, r5
 80031b2:	6021      	streq	r1, [r4, #0]
 80031b4:	6054      	str	r4, [r2, #4]
 80031b6:	e7ca      	b.n	800314e <_free_r+0x26>
 80031b8:	b003      	add	sp, #12
 80031ba:	bd30      	pop	{r4, r5, pc}
 80031bc:	20000234 	.word	0x20000234

080031c0 <sbrk_aligned>:
 80031c0:	b570      	push	{r4, r5, r6, lr}
 80031c2:	4e0e      	ldr	r6, [pc, #56]	; (80031fc <sbrk_aligned+0x3c>)
 80031c4:	460c      	mov	r4, r1
 80031c6:	6831      	ldr	r1, [r6, #0]
 80031c8:	4605      	mov	r5, r0
 80031ca:	b911      	cbnz	r1, 80031d2 <sbrk_aligned+0x12>
 80031cc:	f000 fba6 	bl	800391c <_sbrk_r>
 80031d0:	6030      	str	r0, [r6, #0]
 80031d2:	4621      	mov	r1, r4
 80031d4:	4628      	mov	r0, r5
 80031d6:	f000 fba1 	bl	800391c <_sbrk_r>
 80031da:	1c43      	adds	r3, r0, #1
 80031dc:	d00a      	beq.n	80031f4 <sbrk_aligned+0x34>
 80031de:	1cc4      	adds	r4, r0, #3
 80031e0:	f024 0403 	bic.w	r4, r4, #3
 80031e4:	42a0      	cmp	r0, r4
 80031e6:	d007      	beq.n	80031f8 <sbrk_aligned+0x38>
 80031e8:	1a21      	subs	r1, r4, r0
 80031ea:	4628      	mov	r0, r5
 80031ec:	f000 fb96 	bl	800391c <_sbrk_r>
 80031f0:	3001      	adds	r0, #1
 80031f2:	d101      	bne.n	80031f8 <sbrk_aligned+0x38>
 80031f4:	f04f 34ff 	mov.w	r4, #4294967295
 80031f8:	4620      	mov	r0, r4
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
 80031fc:	20000238 	.word	0x20000238

08003200 <_malloc_r>:
 8003200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003204:	1ccd      	adds	r5, r1, #3
 8003206:	f025 0503 	bic.w	r5, r5, #3
 800320a:	3508      	adds	r5, #8
 800320c:	2d0c      	cmp	r5, #12
 800320e:	bf38      	it	cc
 8003210:	250c      	movcc	r5, #12
 8003212:	2d00      	cmp	r5, #0
 8003214:	4607      	mov	r7, r0
 8003216:	db01      	blt.n	800321c <_malloc_r+0x1c>
 8003218:	42a9      	cmp	r1, r5
 800321a:	d905      	bls.n	8003228 <_malloc_r+0x28>
 800321c:	230c      	movs	r3, #12
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	2600      	movs	r6, #0
 8003222:	4630      	mov	r0, r6
 8003224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003228:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80032fc <_malloc_r+0xfc>
 800322c:	f000 f868 	bl	8003300 <__malloc_lock>
 8003230:	f8d8 3000 	ldr.w	r3, [r8]
 8003234:	461c      	mov	r4, r3
 8003236:	bb5c      	cbnz	r4, 8003290 <_malloc_r+0x90>
 8003238:	4629      	mov	r1, r5
 800323a:	4638      	mov	r0, r7
 800323c:	f7ff ffc0 	bl	80031c0 <sbrk_aligned>
 8003240:	1c43      	adds	r3, r0, #1
 8003242:	4604      	mov	r4, r0
 8003244:	d155      	bne.n	80032f2 <_malloc_r+0xf2>
 8003246:	f8d8 4000 	ldr.w	r4, [r8]
 800324a:	4626      	mov	r6, r4
 800324c:	2e00      	cmp	r6, #0
 800324e:	d145      	bne.n	80032dc <_malloc_r+0xdc>
 8003250:	2c00      	cmp	r4, #0
 8003252:	d048      	beq.n	80032e6 <_malloc_r+0xe6>
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	4631      	mov	r1, r6
 8003258:	4638      	mov	r0, r7
 800325a:	eb04 0903 	add.w	r9, r4, r3
 800325e:	f000 fb5d 	bl	800391c <_sbrk_r>
 8003262:	4581      	cmp	r9, r0
 8003264:	d13f      	bne.n	80032e6 <_malloc_r+0xe6>
 8003266:	6821      	ldr	r1, [r4, #0]
 8003268:	1a6d      	subs	r5, r5, r1
 800326a:	4629      	mov	r1, r5
 800326c:	4638      	mov	r0, r7
 800326e:	f7ff ffa7 	bl	80031c0 <sbrk_aligned>
 8003272:	3001      	adds	r0, #1
 8003274:	d037      	beq.n	80032e6 <_malloc_r+0xe6>
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	442b      	add	r3, r5
 800327a:	6023      	str	r3, [r4, #0]
 800327c:	f8d8 3000 	ldr.w	r3, [r8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d038      	beq.n	80032f6 <_malloc_r+0xf6>
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	42a2      	cmp	r2, r4
 8003288:	d12b      	bne.n	80032e2 <_malloc_r+0xe2>
 800328a:	2200      	movs	r2, #0
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	e00f      	b.n	80032b0 <_malloc_r+0xb0>
 8003290:	6822      	ldr	r2, [r4, #0]
 8003292:	1b52      	subs	r2, r2, r5
 8003294:	d41f      	bmi.n	80032d6 <_malloc_r+0xd6>
 8003296:	2a0b      	cmp	r2, #11
 8003298:	d917      	bls.n	80032ca <_malloc_r+0xca>
 800329a:	1961      	adds	r1, r4, r5
 800329c:	42a3      	cmp	r3, r4
 800329e:	6025      	str	r5, [r4, #0]
 80032a0:	bf18      	it	ne
 80032a2:	6059      	strne	r1, [r3, #4]
 80032a4:	6863      	ldr	r3, [r4, #4]
 80032a6:	bf08      	it	eq
 80032a8:	f8c8 1000 	streq.w	r1, [r8]
 80032ac:	5162      	str	r2, [r4, r5]
 80032ae:	604b      	str	r3, [r1, #4]
 80032b0:	4638      	mov	r0, r7
 80032b2:	f104 060b 	add.w	r6, r4, #11
 80032b6:	f000 f829 	bl	800330c <__malloc_unlock>
 80032ba:	f026 0607 	bic.w	r6, r6, #7
 80032be:	1d23      	adds	r3, r4, #4
 80032c0:	1af2      	subs	r2, r6, r3
 80032c2:	d0ae      	beq.n	8003222 <_malloc_r+0x22>
 80032c4:	1b9b      	subs	r3, r3, r6
 80032c6:	50a3      	str	r3, [r4, r2]
 80032c8:	e7ab      	b.n	8003222 <_malloc_r+0x22>
 80032ca:	42a3      	cmp	r3, r4
 80032cc:	6862      	ldr	r2, [r4, #4]
 80032ce:	d1dd      	bne.n	800328c <_malloc_r+0x8c>
 80032d0:	f8c8 2000 	str.w	r2, [r8]
 80032d4:	e7ec      	b.n	80032b0 <_malloc_r+0xb0>
 80032d6:	4623      	mov	r3, r4
 80032d8:	6864      	ldr	r4, [r4, #4]
 80032da:	e7ac      	b.n	8003236 <_malloc_r+0x36>
 80032dc:	4634      	mov	r4, r6
 80032de:	6876      	ldr	r6, [r6, #4]
 80032e0:	e7b4      	b.n	800324c <_malloc_r+0x4c>
 80032e2:	4613      	mov	r3, r2
 80032e4:	e7cc      	b.n	8003280 <_malloc_r+0x80>
 80032e6:	230c      	movs	r3, #12
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	4638      	mov	r0, r7
 80032ec:	f000 f80e 	bl	800330c <__malloc_unlock>
 80032f0:	e797      	b.n	8003222 <_malloc_r+0x22>
 80032f2:	6025      	str	r5, [r4, #0]
 80032f4:	e7dc      	b.n	80032b0 <_malloc_r+0xb0>
 80032f6:	605b      	str	r3, [r3, #4]
 80032f8:	deff      	udf	#255	; 0xff
 80032fa:	bf00      	nop
 80032fc:	20000234 	.word	0x20000234

08003300 <__malloc_lock>:
 8003300:	4801      	ldr	r0, [pc, #4]	; (8003308 <__malloc_lock+0x8>)
 8003302:	f7ff bf0f 	b.w	8003124 <__retarget_lock_acquire_recursive>
 8003306:	bf00      	nop
 8003308:	20000230 	.word	0x20000230

0800330c <__malloc_unlock>:
 800330c:	4801      	ldr	r0, [pc, #4]	; (8003314 <__malloc_unlock+0x8>)
 800330e:	f7ff bf0a 	b.w	8003126 <__retarget_lock_release_recursive>
 8003312:	bf00      	nop
 8003314:	20000230 	.word	0x20000230

08003318 <__ssputs_r>:
 8003318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800331c:	688e      	ldr	r6, [r1, #8]
 800331e:	461f      	mov	r7, r3
 8003320:	42be      	cmp	r6, r7
 8003322:	680b      	ldr	r3, [r1, #0]
 8003324:	4682      	mov	sl, r0
 8003326:	460c      	mov	r4, r1
 8003328:	4690      	mov	r8, r2
 800332a:	d82c      	bhi.n	8003386 <__ssputs_r+0x6e>
 800332c:	898a      	ldrh	r2, [r1, #12]
 800332e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003332:	d026      	beq.n	8003382 <__ssputs_r+0x6a>
 8003334:	6965      	ldr	r5, [r4, #20]
 8003336:	6909      	ldr	r1, [r1, #16]
 8003338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800333c:	eba3 0901 	sub.w	r9, r3, r1
 8003340:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003344:	1c7b      	adds	r3, r7, #1
 8003346:	444b      	add	r3, r9
 8003348:	106d      	asrs	r5, r5, #1
 800334a:	429d      	cmp	r5, r3
 800334c:	bf38      	it	cc
 800334e:	461d      	movcc	r5, r3
 8003350:	0553      	lsls	r3, r2, #21
 8003352:	d527      	bpl.n	80033a4 <__ssputs_r+0x8c>
 8003354:	4629      	mov	r1, r5
 8003356:	f7ff ff53 	bl	8003200 <_malloc_r>
 800335a:	4606      	mov	r6, r0
 800335c:	b360      	cbz	r0, 80033b8 <__ssputs_r+0xa0>
 800335e:	6921      	ldr	r1, [r4, #16]
 8003360:	464a      	mov	r2, r9
 8003362:	f000 faeb 	bl	800393c <memcpy>
 8003366:	89a3      	ldrh	r3, [r4, #12]
 8003368:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800336c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003370:	81a3      	strh	r3, [r4, #12]
 8003372:	6126      	str	r6, [r4, #16]
 8003374:	6165      	str	r5, [r4, #20]
 8003376:	444e      	add	r6, r9
 8003378:	eba5 0509 	sub.w	r5, r5, r9
 800337c:	6026      	str	r6, [r4, #0]
 800337e:	60a5      	str	r5, [r4, #8]
 8003380:	463e      	mov	r6, r7
 8003382:	42be      	cmp	r6, r7
 8003384:	d900      	bls.n	8003388 <__ssputs_r+0x70>
 8003386:	463e      	mov	r6, r7
 8003388:	6820      	ldr	r0, [r4, #0]
 800338a:	4632      	mov	r2, r6
 800338c:	4641      	mov	r1, r8
 800338e:	f000 faab 	bl	80038e8 <memmove>
 8003392:	68a3      	ldr	r3, [r4, #8]
 8003394:	1b9b      	subs	r3, r3, r6
 8003396:	60a3      	str	r3, [r4, #8]
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	4433      	add	r3, r6
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	2000      	movs	r0, #0
 80033a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a4:	462a      	mov	r2, r5
 80033a6:	f000 fad7 	bl	8003958 <_realloc_r>
 80033aa:	4606      	mov	r6, r0
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d1e0      	bne.n	8003372 <__ssputs_r+0x5a>
 80033b0:	6921      	ldr	r1, [r4, #16]
 80033b2:	4650      	mov	r0, sl
 80033b4:	f7ff feb8 	bl	8003128 <_free_r>
 80033b8:	230c      	movs	r3, #12
 80033ba:	f8ca 3000 	str.w	r3, [sl]
 80033be:	89a3      	ldrh	r3, [r4, #12]
 80033c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c4:	81a3      	strh	r3, [r4, #12]
 80033c6:	f04f 30ff 	mov.w	r0, #4294967295
 80033ca:	e7e9      	b.n	80033a0 <__ssputs_r+0x88>

080033cc <_svfiprintf_r>:
 80033cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d0:	4698      	mov	r8, r3
 80033d2:	898b      	ldrh	r3, [r1, #12]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	b09d      	sub	sp, #116	; 0x74
 80033d8:	4607      	mov	r7, r0
 80033da:	460d      	mov	r5, r1
 80033dc:	4614      	mov	r4, r2
 80033de:	d50e      	bpl.n	80033fe <_svfiprintf_r+0x32>
 80033e0:	690b      	ldr	r3, [r1, #16]
 80033e2:	b963      	cbnz	r3, 80033fe <_svfiprintf_r+0x32>
 80033e4:	2140      	movs	r1, #64	; 0x40
 80033e6:	f7ff ff0b 	bl	8003200 <_malloc_r>
 80033ea:	6028      	str	r0, [r5, #0]
 80033ec:	6128      	str	r0, [r5, #16]
 80033ee:	b920      	cbnz	r0, 80033fa <_svfiprintf_r+0x2e>
 80033f0:	230c      	movs	r3, #12
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	e0d0      	b.n	800359c <_svfiprintf_r+0x1d0>
 80033fa:	2340      	movs	r3, #64	; 0x40
 80033fc:	616b      	str	r3, [r5, #20]
 80033fe:	2300      	movs	r3, #0
 8003400:	9309      	str	r3, [sp, #36]	; 0x24
 8003402:	2320      	movs	r3, #32
 8003404:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003408:	f8cd 800c 	str.w	r8, [sp, #12]
 800340c:	2330      	movs	r3, #48	; 0x30
 800340e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80035b4 <_svfiprintf_r+0x1e8>
 8003412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003416:	f04f 0901 	mov.w	r9, #1
 800341a:	4623      	mov	r3, r4
 800341c:	469a      	mov	sl, r3
 800341e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003422:	b10a      	cbz	r2, 8003428 <_svfiprintf_r+0x5c>
 8003424:	2a25      	cmp	r2, #37	; 0x25
 8003426:	d1f9      	bne.n	800341c <_svfiprintf_r+0x50>
 8003428:	ebba 0b04 	subs.w	fp, sl, r4
 800342c:	d00b      	beq.n	8003446 <_svfiprintf_r+0x7a>
 800342e:	465b      	mov	r3, fp
 8003430:	4622      	mov	r2, r4
 8003432:	4629      	mov	r1, r5
 8003434:	4638      	mov	r0, r7
 8003436:	f7ff ff6f 	bl	8003318 <__ssputs_r>
 800343a:	3001      	adds	r0, #1
 800343c:	f000 80a9 	beq.w	8003592 <_svfiprintf_r+0x1c6>
 8003440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003442:	445a      	add	r2, fp
 8003444:	9209      	str	r2, [sp, #36]	; 0x24
 8003446:	f89a 3000 	ldrb.w	r3, [sl]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 80a1 	beq.w	8003592 <_svfiprintf_r+0x1c6>
 8003450:	2300      	movs	r3, #0
 8003452:	f04f 32ff 	mov.w	r2, #4294967295
 8003456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800345a:	f10a 0a01 	add.w	sl, sl, #1
 800345e:	9304      	str	r3, [sp, #16]
 8003460:	9307      	str	r3, [sp, #28]
 8003462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003466:	931a      	str	r3, [sp, #104]	; 0x68
 8003468:	4654      	mov	r4, sl
 800346a:	2205      	movs	r2, #5
 800346c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003470:	4850      	ldr	r0, [pc, #320]	; (80035b4 <_svfiprintf_r+0x1e8>)
 8003472:	f7fc feb5 	bl	80001e0 <memchr>
 8003476:	9a04      	ldr	r2, [sp, #16]
 8003478:	b9d8      	cbnz	r0, 80034b2 <_svfiprintf_r+0xe6>
 800347a:	06d0      	lsls	r0, r2, #27
 800347c:	bf44      	itt	mi
 800347e:	2320      	movmi	r3, #32
 8003480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003484:	0711      	lsls	r1, r2, #28
 8003486:	bf44      	itt	mi
 8003488:	232b      	movmi	r3, #43	; 0x2b
 800348a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800348e:	f89a 3000 	ldrb.w	r3, [sl]
 8003492:	2b2a      	cmp	r3, #42	; 0x2a
 8003494:	d015      	beq.n	80034c2 <_svfiprintf_r+0xf6>
 8003496:	9a07      	ldr	r2, [sp, #28]
 8003498:	4654      	mov	r4, sl
 800349a:	2000      	movs	r0, #0
 800349c:	f04f 0c0a 	mov.w	ip, #10
 80034a0:	4621      	mov	r1, r4
 80034a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034a6:	3b30      	subs	r3, #48	; 0x30
 80034a8:	2b09      	cmp	r3, #9
 80034aa:	d94d      	bls.n	8003548 <_svfiprintf_r+0x17c>
 80034ac:	b1b0      	cbz	r0, 80034dc <_svfiprintf_r+0x110>
 80034ae:	9207      	str	r2, [sp, #28]
 80034b0:	e014      	b.n	80034dc <_svfiprintf_r+0x110>
 80034b2:	eba0 0308 	sub.w	r3, r0, r8
 80034b6:	fa09 f303 	lsl.w	r3, r9, r3
 80034ba:	4313      	orrs	r3, r2
 80034bc:	9304      	str	r3, [sp, #16]
 80034be:	46a2      	mov	sl, r4
 80034c0:	e7d2      	b.n	8003468 <_svfiprintf_r+0x9c>
 80034c2:	9b03      	ldr	r3, [sp, #12]
 80034c4:	1d19      	adds	r1, r3, #4
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	9103      	str	r1, [sp, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bfbb      	ittet	lt
 80034ce:	425b      	neglt	r3, r3
 80034d0:	f042 0202 	orrlt.w	r2, r2, #2
 80034d4:	9307      	strge	r3, [sp, #28]
 80034d6:	9307      	strlt	r3, [sp, #28]
 80034d8:	bfb8      	it	lt
 80034da:	9204      	strlt	r2, [sp, #16]
 80034dc:	7823      	ldrb	r3, [r4, #0]
 80034de:	2b2e      	cmp	r3, #46	; 0x2e
 80034e0:	d10c      	bne.n	80034fc <_svfiprintf_r+0x130>
 80034e2:	7863      	ldrb	r3, [r4, #1]
 80034e4:	2b2a      	cmp	r3, #42	; 0x2a
 80034e6:	d134      	bne.n	8003552 <_svfiprintf_r+0x186>
 80034e8:	9b03      	ldr	r3, [sp, #12]
 80034ea:	1d1a      	adds	r2, r3, #4
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	9203      	str	r2, [sp, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bfb8      	it	lt
 80034f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80034f8:	3402      	adds	r4, #2
 80034fa:	9305      	str	r3, [sp, #20]
 80034fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80035c4 <_svfiprintf_r+0x1f8>
 8003500:	7821      	ldrb	r1, [r4, #0]
 8003502:	2203      	movs	r2, #3
 8003504:	4650      	mov	r0, sl
 8003506:	f7fc fe6b 	bl	80001e0 <memchr>
 800350a:	b138      	cbz	r0, 800351c <_svfiprintf_r+0x150>
 800350c:	9b04      	ldr	r3, [sp, #16]
 800350e:	eba0 000a 	sub.w	r0, r0, sl
 8003512:	2240      	movs	r2, #64	; 0x40
 8003514:	4082      	lsls	r2, r0
 8003516:	4313      	orrs	r3, r2
 8003518:	3401      	adds	r4, #1
 800351a:	9304      	str	r3, [sp, #16]
 800351c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003520:	4825      	ldr	r0, [pc, #148]	; (80035b8 <_svfiprintf_r+0x1ec>)
 8003522:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003526:	2206      	movs	r2, #6
 8003528:	f7fc fe5a 	bl	80001e0 <memchr>
 800352c:	2800      	cmp	r0, #0
 800352e:	d038      	beq.n	80035a2 <_svfiprintf_r+0x1d6>
 8003530:	4b22      	ldr	r3, [pc, #136]	; (80035bc <_svfiprintf_r+0x1f0>)
 8003532:	bb1b      	cbnz	r3, 800357c <_svfiprintf_r+0x1b0>
 8003534:	9b03      	ldr	r3, [sp, #12]
 8003536:	3307      	adds	r3, #7
 8003538:	f023 0307 	bic.w	r3, r3, #7
 800353c:	3308      	adds	r3, #8
 800353e:	9303      	str	r3, [sp, #12]
 8003540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003542:	4433      	add	r3, r6
 8003544:	9309      	str	r3, [sp, #36]	; 0x24
 8003546:	e768      	b.n	800341a <_svfiprintf_r+0x4e>
 8003548:	fb0c 3202 	mla	r2, ip, r2, r3
 800354c:	460c      	mov	r4, r1
 800354e:	2001      	movs	r0, #1
 8003550:	e7a6      	b.n	80034a0 <_svfiprintf_r+0xd4>
 8003552:	2300      	movs	r3, #0
 8003554:	3401      	adds	r4, #1
 8003556:	9305      	str	r3, [sp, #20]
 8003558:	4619      	mov	r1, r3
 800355a:	f04f 0c0a 	mov.w	ip, #10
 800355e:	4620      	mov	r0, r4
 8003560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003564:	3a30      	subs	r2, #48	; 0x30
 8003566:	2a09      	cmp	r2, #9
 8003568:	d903      	bls.n	8003572 <_svfiprintf_r+0x1a6>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0c6      	beq.n	80034fc <_svfiprintf_r+0x130>
 800356e:	9105      	str	r1, [sp, #20]
 8003570:	e7c4      	b.n	80034fc <_svfiprintf_r+0x130>
 8003572:	fb0c 2101 	mla	r1, ip, r1, r2
 8003576:	4604      	mov	r4, r0
 8003578:	2301      	movs	r3, #1
 800357a:	e7f0      	b.n	800355e <_svfiprintf_r+0x192>
 800357c:	ab03      	add	r3, sp, #12
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	462a      	mov	r2, r5
 8003582:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <_svfiprintf_r+0x1f4>)
 8003584:	a904      	add	r1, sp, #16
 8003586:	4638      	mov	r0, r7
 8003588:	f3af 8000 	nop.w
 800358c:	1c42      	adds	r2, r0, #1
 800358e:	4606      	mov	r6, r0
 8003590:	d1d6      	bne.n	8003540 <_svfiprintf_r+0x174>
 8003592:	89ab      	ldrh	r3, [r5, #12]
 8003594:	065b      	lsls	r3, r3, #25
 8003596:	f53f af2d 	bmi.w	80033f4 <_svfiprintf_r+0x28>
 800359a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800359c:	b01d      	add	sp, #116	; 0x74
 800359e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035a2:	ab03      	add	r3, sp, #12
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	462a      	mov	r2, r5
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <_svfiprintf_r+0x1f4>)
 80035aa:	a904      	add	r1, sp, #16
 80035ac:	4638      	mov	r0, r7
 80035ae:	f000 f879 	bl	80036a4 <_printf_i>
 80035b2:	e7eb      	b.n	800358c <_svfiprintf_r+0x1c0>
 80035b4:	08003a9c 	.word	0x08003a9c
 80035b8:	08003aa6 	.word	0x08003aa6
 80035bc:	00000000 	.word	0x00000000
 80035c0:	08003319 	.word	0x08003319
 80035c4:	08003aa2 	.word	0x08003aa2

080035c8 <_printf_common>:
 80035c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035cc:	4616      	mov	r6, r2
 80035ce:	4699      	mov	r9, r3
 80035d0:	688a      	ldr	r2, [r1, #8]
 80035d2:	690b      	ldr	r3, [r1, #16]
 80035d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035d8:	4293      	cmp	r3, r2
 80035da:	bfb8      	it	lt
 80035dc:	4613      	movlt	r3, r2
 80035de:	6033      	str	r3, [r6, #0]
 80035e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035e4:	4607      	mov	r7, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	b10a      	cbz	r2, 80035ee <_printf_common+0x26>
 80035ea:	3301      	adds	r3, #1
 80035ec:	6033      	str	r3, [r6, #0]
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	0699      	lsls	r1, r3, #26
 80035f2:	bf42      	ittt	mi
 80035f4:	6833      	ldrmi	r3, [r6, #0]
 80035f6:	3302      	addmi	r3, #2
 80035f8:	6033      	strmi	r3, [r6, #0]
 80035fa:	6825      	ldr	r5, [r4, #0]
 80035fc:	f015 0506 	ands.w	r5, r5, #6
 8003600:	d106      	bne.n	8003610 <_printf_common+0x48>
 8003602:	f104 0a19 	add.w	sl, r4, #25
 8003606:	68e3      	ldr	r3, [r4, #12]
 8003608:	6832      	ldr	r2, [r6, #0]
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	42ab      	cmp	r3, r5
 800360e:	dc26      	bgt.n	800365e <_printf_common+0x96>
 8003610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003614:	1e13      	subs	r3, r2, #0
 8003616:	6822      	ldr	r2, [r4, #0]
 8003618:	bf18      	it	ne
 800361a:	2301      	movne	r3, #1
 800361c:	0692      	lsls	r2, r2, #26
 800361e:	d42b      	bmi.n	8003678 <_printf_common+0xb0>
 8003620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003624:	4649      	mov	r1, r9
 8003626:	4638      	mov	r0, r7
 8003628:	47c0      	blx	r8
 800362a:	3001      	adds	r0, #1
 800362c:	d01e      	beq.n	800366c <_printf_common+0xa4>
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	6922      	ldr	r2, [r4, #16]
 8003632:	f003 0306 	and.w	r3, r3, #6
 8003636:	2b04      	cmp	r3, #4
 8003638:	bf02      	ittt	eq
 800363a:	68e5      	ldreq	r5, [r4, #12]
 800363c:	6833      	ldreq	r3, [r6, #0]
 800363e:	1aed      	subeq	r5, r5, r3
 8003640:	68a3      	ldr	r3, [r4, #8]
 8003642:	bf0c      	ite	eq
 8003644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003648:	2500      	movne	r5, #0
 800364a:	4293      	cmp	r3, r2
 800364c:	bfc4      	itt	gt
 800364e:	1a9b      	subgt	r3, r3, r2
 8003650:	18ed      	addgt	r5, r5, r3
 8003652:	2600      	movs	r6, #0
 8003654:	341a      	adds	r4, #26
 8003656:	42b5      	cmp	r5, r6
 8003658:	d11a      	bne.n	8003690 <_printf_common+0xc8>
 800365a:	2000      	movs	r0, #0
 800365c:	e008      	b.n	8003670 <_printf_common+0xa8>
 800365e:	2301      	movs	r3, #1
 8003660:	4652      	mov	r2, sl
 8003662:	4649      	mov	r1, r9
 8003664:	4638      	mov	r0, r7
 8003666:	47c0      	blx	r8
 8003668:	3001      	adds	r0, #1
 800366a:	d103      	bne.n	8003674 <_printf_common+0xac>
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003674:	3501      	adds	r5, #1
 8003676:	e7c6      	b.n	8003606 <_printf_common+0x3e>
 8003678:	18e1      	adds	r1, r4, r3
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	2030      	movs	r0, #48	; 0x30
 800367e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003682:	4422      	add	r2, r4
 8003684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800368c:	3302      	adds	r3, #2
 800368e:	e7c7      	b.n	8003620 <_printf_common+0x58>
 8003690:	2301      	movs	r3, #1
 8003692:	4622      	mov	r2, r4
 8003694:	4649      	mov	r1, r9
 8003696:	4638      	mov	r0, r7
 8003698:	47c0      	blx	r8
 800369a:	3001      	adds	r0, #1
 800369c:	d0e6      	beq.n	800366c <_printf_common+0xa4>
 800369e:	3601      	adds	r6, #1
 80036a0:	e7d9      	b.n	8003656 <_printf_common+0x8e>
	...

080036a4 <_printf_i>:
 80036a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	7e0f      	ldrb	r7, [r1, #24]
 80036aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036ac:	2f78      	cmp	r7, #120	; 0x78
 80036ae:	4691      	mov	r9, r2
 80036b0:	4680      	mov	r8, r0
 80036b2:	460c      	mov	r4, r1
 80036b4:	469a      	mov	sl, r3
 80036b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036ba:	d807      	bhi.n	80036cc <_printf_i+0x28>
 80036bc:	2f62      	cmp	r7, #98	; 0x62
 80036be:	d80a      	bhi.n	80036d6 <_printf_i+0x32>
 80036c0:	2f00      	cmp	r7, #0
 80036c2:	f000 80d4 	beq.w	800386e <_printf_i+0x1ca>
 80036c6:	2f58      	cmp	r7, #88	; 0x58
 80036c8:	f000 80c0 	beq.w	800384c <_printf_i+0x1a8>
 80036cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036d4:	e03a      	b.n	800374c <_printf_i+0xa8>
 80036d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036da:	2b15      	cmp	r3, #21
 80036dc:	d8f6      	bhi.n	80036cc <_printf_i+0x28>
 80036de:	a101      	add	r1, pc, #4	; (adr r1, 80036e4 <_printf_i+0x40>)
 80036e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036e4:	0800373d 	.word	0x0800373d
 80036e8:	08003751 	.word	0x08003751
 80036ec:	080036cd 	.word	0x080036cd
 80036f0:	080036cd 	.word	0x080036cd
 80036f4:	080036cd 	.word	0x080036cd
 80036f8:	080036cd 	.word	0x080036cd
 80036fc:	08003751 	.word	0x08003751
 8003700:	080036cd 	.word	0x080036cd
 8003704:	080036cd 	.word	0x080036cd
 8003708:	080036cd 	.word	0x080036cd
 800370c:	080036cd 	.word	0x080036cd
 8003710:	08003855 	.word	0x08003855
 8003714:	0800377d 	.word	0x0800377d
 8003718:	0800380f 	.word	0x0800380f
 800371c:	080036cd 	.word	0x080036cd
 8003720:	080036cd 	.word	0x080036cd
 8003724:	08003877 	.word	0x08003877
 8003728:	080036cd 	.word	0x080036cd
 800372c:	0800377d 	.word	0x0800377d
 8003730:	080036cd 	.word	0x080036cd
 8003734:	080036cd 	.word	0x080036cd
 8003738:	08003817 	.word	0x08003817
 800373c:	682b      	ldr	r3, [r5, #0]
 800373e:	1d1a      	adds	r2, r3, #4
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	602a      	str	r2, [r5, #0]
 8003744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800374c:	2301      	movs	r3, #1
 800374e:	e09f      	b.n	8003890 <_printf_i+0x1ec>
 8003750:	6820      	ldr	r0, [r4, #0]
 8003752:	682b      	ldr	r3, [r5, #0]
 8003754:	0607      	lsls	r7, r0, #24
 8003756:	f103 0104 	add.w	r1, r3, #4
 800375a:	6029      	str	r1, [r5, #0]
 800375c:	d501      	bpl.n	8003762 <_printf_i+0xbe>
 800375e:	681e      	ldr	r6, [r3, #0]
 8003760:	e003      	b.n	800376a <_printf_i+0xc6>
 8003762:	0646      	lsls	r6, r0, #25
 8003764:	d5fb      	bpl.n	800375e <_printf_i+0xba>
 8003766:	f9b3 6000 	ldrsh.w	r6, [r3]
 800376a:	2e00      	cmp	r6, #0
 800376c:	da03      	bge.n	8003776 <_printf_i+0xd2>
 800376e:	232d      	movs	r3, #45	; 0x2d
 8003770:	4276      	negs	r6, r6
 8003772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003776:	485a      	ldr	r0, [pc, #360]	; (80038e0 <_printf_i+0x23c>)
 8003778:	230a      	movs	r3, #10
 800377a:	e012      	b.n	80037a2 <_printf_i+0xfe>
 800377c:	682b      	ldr	r3, [r5, #0]
 800377e:	6820      	ldr	r0, [r4, #0]
 8003780:	1d19      	adds	r1, r3, #4
 8003782:	6029      	str	r1, [r5, #0]
 8003784:	0605      	lsls	r5, r0, #24
 8003786:	d501      	bpl.n	800378c <_printf_i+0xe8>
 8003788:	681e      	ldr	r6, [r3, #0]
 800378a:	e002      	b.n	8003792 <_printf_i+0xee>
 800378c:	0641      	lsls	r1, r0, #25
 800378e:	d5fb      	bpl.n	8003788 <_printf_i+0xe4>
 8003790:	881e      	ldrh	r6, [r3, #0]
 8003792:	4853      	ldr	r0, [pc, #332]	; (80038e0 <_printf_i+0x23c>)
 8003794:	2f6f      	cmp	r7, #111	; 0x6f
 8003796:	bf0c      	ite	eq
 8003798:	2308      	moveq	r3, #8
 800379a:	230a      	movne	r3, #10
 800379c:	2100      	movs	r1, #0
 800379e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037a2:	6865      	ldr	r5, [r4, #4]
 80037a4:	60a5      	str	r5, [r4, #8]
 80037a6:	2d00      	cmp	r5, #0
 80037a8:	bfa2      	ittt	ge
 80037aa:	6821      	ldrge	r1, [r4, #0]
 80037ac:	f021 0104 	bicge.w	r1, r1, #4
 80037b0:	6021      	strge	r1, [r4, #0]
 80037b2:	b90e      	cbnz	r6, 80037b8 <_printf_i+0x114>
 80037b4:	2d00      	cmp	r5, #0
 80037b6:	d04b      	beq.n	8003850 <_printf_i+0x1ac>
 80037b8:	4615      	mov	r5, r2
 80037ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80037be:	fb03 6711 	mls	r7, r3, r1, r6
 80037c2:	5dc7      	ldrb	r7, [r0, r7]
 80037c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037c8:	4637      	mov	r7, r6
 80037ca:	42bb      	cmp	r3, r7
 80037cc:	460e      	mov	r6, r1
 80037ce:	d9f4      	bls.n	80037ba <_printf_i+0x116>
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d10b      	bne.n	80037ec <_printf_i+0x148>
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	07de      	lsls	r6, r3, #31
 80037d8:	d508      	bpl.n	80037ec <_printf_i+0x148>
 80037da:	6923      	ldr	r3, [r4, #16]
 80037dc:	6861      	ldr	r1, [r4, #4]
 80037de:	4299      	cmp	r1, r3
 80037e0:	bfde      	ittt	le
 80037e2:	2330      	movle	r3, #48	; 0x30
 80037e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037ec:	1b52      	subs	r2, r2, r5
 80037ee:	6122      	str	r2, [r4, #16]
 80037f0:	f8cd a000 	str.w	sl, [sp]
 80037f4:	464b      	mov	r3, r9
 80037f6:	aa03      	add	r2, sp, #12
 80037f8:	4621      	mov	r1, r4
 80037fa:	4640      	mov	r0, r8
 80037fc:	f7ff fee4 	bl	80035c8 <_printf_common>
 8003800:	3001      	adds	r0, #1
 8003802:	d14a      	bne.n	800389a <_printf_i+0x1f6>
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	b004      	add	sp, #16
 800380a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	f043 0320 	orr.w	r3, r3, #32
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	4833      	ldr	r0, [pc, #204]	; (80038e4 <_printf_i+0x240>)
 8003818:	2778      	movs	r7, #120	; 0x78
 800381a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	6829      	ldr	r1, [r5, #0]
 8003822:	061f      	lsls	r7, r3, #24
 8003824:	f851 6b04 	ldr.w	r6, [r1], #4
 8003828:	d402      	bmi.n	8003830 <_printf_i+0x18c>
 800382a:	065f      	lsls	r7, r3, #25
 800382c:	bf48      	it	mi
 800382e:	b2b6      	uxthmi	r6, r6
 8003830:	07df      	lsls	r7, r3, #31
 8003832:	bf48      	it	mi
 8003834:	f043 0320 	orrmi.w	r3, r3, #32
 8003838:	6029      	str	r1, [r5, #0]
 800383a:	bf48      	it	mi
 800383c:	6023      	strmi	r3, [r4, #0]
 800383e:	b91e      	cbnz	r6, 8003848 <_printf_i+0x1a4>
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	f023 0320 	bic.w	r3, r3, #32
 8003846:	6023      	str	r3, [r4, #0]
 8003848:	2310      	movs	r3, #16
 800384a:	e7a7      	b.n	800379c <_printf_i+0xf8>
 800384c:	4824      	ldr	r0, [pc, #144]	; (80038e0 <_printf_i+0x23c>)
 800384e:	e7e4      	b.n	800381a <_printf_i+0x176>
 8003850:	4615      	mov	r5, r2
 8003852:	e7bd      	b.n	80037d0 <_printf_i+0x12c>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	6826      	ldr	r6, [r4, #0]
 8003858:	6961      	ldr	r1, [r4, #20]
 800385a:	1d18      	adds	r0, r3, #4
 800385c:	6028      	str	r0, [r5, #0]
 800385e:	0635      	lsls	r5, r6, #24
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	d501      	bpl.n	8003868 <_printf_i+0x1c4>
 8003864:	6019      	str	r1, [r3, #0]
 8003866:	e002      	b.n	800386e <_printf_i+0x1ca>
 8003868:	0670      	lsls	r0, r6, #25
 800386a:	d5fb      	bpl.n	8003864 <_printf_i+0x1c0>
 800386c:	8019      	strh	r1, [r3, #0]
 800386e:	2300      	movs	r3, #0
 8003870:	6123      	str	r3, [r4, #16]
 8003872:	4615      	mov	r5, r2
 8003874:	e7bc      	b.n	80037f0 <_printf_i+0x14c>
 8003876:	682b      	ldr	r3, [r5, #0]
 8003878:	1d1a      	adds	r2, r3, #4
 800387a:	602a      	str	r2, [r5, #0]
 800387c:	681d      	ldr	r5, [r3, #0]
 800387e:	6862      	ldr	r2, [r4, #4]
 8003880:	2100      	movs	r1, #0
 8003882:	4628      	mov	r0, r5
 8003884:	f7fc fcac 	bl	80001e0 <memchr>
 8003888:	b108      	cbz	r0, 800388e <_printf_i+0x1ea>
 800388a:	1b40      	subs	r0, r0, r5
 800388c:	6060      	str	r0, [r4, #4]
 800388e:	6863      	ldr	r3, [r4, #4]
 8003890:	6123      	str	r3, [r4, #16]
 8003892:	2300      	movs	r3, #0
 8003894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003898:	e7aa      	b.n	80037f0 <_printf_i+0x14c>
 800389a:	6923      	ldr	r3, [r4, #16]
 800389c:	462a      	mov	r2, r5
 800389e:	4649      	mov	r1, r9
 80038a0:	4640      	mov	r0, r8
 80038a2:	47d0      	blx	sl
 80038a4:	3001      	adds	r0, #1
 80038a6:	d0ad      	beq.n	8003804 <_printf_i+0x160>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	079b      	lsls	r3, r3, #30
 80038ac:	d413      	bmi.n	80038d6 <_printf_i+0x232>
 80038ae:	68e0      	ldr	r0, [r4, #12]
 80038b0:	9b03      	ldr	r3, [sp, #12]
 80038b2:	4298      	cmp	r0, r3
 80038b4:	bfb8      	it	lt
 80038b6:	4618      	movlt	r0, r3
 80038b8:	e7a6      	b.n	8003808 <_printf_i+0x164>
 80038ba:	2301      	movs	r3, #1
 80038bc:	4632      	mov	r2, r6
 80038be:	4649      	mov	r1, r9
 80038c0:	4640      	mov	r0, r8
 80038c2:	47d0      	blx	sl
 80038c4:	3001      	adds	r0, #1
 80038c6:	d09d      	beq.n	8003804 <_printf_i+0x160>
 80038c8:	3501      	adds	r5, #1
 80038ca:	68e3      	ldr	r3, [r4, #12]
 80038cc:	9903      	ldr	r1, [sp, #12]
 80038ce:	1a5b      	subs	r3, r3, r1
 80038d0:	42ab      	cmp	r3, r5
 80038d2:	dcf2      	bgt.n	80038ba <_printf_i+0x216>
 80038d4:	e7eb      	b.n	80038ae <_printf_i+0x20a>
 80038d6:	2500      	movs	r5, #0
 80038d8:	f104 0619 	add.w	r6, r4, #25
 80038dc:	e7f5      	b.n	80038ca <_printf_i+0x226>
 80038de:	bf00      	nop
 80038e0:	08003aad 	.word	0x08003aad
 80038e4:	08003abe 	.word	0x08003abe

080038e8 <memmove>:
 80038e8:	4288      	cmp	r0, r1
 80038ea:	b510      	push	{r4, lr}
 80038ec:	eb01 0402 	add.w	r4, r1, r2
 80038f0:	d902      	bls.n	80038f8 <memmove+0x10>
 80038f2:	4284      	cmp	r4, r0
 80038f4:	4623      	mov	r3, r4
 80038f6:	d807      	bhi.n	8003908 <memmove+0x20>
 80038f8:	1e43      	subs	r3, r0, #1
 80038fa:	42a1      	cmp	r1, r4
 80038fc:	d008      	beq.n	8003910 <memmove+0x28>
 80038fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003902:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003906:	e7f8      	b.n	80038fa <memmove+0x12>
 8003908:	4402      	add	r2, r0
 800390a:	4601      	mov	r1, r0
 800390c:	428a      	cmp	r2, r1
 800390e:	d100      	bne.n	8003912 <memmove+0x2a>
 8003910:	bd10      	pop	{r4, pc}
 8003912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800391a:	e7f7      	b.n	800390c <memmove+0x24>

0800391c <_sbrk_r>:
 800391c:	b538      	push	{r3, r4, r5, lr}
 800391e:	4d06      	ldr	r5, [pc, #24]	; (8003938 <_sbrk_r+0x1c>)
 8003920:	2300      	movs	r3, #0
 8003922:	4604      	mov	r4, r0
 8003924:	4608      	mov	r0, r1
 8003926:	602b      	str	r3, [r5, #0]
 8003928:	f7fc ff6c 	bl	8000804 <_sbrk>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d102      	bne.n	8003936 <_sbrk_r+0x1a>
 8003930:	682b      	ldr	r3, [r5, #0]
 8003932:	b103      	cbz	r3, 8003936 <_sbrk_r+0x1a>
 8003934:	6023      	str	r3, [r4, #0]
 8003936:	bd38      	pop	{r3, r4, r5, pc}
 8003938:	2000022c 	.word	0x2000022c

0800393c <memcpy>:
 800393c:	440a      	add	r2, r1
 800393e:	4291      	cmp	r1, r2
 8003940:	f100 33ff 	add.w	r3, r0, #4294967295
 8003944:	d100      	bne.n	8003948 <memcpy+0xc>
 8003946:	4770      	bx	lr
 8003948:	b510      	push	{r4, lr}
 800394a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800394e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003952:	4291      	cmp	r1, r2
 8003954:	d1f9      	bne.n	800394a <memcpy+0xe>
 8003956:	bd10      	pop	{r4, pc}

08003958 <_realloc_r>:
 8003958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800395c:	4680      	mov	r8, r0
 800395e:	4614      	mov	r4, r2
 8003960:	460e      	mov	r6, r1
 8003962:	b921      	cbnz	r1, 800396e <_realloc_r+0x16>
 8003964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003968:	4611      	mov	r1, r2
 800396a:	f7ff bc49 	b.w	8003200 <_malloc_r>
 800396e:	b92a      	cbnz	r2, 800397c <_realloc_r+0x24>
 8003970:	f7ff fbda 	bl	8003128 <_free_r>
 8003974:	4625      	mov	r5, r4
 8003976:	4628      	mov	r0, r5
 8003978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800397c:	f000 f81b 	bl	80039b6 <_malloc_usable_size_r>
 8003980:	4284      	cmp	r4, r0
 8003982:	4607      	mov	r7, r0
 8003984:	d802      	bhi.n	800398c <_realloc_r+0x34>
 8003986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800398a:	d812      	bhi.n	80039b2 <_realloc_r+0x5a>
 800398c:	4621      	mov	r1, r4
 800398e:	4640      	mov	r0, r8
 8003990:	f7ff fc36 	bl	8003200 <_malloc_r>
 8003994:	4605      	mov	r5, r0
 8003996:	2800      	cmp	r0, #0
 8003998:	d0ed      	beq.n	8003976 <_realloc_r+0x1e>
 800399a:	42bc      	cmp	r4, r7
 800399c:	4622      	mov	r2, r4
 800399e:	4631      	mov	r1, r6
 80039a0:	bf28      	it	cs
 80039a2:	463a      	movcs	r2, r7
 80039a4:	f7ff ffca 	bl	800393c <memcpy>
 80039a8:	4631      	mov	r1, r6
 80039aa:	4640      	mov	r0, r8
 80039ac:	f7ff fbbc 	bl	8003128 <_free_r>
 80039b0:	e7e1      	b.n	8003976 <_realloc_r+0x1e>
 80039b2:	4635      	mov	r5, r6
 80039b4:	e7df      	b.n	8003976 <_realloc_r+0x1e>

080039b6 <_malloc_usable_size_r>:
 80039b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039ba:	1f18      	subs	r0, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bfbc      	itt	lt
 80039c0:	580b      	ldrlt	r3, [r1, r0]
 80039c2:	18c0      	addlt	r0, r0, r3
 80039c4:	4770      	bx	lr
	...

080039c8 <_init>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr

080039d4 <_fini>:
 80039d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d6:	bf00      	nop
 80039d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039da:	bc08      	pop	{r3}
 80039dc:	469e      	mov	lr, r3
 80039de:	4770      	bx	lr

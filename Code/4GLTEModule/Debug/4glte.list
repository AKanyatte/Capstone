
4glte.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c74  08004c74  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c7c  08004c7c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c7c  08004c7c  00014c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000005c  08004ce0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08004ce0  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec35  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000247d  00000000  00000000  0002ed04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  00031188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094f  00000000  00000000  00031db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025a0  00000000  00000000  00032707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f7cf  00000000  00000000  00034ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c18db  00000000  00000000  00044476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035c4  00000000  00000000  00105d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00109318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b84 	.word	0x08004b84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004b84 	.word	0x08004b84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <boardled_on>:
	//set PB_3 to output mode
	GPIOB->MODER |= (1U << 6);
}

void boardled_on(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
		GPIOB->ODR |= (1U << 3);
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <boardled_on+0x1c>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <boardled_on+0x1c>)
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	6153      	str	r3, [r2, #20]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	48000400 	.word	0x48000400

0800059c <boardled_off>:

void boardled_off(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
		GPIOB->ODR &= ~(1U << 3);
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <boardled_off+0x1c>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <boardled_off+0x1c>)
 80005a6:	f023 0308 	bic.w	r3, r3, #8
 80005aa:	6153      	str	r3, [r2, #20]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	48000400 	.word	0x48000400

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fbdd 	bl	8000d7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f812 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f8c2 	bl	8000750 <MX_GPIO_Init>
  MX_USART2_Init();
 80005cc:	f000 f894 	bl	80006f8 <MX_USART2_Init>
  MX_USART1_UART_Init();
 80005d0:	f000 f862 	bl	8000698 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  boardled_on();
 80005d4:	f7ff ffd2 	bl	800057c <boardled_on>

  send_at();
 80005d8:	f000 f90a 	bl	80007f0 <send_at>
  set_sms_mode();
 80005dc:	f000 f960 	bl	80008a0 <set_sms_mode>
  send_sms();
 80005e0:	f000 f9aa 	bl	8000938 <send_sms>

  boardled_off();
 80005e4:	f7ff ffda 	bl	800059c <boardled_off>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x2c>
	...

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b096      	sub	sp, #88	; 0x58
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2244      	movs	r2, #68	; 0x44
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fe28 	bl	8004250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	463b      	mov	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000612:	f000 ff7d 	bl	8001510 <HAL_PWREx_ControlVoltageScaling>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800061c:	f000 f8e2 	bl	80007e4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000620:	f000 ff58 	bl	80014d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <SystemClock_Config+0xa8>)
 8000626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800062a:	4a1a      	ldr	r2, [pc, #104]	; (8000694 <SystemClock_Config+0xa8>)
 800062c:	f023 0318 	bic.w	r3, r3, #24
 8000630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000634:	2314      	movs	r3, #20
 8000636:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000644:	2360      	movs	r3, #96	; 0x60
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000648:	2300      	movs	r3, #0
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4618      	mov	r0, r3
 8000652:	f000 ffb3 	bl	80015bc <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800065c:	f000 f8c2 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fbb3 	bl	8001de4 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000684:	f000 f8ae 	bl	80007e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000688:	f001 ffc6 	bl	8002618 <HAL_RCCEx_EnableMSIPLLMode>
}
 800068c:	bf00      	nop
 800068e:	3758      	adds	r7, #88	; 0x58
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000

08000698 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 800069e:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <MX_USART1_UART_Init+0x5c>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART1_UART_Init+0x58>)
 80006dc:	f002 f89e 	bl	800281c <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006e6:	f000 f87d 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000078 	.word	0x20000078
 80006f4:	40013800 	.word	0x40013800

080006f8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_USART2_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_USART2_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART2_Init+0x50>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_USART2_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_USART2_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART2_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_USART2_Init+0x50>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART2_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_USART2_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART2_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_USART2_Init+0x50>)
 8000736:	f003 f9a8 	bl	8003a8a <HAL_USART_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 f850 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000100 	.word	0x20000100
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_GPIO_Init+0x8c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <MX_GPIO_Init+0x8c>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_GPIO_Init+0x8c>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_GPIO_Init+0x8c>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a16      	ldr	r2, [pc, #88]	; (80007dc <MX_GPIO_Init+0x8c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_GPIO_Init+0x8c>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_GPIO_Init+0x8c>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <MX_GPIO_Init+0x8c>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_GPIO_Init+0x8c>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2108      	movs	r1, #8
 80007b2:	480b      	ldr	r0, [pc, #44]	; (80007e0 <MX_GPIO_Init+0x90>)
 80007b4:	f000 fe76 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007b8:	2308      	movs	r3, #8
 80007ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4619      	mov	r1, r3
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_GPIO_Init+0x90>)
 80007d0:	f000 fcfe 	bl	80011d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000400 	.word	0x48000400

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <send_at>:
 */
#include "send_data.h"


void send_at(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08e      	sub	sp, #56	; 0x38
 80007f4:	af00      	add	r7, sp, #0
	char AT_command[20];
	uint8_t AT_is_OK = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t rx_buffer[30] = {0};
 80007fc:	2300      	movs	r3, #0
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	831a      	strh	r2, [r3, #24]

	while(!AT_is_OK)
 8000812:	e035      	b.n	8000880 <send_at+0x90>
	{
		sprintf(AT_command, "AT\r\n");
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	491e      	ldr	r1, [pc, #120]	; (8000894 <send_at+0xa4>)
 800081a:	4618      	mov	r0, r3
 800081c:	f003 fcf8 	bl	8004210 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)AT_command,strlen(AT_command),1000);
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fcd3 	bl	80001d0 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29a      	uxth	r2, r3
 800082e:	f107 0120 	add.w	r1, r7, #32
 8000832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000836:	4818      	ldr	r0, [pc, #96]	; (8000898 <send_at+0xa8>)
 8000838:	f002 f83e 	bl	80028b8 <HAL_UART_Transmit>
		HAL_UART_Receive (&huart1, rx_buffer, sizeof(rx_buffer), 100);
 800083c:	4639      	mov	r1, r7
 800083e:	2364      	movs	r3, #100	; 0x64
 8000840:	221e      	movs	r2, #30
 8000842:	4815      	ldr	r0, [pc, #84]	; (8000898 <send_at+0xa8>)
 8000844:	f002 f8c2 	bl	80029cc <HAL_UART_Receive>
		HAL_Delay(1000);
 8000848:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800084c:	f000 fb0c 	bl	8000e68 <HAL_Delay>

		if(strstr((char *)rx_buffer,"\r\nOK\r\n"))
 8000850:	463b      	mov	r3, r7
 8000852:	4912      	ldr	r1, [pc, #72]	; (800089c <send_at+0xac>)
 8000854:	4618      	mov	r0, r3
 8000856:	f003 fd03 	bl	8004260 <strstr>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d003      	beq.n	8000868 <send_at+0x78>
		{
			AT_is_OK = 1;
 8000860:	2301      	movs	r3, #1
 8000862:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000866:	e007      	b.n	8000878 <send_at+0x88>
		}
		else
		{
			memset(rx_buffer,0,sizeof(rx_buffer));
 8000868:	463b      	mov	r3, r7
 800086a:	221e      	movs	r2, #30
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 fcee 	bl	8004250 <memset>
			send_at();
 8000874:	f7ff ffbc 	bl	80007f0 <send_at>
		}
		HAL_Delay(1000);
 8000878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087c:	f000 faf4 	bl	8000e68 <HAL_Delay>
	while(!AT_is_OK)
 8000880:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0c5      	beq.n	8000814 <send_at+0x24>
	}
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3738      	adds	r7, #56	; 0x38
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	08004b9c 	.word	0x08004b9c
 8000898:	20000078 	.word	0x20000078
 800089c:	08004ba4 	.word	0x08004ba4

080008a0 <set_sms_mode>:

void set_sms_mode(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	; 0x38
 80008a4:	af00      	add	r7, sp, #0
	char AT_command[20];
	uint8_t rx_buffer[30] = {0};
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
 80008ba:	615a      	str	r2, [r3, #20]
 80008bc:	831a      	strh	r2, [r3, #24]

	sprintf(AT_command,"AT+CMGF=1\r\n");
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	491a      	ldr	r1, [pc, #104]	; (800092c <set_sms_mode+0x8c>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 fca3 	bl	8004210 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)AT_command,strlen(AT_command),1000);
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fc7e 	bl	80001d0 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80008dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e0:	4813      	ldr	r0, [pc, #76]	; (8000930 <set_sms_mode+0x90>)
 80008e2:	f001 ffe9 	bl	80028b8 <HAL_UART_Transmit>
	HAL_UART_Receive (&huart1, rx_buffer, sizeof(rx_buffer), 100);
 80008e6:	1d39      	adds	r1, r7, #4
 80008e8:	2364      	movs	r3, #100	; 0x64
 80008ea:	221e      	movs	r2, #30
 80008ec:	4810      	ldr	r0, [pc, #64]	; (8000930 <set_sms_mode+0x90>)
 80008ee:	f002 f86d 	bl	80029cc <HAL_UART_Receive>
	HAL_Delay(1000);
 80008f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f6:	f000 fab7 	bl	8000e68 <HAL_Delay>

	if(strstr((char *)rx_buffer,"\r\nOK\r\n"))
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	490d      	ldr	r1, [pc, #52]	; (8000934 <set_sms_mode+0x94>)
 80008fe:	4618      	mov	r0, r3
 8000900:	f003 fcae 	bl	8004260 <strstr>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d107      	bne.n	800091a <set_sms_mode+0x7a>
	{}
	else
	{
	    memset(rx_buffer,0,sizeof(rx_buffer));
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	221e      	movs	r2, #30
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f003 fc9d 	bl	8004250 <memset>
		set_sms_mode();
 8000916:	f7ff ffc3 	bl	80008a0 <set_sms_mode>
	}
	HAL_Delay(1000);
 800091a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091e:	f000 faa3 	bl	8000e68 <HAL_Delay>
}
 8000922:	bf00      	nop
 8000924:	3738      	adds	r7, #56	; 0x38
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	08004bac 	.word	0x08004bac
 8000930:	20000078 	.word	0x20000078
 8000934:	08004ba4 	.word	0x08004ba4

08000938 <send_sms>:

void send_sms(void)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b0eb      	sub	sp, #428	; 0x1ac
 800093c:	af00      	add	r7, sp, #0
	char AT_command[300];
	char mobile_num[20] = "4039034943";
 800093e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000942:	f5a3 74a0 	sub.w	r4, r3, #320	; 0x140
 8000946:	4a36      	ldr	r2, [pc, #216]	; (8000a20 <send_sms+0xe8>)
 8000948:	4623      	mov	r3, r4
 800094a:	ca07      	ldmia	r2, {r0, r1, r2}
 800094c:	c303      	stmia	r3!, {r0, r1}
 800094e:	801a      	strh	r2, [r3, #0]
 8000950:	3302      	adds	r3, #2
 8000952:	0c12      	lsrs	r2, r2, #16
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	f104 030b 	add.w	r3, r4, #11
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	721a      	strb	r2, [r3, #8]
	uint8_t rx_buffer[100] = {0};
 8000962:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000966:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	3304      	adds	r3, #4
 8000970:	2260      	movs	r2, #96	; 0x60
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f003 fc6b 	bl	8004250 <memset>

	sprintf(AT_command,"AT+CMGS=\"%s\"\r\n", mobile_num);
 800097a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800097e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000982:	4928      	ldr	r1, [pc, #160]	; (8000a24 <send_sms+0xec>)
 8000984:	4618      	mov	r0, r3
 8000986:	f003 fc43 	bl	8004210 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)AT_command,strlen(AT_command),1000);
 800098a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fc1e 	bl	80001d0 <strlen>
 8000994:	4603      	mov	r3, r0
 8000996:	b29a      	uxth	r2, r3
 8000998:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800099c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a0:	4821      	ldr	r0, [pc, #132]	; (8000a28 <send_sms+0xf0>)
 80009a2:	f001 ff89 	bl	80028b8 <HAL_UART_Transmit>
	HAL_Delay(100);
 80009a6:	2064      	movs	r0, #100	; 0x64
 80009a8:	f000 fa5e 	bl	8000e68 <HAL_Delay>
	memset(rx_buffer,0,sizeof(rx_buffer));
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2264      	movs	r2, #100	; 0x64
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f003 fc4c 	bl	8004250 <memset>

	sprintf(AT_command,"Hello from STM%c", 0x1A);
 80009b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009bc:	221a      	movs	r2, #26
 80009be:	491b      	ldr	r1, [pc, #108]	; (8000a2c <send_sms+0xf4>)
 80009c0:	4618      	mov	r0, r3
 80009c2:	f003 fc25 	bl	8004210 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)AT_command,strlen(AT_command),1000);
 80009c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fc00 	bl	80001d0 <strlen>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80009d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <send_sms+0xf0>)
 80009de:	f001 ff6b 	bl	80028b8 <HAL_UART_Transmit>
	HAL_UART_Receive (&huart1, rx_buffer, sizeof(rx_buffer), 100);
 80009e2:	1d39      	adds	r1, r7, #4
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	2264      	movs	r2, #100	; 0x64
 80009e8:	480f      	ldr	r0, [pc, #60]	; (8000a28 <send_sms+0xf0>)
 80009ea:	f001 ffef 	bl	80029cc <HAL_UART_Receive>

	if(strstr((char *)rx_buffer,"+CMGS"))
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	490f      	ldr	r1, [pc, #60]	; (8000a30 <send_sms+0xf8>)
 80009f2:	4618      	mov	r0, r3
 80009f4:	f003 fc34 	bl	8004260 <strstr>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d107      	bne.n	8000a0e <send_sms+0xd6>
	{}
	else
	{
		memset(rx_buffer,0,sizeof(rx_buffer));
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2264      	movs	r2, #100	; 0x64
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 fc23 	bl	8004250 <memset>
		send_sms();
 8000a0a:	f7ff ff95 	bl	8000938 <send_sms>
	}
	HAL_Delay(4000);
 8000a0e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a12:	f000 fa29 	bl	8000e68 <HAL_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd90      	pop	{r4, r7, pc}
 8000a20:	08004be4 	.word	0x08004be4
 8000a24:	08004bb8 	.word	0x08004bb8
 8000a28:	20000078 	.word	0x20000078
 8000a2c:	08004bc8 	.word	0x08004bc8
 8000a30:	08004bdc 	.word	0x08004bdc

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_MspInit+0x44>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <HAL_MspInit+0x44>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6613      	str	r3, [r2, #96]	; 0x60
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <HAL_MspInit+0x44>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x44>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x44>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x44>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09e      	sub	sp, #120	; 0x78
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	2254      	movs	r2, #84	; 0x54
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 fbd7 	bl	8004250 <memset>
  if(huart->Instance==USART1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a23      	ldr	r2, [pc, #140]	; (8000b34 <HAL_UART_MspInit+0xb8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d13f      	bne.n	8000b2c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000aac:	2301      	movs	r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fbb7 	bl	800222c <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ac4:	f7ff fe8e 	bl	80007e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_MspInit+0xbc>)
 8000aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000acc:	4a1a      	ldr	r2, [pc, #104]	; (8000b38 <HAL_UART_MspInit+0xbc>)
 8000ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0xbc>)
 8000ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_MspInit+0xbc>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <HAL_UART_MspInit+0xbc>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_UART_MspInit+0xbc>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000af8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000afc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b12:	4619      	mov	r1, r3
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f000 fb5a 	bl	80011d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2025      	movs	r0, #37	; 0x25
 8000b22:	f000 faa0 	bl	8001066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b26:	2025      	movs	r0, #37	; 0x25
 8000b28:	f000 fab9 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3778      	adds	r7, #120	; 0x78
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40013800 	.word	0x40013800
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09e      	sub	sp, #120	; 0x78
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	2254      	movs	r2, #84	; 0x54
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fb77 	bl	8004250 <memset>
  if(husart->Instance==USART2)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a2c      	ldr	r2, [pc, #176]	; (8000c18 <HAL_USART_MspInit+0xdc>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d150      	bne.n	8000c0e <HAL_USART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 fb57 	bl	800222c <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8000b84:	f7ff fe2e 	bl	80007e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <HAL_USART_MspInit+0xe0>)
 8000b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8c:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <HAL_USART_MspInit+0xe0>)
 8000b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b92:	6593      	str	r3, [r2, #88]	; 0x58
 8000b94:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <HAL_USART_MspInit+0xe0>)
 8000b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <HAL_USART_MspInit+0xe0>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <HAL_USART_MspInit+0xe0>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_USART_MspInit+0xe0>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_4;
 8000bb8:	2314      	movs	r3, #20
 8000bba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f000 fafb 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bde:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000bec:	2303      	movs	r3, #3
 8000bee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfa:	f000 fae9 	bl	80011d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2026      	movs	r0, #38	; 0x26
 8000c04:	f000 fa2f 	bl	8001066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c08:	2026      	movs	r0, #38	; 0x26
 8000c0a:	f000 fa48 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3778      	adds	r7, #120	; 0x78
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	40021000 	.word	0x40021000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f8dc 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <USART1_IRQHandler+0x10>)
 8000c7a:	f001 ff71 	bl	8002b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000078 	.word	0x20000078

08000c88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <USART2_IRQHandler+0x10>)
 8000c8e:	f002 ff47 	bl	8003b20 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000100 	.word	0x20000100

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f003 fade 	bl	800428c <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20010000 	.word	0x20010000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	20000150 	.word	0x20000150
 8000d04:	200002a0 	.word	0x200002a0

08000d08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopForever+0x2>
 8000d30:	f7ff ffea 	bl	8000d08 <SystemInit>
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <LoopForever+0x6>)
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <LoopForever+0xa>)
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <LoopForever+0xe>)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:
 8000d3e:	58d4      	ldr	r4, [r2, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:
 8000d44:	18c4      	adds	r4, r0, r3
 8000d46:	428c      	cmp	r4, r1
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopForever+0x12>)
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <LoopForever+0x16>)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:
 8000d56:	42a2      	cmp	r2, r4
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>
 8000d5a:	f003 fa9d 	bl	8004298 <__libc_init_array>
 8000d5e:	f7ff fc2d 	bl	80005bc <main>

08000d62 <LoopForever>:
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
 8000d64:	20010000 	.word	0x20010000
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	2000005c 	.word	0x2000005c
 8000d70:	08004c84 	.word	0x08004c84
 8000d74:	2000005c 	.word	0x2000005c
 8000d78:	200002a0 	.word	0x200002a0

08000d7c <ADC1_IRQHandler>:
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_IRQHandler>

08000d7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f961 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 f80e 	bl	8000db0 <HAL_InitTick>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	e001      	b.n	8000da4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000da0:	f7ff fe48 	bl	8000a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_InitTick+0x6c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d023      	beq.n	8000e0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_InitTick+0x70>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_InitTick+0x6c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f96d 	bl	80010ba <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10f      	bne.n	8000e06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d809      	bhi.n	8000e00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f937 	bl	8001066 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_InitTick+0x74>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e007      	b.n	8000e10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e004      	b.n	8000e10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	e001      	b.n	8000e10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000154 	.word	0x20000154

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000154 	.word	0x20000154

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <__NVIC_EnableIRQ+0x38>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f7ff ff8e 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff29 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff3e 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff8e 	bl	8000fa4 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff31 	bl	8000f14 <__NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffa2 	bl	800100c <SysTick_Config>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b085      	sub	sp, #20
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d008      	beq.n	80010fc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2204      	movs	r2, #4
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e022      	b.n	8001142 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 020e 	bic.w	r2, r2, #14
 800110a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0201 	bic.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001120:	f003 021c 	and.w	r2, r3, #28
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	2101      	movs	r1, #1
 800112a:	fa01 f202 	lsl.w	r2, r1, r2
 800112e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001140:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d005      	beq.n	8001172 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2204      	movs	r2, #4
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e029      	b.n	80011c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 020e 	bic.w	r2, r2, #14
 8001180:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0201 	bic.w	r2, r2, #1
 8001190:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f003 021c 	and.w	r2, r3, #28
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	4798      	blx	r3
    }
  }
  return status;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	e148      	b.n	8001472 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 813a 	beq.w	800146c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d005      	beq.n	8001210 <HAL_GPIO_Init+0x40>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d130      	bne.n	8001272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001246:	2201      	movs	r2, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	f003 0201 	and.w	r2, r3, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b03      	cmp	r3, #3
 800127c:	d017      	beq.n	80012ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d123      	bne.n	8001302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	6939      	ldr	r1, [r7, #16]
 80012fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0203 	and.w	r2, r3, #3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8094 	beq.w	800146c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001344:	4b52      	ldr	r3, [pc, #328]	; (8001490 <HAL_GPIO_Init+0x2c0>)
 8001346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001348:	4a51      	ldr	r2, [pc, #324]	; (8001490 <HAL_GPIO_Init+0x2c0>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6613      	str	r3, [r2, #96]	; 0x60
 8001350:	4b4f      	ldr	r3, [pc, #316]	; (8001490 <HAL_GPIO_Init+0x2c0>)
 8001352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800135c:	4a4d      	ldr	r2, [pc, #308]	; (8001494 <HAL_GPIO_Init+0x2c4>)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	220f      	movs	r2, #15
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001386:	d00d      	beq.n	80013a4 <HAL_GPIO_Init+0x1d4>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a43      	ldr	r2, [pc, #268]	; (8001498 <HAL_GPIO_Init+0x2c8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d007      	beq.n	80013a0 <HAL_GPIO_Init+0x1d0>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a42      	ldr	r2, [pc, #264]	; (800149c <HAL_GPIO_Init+0x2cc>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d101      	bne.n	800139c <HAL_GPIO_Init+0x1cc>
 8001398:	2302      	movs	r3, #2
 800139a:	e004      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 800139c:	2307      	movs	r3, #7
 800139e:	e002      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 80013a4:	2300      	movs	r3, #0
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	f002 0203 	and.w	r2, r2, #3
 80013ac:	0092      	lsls	r2, r2, #2
 80013ae:	4093      	lsls	r3, r2
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013b6:	4937      	ldr	r1, [pc, #220]	; (8001494 <HAL_GPIO_Init+0x2c4>)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013e8:	4a2d      	ldr	r2, [pc, #180]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001412:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800143c:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	fa22 f303 	lsr.w	r3, r2, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	f47f aeaf 	bne.w	80011e0 <HAL_GPIO_Init+0x10>
  }
}
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	371c      	adds	r7, #28
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40021000 	.word	0x40021000
 8001494:	40010000 	.word	0x40010000
 8001498:	48000400 	.word	0x48000400
 800149c:	48000800 	.word	0x48000800
 80014a0:	40010400 	.word	0x40010400

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40007000 	.word	0x40007000

080014f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_PWREx_GetVoltageRange+0x18>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40007000 	.word	0x40007000

08001510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151e:	d130      	bne.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800152c:	d038      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001536:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2232      	movs	r2, #50	; 0x32
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9b      	lsrs	r3, r3, #18
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001554:	e002      	b.n	800155c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3b01      	subs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001568:	d102      	bne.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x60>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f2      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157c:	d110      	bne.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e00f      	b.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800158a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158e:	d007      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40007000 	.word	0x40007000
 80015b4:	20000000 	.word	0x20000000
 80015b8:	431bde83 	.word	0x431bde83

080015bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f000 bc02 	b.w	8001dd4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d0:	4b96      	ldr	r3, [pc, #600]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015da:	4b94      	ldr	r3, [pc, #592]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80e4 	beq.w	80017ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d007      	beq.n	8001608 <HAL_RCC_OscConfig+0x4c>
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2b0c      	cmp	r3, #12
 80015fc:	f040 808b 	bne.w	8001716 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b01      	cmp	r3, #1
 8001604:	f040 8087 	bne.w	8001716 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001608:	4b88      	ldr	r3, [pc, #544]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x64>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e3d9      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1a      	ldr	r2, [r3, #32]
 8001624:	4b81      	ldr	r3, [pc, #516]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <HAL_RCC_OscConfig+0x7e>
 8001630:	4b7e      	ldr	r3, [pc, #504]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001638:	e005      	b.n	8001646 <HAL_RCC_OscConfig+0x8a>
 800163a:	4b7c      	ldr	r3, [pc, #496]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001646:	4293      	cmp	r3, r2
 8001648:	d223      	bcs.n	8001692 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fd8c 	bl	800216c <RCC_SetFlashLatencyFromMSIRange>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e3ba      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165e:	4b73      	ldr	r3, [pc, #460]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a72      	ldr	r2, [pc, #456]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b70      	ldr	r3, [pc, #448]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	496d      	ldr	r1, [pc, #436]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167c:	4b6b      	ldr	r3, [pc, #428]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	4968      	ldr	r1, [pc, #416]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
 8001690:	e025      	b.n	80016de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001692:	4b66      	ldr	r3, [pc, #408]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a65      	ldr	r2, [pc, #404]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4960      	ldr	r1, [pc, #384]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b0:	4b5e      	ldr	r3, [pc, #376]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	495b      	ldr	r1, [pc, #364]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fd4c 	bl	800216c <RCC_SetFlashLatencyFromMSIRange>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e37a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016de:	f000 fc81 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b51      	ldr	r3, [pc, #324]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	4950      	ldr	r1, [pc, #320]	; (8001830 <HAL_RCC_OscConfig+0x274>)
 80016f0:	5ccb      	ldrb	r3, [r1, r3]
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	fa22 f303 	lsr.w	r3, r2, r3
 80016fa:	4a4e      	ldr	r2, [pc, #312]	; (8001834 <HAL_RCC_OscConfig+0x278>)
 80016fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016fe:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <HAL_RCC_OscConfig+0x27c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fb54 	bl	8000db0 <HAL_InitTick>
 8001708:	4603      	mov	r3, r0
 800170a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d052      	beq.n	80017b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	e35e      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d032      	beq.n	8001784 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800171e:	4b43      	ldr	r3, [pc, #268]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a42      	ldr	r2, [pc, #264]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800172a:	f7ff fb91 	bl	8000e50 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001732:	f7ff fb8d 	bl	8000e50 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e347      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001744:	4b39      	ldr	r3, [pc, #228]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001750:	4b36      	ldr	r3, [pc, #216]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a35      	ldr	r2, [pc, #212]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4930      	ldr	r1, [pc, #192]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176e:	4b2f      	ldr	r3, [pc, #188]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	492b      	ldr	r1, [pc, #172]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
 8001782:	e01a      	b.n	80017ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a28      	ldr	r2, [pc, #160]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001790:	f7ff fb5e 	bl	8000e50 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001798:	f7ff fb5a 	bl	8000e50 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e314      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x1dc>
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d073      	beq.n	80018ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_OscConfig+0x21c>
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b0c      	cmp	r3, #12
 80017d0:	d10e      	bne.n	80017f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d10b      	bne.n	80017f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d063      	beq.n	80018ac <HAL_RCC_OscConfig+0x2f0>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d15f      	bne.n	80018ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e2f1      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d106      	bne.n	8001808 <HAL_RCC_OscConfig+0x24c>
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e025      	b.n	8001854 <HAL_RCC_OscConfig+0x298>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001810:	d114      	bne.n	800183c <HAL_RCC_OscConfig+0x280>
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a02      	ldr	r2, [pc, #8]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e013      	b.n	8001854 <HAL_RCC_OscConfig+0x298>
 800182c:	40021000 	.word	0x40021000
 8001830:	08004bf8 	.word	0x08004bf8
 8001834:	20000000 	.word	0x20000000
 8001838:	20000004 	.word	0x20000004
 800183c:	4ba0      	ldr	r3, [pc, #640]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a9f      	ldr	r2, [pc, #636]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b9d      	ldr	r3, [pc, #628]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a9c      	ldr	r2, [pc, #624]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800184e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff faf8 	bl	8000e50 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff faf4 	bl	8000e50 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e2ae      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	4b92      	ldr	r3, [pc, #584]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x2a8>
 8001882:	e014      	b.n	80018ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fae4 	bl	8000e50 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fae0 	bl	8000e50 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e29a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189e:	4b88      	ldr	r3, [pc, #544]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x2d0>
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d060      	beq.n	800197c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x310>
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d119      	bne.n	80018fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d116      	bne.n	80018fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018cc:	4b7c      	ldr	r3, [pc, #496]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_OscConfig+0x328>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e277      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	061b      	lsls	r3, r3, #24
 80018f2:	4973      	ldr	r1, [pc, #460]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f8:	e040      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d023      	beq.n	800194a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001902:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6e      	ldr	r2, [pc, #440]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff fa9f 	bl	8000e50 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fa9b 	bl	8000e50 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e255      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001928:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b62      	ldr	r3, [pc, #392]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	495f      	ldr	r1, [pc, #380]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
 8001948:	e018      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194a:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a5c      	ldr	r2, [pc, #368]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7ff fa7b 	bl	8000e50 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff fa77 	bl	8000e50 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e231      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001970:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d03c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01c      	beq.n	80019ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff fa56 	bl	8000e50 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff fa52 	bl	8000e50 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e20c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ef      	beq.n	80019a8 <HAL_RCC_OscConfig+0x3ec>
 80019c8:	e01b      	b.n	8001a02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d0:	4a3b      	ldr	r2, [pc, #236]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff fa39 	bl	8000e50 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e2:	f7ff fa35 	bl	8000e50 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1ef      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f4:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ef      	bne.n	80019e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80a6 	beq.w	8001b5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10d      	bne.n	8001a3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d118      	bne.n	8001a7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a54:	f7ff f9fc 	bl	8000e50 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5c:	f7ff f9f8 	bl	8000e50 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1b2      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4d8>
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a92:	e029      	b.n	8001ae8 <HAL_RCC_OscConfig+0x52c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d115      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x50c>
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab2:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001abc:	e014      	b.n	8001ae8 <HAL_RCC_OscConfig+0x52c>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	4b9a      	ldr	r3, [pc, #616]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ace:	4a99      	ldr	r2, [pc, #612]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad8:	4b96      	ldr	r3, [pc, #600]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ade:	4a95      	ldr	r2, [pc, #596]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001ae0:	f023 0304 	bic.w	r3, r3, #4
 8001ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d016      	beq.n	8001b1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff f9ae 	bl	8000e50 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7ff f9aa 	bl	8000e50 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e162      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0e:	4b89      	ldr	r3, [pc, #548]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0ed      	beq.n	8001af8 <HAL_RCC_OscConfig+0x53c>
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f997 	bl	8000e50 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff f993 	bl	8000e50 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e14b      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b3c:	4b7d      	ldr	r3, [pc, #500]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ed      	bne.n	8001b26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b4a:	7ffb      	ldrb	r3, [r7, #31]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4b78      	ldr	r3, [pc, #480]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	4a77      	ldr	r2, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d03c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01c      	beq.n	8001baa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b70:	4b70      	ldr	r3, [pc, #448]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b76:	4a6f      	ldr	r2, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff f966 	bl	8000e50 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b88:	f7ff f962 	bl	8000e50 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e11c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b9a:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ef      	beq.n	8001b88 <HAL_RCC_OscConfig+0x5cc>
 8001ba8:	e01b      	b.n	8001be2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001baa:	4b62      	ldr	r3, [pc, #392]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001bac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bb0:	4a60      	ldr	r2, [pc, #384]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff f949 	bl	8000e50 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bc2:	f7ff f945 	bl	8000e50 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0ff      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bd4:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ef      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80f3 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	f040 80c9 	bne.w	8001d88 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bf6:	4b4f      	ldr	r3, [pc, #316]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f003 0203 	and.w	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d12c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	3b01      	subs	r3, #1
 8001c16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d123      	bne.n	8001c64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d11b      	bne.n	8001c64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d113      	bne.n	8001c64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d109      	bne.n	8001c64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d06b      	beq.n	8001d3c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	d062      	beq.n	8001d30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c6a:	4b32      	ldr	r3, [pc, #200]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0ac      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a2d      	ldr	r2, [pc, #180]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c86:	f7ff f8e3 	bl	8000e50 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff f8df 	bl	8000e50 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e099      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_RCC_OscConfig+0x77c>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cbc:	3a01      	subs	r2, #1
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cc6:	0212      	lsls	r2, r2, #8
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cce:	0852      	lsrs	r2, r2, #1
 8001cd0:	3a01      	subs	r2, #1
 8001cd2:	0552      	lsls	r2, r2, #21
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cda:	0852      	lsrs	r2, r2, #1
 8001cdc:	3a01      	subs	r2, #1
 8001cde:	0652      	lsls	r2, r2, #25
 8001ce0:	4311      	orrs	r1, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ce6:	06d2      	lsls	r2, r2, #27
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	4912      	ldr	r1, [pc, #72]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d08:	f7ff f8a2 	bl	8000e50 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff f89e 	bl	8000e50 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e058      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d2e:	e050      	b.n	8001dd2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e04f      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
 8001d34:	40021000 	.word	0x40021000
 8001d38:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d144      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d48:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a20      	ldr	r2, [pc, #128]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d60:	f7ff f876 	bl	8000e50 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7ff f872 	bl	8000e50 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e02c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x7ac>
 8001d86:	e024      	b.n	8001dd2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d01f      	beq.n	8001dce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7ff f859 	bl	8000e50 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da2:	f7ff f855 	bl	8000e50 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e00f      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	4905      	ldr	r1, [pc, #20]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_OscConfig+0x824>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60cb      	str	r3, [r1, #12]
 8001dcc:	e001      	b.n	8001dd2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	feeefffc 	.word	0xfeeefffc

08001de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0e7      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b75      	ldr	r3, [pc, #468]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d910      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	4970      	ldr	r1, [pc, #448]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b6e      	ldr	r3, [pc, #440]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0cf      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d010      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d908      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4960      	ldr	r1, [pc, #384]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d04c      	beq.n	8001efc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6a:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d121      	bne.n	8001eba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0a6      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e82:	4b54      	ldr	r3, [pc, #336]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d115      	bne.n	8001eba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e09a      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e9a:	4b4e      	ldr	r3, [pc, #312]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e08e      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eaa:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e086      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eba:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f023 0203 	bic.w	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4943      	ldr	r1, [pc, #268]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ecc:	f7fe ffc0 	bl	8000e50 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed4:	f7fe ffbc 	bl	8000e50 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e06e      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 020c 	and.w	r2, r3, #12
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d1eb      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d010      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d208      	bcs.n	8001f2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f18:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	492b      	ldr	r1, [pc, #172]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2a:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d210      	bcs.n	8001f5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 0207 	bic.w	r2, r3, #7
 8001f40:	4923      	ldr	r1, [pc, #140]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e036      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f66:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	4918      	ldr	r1, [pc, #96]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d009      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4910      	ldr	r1, [pc, #64]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f98:	f000 f824 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	490b      	ldr	r1, [pc, #44]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f4>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001fb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_RCC_ClockConfig+0x1fc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fef7 	bl	8000db0 <HAL_InitTick>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fc6:	7afb      	ldrb	r3, [r7, #11]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40022000 	.word	0x40022000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08004bf8 	.word	0x08004bf8
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff2:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x34>
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d121      	bne.n	8002056 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d11e      	bne.n	8002056 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002018:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d107      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e005      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002040:	4a2b      	ldr	r2, [pc, #172]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10d      	bne.n	800206c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002054:	e00a      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d102      	bne.n	8002062 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	e004      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b08      	cmp	r3, #8
 8002066:	d101      	bne.n	800206c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002068:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800206a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b0c      	cmp	r3, #12
 8002070:	d134      	bne.n	80020dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d003      	beq.n	800208a <HAL_RCC_GetSysClockFreq+0xa6>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d003      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0xac>
 8002088:	e005      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800208a:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800208c:	617b      	str	r3, [r7, #20]
      break;
 800208e:	e005      	b.n	800209c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002090:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002092:	617b      	str	r3, [r7, #20]
      break;
 8002094:	e002      	b.n	800209c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	617b      	str	r3, [r7, #20]
      break;
 800209a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	3301      	adds	r3, #1
 80020a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	fb03 f202 	mul.w	r2, r3, r2
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	0e5b      	lsrs	r3, r3, #25
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	3301      	adds	r3, #1
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020dc:	69bb      	ldr	r3, [r7, #24]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08004c10 	.word	0x08004c10
 80020f4:	00f42400 	.word	0x00f42400
 80020f8:	007a1200 	.word	0x007a1200

080020fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_RCC_GetHCLKFreq+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000000 	.word	0x20000000

08002114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002118:	f7ff fff0 	bl	80020fc <HAL_RCC_GetHCLKFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4904      	ldr	r1, [pc, #16]	; (800213c <HAL_RCC_GetPCLK1Freq+0x28>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	08004c08 	.word	0x08004c08

08002140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002144:	f7ff ffda 	bl	80020fc <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0adb      	lsrs	r3, r3, #11
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4904      	ldr	r1, [pc, #16]	; (8002168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	08004c08 	.word	0x08004c08

0800216c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002178:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002184:	f7ff f9b6 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 8002188:	6178      	str	r0, [r7, #20]
 800218a:	e014      	b.n	80021b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	4a24      	ldr	r2, [pc, #144]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	6593      	str	r3, [r2, #88]	; 0x58
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021a4:	f7ff f9a6 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 80021a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021bc:	d10b      	bne.n	80021d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b80      	cmp	r3, #128	; 0x80
 80021c2:	d919      	bls.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2ba0      	cmp	r3, #160	; 0xa0
 80021c8:	d902      	bls.n	80021d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ca:	2302      	movs	r3, #2
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	e013      	b.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021d0:	2301      	movs	r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	e010      	b.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b80      	cmp	r3, #128	; 0x80
 80021da:	d902      	bls.n	80021e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021dc:	2303      	movs	r3, #3
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	e00a      	b.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	d102      	bne.n	80021ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021e8:	2302      	movs	r3, #2
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	e004      	b.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b70      	cmp	r3, #112	; 0x70
 80021f2:	d101      	bne.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f4:	2301      	movs	r3, #1
 80021f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 0207 	bic.w	r2, r3, #7
 8002200:	4909      	ldr	r1, [pc, #36]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	429a      	cmp	r2, r3
 8002214:	d001      	beq.n	800221a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	40022000 	.word	0x40022000

0800222c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002234:	2300      	movs	r3, #0
 8002236:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002238:	2300      	movs	r3, #0
 800223a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002244:	2b00      	cmp	r3, #0
 8002246:	d031      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002250:	d01a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002252:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002256:	d814      	bhi.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d009      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800225c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002260:	d10f      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002262:	4b5d      	ldr	r3, [pc, #372]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	4a5c      	ldr	r2, [pc, #368]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800226e:	e00c      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f9de 	bl	8002638 <RCCEx_PLLSAI1_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002280:	e003      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	74fb      	strb	r3, [r7, #19]
      break;
 8002286:	e000      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10b      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002290:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	494e      	ldr	r1, [pc, #312]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022a6:	e001      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 809e 	beq.w	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022be:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80022ce:	2300      	movs	r3, #0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00d      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	4a3f      	ldr	r2, [pc, #252]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022de:	6593      	str	r3, [r2, #88]	; 0x58
 80022e0:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f0:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a39      	ldr	r2, [pc, #228]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022fc:	f7fe fda8 	bl	8000e50 <HAL_GetTick>
 8002300:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002302:	e009      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002304:	f7fe fda4 	bl	8000e50 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d902      	bls.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	74fb      	strb	r3, [r7, #19]
        break;
 8002316:	e005      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0ef      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d15a      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002334:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01e      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	429a      	cmp	r2, r3
 8002344:	d019      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002350:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002352:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800235a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002362:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002368:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800236a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002372:	4a19      	ldr	r2, [pc, #100]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d016      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe fd64 	bl	8000e50 <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238a:	e00b      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7fe fd60 	bl	8000e50 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d902      	bls.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	74fb      	strb	r3, [r7, #19]
            break;
 80023a2:	e006      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0ec      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10b      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c6:	4904      	ldr	r1, [pc, #16]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023ce:	e009      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	74bb      	strb	r3, [r7, #18]
 80023d4:	e006      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e4:	7c7b      	ldrb	r3, [r7, #17]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d105      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ea:	4b8a      	ldr	r3, [pc, #552]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	4a89      	ldr	r2, [pc, #548]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002402:	4b84      	ldr	r3, [pc, #528]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f023 0203 	bic.w	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4980      	ldr	r1, [pc, #512]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002424:	4b7b      	ldr	r3, [pc, #492]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f023 020c 	bic.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	4978      	ldr	r1, [pc, #480]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002446:	4b73      	ldr	r3, [pc, #460]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	496f      	ldr	r1, [pc, #444]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002468:	4b6a      	ldr	r3, [pc, #424]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002476:	4967      	ldr	r1, [pc, #412]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800248a:	4b62      	ldr	r3, [pc, #392]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002498:	495e      	ldr	r1, [pc, #376]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ac:	4b59      	ldr	r3, [pc, #356]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	4956      	ldr	r1, [pc, #344]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024ce:	4b51      	ldr	r3, [pc, #324]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	494d      	ldr	r1, [pc, #308]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d028      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024f0:	4b48      	ldr	r3, [pc, #288]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4945      	ldr	r1, [pc, #276]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800250e:	d106      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002510:	4b40      	ldr	r3, [pc, #256]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a3f      	ldr	r2, [pc, #252]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251a:	60d3      	str	r3, [r2, #12]
 800251c:	e011      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002526:	d10c      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f882 	bl	8002638 <RCCEx_PLLSAI1_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d028      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800254e:	4b31      	ldr	r3, [pc, #196]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002554:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	492d      	ldr	r1, [pc, #180]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800256c:	d106      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800256e:	4b29      	ldr	r3, [pc, #164]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	4a28      	ldr	r2, [pc, #160]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002578:	60d3      	str	r3, [r2, #12]
 800257a:	e011      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002584:	d10c      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3304      	adds	r3, #4
 800258a:	2101      	movs	r1, #1
 800258c:	4618      	mov	r0, r3
 800258e:	f000 f853 	bl	8002638 <RCCEx_PLLSAI1_Config>
 8002592:	4603      	mov	r3, r0
 8002594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002596:	7cfb      	ldrb	r3, [r7, #19]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800259c:	7cfb      	ldrb	r3, [r7, #19]
 800259e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01c      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ba:	4916      	ldr	r1, [pc, #88]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ca:	d10c      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3304      	adds	r3, #4
 80025d0:	2102      	movs	r1, #2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f830 	bl	8002638 <RCCEx_PLLSAI1_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002600:	4904      	ldr	r1, [pc, #16]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002608:	7cbb      	ldrb	r3, [r7, #18]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a04      	ldr	r2, [pc, #16]	; (8002634 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000

08002638 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002646:	4b74      	ldr	r3, [pc, #464]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d018      	beq.n	8002684 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002652:	4b71      	ldr	r3, [pc, #452]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0203 	and.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d10d      	bne.n	800267e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
       ||
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800266a:	4b6b      	ldr	r3, [pc, #428]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
       ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d047      	beq.n	800270e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	e044      	b.n	800270e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d018      	beq.n	80026be <RCCEx_PLLSAI1_Config+0x86>
 800268c:	2b03      	cmp	r3, #3
 800268e:	d825      	bhi.n	80026dc <RCCEx_PLLSAI1_Config+0xa4>
 8002690:	2b01      	cmp	r3, #1
 8002692:	d002      	beq.n	800269a <RCCEx_PLLSAI1_Config+0x62>
 8002694:	2b02      	cmp	r3, #2
 8002696:	d009      	beq.n	80026ac <RCCEx_PLLSAI1_Config+0x74>
 8002698:	e020      	b.n	80026dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800269a:	4b5f      	ldr	r3, [pc, #380]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d11d      	bne.n	80026e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026aa:	e01a      	b.n	80026e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026ac:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d116      	bne.n	80026e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026bc:	e013      	b.n	80026e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026be:	4b56      	ldr	r3, [pc, #344]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026ca:	4b53      	ldr	r3, [pc, #332]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026da:	e006      	b.n	80026ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      break;
 80026e0:	e004      	b.n	80026ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026e2:	bf00      	nop
 80026e4:	e002      	b.n	80026ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10d      	bne.n	800270e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026f2:	4b49      	ldr	r3, [pc, #292]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	430b      	orrs	r3, r1
 8002708:	4943      	ldr	r1, [pc, #268]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270a:	4313      	orrs	r3, r2
 800270c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d17c      	bne.n	800280e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002714:	4b40      	ldr	r3, [pc, #256]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a3f      	ldr	r2, [pc, #252]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800271a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800271e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002720:	f7fe fb96 	bl	8000e50 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002726:	e009      	b.n	800273c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002728:	f7fe fb92 	bl	8000e50 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d902      	bls.n	800273c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	73fb      	strb	r3, [r7, #15]
        break;
 800273a:	e005      	b.n	8002748 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ef      	bne.n	8002728 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d15f      	bne.n	800280e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d110      	bne.n	8002776 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002754:	4b30      	ldr	r3, [pc, #192]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800275c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6892      	ldr	r2, [r2, #8]
 8002764:	0211      	lsls	r1, r2, #8
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68d2      	ldr	r2, [r2, #12]
 800276a:	06d2      	lsls	r2, r2, #27
 800276c:	430a      	orrs	r2, r1
 800276e:	492a      	ldr	r1, [pc, #168]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002770:	4313      	orrs	r3, r2
 8002772:	610b      	str	r3, [r1, #16]
 8002774:	e027      	b.n	80027c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d112      	bne.n	80027a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800277c:	4b26      	ldr	r3, [pc, #152]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002784:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6892      	ldr	r2, [r2, #8]
 800278c:	0211      	lsls	r1, r2, #8
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6912      	ldr	r2, [r2, #16]
 8002792:	0852      	lsrs	r2, r2, #1
 8002794:	3a01      	subs	r2, #1
 8002796:	0552      	lsls	r2, r2, #21
 8002798:	430a      	orrs	r2, r1
 800279a:	491f      	ldr	r1, [pc, #124]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279c:	4313      	orrs	r3, r2
 800279e:	610b      	str	r3, [r1, #16]
 80027a0:	e011      	b.n	80027c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6892      	ldr	r2, [r2, #8]
 80027b2:	0211      	lsls	r1, r2, #8
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6952      	ldr	r2, [r2, #20]
 80027b8:	0852      	lsrs	r2, r2, #1
 80027ba:	3a01      	subs	r2, #1
 80027bc:	0652      	lsls	r2, r2, #25
 80027be:	430a      	orrs	r2, r1
 80027c0:	4915      	ldr	r1, [pc, #84]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a13      	ldr	r2, [pc, #76]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7fe fb3d 	bl	8000e50 <HAL_GetTick>
 80027d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027d8:	e009      	b.n	80027ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027da:	f7fe fb39 	bl	8000e50 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d902      	bls.n	80027ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	73fb      	strb	r3, [r7, #15]
          break;
 80027ec:	e005      	b.n	80027fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0ef      	beq.n	80027da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d106      	bne.n	800280e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280a:	4313      	orrs	r3, r2
 800280c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800280e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000

0800281c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e040      	b.n	80028b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe f91c 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 feb2 	bl	80035cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fc83 	bl	8003174 <UART_SetConfig>
 800286e:	4603      	mov	r3, r0
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e01b      	b.n	80028b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 ff31 	bl	8003710 <UART_CheckIdleState>
 80028ae:	4603      	mov	r3, r0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d178      	bne.n	80029c2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_UART_Transmit+0x24>
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e071      	b.n	80029c4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2221      	movs	r2, #33	; 0x21
 80028ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ee:	f7fe faaf 	bl	8000e50 <HAL_GetTick>
 80028f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	88fa      	ldrh	r2, [r7, #6]
 80028f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	88fa      	ldrh	r2, [r7, #6]
 8002900:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290c:	d108      	bne.n	8002920 <HAL_UART_Transmit+0x68>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	e003      	b.n	8002928 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002928:	e030      	b.n	800298c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2200      	movs	r2, #0
 8002932:	2180      	movs	r1, #128	; 0x80
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 ff93 	bl	8003860 <UART_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e03c      	b.n	80029c4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10b      	bne.n	8002968 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	881a      	ldrh	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800295c:	b292      	uxth	r2, r2
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	3302      	adds	r3, #2
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	e008      	b.n	800297a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	781a      	ldrb	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b292      	uxth	r2, r2
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	3301      	adds	r3, #1
 8002978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1c8      	bne.n	800292a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2200      	movs	r2, #0
 80029a0:	2140      	movs	r1, #64	; 0x40
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 ff5c 	bl	8003860 <UART_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e005      	b.n	80029c4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80029c2:	2302      	movs	r3, #2
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	f040 80b6 	bne.w	8002b54 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_UART_Receive+0x28>
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0ae      	b.n	8002b56 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2222      	movs	r2, #34	; 0x22
 8002a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe fa1f 	bl	8000e50 <HAL_GetTick>
 8002a12:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	88fa      	ldrh	r2, [r7, #6]
 8002a20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2c:	d10e      	bne.n	8002a4c <HAL_UART_Receive+0x80>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d105      	bne.n	8002a42 <HAL_UART_Receive+0x76>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002a3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a40:	e02d      	b.n	8002a9e <HAL_UART_Receive+0xd2>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	22ff      	movs	r2, #255	; 0xff
 8002a46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a4a:	e028      	b.n	8002a9e <HAL_UART_Receive+0xd2>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10d      	bne.n	8002a70 <HAL_UART_Receive+0xa4>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <HAL_UART_Receive+0x9a>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	22ff      	movs	r2, #255	; 0xff
 8002a60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a64:	e01b      	b.n	8002a9e <HAL_UART_Receive+0xd2>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	227f      	movs	r2, #127	; 0x7f
 8002a6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a6e:	e016      	b.n	8002a9e <HAL_UART_Receive+0xd2>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a78:	d10d      	bne.n	8002a96 <HAL_UART_Receive+0xca>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <HAL_UART_Receive+0xc0>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	227f      	movs	r2, #127	; 0x7f
 8002a86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a8a:	e008      	b.n	8002a9e <HAL_UART_Receive+0xd2>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	223f      	movs	r2, #63	; 0x3f
 8002a90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a94:	e003      	b.n	8002a9e <HAL_UART_Receive+0xd2>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002aa4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aae:	d108      	bne.n	8002ac2 <HAL_UART_Receive+0xf6>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d104      	bne.n	8002ac2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	e003      	b.n	8002aca <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002aca:	e037      	b.n	8002b3c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2120      	movs	r1, #32
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fec2 	bl	8003860 <UART_WaitOnFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e033      	b.n	8002b56 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10c      	bne.n	8002b0e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	8a7b      	ldrh	r3, [r7, #18]
 8002afe:	4013      	ands	r3, r2
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	3302      	adds	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	e00d      	b.n	8002b2a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	8a7b      	ldrh	r3, [r7, #18]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3301      	adds	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1c1      	bne.n	8002acc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b0ba      	sub	sp, #232	; 0xe8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b8e:	4013      	ands	r3, r2
 8002b90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d115      	bne.n	8002bc8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00f      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d009      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 82ae 	beq.w	800311a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
      }
      return;
 8002bc6:	e2a8      	b.n	800311a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8117 	beq.w	8002e00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002bde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002be2:	4b85      	ldr	r3, [pc, #532]	; (8002df8 <HAL_UART_IRQHandler+0x298>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 810a 	beq.w	8002e00 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d011      	beq.n	8002c1c <HAL_UART_IRQHandler+0xbc>
 8002bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00b      	beq.n	8002c1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d011      	beq.n	8002c4c <HAL_UART_IRQHandler+0xec>
 8002c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c42:	f043 0204 	orr.w	r2, r3, #4
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d011      	beq.n	8002c7c <HAL_UART_IRQHandler+0x11c>
 8002c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2204      	movs	r2, #4
 8002c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c72:	f043 0202 	orr.w	r2, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d017      	beq.n	8002cb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00b      	beq.n	8002cb8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cae:	f043 0208 	orr.w	r2, r3, #8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x18a>
 8002cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00c      	beq.n	8002cea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce0:	f043 0220 	orr.w	r2, r3, #32
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8214 	beq.w	800311e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00d      	beq.n	8002d1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	d005      	beq.n	8002d42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d04f      	beq.n	8002de2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fdf3 	bl	800392e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d141      	bne.n	8002dda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3308      	adds	r3, #8
 8002d7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d92:	e841 2300 	strex	r3, r2, [r1]
 8002d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1d9      	bne.n	8002d56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d013      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <HAL_UART_IRQHandler+0x29c>)
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe f9c9 	bl	800114e <HAL_DMA_Abort_IT>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d017      	beq.n	8002df2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd0:	e00f      	b.n	8002df2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f9b8 	bl	8003148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	e00b      	b.n	8002df2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f9b4 	bl	8003148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de0:	e007      	b.n	8002df2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9b0 	bl	8003148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002df0:	e195      	b.n	800311e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df2:	bf00      	nop
    return;
 8002df4:	e193      	b.n	800311e <HAL_UART_IRQHandler+0x5be>
 8002df6:	bf00      	nop
 8002df8:	04000120 	.word	0x04000120
 8002dfc:	080039f7 	.word	0x080039f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	f040 814e 	bne.w	80030a6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8147 	beq.w	80030a6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8140 	beq.w	80030a6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	f040 80b8 	bne.w	8002fae <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8167 	beq.w	8003122 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	f080 815f 	bcs.w	8003122 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f040 8086 	bne.w	8002f8c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e8c:	e853 3f00 	ldrex	r3, [r3]
 8002e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002eaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002eb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002eba:	e841 2300 	strex	r3, r2, [r1]
 8002ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1da      	bne.n	8002e80 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3308      	adds	r3, #8
 8002ed0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed4:	e853 3f00 	ldrex	r3, [r3]
 8002ed8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3308      	adds	r3, #8
 8002eea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ef2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ef6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e1      	bne.n	8002eca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3308      	adds	r3, #8
 8002f0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3308      	adds	r3, #8
 8002f26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f32:	e841 2300 	strex	r3, r2, [r1]
 8002f36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1e3      	bne.n	8002f06 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f54:	e853 3f00 	ldrex	r3, [r3]
 8002f58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f5c:	f023 0310 	bic.w	r3, r3, #16
 8002f60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e4      	bne.n	8002f4c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe f8a3 	bl	80010d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f8d8 	bl	800315c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fac:	e0b9      	b.n	8003122 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80ab 	beq.w	8003126 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a6 	beq.w	8003126 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	e853 3f00 	ldrex	r3, [r3]
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ffe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003000:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003004:	e841 2300 	strex	r3, r2, [r1]
 8003008:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800300a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1e4      	bne.n	8002fda <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3308      	adds	r3, #8
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	e853 3f00 	ldrex	r3, [r3]
 800301e:	623b      	str	r3, [r7, #32]
   return(result);
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3308      	adds	r3, #8
 8003030:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003034:	633a      	str	r2, [r7, #48]	; 0x30
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800303a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800303c:	e841 2300 	strex	r3, r2, [r1]
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e3      	bne.n	8003010 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	60fb      	str	r3, [r7, #12]
   return(result);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f023 0310 	bic.w	r3, r3, #16
 8003070:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800307e:	61fb      	str	r3, [r7, #28]
 8003080:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	69b9      	ldr	r1, [r7, #24]
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	617b      	str	r3, [r7, #20]
   return(result);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e4      	bne.n	800305c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f85c 	bl	800315c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030a4:	e03f      	b.n	8003126 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00e      	beq.n	80030d0 <HAL_UART_IRQHandler+0x570>
 80030b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fcd4 	bl	8003a76 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030ce:	e02d      	b.n	800312c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01c      	beq.n	800312a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
    }
    return;
 80030f8:	e017      	b.n	800312a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d012      	beq.n	800312c <HAL_UART_IRQHandler+0x5cc>
 8003106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00c      	beq.n	800312c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fc85 	bl	8003a22 <UART_EndTransmit_IT>
    return;
 8003118:	e008      	b.n	800312c <HAL_UART_IRQHandler+0x5cc>
      return;
 800311a:	bf00      	nop
 800311c:	e006      	b.n	800312c <HAL_UART_IRQHandler+0x5cc>
    return;
 800311e:	bf00      	nop
 8003120:	e004      	b.n	800312c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003122:	bf00      	nop
 8003124:	e002      	b.n	800312c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003126:	bf00      	nop
 8003128:	e000      	b.n	800312c <HAL_UART_IRQHandler+0x5cc>
    return;
 800312a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800312c:	37e8      	adds	r7, #232	; 0xe8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop

08003134 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003178:	b08a      	sub	sp, #40	; 0x28
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	431a      	orrs	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	4313      	orrs	r3, r2
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4bb4      	ldr	r3, [pc, #720]	; (8003474 <UART_SetConfig+0x300>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4aa9      	ldr	r2, [pc, #676]	; (8003478 <UART_SetConfig+0x304>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031dc:	4313      	orrs	r3, r2
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4aa0      	ldr	r2, [pc, #640]	; (800347c <UART_SetConfig+0x308>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d126      	bne.n	800324c <UART_SetConfig+0xd8>
 80031fe:	4ba0      	ldr	r3, [pc, #640]	; (8003480 <UART_SetConfig+0x30c>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b03      	cmp	r3, #3
 800320a:	d81b      	bhi.n	8003244 <UART_SetConfig+0xd0>
 800320c:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <UART_SetConfig+0xa0>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003225 	.word	0x08003225
 8003218:	08003235 	.word	0x08003235
 800321c:	0800322d 	.word	0x0800322d
 8003220:	0800323d 	.word	0x0800323d
 8003224:	2301      	movs	r3, #1
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322a:	e080      	b.n	800332e <UART_SetConfig+0x1ba>
 800322c:	2302      	movs	r3, #2
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003232:	e07c      	b.n	800332e <UART_SetConfig+0x1ba>
 8003234:	2304      	movs	r3, #4
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323a:	e078      	b.n	800332e <UART_SetConfig+0x1ba>
 800323c:	2308      	movs	r3, #8
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003242:	e074      	b.n	800332e <UART_SetConfig+0x1ba>
 8003244:	2310      	movs	r3, #16
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324a:	e070      	b.n	800332e <UART_SetConfig+0x1ba>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a8c      	ldr	r2, [pc, #560]	; (8003484 <UART_SetConfig+0x310>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d138      	bne.n	80032c8 <UART_SetConfig+0x154>
 8003256:	4b8a      	ldr	r3, [pc, #552]	; (8003480 <UART_SetConfig+0x30c>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d82d      	bhi.n	80032c0 <UART_SetConfig+0x14c>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <UART_SetConfig+0xf8>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	080032a1 	.word	0x080032a1
 8003270:	080032c1 	.word	0x080032c1
 8003274:	080032c1 	.word	0x080032c1
 8003278:	080032c1 	.word	0x080032c1
 800327c:	080032b1 	.word	0x080032b1
 8003280:	080032c1 	.word	0x080032c1
 8003284:	080032c1 	.word	0x080032c1
 8003288:	080032c1 	.word	0x080032c1
 800328c:	080032a9 	.word	0x080032a9
 8003290:	080032c1 	.word	0x080032c1
 8003294:	080032c1 	.word	0x080032c1
 8003298:	080032c1 	.word	0x080032c1
 800329c:	080032b9 	.word	0x080032b9
 80032a0:	2300      	movs	r3, #0
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a6:	e042      	b.n	800332e <UART_SetConfig+0x1ba>
 80032a8:	2302      	movs	r3, #2
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ae:	e03e      	b.n	800332e <UART_SetConfig+0x1ba>
 80032b0:	2304      	movs	r3, #4
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b6:	e03a      	b.n	800332e <UART_SetConfig+0x1ba>
 80032b8:	2308      	movs	r3, #8
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032be:	e036      	b.n	800332e <UART_SetConfig+0x1ba>
 80032c0:	2310      	movs	r3, #16
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c6:	e032      	b.n	800332e <UART_SetConfig+0x1ba>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a6a      	ldr	r2, [pc, #424]	; (8003478 <UART_SetConfig+0x304>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d12a      	bne.n	8003328 <UART_SetConfig+0x1b4>
 80032d2:	4b6b      	ldr	r3, [pc, #428]	; (8003480 <UART_SetConfig+0x30c>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032e0:	d01a      	beq.n	8003318 <UART_SetConfig+0x1a4>
 80032e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032e6:	d81b      	bhi.n	8003320 <UART_SetConfig+0x1ac>
 80032e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ec:	d00c      	beq.n	8003308 <UART_SetConfig+0x194>
 80032ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f2:	d815      	bhi.n	8003320 <UART_SetConfig+0x1ac>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <UART_SetConfig+0x18c>
 80032f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fc:	d008      	beq.n	8003310 <UART_SetConfig+0x19c>
 80032fe:	e00f      	b.n	8003320 <UART_SetConfig+0x1ac>
 8003300:	2300      	movs	r3, #0
 8003302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003306:	e012      	b.n	800332e <UART_SetConfig+0x1ba>
 8003308:	2302      	movs	r3, #2
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330e:	e00e      	b.n	800332e <UART_SetConfig+0x1ba>
 8003310:	2304      	movs	r3, #4
 8003312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003316:	e00a      	b.n	800332e <UART_SetConfig+0x1ba>
 8003318:	2308      	movs	r3, #8
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331e:	e006      	b.n	800332e <UART_SetConfig+0x1ba>
 8003320:	2310      	movs	r3, #16
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003326:	e002      	b.n	800332e <UART_SetConfig+0x1ba>
 8003328:	2310      	movs	r3, #16
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a51      	ldr	r2, [pc, #324]	; (8003478 <UART_SetConfig+0x304>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d17a      	bne.n	800342e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800333c:	2b08      	cmp	r3, #8
 800333e:	d824      	bhi.n	800338a <UART_SetConfig+0x216>
 8003340:	a201      	add	r2, pc, #4	; (adr r2, 8003348 <UART_SetConfig+0x1d4>)
 8003342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003346:	bf00      	nop
 8003348:	0800336d 	.word	0x0800336d
 800334c:	0800338b 	.word	0x0800338b
 8003350:	08003375 	.word	0x08003375
 8003354:	0800338b 	.word	0x0800338b
 8003358:	0800337b 	.word	0x0800337b
 800335c:	0800338b 	.word	0x0800338b
 8003360:	0800338b 	.word	0x0800338b
 8003364:	0800338b 	.word	0x0800338b
 8003368:	08003383 	.word	0x08003383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800336c:	f7fe fed2 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8003370:	61f8      	str	r0, [r7, #28]
        break;
 8003372:	e010      	b.n	8003396 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003374:	4b44      	ldr	r3, [pc, #272]	; (8003488 <UART_SetConfig+0x314>)
 8003376:	61fb      	str	r3, [r7, #28]
        break;
 8003378:	e00d      	b.n	8003396 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7fe fe33 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 800337e:	61f8      	str	r0, [r7, #28]
        break;
 8003380:	e009      	b.n	8003396 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003386:	61fb      	str	r3, [r7, #28]
        break;
 8003388:	e005      	b.n	8003396 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003394:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8107 	beq.w	80035ac <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d305      	bcc.n	80033ba <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d903      	bls.n	80033c2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033c0:	e0f4      	b.n	80035ac <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	2200      	movs	r2, #0
 80033c6:	461c      	mov	r4, r3
 80033c8:	4615      	mov	r5, r2
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	022b      	lsls	r3, r5, #8
 80033d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033d8:	0222      	lsls	r2, r4, #8
 80033da:	68f9      	ldr	r1, [r7, #12]
 80033dc:	6849      	ldr	r1, [r1, #4]
 80033de:	0849      	lsrs	r1, r1, #1
 80033e0:	2000      	movs	r0, #0
 80033e2:	4688      	mov	r8, r1
 80033e4:	4681      	mov	r9, r0
 80033e6:	eb12 0a08 	adds.w	sl, r2, r8
 80033ea:	eb43 0b09 	adc.w	fp, r3, r9
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033fc:	4650      	mov	r0, sl
 80033fe:	4659      	mov	r1, fp
 8003400:	f7fc ff3e 	bl	8000280 <__aeabi_uldivmod>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4613      	mov	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003412:	d308      	bcc.n	8003426 <UART_SetConfig+0x2b2>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800341a:	d204      	bcs.n	8003426 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	60da      	str	r2, [r3, #12]
 8003424:	e0c2      	b.n	80035ac <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800342c:	e0be      	b.n	80035ac <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003436:	d16a      	bne.n	800350e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003438:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800343c:	2b08      	cmp	r3, #8
 800343e:	d834      	bhi.n	80034aa <UART_SetConfig+0x336>
 8003440:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <UART_SetConfig+0x2d4>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	0800346d 	.word	0x0800346d
 800344c:	0800348d 	.word	0x0800348d
 8003450:	08003495 	.word	0x08003495
 8003454:	080034ab 	.word	0x080034ab
 8003458:	0800349b 	.word	0x0800349b
 800345c:	080034ab 	.word	0x080034ab
 8003460:	080034ab 	.word	0x080034ab
 8003464:	080034ab 	.word	0x080034ab
 8003468:	080034a3 	.word	0x080034a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800346c:	f7fe fe52 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8003470:	61f8      	str	r0, [r7, #28]
        break;
 8003472:	e020      	b.n	80034b6 <UART_SetConfig+0x342>
 8003474:	efff69f3 	.word	0xefff69f3
 8003478:	40008000 	.word	0x40008000
 800347c:	40013800 	.word	0x40013800
 8003480:	40021000 	.word	0x40021000
 8003484:	40004400 	.word	0x40004400
 8003488:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800348c:	f7fe fe58 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 8003490:	61f8      	str	r0, [r7, #28]
        break;
 8003492:	e010      	b.n	80034b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003494:	4b4c      	ldr	r3, [pc, #304]	; (80035c8 <UART_SetConfig+0x454>)
 8003496:	61fb      	str	r3, [r7, #28]
        break;
 8003498:	e00d      	b.n	80034b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349a:	f7fe fda3 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 800349e:	61f8      	str	r0, [r7, #28]
        break;
 80034a0:	e009      	b.n	80034b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a6:	61fb      	str	r3, [r7, #28]
        break;
 80034a8:	e005      	b.n	80034b6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d077      	beq.n	80035ac <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005a      	lsls	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	441a      	add	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2b0f      	cmp	r3, #15
 80034d6:	d916      	bls.n	8003506 <UART_SetConfig+0x392>
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034de:	d212      	bcs.n	8003506 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f023 030f 	bic.w	r3, r3, #15
 80034e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	085b      	lsrs	r3, r3, #1
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	8afb      	ldrh	r3, [r7, #22]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	8afa      	ldrh	r2, [r7, #22]
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	e052      	b.n	80035ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800350c:	e04e      	b.n	80035ac <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800350e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003512:	2b08      	cmp	r3, #8
 8003514:	d827      	bhi.n	8003566 <UART_SetConfig+0x3f2>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <UART_SetConfig+0x3a8>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	08003541 	.word	0x08003541
 8003520:	08003549 	.word	0x08003549
 8003524:	08003551 	.word	0x08003551
 8003528:	08003567 	.word	0x08003567
 800352c:	08003557 	.word	0x08003557
 8003530:	08003567 	.word	0x08003567
 8003534:	08003567 	.word	0x08003567
 8003538:	08003567 	.word	0x08003567
 800353c:	0800355f 	.word	0x0800355f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003540:	f7fe fde8 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8003544:	61f8      	str	r0, [r7, #28]
        break;
 8003546:	e014      	b.n	8003572 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003548:	f7fe fdfa 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 800354c:	61f8      	str	r0, [r7, #28]
        break;
 800354e:	e010      	b.n	8003572 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003550:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <UART_SetConfig+0x454>)
 8003552:	61fb      	str	r3, [r7, #28]
        break;
 8003554:	e00d      	b.n	8003572 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003556:	f7fe fd45 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 800355a:	61f8      	str	r0, [r7, #28]
        break;
 800355c:	e009      	b.n	8003572 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800355e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003562:	61fb      	str	r3, [r7, #28]
        break;
 8003564:	e005      	b.n	8003572 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003570:	bf00      	nop
    }

    if (pclk != 0U)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d019      	beq.n	80035ac <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	085a      	lsrs	r2, r3, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	441a      	add	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	2b0f      	cmp	r3, #15
 8003590:	d909      	bls.n	80035a6 <UART_SetConfig+0x432>
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d205      	bcs.n	80035a6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60da      	str	r2, [r3, #12]
 80035a4:	e002      	b.n	80035ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3728      	adds	r7, #40	; 0x28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c6:	bf00      	nop
 80035c8:	00f42400 	.word	0x00f42400

080035cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01a      	beq.n	80036e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ca:	d10a      	bne.n	80036e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	605a      	str	r2, [r3, #4]
  }
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b098      	sub	sp, #96	; 0x60
 8003714:	af02      	add	r7, sp, #8
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003720:	f7fd fb96 	bl	8000e50 <HAL_GetTick>
 8003724:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b08      	cmp	r3, #8
 8003732:	d12e      	bne.n	8003792 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800373c:	2200      	movs	r2, #0
 800373e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f88c 	bl	8003860 <UART_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d021      	beq.n	8003792 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800375c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003762:	653b      	str	r3, [r7, #80]	; 0x50
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800376c:	647b      	str	r3, [r7, #68]	; 0x44
 800376e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003772:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e6      	bne.n	800374e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e062      	b.n	8003858 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b04      	cmp	r3, #4
 800379e:	d149      	bne.n	8003834 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a8:	2200      	movs	r2, #0
 80037aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f856 	bl	8003860 <UART_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d03c      	beq.n	8003834 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	623b      	str	r3, [r7, #32]
   return(result);
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d8:	633b      	str	r3, [r7, #48]	; 0x30
 80037da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e6      	bne.n	80037ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3308      	adds	r3, #8
 80037f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	64bb      	str	r3, [r7, #72]	; 0x48
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3308      	adds	r3, #8
 800380a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800380c:	61fa      	str	r2, [r7, #28]
 800380e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	69b9      	ldr	r1, [r7, #24]
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	617b      	str	r3, [r7, #20]
   return(result);
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e5      	bne.n	80037ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e011      	b.n	8003858 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3758      	adds	r7, #88	; 0x58
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003870:	e049      	b.n	8003906 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d045      	beq.n	8003906 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387a:	f7fd fae9 	bl	8000e50 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <UART_WaitOnFlagUntilTimeout+0x30>
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e048      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d031      	beq.n	8003906 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d110      	bne.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2208      	movs	r2, #8
 80038b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f838 	bl	800392e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2208      	movs	r2, #8
 80038c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e029      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e0:	d111      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f81e 	bl	800392e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e00f      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	429a      	cmp	r2, r3
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	429a      	cmp	r2, r3
 8003922:	d0a6      	beq.n	8003872 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800392e:	b480      	push	{r7}
 8003930:	b095      	sub	sp, #84	; 0x54
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800394a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003954:	643b      	str	r3, [r7, #64]	; 0x40
 8003956:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800395a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800395c:	e841 2300 	strex	r3, r2, [r1]
 8003960:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e6      	bne.n	8003936 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3308      	adds	r3, #8
 800396e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	61fb      	str	r3, [r7, #28]
   return(result);
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3308      	adds	r3, #8
 8003986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003988:	62fa      	str	r2, [r7, #44]	; 0x2c
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800398e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e5      	bne.n	8003968 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d118      	bne.n	80039d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f023 0310 	bic.w	r3, r3, #16
 80039b8:	647b      	str	r3, [r7, #68]	; 0x44
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6979      	ldr	r1, [r7, #20]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	613b      	str	r3, [r7, #16]
   return(result);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e6      	bne.n	80039a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80039ea:	bf00      	nop
 80039ec:	3754      	adds	r7, #84	; 0x54
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff fb97 	bl	8003148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b088      	sub	sp, #32
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6979      	ldr	r1, [r7, #20]
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	613b      	str	r3, [r7, #16]
   return(result);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e6      	bne.n	8003a2a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff fb63 	bl	8003134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a6e:	bf00      	nop
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e03c      	b.n	8003b16 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fd f843 	bl	8000b3c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9ea 	bl	8003ea8 <USART_SetConfig>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e01b      	b.n	8003b16 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003aec:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003afc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 faf8 	bl	8004104 <USART_CheckIdleState>
 8003b14:	4603      	mov	r3, r0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	617b      	str	r3, [r7, #20]
  /* If no error occurs */
#if defined(USART_CR2_SLVEN)
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
                                      USART_ISR_UDR));
#else
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
#endif /* USART_CR2_SLVEN */
  if (errorflags == 0U)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d113      	bne.n	8003b78 <HAL_USART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00e      	beq.n	8003b78 <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d009      	beq.n	8003b78 <HAL_USART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (husart->RxISR != NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 810d 	beq.w	8003d88 <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
      }
      return;
 8003b76:	e107      	b.n	8003d88 <HAL_USART_IRQHandler+0x268>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
#else
  if ((errorflags != 0U)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80e3 	beq.w	8003d46 <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d105      	bne.n	8003b96 <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80d8 	beq.w	8003d46 <HAL_USART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00e      	beq.n	8003bbe <HAL_USART_IRQHandler+0x9e>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	f043 0201 	orr.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00e      	beq.n	8003be6 <HAL_USART_IRQHandler+0xc6>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	f043 0204 	orr.w	r2, r3, #4
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00e      	beq.n	8003c0e <HAL_USART_IRQHandler+0xee>
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	f043 0202 	orr.w	r2, r3, #2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	64da      	str	r2, [r3, #76]	; 0x4c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d104      	bne.n	8003c2c <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d009      	beq.n	8003c40 <HAL_USART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2208      	movs	r2, #8
 8003c32:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c38:	f043 0208 	orr.w	r2, r3, #8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00f      	beq.n	8003c6a <HAL_USART_IRQHandler+0x14a>
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c5c:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
#endif /* USART_CR2_SLVEN */

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 808c 	beq.w	8003d8c <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00c      	beq.n	8003c98 <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d007      	beq.n	8003c98 <HAL_USART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (husart->RxISR != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d002      	beq.n	8003cb6 <HAL_USART_IRQHandler+0x196>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d03e      	beq.n	8003d34 <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f88e 	bl	8003dd8 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d130      	bne.n	8003d2c <HAL_USART_IRQHandler+0x20c>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd8:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd fa2d 	bl	800114e <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d013      	beq.n	8003d24 <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	4a25      	ldr	r2, [pc, #148]	; (8003d98 <HAL_USART_IRQHandler+0x278>)
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fd fa20 	bl	800114e <HAL_DMA_Abort_IT>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d016      	beq.n	8003d42 <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003d22:	e00e      	b.n	8003d42 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f84d 	bl	8003dc4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003d2a:	e00a      	b.n	8003d42 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f849 	bl	8003dc4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003d32:	e006      	b.n	8003d42 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f845 	bl	8003dc4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    return;
 8003d40:	e024      	b.n	8003d8c <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003d42:	bf00      	nop
    return;
 8003d44:	e022      	b.n	8003d8c <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_USART_IRQHandler+0x24c>
#endif /* USART_CR1_FIFOEN */
  {
    if (husart->TxISR != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d016      	beq.n	8003d90 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
    }
    return;
 8003d6a:	e011      	b.n	8003d90 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <HAL_USART_IRQHandler+0x272>
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 fa02 	bl	800418a <USART_EndTransmit_IT>
    return;
 8003d86:	e004      	b.n	8003d92 <HAL_USART_IRQHandler+0x272>
      return;
 8003d88:	bf00      	nop
 8003d8a:	e002      	b.n	8003d92 <HAL_USART_IRQHandler+0x272>
    return;
 8003d8c:	bf00      	nop
 8003d8e:	e000      	b.n	8003d92 <HAL_USART_IRQHandler+0x272>
    return;
 8003d90:	bf00      	nop
    HAL_USARTEx_RxFifoFullCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003d92:	3720      	adds	r7, #32
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	08003e15 	.word	0x08003e15

08003d9c <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8003dee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff ffc8 	bl	8003dc4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003e4c:	e018      	b.n	8003e80 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d014      	beq.n	8003e80 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7fc fffb 	bl	8000e50 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <USART_WaitOnFlagUntilTimeout+0x30>
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e00f      	b.n	8003ea0 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d0d7      	beq.n	8003e4e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ecc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b87      	ldr	r3, [pc, #540]	; (80040f4 <USART_SetConfig+0x24c>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	6979      	ldr	r1, [r7, #20]
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8003ee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ee6:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a74      	ldr	r2, [pc, #464]	; (80040f8 <USART_SetConfig+0x250>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d121      	bne.n	8003f6e <USART_SetConfig+0xc6>
 8003f2a:	4b74      	ldr	r3, [pc, #464]	; (80040fc <USART_SetConfig+0x254>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d817      	bhi.n	8003f68 <USART_SetConfig+0xc0>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <USART_SetConfig+0x98>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f5d 	.word	0x08003f5d
 8003f48:	08003f57 	.word	0x08003f57
 8003f4c:	08003f63 	.word	0x08003f63
 8003f50:	2301      	movs	r3, #1
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e045      	b.n	8003fe2 <USART_SetConfig+0x13a>
 8003f56:	2302      	movs	r3, #2
 8003f58:	77fb      	strb	r3, [r7, #31]
 8003f5a:	e042      	b.n	8003fe2 <USART_SetConfig+0x13a>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	e03f      	b.n	8003fe2 <USART_SetConfig+0x13a>
 8003f62:	2308      	movs	r3, #8
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e03c      	b.n	8003fe2 <USART_SetConfig+0x13a>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e039      	b.n	8003fe2 <USART_SetConfig+0x13a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a63      	ldr	r2, [pc, #396]	; (8004100 <USART_SetConfig+0x258>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d132      	bne.n	8003fde <USART_SetConfig+0x136>
 8003f78:	4b60      	ldr	r3, [pc, #384]	; (80040fc <USART_SetConfig+0x254>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d828      	bhi.n	8003fd8 <USART_SetConfig+0x130>
 8003f86:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <USART_SetConfig+0xe4>)
 8003f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8c:	08003fc1 	.word	0x08003fc1
 8003f90:	08003fd9 	.word	0x08003fd9
 8003f94:	08003fd9 	.word	0x08003fd9
 8003f98:	08003fd9 	.word	0x08003fd9
 8003f9c:	08003fcd 	.word	0x08003fcd
 8003fa0:	08003fd9 	.word	0x08003fd9
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	08003fd9 	.word	0x08003fd9
 8003fac:	08003fc7 	.word	0x08003fc7
 8003fb0:	08003fd9 	.word	0x08003fd9
 8003fb4:	08003fd9 	.word	0x08003fd9
 8003fb8:	08003fd9 	.word	0x08003fd9
 8003fbc:	08003fd3 	.word	0x08003fd3
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e00d      	b.n	8003fe2 <USART_SetConfig+0x13a>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e00a      	b.n	8003fe2 <USART_SetConfig+0x13a>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e007      	b.n	8003fe2 <USART_SetConfig+0x13a>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e004      	b.n	8003fe2 <USART_SetConfig+0x13a>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e001      	b.n	8003fe2 <USART_SetConfig+0x13a>
 8003fde:	2310      	movs	r3, #16
 8003fe0:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8003fe2:	7ffb      	ldrb	r3, [r7, #31]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d85a      	bhi.n	800409e <USART_SetConfig+0x1f6>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <USART_SetConfig+0x148>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	08004033 	.word	0x08004033
 8003ff8:	08004051 	.word	0x08004051
 8003ffc:	0800409f 	.word	0x0800409f
 8004000:	0800406b 	.word	0x0800406b
 8004004:	0800409f 	.word	0x0800409f
 8004008:	0800409f 	.word	0x0800409f
 800400c:	0800409f 	.word	0x0800409f
 8004010:	08004089 	.word	0x08004089
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8004014:	f7fe f87e 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8004018:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	005a      	lsls	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	441a      	add	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	fbb2 f3f3 	udiv	r3, r2, r3
 800402e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004030:	e038      	b.n	80040a4 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8004032:	f7fe f885 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 8004036:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	005a      	lsls	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	441a      	add	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800404e:	e029      	b.n	80040a4 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	085b      	lsrs	r3, r3, #1
 8004056:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800405a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6852      	ldr	r2, [r2, #4]
 8004062:	fbb3 f3f2 	udiv	r3, r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004068:	e01c      	b.n	80040a4 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800406a:	f7fd ffbb 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 800406e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	005a      	lsls	r2, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	441a      	add	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004086:	e00d      	b.n	80040a4 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	fbb2 f3f3 	udiv	r3, r2, r3
 800409a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800409c:	e002      	b.n	80040a4 <USART_SetConfig+0x1fc>
    default:
      ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	77bb      	strb	r3, [r7, #30]
      break;
 80040a2:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b0f      	cmp	r3, #15
 80040a8:	d916      	bls.n	80040d8 <USART_SetConfig+0x230>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b0:	d212      	bcs.n	80040d8 <USART_SetConfig+0x230>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	f023 030f 	bic.w	r3, r3, #15
 80040ba:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	085b      	lsrs	r3, r3, #1
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	89fb      	ldrh	r3, [r7, #14]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	89fa      	ldrh	r2, [r7, #14]
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	e001      	b.n	80040dc <USART_SetConfig+0x234>
  }
  else
  {
    ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 80040e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	efff69f3 	.word	0xefff69f3
 80040f8:	40013800 	.word	0x40013800
 80040fc:	40021000 	.word	0x40021000
 8004100:	40004400 	.word	0x40004400

08004104 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af02      	add	r7, sp, #8
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004112:	f7fc fe9d 	bl	8000e50 <HAL_GetTick>
 8004116:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b08      	cmp	r3, #8
 8004124:	d10e      	bne.n	8004144 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fe81 	bl	8003e3c <USART_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e01e      	b.n	8004182 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b04      	cmp	r3, #4
 8004150:	d10e      	bne.n	8004170 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff fe6b 	bl	8003e3c <USART_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e008      	b.n	8004182 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a0:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0201 	bic.w	r2, r2, #1
 80041b0:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	63da      	str	r2, [r3, #60]	; 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b12      	cmp	r3, #18
 80041c2:	d115      	bne.n	80041f0 <USART_EndTransmit_IT+0x66>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2208      	movs	r2, #8
 80041ca:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	8b1b      	ldrh	r3, [r3, #24]
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0208 	orr.w	r2, r2, #8
 80041dc:	b292      	uxth	r2, r2
 80041de:	831a      	strh	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff fdd7 	bl	8003d9c <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80041ee:	e00b      	b.n	8004208 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    HAL_USART_TxRxCpltCallback(husart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fdd4 	bl	8003db0 <HAL_USART_TxRxCpltCallback>
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <siprintf>:
 8004210:	b40e      	push	{r1, r2, r3}
 8004212:	b500      	push	{lr}
 8004214:	b09c      	sub	sp, #112	; 0x70
 8004216:	ab1d      	add	r3, sp, #116	; 0x74
 8004218:	9002      	str	r0, [sp, #8]
 800421a:	9006      	str	r0, [sp, #24]
 800421c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004220:	4809      	ldr	r0, [pc, #36]	; (8004248 <siprintf+0x38>)
 8004222:	9107      	str	r1, [sp, #28]
 8004224:	9104      	str	r1, [sp, #16]
 8004226:	4909      	ldr	r1, [pc, #36]	; (800424c <siprintf+0x3c>)
 8004228:	f853 2b04 	ldr.w	r2, [r3], #4
 800422c:	9105      	str	r1, [sp, #20]
 800422e:	6800      	ldr	r0, [r0, #0]
 8004230:	9301      	str	r3, [sp, #4]
 8004232:	a902      	add	r1, sp, #8
 8004234:	f000 f9b6 	bl	80045a4 <_svfiprintf_r>
 8004238:	9b02      	ldr	r3, [sp, #8]
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	b01c      	add	sp, #112	; 0x70
 8004240:	f85d eb04 	ldr.w	lr, [sp], #4
 8004244:	b003      	add	sp, #12
 8004246:	4770      	bx	lr
 8004248:	20000058 	.word	0x20000058
 800424c:	ffff0208 	.word	0xffff0208

08004250 <memset>:
 8004250:	4402      	add	r2, r0
 8004252:	4603      	mov	r3, r0
 8004254:	4293      	cmp	r3, r2
 8004256:	d100      	bne.n	800425a <memset+0xa>
 8004258:	4770      	bx	lr
 800425a:	f803 1b01 	strb.w	r1, [r3], #1
 800425e:	e7f9      	b.n	8004254 <memset+0x4>

08004260 <strstr>:
 8004260:	780a      	ldrb	r2, [r1, #0]
 8004262:	b570      	push	{r4, r5, r6, lr}
 8004264:	b96a      	cbnz	r2, 8004282 <strstr+0x22>
 8004266:	bd70      	pop	{r4, r5, r6, pc}
 8004268:	429a      	cmp	r2, r3
 800426a:	d109      	bne.n	8004280 <strstr+0x20>
 800426c:	460c      	mov	r4, r1
 800426e:	4605      	mov	r5, r0
 8004270:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f6      	beq.n	8004266 <strstr+0x6>
 8004278:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800427c:	429e      	cmp	r6, r3
 800427e:	d0f7      	beq.n	8004270 <strstr+0x10>
 8004280:	3001      	adds	r0, #1
 8004282:	7803      	ldrb	r3, [r0, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1ef      	bne.n	8004268 <strstr+0x8>
 8004288:	4618      	mov	r0, r3
 800428a:	e7ec      	b.n	8004266 <strstr+0x6>

0800428c <__errno>:
 800428c:	4b01      	ldr	r3, [pc, #4]	; (8004294 <__errno+0x8>)
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000058 	.word	0x20000058

08004298 <__libc_init_array>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	4d0d      	ldr	r5, [pc, #52]	; (80042d0 <__libc_init_array+0x38>)
 800429c:	4c0d      	ldr	r4, [pc, #52]	; (80042d4 <__libc_init_array+0x3c>)
 800429e:	1b64      	subs	r4, r4, r5
 80042a0:	10a4      	asrs	r4, r4, #2
 80042a2:	2600      	movs	r6, #0
 80042a4:	42a6      	cmp	r6, r4
 80042a6:	d109      	bne.n	80042bc <__libc_init_array+0x24>
 80042a8:	4d0b      	ldr	r5, [pc, #44]	; (80042d8 <__libc_init_array+0x40>)
 80042aa:	4c0c      	ldr	r4, [pc, #48]	; (80042dc <__libc_init_array+0x44>)
 80042ac:	f000 fc6a 	bl	8004b84 <_init>
 80042b0:	1b64      	subs	r4, r4, r5
 80042b2:	10a4      	asrs	r4, r4, #2
 80042b4:	2600      	movs	r6, #0
 80042b6:	42a6      	cmp	r6, r4
 80042b8:	d105      	bne.n	80042c6 <__libc_init_array+0x2e>
 80042ba:	bd70      	pop	{r4, r5, r6, pc}
 80042bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c0:	4798      	blx	r3
 80042c2:	3601      	adds	r6, #1
 80042c4:	e7ee      	b.n	80042a4 <__libc_init_array+0xc>
 80042c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ca:	4798      	blx	r3
 80042cc:	3601      	adds	r6, #1
 80042ce:	e7f2      	b.n	80042b6 <__libc_init_array+0x1e>
 80042d0:	08004c7c 	.word	0x08004c7c
 80042d4:	08004c7c 	.word	0x08004c7c
 80042d8:	08004c7c 	.word	0x08004c7c
 80042dc:	08004c80 	.word	0x08004c80

080042e0 <__retarget_lock_acquire_recursive>:
 80042e0:	4770      	bx	lr

080042e2 <__retarget_lock_release_recursive>:
 80042e2:	4770      	bx	lr

080042e4 <memcpy>:
 80042e4:	440a      	add	r2, r1
 80042e6:	4291      	cmp	r1, r2
 80042e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80042ec:	d100      	bne.n	80042f0 <memcpy+0xc>
 80042ee:	4770      	bx	lr
 80042f0:	b510      	push	{r4, lr}
 80042f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042fa:	4291      	cmp	r1, r2
 80042fc:	d1f9      	bne.n	80042f2 <memcpy+0xe>
 80042fe:	bd10      	pop	{r4, pc}

08004300 <_free_r>:
 8004300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004302:	2900      	cmp	r1, #0
 8004304:	d044      	beq.n	8004390 <_free_r+0x90>
 8004306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800430a:	9001      	str	r0, [sp, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f1a1 0404 	sub.w	r4, r1, #4
 8004312:	bfb8      	it	lt
 8004314:	18e4      	addlt	r4, r4, r3
 8004316:	f000 f8df 	bl	80044d8 <__malloc_lock>
 800431a:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <_free_r+0x94>)
 800431c:	9801      	ldr	r0, [sp, #4]
 800431e:	6813      	ldr	r3, [r2, #0]
 8004320:	b933      	cbnz	r3, 8004330 <_free_r+0x30>
 8004322:	6063      	str	r3, [r4, #4]
 8004324:	6014      	str	r4, [r2, #0]
 8004326:	b003      	add	sp, #12
 8004328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800432c:	f000 b8da 	b.w	80044e4 <__malloc_unlock>
 8004330:	42a3      	cmp	r3, r4
 8004332:	d908      	bls.n	8004346 <_free_r+0x46>
 8004334:	6825      	ldr	r5, [r4, #0]
 8004336:	1961      	adds	r1, r4, r5
 8004338:	428b      	cmp	r3, r1
 800433a:	bf01      	itttt	eq
 800433c:	6819      	ldreq	r1, [r3, #0]
 800433e:	685b      	ldreq	r3, [r3, #4]
 8004340:	1949      	addeq	r1, r1, r5
 8004342:	6021      	streq	r1, [r4, #0]
 8004344:	e7ed      	b.n	8004322 <_free_r+0x22>
 8004346:	461a      	mov	r2, r3
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	b10b      	cbz	r3, 8004350 <_free_r+0x50>
 800434c:	42a3      	cmp	r3, r4
 800434e:	d9fa      	bls.n	8004346 <_free_r+0x46>
 8004350:	6811      	ldr	r1, [r2, #0]
 8004352:	1855      	adds	r5, r2, r1
 8004354:	42a5      	cmp	r5, r4
 8004356:	d10b      	bne.n	8004370 <_free_r+0x70>
 8004358:	6824      	ldr	r4, [r4, #0]
 800435a:	4421      	add	r1, r4
 800435c:	1854      	adds	r4, r2, r1
 800435e:	42a3      	cmp	r3, r4
 8004360:	6011      	str	r1, [r2, #0]
 8004362:	d1e0      	bne.n	8004326 <_free_r+0x26>
 8004364:	681c      	ldr	r4, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	6053      	str	r3, [r2, #4]
 800436a:	440c      	add	r4, r1
 800436c:	6014      	str	r4, [r2, #0]
 800436e:	e7da      	b.n	8004326 <_free_r+0x26>
 8004370:	d902      	bls.n	8004378 <_free_r+0x78>
 8004372:	230c      	movs	r3, #12
 8004374:	6003      	str	r3, [r0, #0]
 8004376:	e7d6      	b.n	8004326 <_free_r+0x26>
 8004378:	6825      	ldr	r5, [r4, #0]
 800437a:	1961      	adds	r1, r4, r5
 800437c:	428b      	cmp	r3, r1
 800437e:	bf04      	itt	eq
 8004380:	6819      	ldreq	r1, [r3, #0]
 8004382:	685b      	ldreq	r3, [r3, #4]
 8004384:	6063      	str	r3, [r4, #4]
 8004386:	bf04      	itt	eq
 8004388:	1949      	addeq	r1, r1, r5
 800438a:	6021      	streq	r1, [r4, #0]
 800438c:	6054      	str	r4, [r2, #4]
 800438e:	e7ca      	b.n	8004326 <_free_r+0x26>
 8004390:	b003      	add	sp, #12
 8004392:	bd30      	pop	{r4, r5, pc}
 8004394:	20000298 	.word	0x20000298

08004398 <sbrk_aligned>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	4e0e      	ldr	r6, [pc, #56]	; (80043d4 <sbrk_aligned+0x3c>)
 800439c:	460c      	mov	r4, r1
 800439e:	6831      	ldr	r1, [r6, #0]
 80043a0:	4605      	mov	r5, r0
 80043a2:	b911      	cbnz	r1, 80043aa <sbrk_aligned+0x12>
 80043a4:	f000 fba6 	bl	8004af4 <_sbrk_r>
 80043a8:	6030      	str	r0, [r6, #0]
 80043aa:	4621      	mov	r1, r4
 80043ac:	4628      	mov	r0, r5
 80043ae:	f000 fba1 	bl	8004af4 <_sbrk_r>
 80043b2:	1c43      	adds	r3, r0, #1
 80043b4:	d00a      	beq.n	80043cc <sbrk_aligned+0x34>
 80043b6:	1cc4      	adds	r4, r0, #3
 80043b8:	f024 0403 	bic.w	r4, r4, #3
 80043bc:	42a0      	cmp	r0, r4
 80043be:	d007      	beq.n	80043d0 <sbrk_aligned+0x38>
 80043c0:	1a21      	subs	r1, r4, r0
 80043c2:	4628      	mov	r0, r5
 80043c4:	f000 fb96 	bl	8004af4 <_sbrk_r>
 80043c8:	3001      	adds	r0, #1
 80043ca:	d101      	bne.n	80043d0 <sbrk_aligned+0x38>
 80043cc:	f04f 34ff 	mov.w	r4, #4294967295
 80043d0:	4620      	mov	r0, r4
 80043d2:	bd70      	pop	{r4, r5, r6, pc}
 80043d4:	2000029c 	.word	0x2000029c

080043d8 <_malloc_r>:
 80043d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043dc:	1ccd      	adds	r5, r1, #3
 80043de:	f025 0503 	bic.w	r5, r5, #3
 80043e2:	3508      	adds	r5, #8
 80043e4:	2d0c      	cmp	r5, #12
 80043e6:	bf38      	it	cc
 80043e8:	250c      	movcc	r5, #12
 80043ea:	2d00      	cmp	r5, #0
 80043ec:	4607      	mov	r7, r0
 80043ee:	db01      	blt.n	80043f4 <_malloc_r+0x1c>
 80043f0:	42a9      	cmp	r1, r5
 80043f2:	d905      	bls.n	8004400 <_malloc_r+0x28>
 80043f4:	230c      	movs	r3, #12
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	2600      	movs	r6, #0
 80043fa:	4630      	mov	r0, r6
 80043fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004400:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80044d4 <_malloc_r+0xfc>
 8004404:	f000 f868 	bl	80044d8 <__malloc_lock>
 8004408:	f8d8 3000 	ldr.w	r3, [r8]
 800440c:	461c      	mov	r4, r3
 800440e:	bb5c      	cbnz	r4, 8004468 <_malloc_r+0x90>
 8004410:	4629      	mov	r1, r5
 8004412:	4638      	mov	r0, r7
 8004414:	f7ff ffc0 	bl	8004398 <sbrk_aligned>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	4604      	mov	r4, r0
 800441c:	d155      	bne.n	80044ca <_malloc_r+0xf2>
 800441e:	f8d8 4000 	ldr.w	r4, [r8]
 8004422:	4626      	mov	r6, r4
 8004424:	2e00      	cmp	r6, #0
 8004426:	d145      	bne.n	80044b4 <_malloc_r+0xdc>
 8004428:	2c00      	cmp	r4, #0
 800442a:	d048      	beq.n	80044be <_malloc_r+0xe6>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	4631      	mov	r1, r6
 8004430:	4638      	mov	r0, r7
 8004432:	eb04 0903 	add.w	r9, r4, r3
 8004436:	f000 fb5d 	bl	8004af4 <_sbrk_r>
 800443a:	4581      	cmp	r9, r0
 800443c:	d13f      	bne.n	80044be <_malloc_r+0xe6>
 800443e:	6821      	ldr	r1, [r4, #0]
 8004440:	1a6d      	subs	r5, r5, r1
 8004442:	4629      	mov	r1, r5
 8004444:	4638      	mov	r0, r7
 8004446:	f7ff ffa7 	bl	8004398 <sbrk_aligned>
 800444a:	3001      	adds	r0, #1
 800444c:	d037      	beq.n	80044be <_malloc_r+0xe6>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	442b      	add	r3, r5
 8004452:	6023      	str	r3, [r4, #0]
 8004454:	f8d8 3000 	ldr.w	r3, [r8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d038      	beq.n	80044ce <_malloc_r+0xf6>
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	42a2      	cmp	r2, r4
 8004460:	d12b      	bne.n	80044ba <_malloc_r+0xe2>
 8004462:	2200      	movs	r2, #0
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	e00f      	b.n	8004488 <_malloc_r+0xb0>
 8004468:	6822      	ldr	r2, [r4, #0]
 800446a:	1b52      	subs	r2, r2, r5
 800446c:	d41f      	bmi.n	80044ae <_malloc_r+0xd6>
 800446e:	2a0b      	cmp	r2, #11
 8004470:	d917      	bls.n	80044a2 <_malloc_r+0xca>
 8004472:	1961      	adds	r1, r4, r5
 8004474:	42a3      	cmp	r3, r4
 8004476:	6025      	str	r5, [r4, #0]
 8004478:	bf18      	it	ne
 800447a:	6059      	strne	r1, [r3, #4]
 800447c:	6863      	ldr	r3, [r4, #4]
 800447e:	bf08      	it	eq
 8004480:	f8c8 1000 	streq.w	r1, [r8]
 8004484:	5162      	str	r2, [r4, r5]
 8004486:	604b      	str	r3, [r1, #4]
 8004488:	4638      	mov	r0, r7
 800448a:	f104 060b 	add.w	r6, r4, #11
 800448e:	f000 f829 	bl	80044e4 <__malloc_unlock>
 8004492:	f026 0607 	bic.w	r6, r6, #7
 8004496:	1d23      	adds	r3, r4, #4
 8004498:	1af2      	subs	r2, r6, r3
 800449a:	d0ae      	beq.n	80043fa <_malloc_r+0x22>
 800449c:	1b9b      	subs	r3, r3, r6
 800449e:	50a3      	str	r3, [r4, r2]
 80044a0:	e7ab      	b.n	80043fa <_malloc_r+0x22>
 80044a2:	42a3      	cmp	r3, r4
 80044a4:	6862      	ldr	r2, [r4, #4]
 80044a6:	d1dd      	bne.n	8004464 <_malloc_r+0x8c>
 80044a8:	f8c8 2000 	str.w	r2, [r8]
 80044ac:	e7ec      	b.n	8004488 <_malloc_r+0xb0>
 80044ae:	4623      	mov	r3, r4
 80044b0:	6864      	ldr	r4, [r4, #4]
 80044b2:	e7ac      	b.n	800440e <_malloc_r+0x36>
 80044b4:	4634      	mov	r4, r6
 80044b6:	6876      	ldr	r6, [r6, #4]
 80044b8:	e7b4      	b.n	8004424 <_malloc_r+0x4c>
 80044ba:	4613      	mov	r3, r2
 80044bc:	e7cc      	b.n	8004458 <_malloc_r+0x80>
 80044be:	230c      	movs	r3, #12
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	4638      	mov	r0, r7
 80044c4:	f000 f80e 	bl	80044e4 <__malloc_unlock>
 80044c8:	e797      	b.n	80043fa <_malloc_r+0x22>
 80044ca:	6025      	str	r5, [r4, #0]
 80044cc:	e7dc      	b.n	8004488 <_malloc_r+0xb0>
 80044ce:	605b      	str	r3, [r3, #4]
 80044d0:	deff      	udf	#255	; 0xff
 80044d2:	bf00      	nop
 80044d4:	20000298 	.word	0x20000298

080044d8 <__malloc_lock>:
 80044d8:	4801      	ldr	r0, [pc, #4]	; (80044e0 <__malloc_lock+0x8>)
 80044da:	f7ff bf01 	b.w	80042e0 <__retarget_lock_acquire_recursive>
 80044de:	bf00      	nop
 80044e0:	20000294 	.word	0x20000294

080044e4 <__malloc_unlock>:
 80044e4:	4801      	ldr	r0, [pc, #4]	; (80044ec <__malloc_unlock+0x8>)
 80044e6:	f7ff befc 	b.w	80042e2 <__retarget_lock_release_recursive>
 80044ea:	bf00      	nop
 80044ec:	20000294 	.word	0x20000294

080044f0 <__ssputs_r>:
 80044f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f4:	688e      	ldr	r6, [r1, #8]
 80044f6:	461f      	mov	r7, r3
 80044f8:	42be      	cmp	r6, r7
 80044fa:	680b      	ldr	r3, [r1, #0]
 80044fc:	4682      	mov	sl, r0
 80044fe:	460c      	mov	r4, r1
 8004500:	4690      	mov	r8, r2
 8004502:	d82c      	bhi.n	800455e <__ssputs_r+0x6e>
 8004504:	898a      	ldrh	r2, [r1, #12]
 8004506:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800450a:	d026      	beq.n	800455a <__ssputs_r+0x6a>
 800450c:	6965      	ldr	r5, [r4, #20]
 800450e:	6909      	ldr	r1, [r1, #16]
 8004510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004514:	eba3 0901 	sub.w	r9, r3, r1
 8004518:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800451c:	1c7b      	adds	r3, r7, #1
 800451e:	444b      	add	r3, r9
 8004520:	106d      	asrs	r5, r5, #1
 8004522:	429d      	cmp	r5, r3
 8004524:	bf38      	it	cc
 8004526:	461d      	movcc	r5, r3
 8004528:	0553      	lsls	r3, r2, #21
 800452a:	d527      	bpl.n	800457c <__ssputs_r+0x8c>
 800452c:	4629      	mov	r1, r5
 800452e:	f7ff ff53 	bl	80043d8 <_malloc_r>
 8004532:	4606      	mov	r6, r0
 8004534:	b360      	cbz	r0, 8004590 <__ssputs_r+0xa0>
 8004536:	6921      	ldr	r1, [r4, #16]
 8004538:	464a      	mov	r2, r9
 800453a:	f7ff fed3 	bl	80042e4 <memcpy>
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004548:	81a3      	strh	r3, [r4, #12]
 800454a:	6126      	str	r6, [r4, #16]
 800454c:	6165      	str	r5, [r4, #20]
 800454e:	444e      	add	r6, r9
 8004550:	eba5 0509 	sub.w	r5, r5, r9
 8004554:	6026      	str	r6, [r4, #0]
 8004556:	60a5      	str	r5, [r4, #8]
 8004558:	463e      	mov	r6, r7
 800455a:	42be      	cmp	r6, r7
 800455c:	d900      	bls.n	8004560 <__ssputs_r+0x70>
 800455e:	463e      	mov	r6, r7
 8004560:	6820      	ldr	r0, [r4, #0]
 8004562:	4632      	mov	r2, r6
 8004564:	4641      	mov	r1, r8
 8004566:	f000 faab 	bl	8004ac0 <memmove>
 800456a:	68a3      	ldr	r3, [r4, #8]
 800456c:	1b9b      	subs	r3, r3, r6
 800456e:	60a3      	str	r3, [r4, #8]
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	4433      	add	r3, r6
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	2000      	movs	r0, #0
 8004578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457c:	462a      	mov	r2, r5
 800457e:	f000 fac9 	bl	8004b14 <_realloc_r>
 8004582:	4606      	mov	r6, r0
 8004584:	2800      	cmp	r0, #0
 8004586:	d1e0      	bne.n	800454a <__ssputs_r+0x5a>
 8004588:	6921      	ldr	r1, [r4, #16]
 800458a:	4650      	mov	r0, sl
 800458c:	f7ff feb8 	bl	8004300 <_free_r>
 8004590:	230c      	movs	r3, #12
 8004592:	f8ca 3000 	str.w	r3, [sl]
 8004596:	89a3      	ldrh	r3, [r4, #12]
 8004598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800459c:	81a3      	strh	r3, [r4, #12]
 800459e:	f04f 30ff 	mov.w	r0, #4294967295
 80045a2:	e7e9      	b.n	8004578 <__ssputs_r+0x88>

080045a4 <_svfiprintf_r>:
 80045a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a8:	4698      	mov	r8, r3
 80045aa:	898b      	ldrh	r3, [r1, #12]
 80045ac:	061b      	lsls	r3, r3, #24
 80045ae:	b09d      	sub	sp, #116	; 0x74
 80045b0:	4607      	mov	r7, r0
 80045b2:	460d      	mov	r5, r1
 80045b4:	4614      	mov	r4, r2
 80045b6:	d50e      	bpl.n	80045d6 <_svfiprintf_r+0x32>
 80045b8:	690b      	ldr	r3, [r1, #16]
 80045ba:	b963      	cbnz	r3, 80045d6 <_svfiprintf_r+0x32>
 80045bc:	2140      	movs	r1, #64	; 0x40
 80045be:	f7ff ff0b 	bl	80043d8 <_malloc_r>
 80045c2:	6028      	str	r0, [r5, #0]
 80045c4:	6128      	str	r0, [r5, #16]
 80045c6:	b920      	cbnz	r0, 80045d2 <_svfiprintf_r+0x2e>
 80045c8:	230c      	movs	r3, #12
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	f04f 30ff 	mov.w	r0, #4294967295
 80045d0:	e0d0      	b.n	8004774 <_svfiprintf_r+0x1d0>
 80045d2:	2340      	movs	r3, #64	; 0x40
 80045d4:	616b      	str	r3, [r5, #20]
 80045d6:	2300      	movs	r3, #0
 80045d8:	9309      	str	r3, [sp, #36]	; 0x24
 80045da:	2320      	movs	r3, #32
 80045dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80045e4:	2330      	movs	r3, #48	; 0x30
 80045e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800478c <_svfiprintf_r+0x1e8>
 80045ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045ee:	f04f 0901 	mov.w	r9, #1
 80045f2:	4623      	mov	r3, r4
 80045f4:	469a      	mov	sl, r3
 80045f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045fa:	b10a      	cbz	r2, 8004600 <_svfiprintf_r+0x5c>
 80045fc:	2a25      	cmp	r2, #37	; 0x25
 80045fe:	d1f9      	bne.n	80045f4 <_svfiprintf_r+0x50>
 8004600:	ebba 0b04 	subs.w	fp, sl, r4
 8004604:	d00b      	beq.n	800461e <_svfiprintf_r+0x7a>
 8004606:	465b      	mov	r3, fp
 8004608:	4622      	mov	r2, r4
 800460a:	4629      	mov	r1, r5
 800460c:	4638      	mov	r0, r7
 800460e:	f7ff ff6f 	bl	80044f0 <__ssputs_r>
 8004612:	3001      	adds	r0, #1
 8004614:	f000 80a9 	beq.w	800476a <_svfiprintf_r+0x1c6>
 8004618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800461a:	445a      	add	r2, fp
 800461c:	9209      	str	r2, [sp, #36]	; 0x24
 800461e:	f89a 3000 	ldrb.w	r3, [sl]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80a1 	beq.w	800476a <_svfiprintf_r+0x1c6>
 8004628:	2300      	movs	r3, #0
 800462a:	f04f 32ff 	mov.w	r2, #4294967295
 800462e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004632:	f10a 0a01 	add.w	sl, sl, #1
 8004636:	9304      	str	r3, [sp, #16]
 8004638:	9307      	str	r3, [sp, #28]
 800463a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800463e:	931a      	str	r3, [sp, #104]	; 0x68
 8004640:	4654      	mov	r4, sl
 8004642:	2205      	movs	r2, #5
 8004644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004648:	4850      	ldr	r0, [pc, #320]	; (800478c <_svfiprintf_r+0x1e8>)
 800464a:	f7fb fdc9 	bl	80001e0 <memchr>
 800464e:	9a04      	ldr	r2, [sp, #16]
 8004650:	b9d8      	cbnz	r0, 800468a <_svfiprintf_r+0xe6>
 8004652:	06d0      	lsls	r0, r2, #27
 8004654:	bf44      	itt	mi
 8004656:	2320      	movmi	r3, #32
 8004658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800465c:	0711      	lsls	r1, r2, #28
 800465e:	bf44      	itt	mi
 8004660:	232b      	movmi	r3, #43	; 0x2b
 8004662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004666:	f89a 3000 	ldrb.w	r3, [sl]
 800466a:	2b2a      	cmp	r3, #42	; 0x2a
 800466c:	d015      	beq.n	800469a <_svfiprintf_r+0xf6>
 800466e:	9a07      	ldr	r2, [sp, #28]
 8004670:	4654      	mov	r4, sl
 8004672:	2000      	movs	r0, #0
 8004674:	f04f 0c0a 	mov.w	ip, #10
 8004678:	4621      	mov	r1, r4
 800467a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800467e:	3b30      	subs	r3, #48	; 0x30
 8004680:	2b09      	cmp	r3, #9
 8004682:	d94d      	bls.n	8004720 <_svfiprintf_r+0x17c>
 8004684:	b1b0      	cbz	r0, 80046b4 <_svfiprintf_r+0x110>
 8004686:	9207      	str	r2, [sp, #28]
 8004688:	e014      	b.n	80046b4 <_svfiprintf_r+0x110>
 800468a:	eba0 0308 	sub.w	r3, r0, r8
 800468e:	fa09 f303 	lsl.w	r3, r9, r3
 8004692:	4313      	orrs	r3, r2
 8004694:	9304      	str	r3, [sp, #16]
 8004696:	46a2      	mov	sl, r4
 8004698:	e7d2      	b.n	8004640 <_svfiprintf_r+0x9c>
 800469a:	9b03      	ldr	r3, [sp, #12]
 800469c:	1d19      	adds	r1, r3, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	9103      	str	r1, [sp, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	bfbb      	ittet	lt
 80046a6:	425b      	neglt	r3, r3
 80046a8:	f042 0202 	orrlt.w	r2, r2, #2
 80046ac:	9307      	strge	r3, [sp, #28]
 80046ae:	9307      	strlt	r3, [sp, #28]
 80046b0:	bfb8      	it	lt
 80046b2:	9204      	strlt	r2, [sp, #16]
 80046b4:	7823      	ldrb	r3, [r4, #0]
 80046b6:	2b2e      	cmp	r3, #46	; 0x2e
 80046b8:	d10c      	bne.n	80046d4 <_svfiprintf_r+0x130>
 80046ba:	7863      	ldrb	r3, [r4, #1]
 80046bc:	2b2a      	cmp	r3, #42	; 0x2a
 80046be:	d134      	bne.n	800472a <_svfiprintf_r+0x186>
 80046c0:	9b03      	ldr	r3, [sp, #12]
 80046c2:	1d1a      	adds	r2, r3, #4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	9203      	str	r2, [sp, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bfb8      	it	lt
 80046cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80046d0:	3402      	adds	r4, #2
 80046d2:	9305      	str	r3, [sp, #20]
 80046d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800479c <_svfiprintf_r+0x1f8>
 80046d8:	7821      	ldrb	r1, [r4, #0]
 80046da:	2203      	movs	r2, #3
 80046dc:	4650      	mov	r0, sl
 80046de:	f7fb fd7f 	bl	80001e0 <memchr>
 80046e2:	b138      	cbz	r0, 80046f4 <_svfiprintf_r+0x150>
 80046e4:	9b04      	ldr	r3, [sp, #16]
 80046e6:	eba0 000a 	sub.w	r0, r0, sl
 80046ea:	2240      	movs	r2, #64	; 0x40
 80046ec:	4082      	lsls	r2, r0
 80046ee:	4313      	orrs	r3, r2
 80046f0:	3401      	adds	r4, #1
 80046f2:	9304      	str	r3, [sp, #16]
 80046f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f8:	4825      	ldr	r0, [pc, #148]	; (8004790 <_svfiprintf_r+0x1ec>)
 80046fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046fe:	2206      	movs	r2, #6
 8004700:	f7fb fd6e 	bl	80001e0 <memchr>
 8004704:	2800      	cmp	r0, #0
 8004706:	d038      	beq.n	800477a <_svfiprintf_r+0x1d6>
 8004708:	4b22      	ldr	r3, [pc, #136]	; (8004794 <_svfiprintf_r+0x1f0>)
 800470a:	bb1b      	cbnz	r3, 8004754 <_svfiprintf_r+0x1b0>
 800470c:	9b03      	ldr	r3, [sp, #12]
 800470e:	3307      	adds	r3, #7
 8004710:	f023 0307 	bic.w	r3, r3, #7
 8004714:	3308      	adds	r3, #8
 8004716:	9303      	str	r3, [sp, #12]
 8004718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800471a:	4433      	add	r3, r6
 800471c:	9309      	str	r3, [sp, #36]	; 0x24
 800471e:	e768      	b.n	80045f2 <_svfiprintf_r+0x4e>
 8004720:	fb0c 3202 	mla	r2, ip, r2, r3
 8004724:	460c      	mov	r4, r1
 8004726:	2001      	movs	r0, #1
 8004728:	e7a6      	b.n	8004678 <_svfiprintf_r+0xd4>
 800472a:	2300      	movs	r3, #0
 800472c:	3401      	adds	r4, #1
 800472e:	9305      	str	r3, [sp, #20]
 8004730:	4619      	mov	r1, r3
 8004732:	f04f 0c0a 	mov.w	ip, #10
 8004736:	4620      	mov	r0, r4
 8004738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800473c:	3a30      	subs	r2, #48	; 0x30
 800473e:	2a09      	cmp	r2, #9
 8004740:	d903      	bls.n	800474a <_svfiprintf_r+0x1a6>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0c6      	beq.n	80046d4 <_svfiprintf_r+0x130>
 8004746:	9105      	str	r1, [sp, #20]
 8004748:	e7c4      	b.n	80046d4 <_svfiprintf_r+0x130>
 800474a:	fb0c 2101 	mla	r1, ip, r1, r2
 800474e:	4604      	mov	r4, r0
 8004750:	2301      	movs	r3, #1
 8004752:	e7f0      	b.n	8004736 <_svfiprintf_r+0x192>
 8004754:	ab03      	add	r3, sp, #12
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	462a      	mov	r2, r5
 800475a:	4b0f      	ldr	r3, [pc, #60]	; (8004798 <_svfiprintf_r+0x1f4>)
 800475c:	a904      	add	r1, sp, #16
 800475e:	4638      	mov	r0, r7
 8004760:	f3af 8000 	nop.w
 8004764:	1c42      	adds	r2, r0, #1
 8004766:	4606      	mov	r6, r0
 8004768:	d1d6      	bne.n	8004718 <_svfiprintf_r+0x174>
 800476a:	89ab      	ldrh	r3, [r5, #12]
 800476c:	065b      	lsls	r3, r3, #25
 800476e:	f53f af2d 	bmi.w	80045cc <_svfiprintf_r+0x28>
 8004772:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004774:	b01d      	add	sp, #116	; 0x74
 8004776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477a:	ab03      	add	r3, sp, #12
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	462a      	mov	r2, r5
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <_svfiprintf_r+0x1f4>)
 8004782:	a904      	add	r1, sp, #16
 8004784:	4638      	mov	r0, r7
 8004786:	f000 f879 	bl	800487c <_printf_i>
 800478a:	e7eb      	b.n	8004764 <_svfiprintf_r+0x1c0>
 800478c:	08004c40 	.word	0x08004c40
 8004790:	08004c4a 	.word	0x08004c4a
 8004794:	00000000 	.word	0x00000000
 8004798:	080044f1 	.word	0x080044f1
 800479c:	08004c46 	.word	0x08004c46

080047a0 <_printf_common>:
 80047a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	4616      	mov	r6, r2
 80047a6:	4699      	mov	r9, r3
 80047a8:	688a      	ldr	r2, [r1, #8]
 80047aa:	690b      	ldr	r3, [r1, #16]
 80047ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047b0:	4293      	cmp	r3, r2
 80047b2:	bfb8      	it	lt
 80047b4:	4613      	movlt	r3, r2
 80047b6:	6033      	str	r3, [r6, #0]
 80047b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047bc:	4607      	mov	r7, r0
 80047be:	460c      	mov	r4, r1
 80047c0:	b10a      	cbz	r2, 80047c6 <_printf_common+0x26>
 80047c2:	3301      	adds	r3, #1
 80047c4:	6033      	str	r3, [r6, #0]
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	0699      	lsls	r1, r3, #26
 80047ca:	bf42      	ittt	mi
 80047cc:	6833      	ldrmi	r3, [r6, #0]
 80047ce:	3302      	addmi	r3, #2
 80047d0:	6033      	strmi	r3, [r6, #0]
 80047d2:	6825      	ldr	r5, [r4, #0]
 80047d4:	f015 0506 	ands.w	r5, r5, #6
 80047d8:	d106      	bne.n	80047e8 <_printf_common+0x48>
 80047da:	f104 0a19 	add.w	sl, r4, #25
 80047de:	68e3      	ldr	r3, [r4, #12]
 80047e0:	6832      	ldr	r2, [r6, #0]
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	42ab      	cmp	r3, r5
 80047e6:	dc26      	bgt.n	8004836 <_printf_common+0x96>
 80047e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047ec:	1e13      	subs	r3, r2, #0
 80047ee:	6822      	ldr	r2, [r4, #0]
 80047f0:	bf18      	it	ne
 80047f2:	2301      	movne	r3, #1
 80047f4:	0692      	lsls	r2, r2, #26
 80047f6:	d42b      	bmi.n	8004850 <_printf_common+0xb0>
 80047f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047fc:	4649      	mov	r1, r9
 80047fe:	4638      	mov	r0, r7
 8004800:	47c0      	blx	r8
 8004802:	3001      	adds	r0, #1
 8004804:	d01e      	beq.n	8004844 <_printf_common+0xa4>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	6922      	ldr	r2, [r4, #16]
 800480a:	f003 0306 	and.w	r3, r3, #6
 800480e:	2b04      	cmp	r3, #4
 8004810:	bf02      	ittt	eq
 8004812:	68e5      	ldreq	r5, [r4, #12]
 8004814:	6833      	ldreq	r3, [r6, #0]
 8004816:	1aed      	subeq	r5, r5, r3
 8004818:	68a3      	ldr	r3, [r4, #8]
 800481a:	bf0c      	ite	eq
 800481c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004820:	2500      	movne	r5, #0
 8004822:	4293      	cmp	r3, r2
 8004824:	bfc4      	itt	gt
 8004826:	1a9b      	subgt	r3, r3, r2
 8004828:	18ed      	addgt	r5, r5, r3
 800482a:	2600      	movs	r6, #0
 800482c:	341a      	adds	r4, #26
 800482e:	42b5      	cmp	r5, r6
 8004830:	d11a      	bne.n	8004868 <_printf_common+0xc8>
 8004832:	2000      	movs	r0, #0
 8004834:	e008      	b.n	8004848 <_printf_common+0xa8>
 8004836:	2301      	movs	r3, #1
 8004838:	4652      	mov	r2, sl
 800483a:	4649      	mov	r1, r9
 800483c:	4638      	mov	r0, r7
 800483e:	47c0      	blx	r8
 8004840:	3001      	adds	r0, #1
 8004842:	d103      	bne.n	800484c <_printf_common+0xac>
 8004844:	f04f 30ff 	mov.w	r0, #4294967295
 8004848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484c:	3501      	adds	r5, #1
 800484e:	e7c6      	b.n	80047de <_printf_common+0x3e>
 8004850:	18e1      	adds	r1, r4, r3
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	2030      	movs	r0, #48	; 0x30
 8004856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800485a:	4422      	add	r2, r4
 800485c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004864:	3302      	adds	r3, #2
 8004866:	e7c7      	b.n	80047f8 <_printf_common+0x58>
 8004868:	2301      	movs	r3, #1
 800486a:	4622      	mov	r2, r4
 800486c:	4649      	mov	r1, r9
 800486e:	4638      	mov	r0, r7
 8004870:	47c0      	blx	r8
 8004872:	3001      	adds	r0, #1
 8004874:	d0e6      	beq.n	8004844 <_printf_common+0xa4>
 8004876:	3601      	adds	r6, #1
 8004878:	e7d9      	b.n	800482e <_printf_common+0x8e>
	...

0800487c <_printf_i>:
 800487c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004880:	7e0f      	ldrb	r7, [r1, #24]
 8004882:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004884:	2f78      	cmp	r7, #120	; 0x78
 8004886:	4691      	mov	r9, r2
 8004888:	4680      	mov	r8, r0
 800488a:	460c      	mov	r4, r1
 800488c:	469a      	mov	sl, r3
 800488e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004892:	d807      	bhi.n	80048a4 <_printf_i+0x28>
 8004894:	2f62      	cmp	r7, #98	; 0x62
 8004896:	d80a      	bhi.n	80048ae <_printf_i+0x32>
 8004898:	2f00      	cmp	r7, #0
 800489a:	f000 80d4 	beq.w	8004a46 <_printf_i+0x1ca>
 800489e:	2f58      	cmp	r7, #88	; 0x58
 80048a0:	f000 80c0 	beq.w	8004a24 <_printf_i+0x1a8>
 80048a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048ac:	e03a      	b.n	8004924 <_printf_i+0xa8>
 80048ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048b2:	2b15      	cmp	r3, #21
 80048b4:	d8f6      	bhi.n	80048a4 <_printf_i+0x28>
 80048b6:	a101      	add	r1, pc, #4	; (adr r1, 80048bc <_printf_i+0x40>)
 80048b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048bc:	08004915 	.word	0x08004915
 80048c0:	08004929 	.word	0x08004929
 80048c4:	080048a5 	.word	0x080048a5
 80048c8:	080048a5 	.word	0x080048a5
 80048cc:	080048a5 	.word	0x080048a5
 80048d0:	080048a5 	.word	0x080048a5
 80048d4:	08004929 	.word	0x08004929
 80048d8:	080048a5 	.word	0x080048a5
 80048dc:	080048a5 	.word	0x080048a5
 80048e0:	080048a5 	.word	0x080048a5
 80048e4:	080048a5 	.word	0x080048a5
 80048e8:	08004a2d 	.word	0x08004a2d
 80048ec:	08004955 	.word	0x08004955
 80048f0:	080049e7 	.word	0x080049e7
 80048f4:	080048a5 	.word	0x080048a5
 80048f8:	080048a5 	.word	0x080048a5
 80048fc:	08004a4f 	.word	0x08004a4f
 8004900:	080048a5 	.word	0x080048a5
 8004904:	08004955 	.word	0x08004955
 8004908:	080048a5 	.word	0x080048a5
 800490c:	080048a5 	.word	0x080048a5
 8004910:	080049ef 	.word	0x080049ef
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	1d1a      	adds	r2, r3, #4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	602a      	str	r2, [r5, #0]
 800491c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004924:	2301      	movs	r3, #1
 8004926:	e09f      	b.n	8004a68 <_printf_i+0x1ec>
 8004928:	6820      	ldr	r0, [r4, #0]
 800492a:	682b      	ldr	r3, [r5, #0]
 800492c:	0607      	lsls	r7, r0, #24
 800492e:	f103 0104 	add.w	r1, r3, #4
 8004932:	6029      	str	r1, [r5, #0]
 8004934:	d501      	bpl.n	800493a <_printf_i+0xbe>
 8004936:	681e      	ldr	r6, [r3, #0]
 8004938:	e003      	b.n	8004942 <_printf_i+0xc6>
 800493a:	0646      	lsls	r6, r0, #25
 800493c:	d5fb      	bpl.n	8004936 <_printf_i+0xba>
 800493e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004942:	2e00      	cmp	r6, #0
 8004944:	da03      	bge.n	800494e <_printf_i+0xd2>
 8004946:	232d      	movs	r3, #45	; 0x2d
 8004948:	4276      	negs	r6, r6
 800494a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800494e:	485a      	ldr	r0, [pc, #360]	; (8004ab8 <_printf_i+0x23c>)
 8004950:	230a      	movs	r3, #10
 8004952:	e012      	b.n	800497a <_printf_i+0xfe>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	6820      	ldr	r0, [r4, #0]
 8004958:	1d19      	adds	r1, r3, #4
 800495a:	6029      	str	r1, [r5, #0]
 800495c:	0605      	lsls	r5, r0, #24
 800495e:	d501      	bpl.n	8004964 <_printf_i+0xe8>
 8004960:	681e      	ldr	r6, [r3, #0]
 8004962:	e002      	b.n	800496a <_printf_i+0xee>
 8004964:	0641      	lsls	r1, r0, #25
 8004966:	d5fb      	bpl.n	8004960 <_printf_i+0xe4>
 8004968:	881e      	ldrh	r6, [r3, #0]
 800496a:	4853      	ldr	r0, [pc, #332]	; (8004ab8 <_printf_i+0x23c>)
 800496c:	2f6f      	cmp	r7, #111	; 0x6f
 800496e:	bf0c      	ite	eq
 8004970:	2308      	moveq	r3, #8
 8004972:	230a      	movne	r3, #10
 8004974:	2100      	movs	r1, #0
 8004976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800497a:	6865      	ldr	r5, [r4, #4]
 800497c:	60a5      	str	r5, [r4, #8]
 800497e:	2d00      	cmp	r5, #0
 8004980:	bfa2      	ittt	ge
 8004982:	6821      	ldrge	r1, [r4, #0]
 8004984:	f021 0104 	bicge.w	r1, r1, #4
 8004988:	6021      	strge	r1, [r4, #0]
 800498a:	b90e      	cbnz	r6, 8004990 <_printf_i+0x114>
 800498c:	2d00      	cmp	r5, #0
 800498e:	d04b      	beq.n	8004a28 <_printf_i+0x1ac>
 8004990:	4615      	mov	r5, r2
 8004992:	fbb6 f1f3 	udiv	r1, r6, r3
 8004996:	fb03 6711 	mls	r7, r3, r1, r6
 800499a:	5dc7      	ldrb	r7, [r0, r7]
 800499c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049a0:	4637      	mov	r7, r6
 80049a2:	42bb      	cmp	r3, r7
 80049a4:	460e      	mov	r6, r1
 80049a6:	d9f4      	bls.n	8004992 <_printf_i+0x116>
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d10b      	bne.n	80049c4 <_printf_i+0x148>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	07de      	lsls	r6, r3, #31
 80049b0:	d508      	bpl.n	80049c4 <_printf_i+0x148>
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	6861      	ldr	r1, [r4, #4]
 80049b6:	4299      	cmp	r1, r3
 80049b8:	bfde      	ittt	le
 80049ba:	2330      	movle	r3, #48	; 0x30
 80049bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049c4:	1b52      	subs	r2, r2, r5
 80049c6:	6122      	str	r2, [r4, #16]
 80049c8:	f8cd a000 	str.w	sl, [sp]
 80049cc:	464b      	mov	r3, r9
 80049ce:	aa03      	add	r2, sp, #12
 80049d0:	4621      	mov	r1, r4
 80049d2:	4640      	mov	r0, r8
 80049d4:	f7ff fee4 	bl	80047a0 <_printf_common>
 80049d8:	3001      	adds	r0, #1
 80049da:	d14a      	bne.n	8004a72 <_printf_i+0x1f6>
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295
 80049e0:	b004      	add	sp, #16
 80049e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	f043 0320 	orr.w	r3, r3, #32
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	4833      	ldr	r0, [pc, #204]	; (8004abc <_printf_i+0x240>)
 80049f0:	2778      	movs	r7, #120	; 0x78
 80049f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	6829      	ldr	r1, [r5, #0]
 80049fa:	061f      	lsls	r7, r3, #24
 80049fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a00:	d402      	bmi.n	8004a08 <_printf_i+0x18c>
 8004a02:	065f      	lsls	r7, r3, #25
 8004a04:	bf48      	it	mi
 8004a06:	b2b6      	uxthmi	r6, r6
 8004a08:	07df      	lsls	r7, r3, #31
 8004a0a:	bf48      	it	mi
 8004a0c:	f043 0320 	orrmi.w	r3, r3, #32
 8004a10:	6029      	str	r1, [r5, #0]
 8004a12:	bf48      	it	mi
 8004a14:	6023      	strmi	r3, [r4, #0]
 8004a16:	b91e      	cbnz	r6, 8004a20 <_printf_i+0x1a4>
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	f023 0320 	bic.w	r3, r3, #32
 8004a1e:	6023      	str	r3, [r4, #0]
 8004a20:	2310      	movs	r3, #16
 8004a22:	e7a7      	b.n	8004974 <_printf_i+0xf8>
 8004a24:	4824      	ldr	r0, [pc, #144]	; (8004ab8 <_printf_i+0x23c>)
 8004a26:	e7e4      	b.n	80049f2 <_printf_i+0x176>
 8004a28:	4615      	mov	r5, r2
 8004a2a:	e7bd      	b.n	80049a8 <_printf_i+0x12c>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	6826      	ldr	r6, [r4, #0]
 8004a30:	6961      	ldr	r1, [r4, #20]
 8004a32:	1d18      	adds	r0, r3, #4
 8004a34:	6028      	str	r0, [r5, #0]
 8004a36:	0635      	lsls	r5, r6, #24
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	d501      	bpl.n	8004a40 <_printf_i+0x1c4>
 8004a3c:	6019      	str	r1, [r3, #0]
 8004a3e:	e002      	b.n	8004a46 <_printf_i+0x1ca>
 8004a40:	0670      	lsls	r0, r6, #25
 8004a42:	d5fb      	bpl.n	8004a3c <_printf_i+0x1c0>
 8004a44:	8019      	strh	r1, [r3, #0]
 8004a46:	2300      	movs	r3, #0
 8004a48:	6123      	str	r3, [r4, #16]
 8004a4a:	4615      	mov	r5, r2
 8004a4c:	e7bc      	b.n	80049c8 <_printf_i+0x14c>
 8004a4e:	682b      	ldr	r3, [r5, #0]
 8004a50:	1d1a      	adds	r2, r3, #4
 8004a52:	602a      	str	r2, [r5, #0]
 8004a54:	681d      	ldr	r5, [r3, #0]
 8004a56:	6862      	ldr	r2, [r4, #4]
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	f7fb fbc0 	bl	80001e0 <memchr>
 8004a60:	b108      	cbz	r0, 8004a66 <_printf_i+0x1ea>
 8004a62:	1b40      	subs	r0, r0, r5
 8004a64:	6060      	str	r0, [r4, #4]
 8004a66:	6863      	ldr	r3, [r4, #4]
 8004a68:	6123      	str	r3, [r4, #16]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a70:	e7aa      	b.n	80049c8 <_printf_i+0x14c>
 8004a72:	6923      	ldr	r3, [r4, #16]
 8004a74:	462a      	mov	r2, r5
 8004a76:	4649      	mov	r1, r9
 8004a78:	4640      	mov	r0, r8
 8004a7a:	47d0      	blx	sl
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d0ad      	beq.n	80049dc <_printf_i+0x160>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	079b      	lsls	r3, r3, #30
 8004a84:	d413      	bmi.n	8004aae <_printf_i+0x232>
 8004a86:	68e0      	ldr	r0, [r4, #12]
 8004a88:	9b03      	ldr	r3, [sp, #12]
 8004a8a:	4298      	cmp	r0, r3
 8004a8c:	bfb8      	it	lt
 8004a8e:	4618      	movlt	r0, r3
 8004a90:	e7a6      	b.n	80049e0 <_printf_i+0x164>
 8004a92:	2301      	movs	r3, #1
 8004a94:	4632      	mov	r2, r6
 8004a96:	4649      	mov	r1, r9
 8004a98:	4640      	mov	r0, r8
 8004a9a:	47d0      	blx	sl
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	d09d      	beq.n	80049dc <_printf_i+0x160>
 8004aa0:	3501      	adds	r5, #1
 8004aa2:	68e3      	ldr	r3, [r4, #12]
 8004aa4:	9903      	ldr	r1, [sp, #12]
 8004aa6:	1a5b      	subs	r3, r3, r1
 8004aa8:	42ab      	cmp	r3, r5
 8004aaa:	dcf2      	bgt.n	8004a92 <_printf_i+0x216>
 8004aac:	e7eb      	b.n	8004a86 <_printf_i+0x20a>
 8004aae:	2500      	movs	r5, #0
 8004ab0:	f104 0619 	add.w	r6, r4, #25
 8004ab4:	e7f5      	b.n	8004aa2 <_printf_i+0x226>
 8004ab6:	bf00      	nop
 8004ab8:	08004c51 	.word	0x08004c51
 8004abc:	08004c62 	.word	0x08004c62

08004ac0 <memmove>:
 8004ac0:	4288      	cmp	r0, r1
 8004ac2:	b510      	push	{r4, lr}
 8004ac4:	eb01 0402 	add.w	r4, r1, r2
 8004ac8:	d902      	bls.n	8004ad0 <memmove+0x10>
 8004aca:	4284      	cmp	r4, r0
 8004acc:	4623      	mov	r3, r4
 8004ace:	d807      	bhi.n	8004ae0 <memmove+0x20>
 8004ad0:	1e43      	subs	r3, r0, #1
 8004ad2:	42a1      	cmp	r1, r4
 8004ad4:	d008      	beq.n	8004ae8 <memmove+0x28>
 8004ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ada:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ade:	e7f8      	b.n	8004ad2 <memmove+0x12>
 8004ae0:	4402      	add	r2, r0
 8004ae2:	4601      	mov	r1, r0
 8004ae4:	428a      	cmp	r2, r1
 8004ae6:	d100      	bne.n	8004aea <memmove+0x2a>
 8004ae8:	bd10      	pop	{r4, pc}
 8004aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004af2:	e7f7      	b.n	8004ae4 <memmove+0x24>

08004af4 <_sbrk_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4d06      	ldr	r5, [pc, #24]	; (8004b10 <_sbrk_r+0x1c>)
 8004af8:	2300      	movs	r3, #0
 8004afa:	4604      	mov	r4, r0
 8004afc:	4608      	mov	r0, r1
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	f7fc f8cc 	bl	8000c9c <_sbrk>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d102      	bne.n	8004b0e <_sbrk_r+0x1a>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	b103      	cbz	r3, 8004b0e <_sbrk_r+0x1a>
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	20000290 	.word	0x20000290

08004b14 <_realloc_r>:
 8004b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b18:	4680      	mov	r8, r0
 8004b1a:	4614      	mov	r4, r2
 8004b1c:	460e      	mov	r6, r1
 8004b1e:	b921      	cbnz	r1, 8004b2a <_realloc_r+0x16>
 8004b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b24:	4611      	mov	r1, r2
 8004b26:	f7ff bc57 	b.w	80043d8 <_malloc_r>
 8004b2a:	b92a      	cbnz	r2, 8004b38 <_realloc_r+0x24>
 8004b2c:	f7ff fbe8 	bl	8004300 <_free_r>
 8004b30:	4625      	mov	r5, r4
 8004b32:	4628      	mov	r0, r5
 8004b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b38:	f000 f81b 	bl	8004b72 <_malloc_usable_size_r>
 8004b3c:	4284      	cmp	r4, r0
 8004b3e:	4607      	mov	r7, r0
 8004b40:	d802      	bhi.n	8004b48 <_realloc_r+0x34>
 8004b42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b46:	d812      	bhi.n	8004b6e <_realloc_r+0x5a>
 8004b48:	4621      	mov	r1, r4
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	f7ff fc44 	bl	80043d8 <_malloc_r>
 8004b50:	4605      	mov	r5, r0
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d0ed      	beq.n	8004b32 <_realloc_r+0x1e>
 8004b56:	42bc      	cmp	r4, r7
 8004b58:	4622      	mov	r2, r4
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	bf28      	it	cs
 8004b5e:	463a      	movcs	r2, r7
 8004b60:	f7ff fbc0 	bl	80042e4 <memcpy>
 8004b64:	4631      	mov	r1, r6
 8004b66:	4640      	mov	r0, r8
 8004b68:	f7ff fbca 	bl	8004300 <_free_r>
 8004b6c:	e7e1      	b.n	8004b32 <_realloc_r+0x1e>
 8004b6e:	4635      	mov	r5, r6
 8004b70:	e7df      	b.n	8004b32 <_realloc_r+0x1e>

08004b72 <_malloc_usable_size_r>:
 8004b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b76:	1f18      	subs	r0, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bfbc      	itt	lt
 8004b7c:	580b      	ldrlt	r3, [r1, r0]
 8004b7e:	18c0      	addlt	r0, r0, r3
 8004b80:	4770      	bx	lr
	...

08004b84 <_init>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	bf00      	nop
 8004b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8a:	bc08      	pop	{r3}
 8004b8c:	469e      	mov	lr, r3
 8004b8e:	4770      	bx	lr

08004b90 <_fini>:
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	bf00      	nop
 8004b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b96:	bc08      	pop	{r3}
 8004b98:	469e      	mov	lr, r3
 8004b9a:	4770      	bx	lr

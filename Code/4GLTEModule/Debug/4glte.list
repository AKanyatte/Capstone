
4glte.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  08007ef8  08007ef8  00017ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085a4  080085a4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080085a4  080085a4  000185a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085ac  080085ac  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085ac  080085ac  000185ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080085b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  200001d4  08008788  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  08008788  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c27  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a0f  00000000  00000000  00030e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  00033880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a42  00000000  00000000  000345f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021aae  00000000  00000000  0003503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011504  00000000  00000000  00056ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c36c0  00000000  00000000  00067fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046ec  00000000  00000000  0012b6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0012fd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ee0 	.word	0x08007ee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007ee0 	.word	0x08007ee0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <Tx_Rx>:
uint8_t buffer[1000] = {0};

/* Transmits and receives data via UART
 */
void Tx_Rx(char *cmd)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	memset(buffer, 0, sizeof(buffer));
 8000eac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <Tx_Rx+0x54>)
 8000eb4:	f004 ff03 	bl	8005cbe <memset>
	HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), 1000);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff f9d9 	bl	8000270 <strlen>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <Tx_Rx+0x58>)
 8000eca:	f002 fc13 	bl	80036f4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, buffer, 1000, 1000);
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <Tx_Rx+0x54>)
 8000ed8:	4808      	ldr	r0, [pc, #32]	; (8000efc <Tx_Rx+0x58>)
 8000eda:	f002 fc95 	bl	8003808 <HAL_UART_Receive>
	HAL_USART_Transmit(&husart2, buffer, 1000, 1000);
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ee6:	4904      	ldr	r1, [pc, #16]	; (8000ef8 <Tx_Rx+0x54>)
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <Tx_Rx+0x5c>)
 8000eea:	f003 fd36 	bl	800495a <HAL_USART_Transmit>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200001f0 	.word	0x200001f0
 8000efc:	200005d8 	.word	0x200005d8
 8000f00:	20000660 	.word	0x20000660

08000f04 <check_status>:

/* Checks sim status and if necessary
 *
 */
void check_status(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	Tx_Rx("AT+CPIN?\r\n");
 8000f08:	4806      	ldr	r0, [pc, #24]	; (8000f24 <check_status+0x20>)
 8000f0a:	f7ff ffcb 	bl	8000ea4 <Tx_Rx>
	Tx_Rx("AT+CSQ\r\n");
 8000f0e:	4806      	ldr	r0, [pc, #24]	; (8000f28 <check_status+0x24>)
 8000f10:	f7ff ffc8 	bl	8000ea4 <Tx_Rx>
	Tx_Rx("AT+CREG?\r\n");
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <check_status+0x28>)
 8000f16:	f7ff ffc5 	bl	8000ea4 <Tx_Rx>
	Tx_Rx("AT+CGDCONT?\r\n");
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <check_status+0x2c>)
 8000f1c:	f7ff ffc2 	bl	8000ea4 <Tx_Rx>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08007ef8 	.word	0x08007ef8
 8000f28:	08007f04 	.word	0x08007f04
 8000f2c:	08007f10 	.word	0x08007f10
 8000f30:	08007f1c 	.word	0x08007f1c

08000f34 <http_get>:

void http_get(void)
{
 8000f34:	b5b0      	push	{r4, r5, r7, lr}
 8000f36:	b0dc      	sub	sp, #368	; 0x170
 8000f38:	af00      	add	r7, sp, #0
	char command[300];
	char url[] =  "https://sensorstore-7aa66-default-rtdb.firebaseio.com/.json";
 8000f3a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000f3e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000f42:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <http_get+0xbc>)
 8000f44:	461c      	mov	r4, r3
 8000f46:	4615      	mov	r5, r2
 8000f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint8_t init_is_OK = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
	uint8_t term_is_OK = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e

	while(!init_is_OK)
 8000f68:	e010      	b.n	8000f8c <http_get+0x58>
	{
		Tx_Rx("AT+HTTPINIT\r\n"); //start hhtp service
 8000f6a:	4822      	ldr	r0, [pc, #136]	; (8000ff4 <http_get+0xc0>)
 8000f6c:	f7ff ff9a 	bl	8000ea4 <Tx_Rx>

		if(strstr((char *)buffer,"OK"))
 8000f70:	4921      	ldr	r1, [pc, #132]	; (8000ff8 <http_get+0xc4>)
 8000f72:	4822      	ldr	r0, [pc, #136]	; (8000ffc <http_get+0xc8>)
 8000f74:	f004 feab 	bl	8005cce <strstr>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <http_get+0x50>
		{
			init_is_OK = 1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
		}

		HAL_Delay(1000);
 8000f84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f88:	f000 fe8c 	bl	8001ca4 <HAL_Delay>
	while(!init_is_OK)
 8000f8c:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0ea      	beq.n	8000f6a <http_get+0x36>
	}

	sprintf(command, "AT+HTTPPARA=\"URL\",\"%s\"\r\n", url);
 8000f94:	1d3a      	adds	r2, r7, #4
 8000f96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f9a:	4919      	ldr	r1, [pc, #100]	; (8001000 <http_get+0xcc>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 fe2b 	bl	8005bf8 <siprintf>
	Tx_Rx(command);
 8000fa2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff7c 	bl	8000ea4 <Tx_Rx>
	Tx_Rx("AT+HTTPACTION=0\r\n");
 8000fac:	4815      	ldr	r0, [pc, #84]	; (8001004 <http_get+0xd0>)
 8000fae:	f7ff ff79 	bl	8000ea4 <Tx_Rx>
	//Tx_Rx("AT+HTTPHEAD\r\n");
	Tx_Rx("AT+HTTPREAD?\r\n");
 8000fb2:	4815      	ldr	r0, [pc, #84]	; (8001008 <http_get+0xd4>)
 8000fb4:	f7ff ff76 	bl	8000ea4 <Tx_Rx>

	while(!term_is_OK)
 8000fb8:	e010      	b.n	8000fdc <http_get+0xa8>
	{
		Tx_Rx("AT+HTTPTERM\r\n");  //stop http service
 8000fba:	4814      	ldr	r0, [pc, #80]	; (800100c <http_get+0xd8>)
 8000fbc:	f7ff ff72 	bl	8000ea4 <Tx_Rx>
		if(strstr((char *)buffer,"OK"))
 8000fc0:	490d      	ldr	r1, [pc, #52]	; (8000ff8 <http_get+0xc4>)
 8000fc2:	480e      	ldr	r0, [pc, #56]	; (8000ffc <http_get+0xc8>)
 8000fc4:	f004 fe83 	bl	8005cce <strstr>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <http_get+0xa0>
		{
			term_is_OK = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
		}
		HAL_Delay(1000);
 8000fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd8:	f000 fe64 	bl	8001ca4 <HAL_Delay>
	while(!term_is_OK)
 8000fdc:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0ea      	beq.n	8000fba <http_get+0x86>

	}
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff0:	08007f90 	.word	0x08007f90
 8000ff4:	08007f2c 	.word	0x08007f2c
 8000ff8:	08007f3c 	.word	0x08007f3c
 8000ffc:	200001f0 	.word	0x200001f0
 8001000:	08007f40 	.word	0x08007f40
 8001004:	08007f5c 	.word	0x08007f5c
 8001008:	08007f70 	.word	0x08007f70
 800100c:	08007f80 	.word	0x08007f80

08001010 <http_post>:

void http_post(void)
{
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b0e6      	sub	sp, #408	; 0x198
 8001014:	af02      	add	r7, sp, #8
	char command[300];
	char url[] =  "https://sensorstore-7aa66-default-rtdb.firebaseio.com/.json";
 8001016:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800101a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800101e:	4a4c      	ldr	r2, [pc, #304]	; (8001150 <http_post+0x140>)
 8001020:	461c      	mov	r4, r3
 8001022:	4615      	mov	r5, r2
 8001024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001030:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001034:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char content[] = "application/json";
 8001038:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800103c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001040:	4a44      	ldr	r2, [pc, #272]	; (8001154 <http_post+0x144>)
 8001042:	461c      	mov	r4, r3
 8001044:	4615      	mov	r5, r2
 8001046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104a:	682b      	ldr	r3, [r5, #0]
 800104c:	7023      	strb	r3, [r4, #0]
	uint8_t init_is_OK = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
	uint8_t term_is_OK = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
	int humidity_val = 85;
 800105a:	2355      	movs	r3, #85	; 0x55
 800105c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	int temp_val = 25;
 8001060:	2319      	movs	r3, #25
 8001062:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	int smoke_val = 450;
 8001066:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800106a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

	while(!init_is_OK)
 800106e:	e010      	b.n	8001092 <http_post+0x82>
	{
		Tx_Rx("AT+HTTPINIT\r\n"); //start hhtp service
 8001070:	4839      	ldr	r0, [pc, #228]	; (8001158 <http_post+0x148>)
 8001072:	f7ff ff17 	bl	8000ea4 <Tx_Rx>

		if(strstr((char *)buffer,"OK"))
 8001076:	4939      	ldr	r1, [pc, #228]	; (800115c <http_post+0x14c>)
 8001078:	4839      	ldr	r0, [pc, #228]	; (8001160 <http_post+0x150>)
 800107a:	f004 fe28 	bl	8005cce <strstr>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <http_post+0x7a>
		{
			init_is_OK = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
		}

		HAL_Delay(1000);
 800108a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108e:	f000 fe09 	bl	8001ca4 <HAL_Delay>
	while(!init_is_OK)
 8001092:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0ea      	beq.n	8001070 <http_post+0x60>
	}

	sprintf(command, "AT+HTTPPARA=\"URL\",\"%s\"\r\n", url);
 800109a:	f107 0218 	add.w	r2, r7, #24
 800109e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010a2:	4930      	ldr	r1, [pc, #192]	; (8001164 <http_post+0x154>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 fda7 	bl	8005bf8 <siprintf>
	Tx_Rx(command);
 80010aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fef8 	bl	8000ea4 <Tx_Rx>
	sprintf(command,"AT+HTTPPARA=\"CONTENT\",\"%s\"\r\n", content);
 80010b4:	1d3a      	adds	r2, r7, #4
 80010b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ba:	492b      	ldr	r1, [pc, #172]	; (8001168 <http_post+0x158>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f004 fd9b 	bl	8005bf8 <siprintf>
	Tx_Rx(command);
 80010c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff feec 	bl	8000ea4 <Tx_Rx>
	Tx_Rx("AT+HTTPDATA=50,10000\r\n");
 80010cc:	4827      	ldr	r0, [pc, #156]	; (800116c <http_post+0x15c>)
 80010ce:	f7ff fee9 	bl	8000ea4 <Tx_Rx>
	sprintf(command,"{\"humidity\": %d, \"smoke\": %d, \"temperature\": %d}\r\n", humidity_val, smoke_val, temp_val);
 80010d2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80010d6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010e0:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80010e4:	4922      	ldr	r1, [pc, #136]	; (8001170 <http_post+0x160>)
 80010e6:	f004 fd87 	bl	8005bf8 <siprintf>
	Tx_Rx(command);
 80010ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fed8 	bl	8000ea4 <Tx_Rx>
	HAL_Delay(5000);
 80010f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80010f8:	f000 fdd4 	bl	8001ca4 <HAL_Delay>
	Tx_Rx("AT+HTTPACTION=1\r\n");
 80010fc:	481d      	ldr	r0, [pc, #116]	; (8001174 <http_post+0x164>)
 80010fe:	f7ff fed1 	bl	8000ea4 <Tx_Rx>
	HAL_Delay(2000);
 8001102:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001106:	f000 fdcd 	bl	8001ca4 <HAL_Delay>
	Tx_Rx("AT+HTTPREAD?\r\n");
 800110a:	481b      	ldr	r0, [pc, #108]	; (8001178 <http_post+0x168>)
 800110c:	f7ff feca 	bl	8000ea4 <Tx_Rx>
	HAL_Delay(2000);
 8001110:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001114:	f000 fdc6 	bl	8001ca4 <HAL_Delay>

	while(!term_is_OK)
 8001118:	e010      	b.n	800113c <http_post+0x12c>
	{
		Tx_Rx("AT+HTTPTERM\r\n");  //stop http service
 800111a:	4818      	ldr	r0, [pc, #96]	; (800117c <http_post+0x16c>)
 800111c:	f7ff fec2 	bl	8000ea4 <Tx_Rx>
		if(strstr((char *)buffer,"OK"))
 8001120:	490e      	ldr	r1, [pc, #56]	; (800115c <http_post+0x14c>)
 8001122:	480f      	ldr	r0, [pc, #60]	; (8001160 <http_post+0x150>)
 8001124:	f004 fdd3 	bl	8005cce <strstr>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <http_post+0x124>
		{
			term_is_OK = 1;
 800112e:	2301      	movs	r3, #1
 8001130:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
		}
		HAL_Delay(1000);
 8001134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001138:	f000 fdb4 	bl	8001ca4 <HAL_Delay>
	while(!term_is_OK)
 800113c:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0ea      	beq.n	800111a <http_post+0x10a>
	}
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}
 8001150:	08007f90 	.word	0x08007f90
 8001154:	0800804c 	.word	0x0800804c
 8001158:	08007f2c 	.word	0x08007f2c
 800115c:	08007f3c 	.word	0x08007f3c
 8001160:	200001f0 	.word	0x200001f0
 8001164:	08007f40 	.word	0x08007f40
 8001168:	08007fcc 	.word	0x08007fcc
 800116c:	08007fec 	.word	0x08007fec
 8001170:	08008004 	.word	0x08008004
 8001174:	08008038 	.word	0x08008038
 8001178:	08007f70 	.word	0x08007f70
 800117c:	08007f80 	.word	0x08007f80

08001180 <start_service>:
 */

#include "internet_impl.h"

void start_service(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b09a      	sub	sp, #104	; 0x68
 8001184:	af00      	add	r7, sp, #0
	char AT_command[50];
	uint8_t rx_buffer[50] = {0};
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	222e      	movs	r2, #46	; 0x2e
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f004 fd94 	bl	8005cbe <memset>
	uint8_t NETOPEN_is_OK = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	while(!NETOPEN_is_OK)
 800119c:	e078      	b.n	8001290 <start_service+0x110>
	{
		sprintf(AT_command,"AT+NETOPEN\r\n");
 800119e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011a2:	4940      	ldr	r1, [pc, #256]	; (80012a4 <start_service+0x124>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 fd27 	bl	8005bf8 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)AT_command,strlen(AT_command),1000);
 80011aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f85e 	bl	8000270 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80011bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c0:	4839      	ldr	r0, [pc, #228]	; (80012a8 <start_service+0x128>)
 80011c2:	f002 fa97 	bl	80036f4 <HAL_UART_Transmit>
		HAL_USART_Transmit(&husart2,(uint8_t *)AT_command,strlen(AT_command),1000);
 80011c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f850 	bl	8000270 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80011d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011dc:	4833      	ldr	r0, [pc, #204]	; (80012ac <start_service+0x12c>)
 80011de:	f003 fbbc 	bl	800495a <HAL_USART_Transmit>
		HAL_UART_Receive (&huart1, rx_buffer, 50, 100);
 80011e2:	4639      	mov	r1, r7
 80011e4:	2364      	movs	r3, #100	; 0x64
 80011e6:	2232      	movs	r2, #50	; 0x32
 80011e8:	482f      	ldr	r0, [pc, #188]	; (80012a8 <start_service+0x128>)
 80011ea:	f002 fb0d 	bl	8003808 <HAL_UART_Receive>
		HAL_USART_Transmit(&husart2,rx_buffer,50,100);
 80011ee:	4639      	mov	r1, r7
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	2232      	movs	r2, #50	; 0x32
 80011f4:	482d      	ldr	r0, [pc, #180]	; (80012ac <start_service+0x12c>)
 80011f6:	f003 fbb0 	bl	800495a <HAL_USART_Transmit>
		HAL_Delay(1000);
 80011fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011fe:	f000 fd51 	bl	8001ca4 <HAL_Delay>
		memset(rx_buffer,0,sizeof(rx_buffer));
 8001202:	463b      	mov	r3, r7
 8001204:	2232      	movs	r2, #50	; 0x32
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f004 fd58 	bl	8005cbe <memset>

		sprintf(AT_command,"AT+NETOPEN?\r\n");
 800120e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001212:	4927      	ldr	r1, [pc, #156]	; (80012b0 <start_service+0x130>)
 8001214:	4618      	mov	r0, r3
 8001216:	f004 fcef 	bl	8005bf8 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)AT_command,strlen(AT_command),1000);
 800121a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f826 	bl	8000270 <strlen>
 8001224:	4603      	mov	r3, r0
 8001226:	b29a      	uxth	r2, r3
 8001228:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800122c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001230:	481d      	ldr	r0, [pc, #116]	; (80012a8 <start_service+0x128>)
 8001232:	f002 fa5f 	bl	80036f4 <HAL_UART_Transmit>
		HAL_USART_Transmit(&husart2,(uint8_t *)AT_command,strlen(AT_command),1000);
 8001236:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f818 	bl	8000270 <strlen>
 8001240:	4603      	mov	r3, r0
 8001242:	b29a      	uxth	r2, r3
 8001244:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124c:	4817      	ldr	r0, [pc, #92]	; (80012ac <start_service+0x12c>)
 800124e:	f003 fb84 	bl	800495a <HAL_USART_Transmit>
		HAL_UART_Receive (&huart1, rx_buffer, 50, 100);
 8001252:	4639      	mov	r1, r7
 8001254:	2364      	movs	r3, #100	; 0x64
 8001256:	2232      	movs	r2, #50	; 0x32
 8001258:	4813      	ldr	r0, [pc, #76]	; (80012a8 <start_service+0x128>)
 800125a:	f002 fad5 	bl	8003808 <HAL_UART_Receive>
		HAL_USART_Transmit(&husart2,rx_buffer,50,100);
 800125e:	4639      	mov	r1, r7
 8001260:	2364      	movs	r3, #100	; 0x64
 8001262:	2232      	movs	r2, #50	; 0x32
 8001264:	4811      	ldr	r0, [pc, #68]	; (80012ac <start_service+0x12c>)
 8001266:	f003 fb78 	bl	800495a <HAL_USART_Transmit>
		HAL_Delay(1000);
 800126a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126e:	f000 fd19 	bl	8001ca4 <HAL_Delay>

		if(strstr((char *)rx_buffer,"+NETOPEN: 1"))
 8001272:	463b      	mov	r3, r7
 8001274:	490f      	ldr	r1, [pc, #60]	; (80012b4 <start_service+0x134>)
 8001276:	4618      	mov	r0, r3
 8001278:	f004 fd29 	bl	8005cce <strstr>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <start_service+0x108>
		{
			NETOPEN_is_OK = 1;
 8001282:	2301      	movs	r3, #1
 8001284:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		HAL_Delay(1000);
 8001288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128c:	f000 fd0a 	bl	8001ca4 <HAL_Delay>
	while(!NETOPEN_is_OK)
 8001290:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001294:	2b00      	cmp	r3, #0
 8001296:	d082      	beq.n	800119e <start_service+0x1e>

	}
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3768      	adds	r7, #104	; 0x68
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	08008060 	.word	0x08008060
 80012a8:	200005d8 	.word	0x200005d8
 80012ac:	20000660 	.word	0x20000660
 80012b0:	08008070 	.word	0x08008070
 80012b4:	08008080 	.word	0x08008080

080012b8 <stop_service>:

void stop_service(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b09a      	sub	sp, #104	; 0x68
 80012bc:	af00      	add	r7, sp, #0
	char AT_command[50];
	uint8_t rx_buffer[50] = {0};
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	222e      	movs	r2, #46	; 0x2e
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f004 fcf8 	bl	8005cbe <memset>
	uint8_t NETCLOSE_is_OK = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	while(!NETCLOSE_is_OK)
 80012d4:	e040      	b.n	8001358 <stop_service+0xa0>
	{
		sprintf(AT_command,"AT+NETCLOSE\r\n");
 80012d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012da:	4924      	ldr	r1, [pc, #144]	; (800136c <stop_service+0xb4>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 fc8b 	bl	8005bf8 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)AT_command,strlen(AT_command),1000);
 80012e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ffc2 	bl	8000270 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80012f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f8:	481d      	ldr	r0, [pc, #116]	; (8001370 <stop_service+0xb8>)
 80012fa:	f002 f9fb 	bl	80036f4 <HAL_UART_Transmit>
		HAL_USART_Transmit(&husart2,(uint8_t *)AT_command,strlen(AT_command),1000);
 80012fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001302:	4618      	mov	r0, r3
 8001304:	f7fe ffb4 	bl	8000270 <strlen>
 8001308:	4603      	mov	r3, r0
 800130a:	b29a      	uxth	r2, r3
 800130c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001314:	4817      	ldr	r0, [pc, #92]	; (8001374 <stop_service+0xbc>)
 8001316:	f003 fb20 	bl	800495a <HAL_USART_Transmit>
		HAL_UART_Receive (&huart1, rx_buffer, 50, 100);
 800131a:	4639      	mov	r1, r7
 800131c:	2364      	movs	r3, #100	; 0x64
 800131e:	2232      	movs	r2, #50	; 0x32
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <stop_service+0xb8>)
 8001322:	f002 fa71 	bl	8003808 <HAL_UART_Receive>
		HAL_USART_Transmit(&husart2,rx_buffer,50,100);
 8001326:	4639      	mov	r1, r7
 8001328:	2364      	movs	r3, #100	; 0x64
 800132a:	2232      	movs	r2, #50	; 0x32
 800132c:	4811      	ldr	r0, [pc, #68]	; (8001374 <stop_service+0xbc>)
 800132e:	f003 fb14 	bl	800495a <HAL_USART_Transmit>
		HAL_Delay(1000);
 8001332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001336:	f000 fcb5 	bl	8001ca4 <HAL_Delay>

		if(strstr((char *)rx_buffer,"OK"))
 800133a:	463b      	mov	r3, r7
 800133c:	490e      	ldr	r1, [pc, #56]	; (8001378 <stop_service+0xc0>)
 800133e:	4618      	mov	r0, r3
 8001340:	f004 fcc5 	bl	8005cce <strstr>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <stop_service+0x98>
		{
			NETCLOSE_is_OK = 1;
 800134a:	2301      	movs	r3, #1
 800134c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		HAL_Delay(1000);
 8001350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001354:	f000 fca6 	bl	8001ca4 <HAL_Delay>
	while(!NETCLOSE_is_OK)
 8001358:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0ba      	beq.n	80012d6 <stop_service+0x1e>
	}
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3768      	adds	r7, #104	; 0x68
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	0800808c 	.word	0x0800808c
 8001370:	200005d8 	.word	0x200005d8
 8001374:	20000660 	.word	0x20000660
 8001378:	0800809c 	.word	0x0800809c

0800137c <get_ipaddr>:
	HAL_USART_Transmit(&husart2,rx_buffer,100,100);

}

void get_ipaddr(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0a6      	sub	sp, #152	; 0x98
 8001380:	af00      	add	r7, sp, #0
	char AT_command[50];
	uint8_t rx_buffer[100] = {0};
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2260      	movs	r2, #96	; 0x60
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f004 fc96 	bl	8005cbe <memset>

	sprintf(AT_command, "AT+IPADDR\r\n");
 8001392:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001396:	4918      	ldr	r1, [pc, #96]	; (80013f8 <get_ipaddr+0x7c>)
 8001398:	4618      	mov	r0, r3
 800139a:	f004 fc2d 	bl	8005bf8 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)AT_command,strlen(AT_command),1000);
 800139e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7fe ff64 	bl	8000270 <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80013b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b4:	4811      	ldr	r0, [pc, #68]	; (80013fc <get_ipaddr+0x80>)
 80013b6:	f002 f99d 	bl	80036f4 <HAL_UART_Transmit>
	HAL_USART_Transmit(&husart2,(uint8_t *)AT_command,strlen(AT_command),1000);
 80013ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013be:	4618      	mov	r0, r3
 80013c0:	f7fe ff56 	bl	8000270 <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80013cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <get_ipaddr+0x84>)
 80013d2:	f003 fac2 	bl	800495a <HAL_USART_Transmit>
	HAL_UART_Receive (&huart1, rx_buffer, 100, 100);
 80013d6:	4639      	mov	r1, r7
 80013d8:	2364      	movs	r3, #100	; 0x64
 80013da:	2264      	movs	r2, #100	; 0x64
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <get_ipaddr+0x80>)
 80013de:	f002 fa13 	bl	8003808 <HAL_UART_Receive>
	HAL_USART_Transmit(&husart2,rx_buffer,100,100);
 80013e2:	4639      	mov	r1, r7
 80013e4:	2364      	movs	r3, #100	; 0x64
 80013e6:	2264      	movs	r2, #100	; 0x64
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <get_ipaddr+0x84>)
 80013ea:	f003 fab6 	bl	800495a <HAL_USART_Transmit>

}
 80013ee:	bf00      	nop
 80013f0:	3798      	adds	r7, #152	; 0x98
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	08008144 	.word	0x08008144
 80013fc:	200005d8 	.word	0x200005d8
 8001400:	20000660 	.word	0x20000660

08001404 <boardled_on>:
	//set PB_3 to output mode
	GPIOB->MODER |= (1U << 6);
}

void boardled_on(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
		GPIOB->ODR |= (1U << 3);
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <boardled_on+0x1c>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <boardled_on+0x1c>)
 800140e:	f043 0308 	orr.w	r3, r3, #8
 8001412:	6153      	str	r3, [r2, #20]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	48000400 	.word	0x48000400

08001424 <boardled_off>:

void boardled_off(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
		GPIOB->ODR &= ~(1U << 3);
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <boardled_off+0x1c>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	4a04      	ldr	r2, [pc, #16]	; (8001440 <boardled_off+0x1c>)
 800142e:	f023 0308 	bic.w	r3, r3, #8
 8001432:	6153      	str	r3, [r2, #20]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	48000400 	.word	0x48000400

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001448:	f000 fbb7 	bl	8001bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144c:	f000 f81a 	bl	8001484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001450:	f000 f8ca 	bl	80015e8 <MX_GPIO_Init>
  MX_USART2_Init();
 8001454:	f000 f89c 	bl	8001590 <MX_USART2_Init>
  MX_USART1_UART_Init();
 8001458:	f000 f86a 	bl	8001530 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  boardled_on();
 800145c:	f7ff ffd2 	bl	8001404 <boardled_on>
  send_at();
 8001460:	f000 f912 	bl	8001688 <send_at>
  check_status();
 8001464:	f7ff fd4e 	bl	8000f04 <check_status>
  //set_sms_mode();
  //send_sms();
  start_service();
 8001468:	f7ff fe8a 	bl	8001180 <start_service>
  get_ipaddr();
 800146c:	f7ff ff86 	bl	800137c <get_ipaddr>
  http_get();
 8001470:	f7ff fd60 	bl	8000f34 <http_get>
  http_post();
 8001474:	f7ff fdcc 	bl	8001010 <http_post>
  stop_service();
 8001478:	f7ff ff1e 	bl	80012b8 <stop_service>
  boardled_off();
 800147c:	f7ff ffd2 	bl	8001424 <boardled_off>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001480:	e7fe      	b.n	8001480 <main+0x3c>
	...

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b096      	sub	sp, #88	; 0x58
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	2244      	movs	r2, #68	; 0x44
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fc13 	bl	8005cbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014aa:	f000 ff4f 	bl	800234c <HAL_PWREx_ControlVoltageScaling>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014b4:	f000 f8e2 	bl	800167c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014b8:	f000 ff2a 	bl	8002310 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <SystemClock_Config+0xa8>)
 80014be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c2:	4a1a      	ldr	r2, [pc, #104]	; (800152c <SystemClock_Config+0xa8>)
 80014c4:	f023 0318 	bic.w	r3, r3, #24
 80014c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014cc:	2314      	movs	r3, #20
 80014ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014d4:	2301      	movs	r3, #1
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014dc:	2360      	movs	r3, #96	; 0x60
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 ff85 	bl	80023f8 <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80014f4:	f000 f8c2 	bl	800167c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	230f      	movs	r3, #15
 80014fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800150c:	463b      	mov	r3, r7
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f001 fb85 	bl	8002c20 <HAL_RCC_ClockConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800151c:	f000 f8ae 	bl	800167c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001520:	f001 ff98 	bl	8003454 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001524:	bf00      	nop
 8001526:	3758      	adds	r7, #88	; 0x58
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000

08001530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001536:	4a15      	ldr	r2, [pc, #84]	; (800158c <MX_USART1_UART_Init+0x5c>)
 8001538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001574:	f002 f870 	bl	8003658 <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800157e:	f000 f87d 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200005d8 	.word	0x200005d8
 800158c:	40013800 	.word	0x40013800

08001590 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_USART2_Init+0x50>)
 8001596:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <MX_USART2_Init+0x54>)
 8001598:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_USART2_Init+0x50>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_USART2_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <MX_USART2_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_USART2_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <MX_USART2_Init+0x50>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_USART2_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <MX_USART2_Init+0x50>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_USART2_Init+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <MX_USART2_Init+0x50>)
 80015ce:	f003 f97a 	bl	80048c6 <HAL_USART_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80015d8:	f000 f850 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000660 	.word	0x20000660
 80015e4:	40004400 	.word	0x40004400

080015e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <MX_GPIO_Init+0x8c>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <MX_GPIO_Init+0x8c>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <MX_GPIO_Init+0x8c>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_GPIO_Init+0x8c>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a16      	ldr	r2, [pc, #88]	; (8001674 <MX_GPIO_Init+0x8c>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_GPIO_Init+0x8c>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_GPIO_Init+0x8c>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	4a10      	ldr	r2, [pc, #64]	; (8001674 <MX_GPIO_Init+0x8c>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_GPIO_Init+0x8c>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2108      	movs	r1, #8
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <MX_GPIO_Init+0x90>)
 800164c:	f000 fe48 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001650:	2308      	movs	r3, #8
 8001652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4619      	mov	r1, r3
 8001666:	4804      	ldr	r0, [pc, #16]	; (8001678 <MX_GPIO_Init+0x90>)
 8001668:	f000 fcd0 	bl	800200c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800166c:	bf00      	nop
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	48000400 	.word	0x48000400

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001684:	e7fe      	b.n	8001684 <Error_Handler+0x8>
	...

08001688 <send_at>:
 */
#include "send_data.h"


void send_at(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08e      	sub	sp, #56	; 0x38
 800168c:	af00      	add	r7, sp, #0
	char AT_command[20];
	uint8_t AT_is_OK = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t rx_buffer[30] = {0};
 8001694:	2300      	movs	r3, #0
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	615a      	str	r2, [r3, #20]
 80016a8:	831a      	strh	r2, [r3, #24]

	while(!AT_is_OK)
 80016aa:	e040      	b.n	800172e <send_at+0xa6>
	{
		sprintf(AT_command, "AT\r\n");
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	4923      	ldr	r1, [pc, #140]	; (8001740 <send_at+0xb8>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f004 faa0 	bl	8005bf8 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)AT_command,strlen(AT_command),1000);
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fdd7 	bl	8000270 <strlen>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f107 0120 	add.w	r1, r7, #32
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	481d      	ldr	r0, [pc, #116]	; (8001744 <send_at+0xbc>)
 80016d0:	f002 f810 	bl	80036f4 <HAL_UART_Transmit>
		HAL_USART_Transmit(&husart2,(uint8_t *)AT_command,strlen(AT_command),1000);
 80016d4:	f107 0320 	add.w	r3, r7, #32
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fdc9 	bl	8000270 <strlen>
 80016de:	4603      	mov	r3, r0
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	f107 0120 	add.w	r1, r7, #32
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	4817      	ldr	r0, [pc, #92]	; (8001748 <send_at+0xc0>)
 80016ec:	f003 f935 	bl	800495a <HAL_USART_Transmit>
		HAL_UART_Receive (&huart1, rx_buffer, 30, 100);
 80016f0:	4639      	mov	r1, r7
 80016f2:	2364      	movs	r3, #100	; 0x64
 80016f4:	221e      	movs	r2, #30
 80016f6:	4813      	ldr	r0, [pc, #76]	; (8001744 <send_at+0xbc>)
 80016f8:	f002 f886 	bl	8003808 <HAL_UART_Receive>
		HAL_USART_Transmit(&husart2,rx_buffer,30,100);
 80016fc:	4639      	mov	r1, r7
 80016fe:	2364      	movs	r3, #100	; 0x64
 8001700:	221e      	movs	r2, #30
 8001702:	4811      	ldr	r0, [pc, #68]	; (8001748 <send_at+0xc0>)
 8001704:	f003 f929 	bl	800495a <HAL_USART_Transmit>
		HAL_Delay(1000);
 8001708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800170c:	f000 faca 	bl	8001ca4 <HAL_Delay>

		if(strstr((char *)rx_buffer,"OK"))
 8001710:	463b      	mov	r3, r7
 8001712:	490e      	ldr	r1, [pc, #56]	; (800174c <send_at+0xc4>)
 8001714:	4618      	mov	r0, r3
 8001716:	f004 fada 	bl	8005cce <strstr>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <send_at+0x9e>
		{
			AT_is_OK = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		HAL_Delay(1000);
 8001726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800172a:	f000 fabb 	bl	8001ca4 <HAL_Delay>
	while(!AT_is_OK)
 800172e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0ba      	beq.n	80016ac <send_at+0x24>
	}
}
 8001736:	bf00      	nop
 8001738:	bf00      	nop
 800173a:	3738      	adds	r7, #56	; 0x38
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	08008198 	.word	0x08008198
 8001744:	200005d8 	.word	0x200005d8
 8001748:	20000660 	.word	0x20000660
 800174c:	080081a0 	.word	0x080081a0

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <HAL_MspInit+0x44>)
 8001758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175a:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <HAL_MspInit+0x44>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6613      	str	r3, [r2, #96]	; 0x60
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <HAL_MspInit+0x44>)
 8001764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_MspInit+0x44>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_MspInit+0x44>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	6593      	str	r3, [r2, #88]	; 0x58
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_MspInit+0x44>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b09e      	sub	sp, #120	; 0x78
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	2254      	movs	r2, #84	; 0x54
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 fa80 	bl	8005cbe <memset>
  if(huart->Instance==USART1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a23      	ldr	r2, [pc, #140]	; (8001850 <HAL_UART_MspInit+0xb8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d13f      	bne.n	8001848 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017c8:	2301      	movs	r3, #1
 80017ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	4618      	mov	r0, r3
 80017d6:	f001 fc47 	bl	8003068 <HAL_RCCEx_PeriphCLKConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017e0:	f7ff ff4c 	bl	800167c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_UART_MspInit+0xbc>)
 80017e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e8:	4a1a      	ldr	r2, [pc, #104]	; (8001854 <HAL_UART_MspInit+0xbc>)
 80017ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ee:	6613      	str	r3, [r2, #96]	; 0x60
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <HAL_UART_MspInit+0xbc>)
 80017f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_UART_MspInit+0xbc>)
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <HAL_UART_MspInit+0xbc>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_UART_MspInit+0xbc>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001814:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001818:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001826:	2307      	movs	r3, #7
 8001828:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800182e:	4619      	mov	r1, r3
 8001830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001834:	f000 fbea 	bl	800200c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	2025      	movs	r0, #37	; 0x25
 800183e:	f000 fb30 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001842:	2025      	movs	r0, #37	; 0x25
 8001844:	f000 fb49 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001848:	bf00      	nop
 800184a:	3778      	adds	r7, #120	; 0x78
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40013800 	.word	0x40013800
 8001854:	40021000 	.word	0x40021000

08001858 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b09e      	sub	sp, #120	; 0x78
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2254      	movs	r2, #84	; 0x54
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f004 fa20 	bl	8005cbe <memset>
  if(husart->Instance==USART2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a2c      	ldr	r2, [pc, #176]	; (8001934 <HAL_USART_MspInit+0xdc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d150      	bne.n	800192a <HAL_USART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001888:	2302      	movs	r3, #2
 800188a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800188c:	2300      	movs	r3, #0
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4618      	mov	r0, r3
 8001896:	f001 fbe7 	bl	8003068 <HAL_RCCEx_PeriphCLKConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 80018a0:	f7ff feec 	bl	800167c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_USART_MspInit+0xe0>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	4a23      	ldr	r2, [pc, #140]	; (8001938 <HAL_USART_MspInit+0xe0>)
 80018aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ae:	6593      	str	r3, [r2, #88]	; 0x58
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_USART_MspInit+0xe0>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_USART_MspInit+0xe0>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <HAL_USART_MspInit+0xe0>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_USART_MspInit+0xe0>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_4;
 80018d4:	2314      	movs	r3, #20
 80018d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e4:	2307      	movs	r3, #7
 80018e6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018ec:	4619      	mov	r1, r3
 80018ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f2:	f000 fb8b 	bl	800200c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80018f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001908:	2303      	movs	r3, #3
 800190a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001910:	4619      	mov	r1, r3
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f000 fb79 	bl	800200c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2026      	movs	r0, #38	; 0x26
 8001920:	f000 fabf 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001924:	2026      	movs	r0, #38	; 0x26
 8001926:	f000 fad8 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800192a:	bf00      	nop
 800192c:	3778      	adds	r7, #120	; 0x78
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40004400 	.word	0x40004400
 8001938:	40021000 	.word	0x40021000

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 f96c 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <USART1_IRQHandler+0x10>)
 8001996:	f002 f801 	bl	800399c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200005d8 	.word	0x200005d8

080019a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <USART2_IRQHandler+0x10>)
 80019aa:	f003 f885 	bl	8004ab8 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000660 	.word	0x20000660

080019b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return 1;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_kill>:

int _kill(int pid, int sig)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019d2:	f004 f9dd 	bl	8005d90 <__errno>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2216      	movs	r2, #22
 80019da:	601a      	str	r2, [r3, #0]
  return -1;
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_exit>:

void _exit (int status)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ffe7 	bl	80019c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019fa:	e7fe      	b.n	80019fa <_exit+0x12>

080019fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e00a      	b.n	8001a24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a0e:	f3af 8000 	nop.w
 8001a12:	4601      	mov	r1, r0
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60ba      	str	r2, [r7, #8]
 8001a1a:	b2ca      	uxtb	r2, r1
 8001a1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3301      	adds	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dbf0      	blt.n	8001a0e <_read+0x12>
  }

  return len;
 8001a2c:	687b      	ldr	r3, [r7, #4]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e009      	b.n	8001a5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	60ba      	str	r2, [r7, #8]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dbf1      	blt.n	8001a48 <_write+0x12>
  }
  return len;
 8001a64:	687b      	ldr	r3, [r7, #4]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <_close>:

int _close(int file)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a96:	605a      	str	r2, [r3, #4]
  return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <_isatty>:

int _isatty(int file)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f004 f942 	bl	8005d90 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20010000 	.word	0x20010000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	200006b0 	.word	0x200006b0
 8001b40:	20000808 	.word	0x20000808

08001b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <Reset_Handler>:
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba0 <LoopForever+0x2>
 8001b6c:	f7ff ffea 	bl	8001b44 <SystemInit>
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <LoopForever+0x6>)
 8001b72:	490d      	ldr	r1, [pc, #52]	; (8001ba8 <LoopForever+0xa>)
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <LoopForever+0xe>)
 8001b76:	2300      	movs	r3, #0
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:
 8001b7a:	58d4      	ldr	r4, [r2, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:
 8001b80:	18c4      	adds	r4, r0, r3
 8001b82:	428c      	cmp	r4, r1
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <LoopForever+0x12>)
 8001b88:	4c0a      	ldr	r4, [pc, #40]	; (8001bb4 <LoopForever+0x16>)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:
 8001b92:	42a2      	cmp	r2, r4
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>
 8001b96:	f004 f901 	bl	8005d9c <__libc_init_array>
 8001b9a:	f7ff fc53 	bl	8001444 <main>

08001b9e <LoopForever>:
 8001b9e:	e7fe      	b.n	8001b9e <LoopForever>
 8001ba0:	20010000 	.word	0x20010000
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	200001d4 	.word	0x200001d4
 8001bac:	080085b4 	.word	0x080085b4
 8001bb0:	200001d4 	.word	0x200001d4
 8001bb4:	20000804 	.word	0x20000804

08001bb8 <ADC1_IRQHandler>:
 8001bb8:	e7fe      	b.n	8001bb8 <ADC1_IRQHandler>

08001bba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 f961 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f80e 	bl	8001bec <HAL_InitTick>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	71fb      	strb	r3, [r7, #7]
 8001bda:	e001      	b.n	8001be0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bdc:	f7ff fdb8 	bl	8001750 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be0:	79fb      	ldrb	r3, [r7, #7]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_InitTick+0x6c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d023      	beq.n	8001c48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_InitTick+0x70>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_InitTick+0x6c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f96d 	bl	8001ef6 <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10f      	bne.n	8001c42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d809      	bhi.n	8001c3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 f937 	bl	8001ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_InitTick+0x74>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e007      	b.n	8001c4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e004      	b.n	8001c4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e001      	b.n	8001c4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x20>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x24>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_IncTick+0x24>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000008 	.word	0x20000008
 8001c88:	200006b4 	.word	0x200006b4

08001c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_GetTick+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	200006b4 	.word	0x200006b4

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff ffee 	bl	8001c8c <HAL_GetTick>
 8001cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d005      	beq.n	8001cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_Delay+0x44>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cca:	bf00      	nop
 8001ccc:	f7ff ffde 	bl	8001c8c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8f7      	bhi.n	8001ccc <HAL_Delay+0x28>
  {
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000008 	.word	0x20000008

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff29 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff3e 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff31 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d008      	beq.n	8001f38 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2204      	movs	r2, #4
 8001f2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e022      	b.n	8001f7e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 020e 	bic.w	r2, r2, #14
 8001f46:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	f003 021c 	and.w	r2, r3, #28
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	2101      	movs	r1, #1
 8001f66:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d005      	beq.n	8001fae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e029      	b.n	8002002 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 020e 	bic.w	r2, r2, #14
 8001fbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f003 021c 	and.w	r2, r3, #28
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
    }
  }
  return status;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201a:	e148      	b.n	80022ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2101      	movs	r1, #1
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	4013      	ands	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 813a 	beq.w	80022a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d005      	beq.n	800204c <HAL_GPIO_Init+0x40>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d130      	bne.n	80020ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002082:	2201      	movs	r2, #1
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	f003 0201 	and.w	r2, r3, #1
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d017      	beq.n	80020ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d123      	bne.n	800213e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	220f      	movs	r2, #15
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	08da      	lsrs	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3208      	adds	r2, #8
 8002138:	6939      	ldr	r1, [r7, #16]
 800213a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0203 	and.w	r2, r3, #3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8094 	beq.w	80022a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002180:	4b52      	ldr	r3, [pc, #328]	; (80022cc <HAL_GPIO_Init+0x2c0>)
 8002182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002184:	4a51      	ldr	r2, [pc, #324]	; (80022cc <HAL_GPIO_Init+0x2c0>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6613      	str	r3, [r2, #96]	; 0x60
 800218c:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <HAL_GPIO_Init+0x2c0>)
 800218e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002198:	4a4d      	ldr	r2, [pc, #308]	; (80022d0 <HAL_GPIO_Init+0x2c4>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021c2:	d00d      	beq.n	80021e0 <HAL_GPIO_Init+0x1d4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a43      	ldr	r2, [pc, #268]	; (80022d4 <HAL_GPIO_Init+0x2c8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d007      	beq.n	80021dc <HAL_GPIO_Init+0x1d0>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a42      	ldr	r2, [pc, #264]	; (80022d8 <HAL_GPIO_Init+0x2cc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <HAL_GPIO_Init+0x1cc>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e004      	b.n	80021e2 <HAL_GPIO_Init+0x1d6>
 80021d8:	2307      	movs	r3, #7
 80021da:	e002      	b.n	80021e2 <HAL_GPIO_Init+0x1d6>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_GPIO_Init+0x1d6>
 80021e0:	2300      	movs	r3, #0
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	f002 0203 	and.w	r2, r2, #3
 80021e8:	0092      	lsls	r2, r2, #2
 80021ea:	4093      	lsls	r3, r2
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021f2:	4937      	ldr	r1, [pc, #220]	; (80022d0 <HAL_GPIO_Init+0x2c4>)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	3302      	adds	r3, #2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002200:	4b36      	ldr	r3, [pc, #216]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002224:	4a2d      	ldr	r2, [pc, #180]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800222a:	4b2c      	ldr	r3, [pc, #176]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800224e:	4a23      	ldr	r2, [pc, #140]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002254:	4b21      	ldr	r3, [pc, #132]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002278:	4a18      	ldr	r2, [pc, #96]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	43db      	mvns	r3, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022a2:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	3301      	adds	r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f47f aeaf 	bne.w	800201c <HAL_GPIO_Init+0x10>
  }
}
 80022be:	bf00      	nop
 80022c0:	bf00      	nop
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010000 	.word	0x40010000
 80022d4:	48000400 	.word	0x48000400
 80022d8:	48000800 	.word	0x48000800
 80022dc:	40010400 	.word	0x40010400

080022e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
 80022ec:	4613      	mov	r3, r2
 80022ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f0:	787b      	ldrb	r3, [r7, #1]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022fc:	e002      	b.n	8002304 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40007000 	.word	0x40007000

08002330 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <HAL_PWREx_GetVoltageRange+0x18>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40007000 	.word	0x40007000

0800234c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800235a:	d130      	bne.n	80023be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800235c:	4b23      	ldr	r3, [pc, #140]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002368:	d038      	beq.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800236a:	4b20      	ldr	r3, [pc, #128]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002372:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002374:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002378:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2232      	movs	r2, #50	; 0x32
 8002380:	fb02 f303 	mul.w	r3, r2, r3
 8002384:	4a1b      	ldr	r2, [pc, #108]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0c9b      	lsrs	r3, r3, #18
 800238c:	3301      	adds	r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002390:	e002      	b.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3b01      	subs	r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a4:	d102      	bne.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f2      	bne.n	8002392 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b8:	d110      	bne.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e00f      	b.n	80023de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ca:	d007      	beq.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023d4:	4a05      	ldr	r2, [pc, #20]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40007000 	.word	0x40007000
 80023f0:	20000000 	.word	0x20000000
 80023f4:	431bde83 	.word	0x431bde83

080023f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	f000 bc02 	b.w	8002c10 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240c:	4b96      	ldr	r3, [pc, #600]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002416:	4b94      	ldr	r3, [pc, #592]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80e4 	beq.w	80025f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <HAL_RCC_OscConfig+0x4c>
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	f040 808b 	bne.w	8002552 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b01      	cmp	r3, #1
 8002440:	f040 8087 	bne.w	8002552 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002444:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_OscConfig+0x64>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e3d9      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1a      	ldr	r2, [r3, #32]
 8002460:	4b81      	ldr	r3, [pc, #516]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <HAL_RCC_OscConfig+0x7e>
 800246c:	4b7e      	ldr	r3, [pc, #504]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002474:	e005      	b.n	8002482 <HAL_RCC_OscConfig+0x8a>
 8002476:	4b7c      	ldr	r3, [pc, #496]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002482:	4293      	cmp	r3, r2
 8002484:	d223      	bcs.n	80024ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fd8c 	bl	8002fa8 <RCC_SetFlashLatencyFromMSIRange>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e3ba      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800249a:	4b73      	ldr	r3, [pc, #460]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a72      	ldr	r2, [pc, #456]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024a0:	f043 0308 	orr.w	r3, r3, #8
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b70      	ldr	r3, [pc, #448]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	496d      	ldr	r1, [pc, #436]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b8:	4b6b      	ldr	r3, [pc, #428]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	4968      	ldr	r1, [pc, #416]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
 80024cc:	e025      	b.n	800251a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ce:	4b66      	ldr	r3, [pc, #408]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a65      	ldr	r2, [pc, #404]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024d4:	f043 0308 	orr.w	r3, r3, #8
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b63      	ldr	r3, [pc, #396]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4960      	ldr	r1, [pc, #384]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ec:	4b5e      	ldr	r3, [pc, #376]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	495b      	ldr	r1, [pc, #364]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fd4c 	bl	8002fa8 <RCC_SetFlashLatencyFromMSIRange>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e37a      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800251a:	f000 fc81 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 800251e:	4602      	mov	r2, r0
 8002520:	4b51      	ldr	r3, [pc, #324]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	4950      	ldr	r1, [pc, #320]	; (800266c <HAL_RCC_OscConfig+0x274>)
 800252c:	5ccb      	ldrb	r3, [r1, r3]
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	fa22 f303 	lsr.w	r3, r2, r3
 8002536:	4a4e      	ldr	r2, [pc, #312]	; (8002670 <HAL_RCC_OscConfig+0x278>)
 8002538:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800253a:	4b4e      	ldr	r3, [pc, #312]	; (8002674 <HAL_RCC_OscConfig+0x27c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fb54 	bl	8001bec <HAL_InitTick>
 8002544:	4603      	mov	r3, r0
 8002546:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d052      	beq.n	80025f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	e35e      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d032      	beq.n	80025c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800255a:	4b43      	ldr	r3, [pc, #268]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a42      	ldr	r2, [pc, #264]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002566:	f7ff fb91 	bl	8001c8c <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800256e:	f7ff fb8d 	bl	8001c8c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e347      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002580:	4b39      	ldr	r3, [pc, #228]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800258c:	4b36      	ldr	r3, [pc, #216]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a35      	ldr	r2, [pc, #212]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002592:	f043 0308 	orr.w	r3, r3, #8
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b33      	ldr	r3, [pc, #204]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4930      	ldr	r1, [pc, #192]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025aa:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	492b      	ldr	r1, [pc, #172]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
 80025be:	e01a      	b.n	80025f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a28      	ldr	r2, [pc, #160]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80025c6:	f023 0301 	bic.w	r3, r3, #1
 80025ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025cc:	f7ff fb5e 	bl	8001c8c <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d4:	f7ff fb5a 	bl	8001c8c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e314      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025e6:	4b20      	ldr	r3, [pc, #128]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1dc>
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d073      	beq.n	80026ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b08      	cmp	r3, #8
 8002606:	d005      	beq.n	8002614 <HAL_RCC_OscConfig+0x21c>
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d10e      	bne.n	800262c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d10b      	bne.n	800262c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d063      	beq.n	80026e8 <HAL_RCC_OscConfig+0x2f0>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d15f      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e2f1      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002634:	d106      	bne.n	8002644 <HAL_RCC_OscConfig+0x24c>
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e025      	b.n	8002690 <HAL_RCC_OscConfig+0x298>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800264c:	d114      	bne.n	8002678 <HAL_RCC_OscConfig+0x280>
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b03      	ldr	r3, [pc, #12]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a02      	ldr	r2, [pc, #8]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e013      	b.n	8002690 <HAL_RCC_OscConfig+0x298>
 8002668:	40021000 	.word	0x40021000
 800266c:	080081e8 	.word	0x080081e8
 8002670:	20000000 	.word	0x20000000
 8002674:	20000004 	.word	0x20000004
 8002678:	4ba0      	ldr	r3, [pc, #640]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a9f      	ldr	r2, [pc, #636]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800267e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b9d      	ldr	r3, [pc, #628]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a9c      	ldr	r2, [pc, #624]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7ff faf8 	bl	8001c8c <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a0:	f7ff faf4 	bl	8001c8c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e2ae      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b2:	4b92      	ldr	r3, [pc, #584]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x2a8>
 80026be:	e014      	b.n	80026ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7ff fae4 	bl	8001c8c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c8:	f7ff fae0 	bl	8001c8c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e29a      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026da:	4b88      	ldr	r3, [pc, #544]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x2d0>
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d060      	beq.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_OscConfig+0x310>
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d119      	bne.n	8002736 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d116      	bne.n	8002736 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002708:	4b7c      	ldr	r3, [pc, #496]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_OscConfig+0x328>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e277      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b76      	ldr	r3, [pc, #472]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	4973      	ldr	r1, [pc, #460]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002734:	e040      	b.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d023      	beq.n	8002786 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273e:	4b6f      	ldr	r3, [pc, #444]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6e      	ldr	r2, [pc, #440]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7ff fa9f 	bl	8001c8c <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002752:	f7ff fa9b 	bl	8001c8c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e255      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002764:	4b65      	ldr	r3, [pc, #404]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b62      	ldr	r3, [pc, #392]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	495f      	ldr	r1, [pc, #380]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
 8002784:	e018      	b.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002786:	4b5d      	ldr	r3, [pc, #372]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5c      	ldr	r2, [pc, #368]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800278c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7ff fa7b 	bl	8001c8c <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279a:	f7ff fa77 	bl	8001c8c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e231      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027ac:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d03c      	beq.n	800283e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01c      	beq.n	8002806 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027cc:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80027ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d2:	4a4a      	ldr	r2, [pc, #296]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7ff fa56 	bl	8001c8c <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e4:	f7ff fa52 	bl	8001c8c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e20c      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80027f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ef      	beq.n	80027e4 <HAL_RCC_OscConfig+0x3ec>
 8002804:	e01b      	b.n	800283e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800280c:	4a3b      	ldr	r2, [pc, #236]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002816:	f7ff fa39 	bl	8001c8c <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281e:	f7ff fa35 	bl	8001c8c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e1ef      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1ef      	bne.n	800281e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80a6 	beq.w	8002998 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284c:	2300      	movs	r3, #0
 800284e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002850:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10d      	bne.n	8002878 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	4a26      	ldr	r2, [pc, #152]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002866:	6593      	str	r3, [r2, #88]	; 0x58
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002874:	2301      	movs	r3, #1
 8002876:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002878:	4b21      	ldr	r3, [pc, #132]	; (8002900 <HAL_RCC_OscConfig+0x508>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d118      	bne.n	80028b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002884:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <HAL_RCC_OscConfig+0x508>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <HAL_RCC_OscConfig+0x508>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002890:	f7ff f9fc 	bl	8001c8c <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002898:	f7ff f9f8 	bl	8001c8c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e1b2      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_RCC_OscConfig+0x508>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d108      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4d8>
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ce:	e029      	b.n	8002924 <HAL_RCC_OscConfig+0x52c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d115      	bne.n	8002904 <HAL_RCC_OscConfig+0x50c>
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	4a07      	ldr	r2, [pc, #28]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ee:	4a03      	ldr	r2, [pc, #12]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028f8:	e014      	b.n	8002924 <HAL_RCC_OscConfig+0x52c>
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	40007000 	.word	0x40007000
 8002904:	4b9a      	ldr	r3, [pc, #616]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	4a99      	ldr	r2, [pc, #612]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002914:	4b96      	ldr	r3, [pc, #600]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291a:	4a95      	ldr	r2, [pc, #596]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 800291c:	f023 0304 	bic.w	r3, r3, #4
 8002920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d016      	beq.n	800295a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7ff f9ae 	bl	8001c8c <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002932:	e00a      	b.n	800294a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7ff f9aa 	bl	8001c8c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e162      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294a:	4b89      	ldr	r3, [pc, #548]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 800294c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ed      	beq.n	8002934 <HAL_RCC_OscConfig+0x53c>
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295a:	f7ff f997 	bl	8001c8c <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7ff f993 	bl	8001c8c <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e14b      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002978:	4b7d      	ldr	r3, [pc, #500]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1ed      	bne.n	8002962 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002986:	7ffb      	ldrb	r3, [r7, #31]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298c:	4b78      	ldr	r3, [pc, #480]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	4a77      	ldr	r2, [pc, #476]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002996:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d03c      	beq.n	8002a1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01c      	beq.n	80029e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029ac:	4b70      	ldr	r3, [pc, #448]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 80029ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029b2:	4a6f      	ldr	r2, [pc, #444]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7ff f966 	bl	8001c8c <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029c4:	f7ff f962 	bl	8001c8c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e11c      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029d6:	4b66      	ldr	r3, [pc, #408]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 80029d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ef      	beq.n	80029c4 <HAL_RCC_OscConfig+0x5cc>
 80029e4:	e01b      	b.n	8002a1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029e6:	4b62      	ldr	r3, [pc, #392]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 80029e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ec:	4a60      	ldr	r2, [pc, #384]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f6:	f7ff f949 	bl	8001c8c <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029fe:	f7ff f945 	bl	8001c8c <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e0ff      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a10:	4b57      	ldr	r3, [pc, #348]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1ef      	bne.n	80029fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80f3 	beq.w	8002c0e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	f040 80c9 	bne.w	8002bc4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a32:	4b4f      	ldr	r3, [pc, #316]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 0203 	and.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d12c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	3b01      	subs	r3, #1
 8002a52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d123      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d11b      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d113      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a82:	085b      	lsrs	r3, r3, #1
 8002a84:	3b01      	subs	r3, #1
 8002a86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d109      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d06b      	beq.n	8002b78 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d062      	beq.n	8002b6c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aa6:	4b32      	ldr	r3, [pc, #200]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0ac      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a2d      	ldr	r2, [pc, #180]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ac0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ac2:	f7ff f8e3 	bl	8001c8c <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7ff f8df 	bl	8001c8c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e099      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002adc:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae8:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002af8:	3a01      	subs	r2, #1
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	4311      	orrs	r1, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b02:	0212      	lsls	r2, r2, #8
 8002b04:	4311      	orrs	r1, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b0a:	0852      	lsrs	r2, r2, #1
 8002b0c:	3a01      	subs	r2, #1
 8002b0e:	0552      	lsls	r2, r2, #21
 8002b10:	4311      	orrs	r1, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b16:	0852      	lsrs	r2, r2, #1
 8002b18:	3a01      	subs	r2, #1
 8002b1a:	0652      	lsls	r2, r2, #25
 8002b1c:	4311      	orrs	r1, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b22:	06d2      	lsls	r2, r2, #27
 8002b24:	430a      	orrs	r2, r1
 8002b26:	4912      	ldr	r1, [pc, #72]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b2c:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0f      	ldr	r2, [pc, #60]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b44:	f7ff f8a2 	bl	8001c8c <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7ff f89e 	bl	8001c8c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e058      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5e:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <HAL_RCC_OscConfig+0x778>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b6a:	e050      	b.n	8002c0e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e04f      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
 8002b70:	40021000 	.word	0x40021000
 8002b74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b78:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <HAL_RCC_OscConfig+0x820>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d144      	bne.n	8002c0e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b84:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <HAL_RCC_OscConfig+0x820>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a23      	ldr	r2, [pc, #140]	; (8002c18 <HAL_RCC_OscConfig+0x820>)
 8002b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_RCC_OscConfig+0x820>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a20      	ldr	r2, [pc, #128]	; (8002c18 <HAL_RCC_OscConfig+0x820>)
 8002b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b9c:	f7ff f876 	bl	8001c8c <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7ff f872 	bl	8001c8c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e02c      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb6:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <HAL_RCC_OscConfig+0x820>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x7ac>
 8002bc2:	e024      	b.n	8002c0e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d01f      	beq.n	8002c0a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <HAL_RCC_OscConfig+0x820>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <HAL_RCC_OscConfig+0x820>)
 8002bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7ff f859 	bl	8001c8c <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bde:	f7ff f855 	bl	8001c8c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e00f      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_OscConfig+0x820>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_RCC_OscConfig+0x820>)
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	4905      	ldr	r1, [pc, #20]	; (8002c18 <HAL_RCC_OscConfig+0x820>)
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCC_OscConfig+0x824>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	60cb      	str	r3, [r1, #12]
 8002c08:	e001      	b.n	8002c0e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3720      	adds	r7, #32
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	feeefffc 	.word	0xfeeefffc

08002c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0e7      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b75      	ldr	r3, [pc, #468]	; (8002e0c <HAL_RCC_ClockConfig+0x1ec>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d910      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b72      	ldr	r3, [pc, #456]	; (8002e0c <HAL_RCC_ClockConfig+0x1ec>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 0207 	bic.w	r2, r3, #7
 8002c4a:	4970      	ldr	r1, [pc, #448]	; (8002e0c <HAL_RCC_ClockConfig+0x1ec>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b6e      	ldr	r3, [pc, #440]	; (8002e0c <HAL_RCC_ClockConfig+0x1ec>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0cf      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d010      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	4b66      	ldr	r3, [pc, #408]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d908      	bls.n	8002c92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c80:	4b63      	ldr	r3, [pc, #396]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4960      	ldr	r1, [pc, #384]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d04c      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca6:	4b5a      	ldr	r3, [pc, #360]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d121      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0a6      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cbe:	4b54      	ldr	r3, [pc, #336]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d115      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e09a      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cd6:	4b4e      	ldr	r3, [pc, #312]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e08e      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e086      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cf6:	4b46      	ldr	r3, [pc, #280]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4943      	ldr	r1, [pc, #268]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d08:	f7fe ffc0 	bl	8001c8c <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d10:	f7fe ffbc 	bl	8001c8c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e06e      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 020c 	and.w	r2, r3, #12
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1eb      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d010      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d208      	bcs.n	8002d66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d54:	4b2e      	ldr	r3, [pc, #184]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	492b      	ldr	r1, [pc, #172]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d66:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <HAL_RCC_ClockConfig+0x1ec>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d210      	bcs.n	8002d96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d74:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <HAL_RCC_ClockConfig+0x1ec>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 0207 	bic.w	r2, r3, #7
 8002d7c:	4923      	ldr	r1, [pc, #140]	; (8002e0c <HAL_RCC_ClockConfig+0x1ec>)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d84:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <HAL_RCC_ClockConfig+0x1ec>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e036      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4918      	ldr	r1, [pc, #96]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4910      	ldr	r1, [pc, #64]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dd4:	f000 f824 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	490b      	ldr	r1, [pc, #44]	; (8002e14 <HAL_RCC_ClockConfig+0x1f4>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
 8002df0:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002df2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x1fc>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fe fef7 	bl	8001bec <HAL_InitTick>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e02:	7afb      	ldrb	r3, [r7, #11]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40022000 	.word	0x40022000
 8002e10:	40021000 	.word	0x40021000
 8002e14:	080081e8 	.word	0x080081e8
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e2e:	4b3e      	ldr	r3, [pc, #248]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e38:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x34>
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	d121      	bne.n	8002e92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d11e      	bne.n	8002e92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e54:	4b34      	ldr	r3, [pc, #208]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e60:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e66:	0a1b      	lsrs	r3, r3, #8
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e005      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e7c:	4a2b      	ldr	r2, [pc, #172]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10d      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d102      	bne.n	8002e9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	e004      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ea6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	2b0c      	cmp	r3, #12
 8002eac:	d134      	bne.n	8002f18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eae:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d003      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d003      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0xac>
 8002ec4:	e005      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ec8:	617b      	str	r3, [r7, #20]
      break;
 8002eca:	e005      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ece:	617b      	str	r3, [r7, #20]
      break;
 8002ed0:	e002      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	617b      	str	r3, [r7, #20]
      break;
 8002ed6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	fb03 f202 	mul.w	r2, r3, r2
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	0e5b      	lsrs	r3, r3, #25
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f18:	69bb      	ldr	r3, [r7, #24]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	08008200 	.word	0x08008200
 8002f30:	00f42400 	.word	0x00f42400
 8002f34:	007a1200 	.word	0x007a1200

08002f38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000000 	.word	0x20000000

08002f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f54:	f7ff fff0 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4904      	ldr	r1, [pc, #16]	; (8002f78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000
 8002f78:	080081f8 	.word	0x080081f8

08002f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f80:	f7ff ffda 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	0adb      	lsrs	r3, r3, #11
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	4904      	ldr	r1, [pc, #16]	; (8002fa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	080081f8 	.word	0x080081f8

08002fa8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fb4:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fc0:	f7ff f9b6 	bl	8002330 <HAL_PWREx_GetVoltageRange>
 8002fc4:	6178      	str	r0, [r7, #20]
 8002fc6:	e014      	b.n	8002ff2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fc8:	4b25      	ldr	r3, [pc, #148]	; (8003060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	4a24      	ldr	r2, [pc, #144]	; (8003060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd4:	4b22      	ldr	r3, [pc, #136]	; (8003060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fe0:	f7ff f9a6 	bl	8002330 <HAL_PWREx_GetVoltageRange>
 8002fe4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fea:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff8:	d10b      	bne.n	8003012 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d919      	bls.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2ba0      	cmp	r3, #160	; 0xa0
 8003004:	d902      	bls.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003006:	2302      	movs	r3, #2
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	e013      	b.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800300c:	2301      	movs	r3, #1
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	e010      	b.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b80      	cmp	r3, #128	; 0x80
 8003016:	d902      	bls.n	800301e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003018:	2303      	movs	r3, #3
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	e00a      	b.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b80      	cmp	r3, #128	; 0x80
 8003022:	d102      	bne.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003024:	2302      	movs	r3, #2
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	e004      	b.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b70      	cmp	r3, #112	; 0x70
 800302e:	d101      	bne.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003030:	2301      	movs	r3, #1
 8003032:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 0207 	bic.w	r2, r3, #7
 800303c:	4909      	ldr	r1, [pc, #36]	; (8003064 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003044:	4b07      	ldr	r3, [pc, #28]	; (8003064 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	429a      	cmp	r2, r3
 8003050:	d001      	beq.n	8003056 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	40022000 	.word	0x40022000

08003068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003070:	2300      	movs	r3, #0
 8003072:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003074:	2300      	movs	r3, #0
 8003076:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003080:	2b00      	cmp	r3, #0
 8003082:	d031      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800308c:	d01a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800308e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003092:	d814      	bhi.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d009      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003098:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800309c:	d10f      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800309e:	4b5d      	ldr	r3, [pc, #372]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4a5c      	ldr	r2, [pc, #368]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030aa:	e00c      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 f9de 	bl	8003474 <RCCEx_PLLSAI1_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030bc:	e003      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	74fb      	strb	r3, [r7, #19]
      break;
 80030c2:	e000      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80030c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c6:	7cfb      	ldrb	r3, [r7, #19]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10b      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030cc:	4b51      	ldr	r3, [pc, #324]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	494e      	ldr	r1, [pc, #312]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030e2:	e001      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 809e 	beq.w	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030fa:	4b46      	ldr	r3, [pc, #280]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003110:	4b40      	ldr	r3, [pc, #256]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	4a3f      	ldr	r2, [pc, #252]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311a:	6593      	str	r3, [r2, #88]	; 0x58
 800311c:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003128:	2301      	movs	r3, #1
 800312a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800312c:	4b3a      	ldr	r3, [pc, #232]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a39      	ldr	r2, [pc, #228]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003136:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003138:	f7fe fda8 	bl	8001c8c <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800313e:	e009      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003140:	f7fe fda4 	bl	8001c8c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d902      	bls.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	74fb      	strb	r3, [r7, #19]
        break;
 8003152:	e005      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003154:	4b30      	ldr	r3, [pc, #192]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0ef      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d15a      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003166:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003170:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01e      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	429a      	cmp	r2, r3
 8003180:	d019      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003182:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800318e:	4b21      	ldr	r3, [pc, #132]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003194:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800319e:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	4a1b      	ldr	r2, [pc, #108]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031ae:	4a19      	ldr	r2, [pc, #100]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d016      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fd64 	bl	8001c8c <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031c6:	e00b      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c8:	f7fe fd60 	bl	8001c8c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d902      	bls.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	74fb      	strb	r3, [r7, #19]
            break;
 80031de:	e006      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0ec      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80031ee:	7cfb      	ldrb	r3, [r7, #19]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10b      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f4:	4b07      	ldr	r3, [pc, #28]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003202:	4904      	ldr	r1, [pc, #16]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800320a:	e009      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	74bb      	strb	r3, [r7, #18]
 8003210:	e006      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
 8003218:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003220:	7c7b      	ldrb	r3, [r7, #17]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d105      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003226:	4b8a      	ldr	r3, [pc, #552]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	4a89      	ldr	r2, [pc, #548]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800322c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003230:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800323e:	4b84      	ldr	r3, [pc, #528]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f023 0203 	bic.w	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4980      	ldr	r1, [pc, #512]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003260:	4b7b      	ldr	r3, [pc, #492]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f023 020c 	bic.w	r2, r3, #12
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	4978      	ldr	r1, [pc, #480]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003282:	4b73      	ldr	r3, [pc, #460]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	496f      	ldr	r1, [pc, #444]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032a4:	4b6a      	ldr	r3, [pc, #424]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	4967      	ldr	r1, [pc, #412]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032c6:	4b62      	ldr	r3, [pc, #392]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	495e      	ldr	r1, [pc, #376]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032e8:	4b59      	ldr	r3, [pc, #356]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	4956      	ldr	r1, [pc, #344]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800330a:	4b51      	ldr	r3, [pc, #324]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	494d      	ldr	r1, [pc, #308]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d028      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800332c:	4b48      	ldr	r3, [pc, #288]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4945      	ldr	r1, [pc, #276]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800334a:	d106      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800334c:	4b40      	ldr	r3, [pc, #256]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a3f      	ldr	r2, [pc, #252]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003356:	60d3      	str	r3, [r2, #12]
 8003358:	e011      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003362:	d10c      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	2101      	movs	r1, #1
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f882 	bl	8003474 <RCCEx_PLLSAI1_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800337a:	7cfb      	ldrb	r3, [r7, #19]
 800337c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d028      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800338a:	4b31      	ldr	r3, [pc, #196]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	492d      	ldr	r1, [pc, #180]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033aa:	4b29      	ldr	r3, [pc, #164]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4a28      	ldr	r2, [pc, #160]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033b4:	60d3      	str	r3, [r2, #12]
 80033b6:	e011      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2101      	movs	r1, #1
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f853 	bl	8003474 <RCCEx_PLLSAI1_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01c      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f6:	4916      	ldr	r1, [pc, #88]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003406:	d10c      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	2102      	movs	r1, #2
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f830 	bl	8003474 <RCCEx_PLLSAI1_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343c:	4904      	ldr	r1, [pc, #16]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003444:	7cbb      	ldrb	r3, [r7, #18]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000

08003454 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a04      	ldr	r2, [pc, #16]	; (8003470 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800345e:	f043 0304 	orr.w	r3, r3, #4
 8003462:	6013      	str	r3, [r2, #0]
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000

08003474 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003482:	4b74      	ldr	r3, [pc, #464]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d018      	beq.n	80034c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800348e:	4b71      	ldr	r3, [pc, #452]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f003 0203 	and.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d10d      	bne.n	80034ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
       ||
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034a6:	4b6b      	ldr	r3, [pc, #428]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
       ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d047      	beq.n	800354a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
 80034be:	e044      	b.n	800354a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d018      	beq.n	80034fa <RCCEx_PLLSAI1_Config+0x86>
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d825      	bhi.n	8003518 <RCCEx_PLLSAI1_Config+0xa4>
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d002      	beq.n	80034d6 <RCCEx_PLLSAI1_Config+0x62>
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d009      	beq.n	80034e8 <RCCEx_PLLSAI1_Config+0x74>
 80034d4:	e020      	b.n	8003518 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034d6:	4b5f      	ldr	r3, [pc, #380]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d11d      	bne.n	800351e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e6:	e01a      	b.n	800351e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034e8:	4b5a      	ldr	r3, [pc, #360]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d116      	bne.n	8003522 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f8:	e013      	b.n	8003522 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034fa:	4b56      	ldr	r3, [pc, #344]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003506:	4b53      	ldr	r3, [pc, #332]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003516:	e006      	b.n	8003526 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      break;
 800351c:	e004      	b.n	8003528 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800351e:	bf00      	nop
 8003520:	e002      	b.n	8003528 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003522:	bf00      	nop
 8003524:	e000      	b.n	8003528 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003526:	bf00      	nop
    }

    if(status == HAL_OK)
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10d      	bne.n	800354a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800352e:	4b49      	ldr	r3, [pc, #292]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6819      	ldr	r1, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	3b01      	subs	r3, #1
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	430b      	orrs	r3, r1
 8003544:	4943      	ldr	r1, [pc, #268]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003546:	4313      	orrs	r3, r2
 8003548:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d17c      	bne.n	800364a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003550:	4b40      	ldr	r3, [pc, #256]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a3f      	ldr	r2, [pc, #252]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003556:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800355a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355c:	f7fe fb96 	bl	8001c8c <HAL_GetTick>
 8003560:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003562:	e009      	b.n	8003578 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003564:	f7fe fb92 	bl	8001c8c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d902      	bls.n	8003578 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	73fb      	strb	r3, [r7, #15]
        break;
 8003576:	e005      	b.n	8003584 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003578:	4b36      	ldr	r3, [pc, #216]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ef      	bne.n	8003564 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d15f      	bne.n	800364a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d110      	bne.n	80035b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003590:	4b30      	ldr	r3, [pc, #192]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003598:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6892      	ldr	r2, [r2, #8]
 80035a0:	0211      	lsls	r1, r2, #8
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	68d2      	ldr	r2, [r2, #12]
 80035a6:	06d2      	lsls	r2, r2, #27
 80035a8:	430a      	orrs	r2, r1
 80035aa:	492a      	ldr	r1, [pc, #168]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	610b      	str	r3, [r1, #16]
 80035b0:	e027      	b.n	8003602 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d112      	bne.n	80035de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b8:	4b26      	ldr	r3, [pc, #152]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6892      	ldr	r2, [r2, #8]
 80035c8:	0211      	lsls	r1, r2, #8
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6912      	ldr	r2, [r2, #16]
 80035ce:	0852      	lsrs	r2, r2, #1
 80035d0:	3a01      	subs	r2, #1
 80035d2:	0552      	lsls	r2, r2, #21
 80035d4:	430a      	orrs	r2, r1
 80035d6:	491f      	ldr	r1, [pc, #124]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	610b      	str	r3, [r1, #16]
 80035dc:	e011      	b.n	8003602 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035de:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6892      	ldr	r2, [r2, #8]
 80035ee:	0211      	lsls	r1, r2, #8
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6952      	ldr	r2, [r2, #20]
 80035f4:	0852      	lsrs	r2, r2, #1
 80035f6:	3a01      	subs	r2, #1
 80035f8:	0652      	lsls	r2, r2, #25
 80035fa:	430a      	orrs	r2, r1
 80035fc:	4915      	ldr	r1, [pc, #84]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a13      	ldr	r2, [pc, #76]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003608:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800360c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360e:	f7fe fb3d 	bl	8001c8c <HAL_GetTick>
 8003612:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003614:	e009      	b.n	800362a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003616:	f7fe fb39 	bl	8001c8c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d902      	bls.n	800362a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	73fb      	strb	r3, [r7, #15]
          break;
 8003628:	e005      	b.n	8003636 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0ef      	beq.n	8003616 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	4903      	ldr	r1, [pc, #12]	; (8003654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003646:	4313      	orrs	r3, r2
 8003648:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000

08003658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e040      	b.n	80036ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fe f88c 	bl	8001798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2224      	movs	r2, #36	; 0x24
 8003684:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 feb2 	bl	8004408 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fc83 	bl	8003fb0 <UART_SetConfig>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e01b      	b.n	80036ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 ff31 	bl	800454c <UART_CheckIdleState>
 80036ea:	4603      	mov	r3, r0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	; 0x28
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003708:	2b20      	cmp	r3, #32
 800370a:	d178      	bne.n	80037fe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_UART_Transmit+0x24>
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e071      	b.n	8003800 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2221      	movs	r2, #33	; 0x21
 8003728:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800372a:	f7fe faaf 	bl	8001c8c <HAL_GetTick>
 800372e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	88fa      	ldrh	r2, [r7, #6]
 800373c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003748:	d108      	bne.n	800375c <HAL_UART_Transmit+0x68>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	e003      	b.n	8003764 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003764:	e030      	b.n	80037c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	2180      	movs	r1, #128	; 0x80
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 ff93 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d004      	beq.n	8003786 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e03c      	b.n	8003800 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10b      	bne.n	80037a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	881a      	ldrh	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003798:	b292      	uxth	r2, r2
 800379a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	3302      	adds	r3, #2
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	e008      	b.n	80037b6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	781a      	ldrb	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	b292      	uxth	r2, r2
 80037ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1c8      	bne.n	8003766 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2200      	movs	r2, #0
 80037dc:	2140      	movs	r1, #64	; 0x40
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 ff5c 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d004      	beq.n	80037f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e005      	b.n	8003800 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800381e:	2b20      	cmp	r3, #32
 8003820:	f040 80b6 	bne.w	8003990 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_UART_Receive+0x28>
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0ae      	b.n	8003992 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2222      	movs	r2, #34	; 0x22
 8003840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800384a:	f7fe fa1f 	bl	8001c8c <HAL_GetTick>
 800384e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	88fa      	ldrh	r2, [r7, #6]
 8003854:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003868:	d10e      	bne.n	8003888 <HAL_UART_Receive+0x80>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d105      	bne.n	800387e <HAL_UART_Receive+0x76>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003878:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800387c:	e02d      	b.n	80038da <HAL_UART_Receive+0xd2>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	22ff      	movs	r2, #255	; 0xff
 8003882:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003886:	e028      	b.n	80038da <HAL_UART_Receive+0xd2>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10d      	bne.n	80038ac <HAL_UART_Receive+0xa4>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <HAL_UART_Receive+0x9a>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	22ff      	movs	r2, #255	; 0xff
 800389c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038a0:	e01b      	b.n	80038da <HAL_UART_Receive+0xd2>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	227f      	movs	r2, #127	; 0x7f
 80038a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038aa:	e016      	b.n	80038da <HAL_UART_Receive+0xd2>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038b4:	d10d      	bne.n	80038d2 <HAL_UART_Receive+0xca>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <HAL_UART_Receive+0xc0>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	227f      	movs	r2, #127	; 0x7f
 80038c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038c6:	e008      	b.n	80038da <HAL_UART_Receive+0xd2>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	223f      	movs	r2, #63	; 0x3f
 80038cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038d0:	e003      	b.n	80038da <HAL_UART_Receive+0xd2>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ea:	d108      	bne.n	80038fe <HAL_UART_Receive+0xf6>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	e003      	b.n	8003906 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003906:	e037      	b.n	8003978 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2200      	movs	r2, #0
 8003910:	2120      	movs	r1, #32
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fec2 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e033      	b.n	8003992 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10c      	bne.n	800394a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003936:	b29a      	uxth	r2, r3
 8003938:	8a7b      	ldrh	r3, [r7, #18]
 800393a:	4013      	ands	r3, r2
 800393c:	b29a      	uxth	r2, r3
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	3302      	adds	r3, #2
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	e00d      	b.n	8003966 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003950:	b29b      	uxth	r3, r3
 8003952:	b2da      	uxtb	r2, r3
 8003954:	8a7b      	ldrh	r3, [r7, #18]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	4013      	ands	r3, r2
 800395a:	b2da      	uxtb	r2, r3
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	3301      	adds	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1c1      	bne.n	8003908 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	e000      	b.n	8003992 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003990:	2302      	movs	r3, #2
  }
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b0ba      	sub	sp, #232	; 0xe8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80039c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80039ca:	4013      	ands	r3, r2
 80039cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80039d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d115      	bne.n	8003a04 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00f      	beq.n	8003a04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 82ae 	beq.w	8003f56 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
      }
      return;
 8003a02:	e2a8      	b.n	8003f56 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8117 	beq.w	8003c3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a1e:	4b85      	ldr	r3, [pc, #532]	; (8003c34 <HAL_UART_IRQHandler+0x298>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 810a 	beq.w	8003c3c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d011      	beq.n	8003a58 <HAL_UART_IRQHandler+0xbc>
 8003a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00b      	beq.n	8003a58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2201      	movs	r2, #1
 8003a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4e:	f043 0201 	orr.w	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d011      	beq.n	8003a88 <HAL_UART_IRQHandler+0xec>
 8003a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00b      	beq.n	8003a88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2202      	movs	r2, #2
 8003a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7e:	f043 0204 	orr.w	r2, r3, #4
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d011      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x11c>
 8003a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aae:	f043 0202 	orr.w	r2, r3, #2
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d017      	beq.n	8003af4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00b      	beq.n	8003af4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aea:	f043 0208 	orr.w	r2, r3, #8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d012      	beq.n	8003b26 <HAL_UART_IRQHandler+0x18a>
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00c      	beq.n	8003b26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8214 	beq.w	8003f5a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00d      	beq.n	8003b5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d005      	beq.n	8003b7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d04f      	beq.n	8003c1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fdf3 	bl	800476a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d141      	bne.n	8003c16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3308      	adds	r3, #8
 8003b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1d9      	bne.n	8003b92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d013      	beq.n	8003c0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bea:	4a13      	ldr	r2, [pc, #76]	; (8003c38 <HAL_UART_IRQHandler+0x29c>)
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe f9c9 	bl	8001f8a <HAL_DMA_Abort_IT>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d017      	beq.n	8003c2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	e00f      	b.n	8003c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f9b8 	bl	8003f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c14:	e00b      	b.n	8003c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f9b4 	bl	8003f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	e007      	b.n	8003c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9b0 	bl	8003f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003c2c:	e195      	b.n	8003f5a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2e:	bf00      	nop
    return;
 8003c30:	e193      	b.n	8003f5a <HAL_UART_IRQHandler+0x5be>
 8003c32:	bf00      	nop
 8003c34:	04000120 	.word	0x04000120
 8003c38:	08004833 	.word	0x08004833

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	f040 814e 	bne.w	8003ee2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8147 	beq.w	8003ee2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8140 	beq.w	8003ee2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2210      	movs	r2, #16
 8003c68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	f040 80b8 	bne.w	8003dea <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8167 	beq.w	8003f5e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	f080 815f 	bcs.w	8003f5e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ca6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f040 8086 	bne.w	8003dc8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1da      	bne.n	8003cbc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3308      	adds	r3, #8
 8003d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e1      	bne.n	8003d06 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3308      	adds	r3, #8
 8003d48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3308      	adds	r3, #8
 8003d62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e3      	bne.n	8003d42 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d98:	f023 0310 	bic.w	r3, r3, #16
 8003d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003daa:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e4      	bne.n	8003d88 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe f8a3 	bl	8001f0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	4619      	mov	r1, r3
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f8d8 	bl	8003f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003de8:	e0b9      	b.n	8003f5e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80ab 	beq.w	8003f62 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80a6 	beq.w	8003f62 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	e853 3f00 	ldrex	r3, [r3]
 8003e22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e38:	647b      	str	r3, [r7, #68]	; 0x44
 8003e3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e4      	bne.n	8003e16 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e70:	633a      	str	r2, [r7, #48]	; 0x30
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e3      	bne.n	8003e4c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f023 0310 	bic.w	r3, r3, #16
 8003eac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	69b9      	ldr	r1, [r7, #24]
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	e841 2300 	strex	r3, r2, [r1]
 8003ec6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1e4      	bne.n	8003e98 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ed8:	4619      	mov	r1, r3
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f85c 	bl	8003f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ee0:	e03f      	b.n	8003f62 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00e      	beq.n	8003f0c <HAL_UART_IRQHandler+0x570>
 8003eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fcd4 	bl	80048b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f0a:	e02d      	b.n	8003f68 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00e      	beq.n	8003f36 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01c      	beq.n	8003f66 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
    }
    return;
 8003f34:	e017      	b.n	8003f66 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d012      	beq.n	8003f68 <HAL_UART_IRQHandler+0x5cc>
 8003f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00c      	beq.n	8003f68 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fc85 	bl	800485e <UART_EndTransmit_IT>
    return;
 8003f54:	e008      	b.n	8003f68 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f56:	bf00      	nop
 8003f58:	e006      	b.n	8003f68 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003f5a:	bf00      	nop
 8003f5c:	e004      	b.n	8003f68 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f5e:	bf00      	nop
 8003f60:	e002      	b.n	8003f68 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f62:	bf00      	nop
 8003f64:	e000      	b.n	8003f68 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003f66:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f68:	37e8      	adds	r7, #232	; 0xe8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop

08003f70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb4:	b08a      	sub	sp, #40	; 0x28
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4bb4      	ldr	r3, [pc, #720]	; (80042b0 <UART_SetConfig+0x300>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4aa9      	ldr	r2, [pc, #676]	; (80042b4 <UART_SetConfig+0x304>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004018:	4313      	orrs	r3, r2
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402c:	430a      	orrs	r2, r1
 800402e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4aa0      	ldr	r2, [pc, #640]	; (80042b8 <UART_SetConfig+0x308>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d126      	bne.n	8004088 <UART_SetConfig+0xd8>
 800403a:	4ba0      	ldr	r3, [pc, #640]	; (80042bc <UART_SetConfig+0x30c>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b03      	cmp	r3, #3
 8004046:	d81b      	bhi.n	8004080 <UART_SetConfig+0xd0>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <UART_SetConfig+0xa0>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004061 	.word	0x08004061
 8004054:	08004071 	.word	0x08004071
 8004058:	08004069 	.word	0x08004069
 800405c:	08004079 	.word	0x08004079
 8004060:	2301      	movs	r3, #1
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004066:	e080      	b.n	800416a <UART_SetConfig+0x1ba>
 8004068:	2302      	movs	r3, #2
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406e:	e07c      	b.n	800416a <UART_SetConfig+0x1ba>
 8004070:	2304      	movs	r3, #4
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004076:	e078      	b.n	800416a <UART_SetConfig+0x1ba>
 8004078:	2308      	movs	r3, #8
 800407a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800407e:	e074      	b.n	800416a <UART_SetConfig+0x1ba>
 8004080:	2310      	movs	r3, #16
 8004082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004086:	e070      	b.n	800416a <UART_SetConfig+0x1ba>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a8c      	ldr	r2, [pc, #560]	; (80042c0 <UART_SetConfig+0x310>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d138      	bne.n	8004104 <UART_SetConfig+0x154>
 8004092:	4b8a      	ldr	r3, [pc, #552]	; (80042bc <UART_SetConfig+0x30c>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	2b0c      	cmp	r3, #12
 800409e:	d82d      	bhi.n	80040fc <UART_SetConfig+0x14c>
 80040a0:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <UART_SetConfig+0xf8>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040dd 	.word	0x080040dd
 80040ac:	080040fd 	.word	0x080040fd
 80040b0:	080040fd 	.word	0x080040fd
 80040b4:	080040fd 	.word	0x080040fd
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	080040fd 	.word	0x080040fd
 80040c0:	080040fd 	.word	0x080040fd
 80040c4:	080040fd 	.word	0x080040fd
 80040c8:	080040e5 	.word	0x080040e5
 80040cc:	080040fd 	.word	0x080040fd
 80040d0:	080040fd 	.word	0x080040fd
 80040d4:	080040fd 	.word	0x080040fd
 80040d8:	080040f5 	.word	0x080040f5
 80040dc:	2300      	movs	r3, #0
 80040de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040e2:	e042      	b.n	800416a <UART_SetConfig+0x1ba>
 80040e4:	2302      	movs	r3, #2
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ea:	e03e      	b.n	800416a <UART_SetConfig+0x1ba>
 80040ec:	2304      	movs	r3, #4
 80040ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040f2:	e03a      	b.n	800416a <UART_SetConfig+0x1ba>
 80040f4:	2308      	movs	r3, #8
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fa:	e036      	b.n	800416a <UART_SetConfig+0x1ba>
 80040fc:	2310      	movs	r3, #16
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004102:	e032      	b.n	800416a <UART_SetConfig+0x1ba>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a6a      	ldr	r2, [pc, #424]	; (80042b4 <UART_SetConfig+0x304>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d12a      	bne.n	8004164 <UART_SetConfig+0x1b4>
 800410e:	4b6b      	ldr	r3, [pc, #428]	; (80042bc <UART_SetConfig+0x30c>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004118:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800411c:	d01a      	beq.n	8004154 <UART_SetConfig+0x1a4>
 800411e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004122:	d81b      	bhi.n	800415c <UART_SetConfig+0x1ac>
 8004124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004128:	d00c      	beq.n	8004144 <UART_SetConfig+0x194>
 800412a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412e:	d815      	bhi.n	800415c <UART_SetConfig+0x1ac>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <UART_SetConfig+0x18c>
 8004134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004138:	d008      	beq.n	800414c <UART_SetConfig+0x19c>
 800413a:	e00f      	b.n	800415c <UART_SetConfig+0x1ac>
 800413c:	2300      	movs	r3, #0
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004142:	e012      	b.n	800416a <UART_SetConfig+0x1ba>
 8004144:	2302      	movs	r3, #2
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414a:	e00e      	b.n	800416a <UART_SetConfig+0x1ba>
 800414c:	2304      	movs	r3, #4
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004152:	e00a      	b.n	800416a <UART_SetConfig+0x1ba>
 8004154:	2308      	movs	r3, #8
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415a:	e006      	b.n	800416a <UART_SetConfig+0x1ba>
 800415c:	2310      	movs	r3, #16
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004162:	e002      	b.n	800416a <UART_SetConfig+0x1ba>
 8004164:	2310      	movs	r3, #16
 8004166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a51      	ldr	r2, [pc, #324]	; (80042b4 <UART_SetConfig+0x304>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d17a      	bne.n	800426a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004178:	2b08      	cmp	r3, #8
 800417a:	d824      	bhi.n	80041c6 <UART_SetConfig+0x216>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <UART_SetConfig+0x1d4>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	080041a9 	.word	0x080041a9
 8004188:	080041c7 	.word	0x080041c7
 800418c:	080041b1 	.word	0x080041b1
 8004190:	080041c7 	.word	0x080041c7
 8004194:	080041b7 	.word	0x080041b7
 8004198:	080041c7 	.word	0x080041c7
 800419c:	080041c7 	.word	0x080041c7
 80041a0:	080041c7 	.word	0x080041c7
 80041a4:	080041bf 	.word	0x080041bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041a8:	f7fe fed2 	bl	8002f50 <HAL_RCC_GetPCLK1Freq>
 80041ac:	61f8      	str	r0, [r7, #28]
        break;
 80041ae:	e010      	b.n	80041d2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b0:	4b44      	ldr	r3, [pc, #272]	; (80042c4 <UART_SetConfig+0x314>)
 80041b2:	61fb      	str	r3, [r7, #28]
        break;
 80041b4:	e00d      	b.n	80041d2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b6:	f7fe fe33 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 80041ba:	61f8      	str	r0, [r7, #28]
        break;
 80041bc:	e009      	b.n	80041d2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c2:	61fb      	str	r3, [r7, #28]
        break;
 80041c4:	e005      	b.n	80041d2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8107 	beq.w	80043e8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	4413      	add	r3, r2
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d305      	bcc.n	80041f6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d903      	bls.n	80041fe <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041fc:	e0f4      	b.n	80043e8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	2200      	movs	r2, #0
 8004202:	461c      	mov	r4, r3
 8004204:	4615      	mov	r5, r2
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	022b      	lsls	r3, r5, #8
 8004210:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004214:	0222      	lsls	r2, r4, #8
 8004216:	68f9      	ldr	r1, [r7, #12]
 8004218:	6849      	ldr	r1, [r1, #4]
 800421a:	0849      	lsrs	r1, r1, #1
 800421c:	2000      	movs	r0, #0
 800421e:	4688      	mov	r8, r1
 8004220:	4681      	mov	r9, r0
 8004222:	eb12 0a08 	adds.w	sl, r2, r8
 8004226:	eb43 0b09 	adc.w	fp, r3, r9
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004238:	4650      	mov	r0, sl
 800423a:	4659      	mov	r1, fp
 800423c:	f7fc fcb4 	bl	8000ba8 <__aeabi_uldivmod>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4613      	mov	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800424e:	d308      	bcc.n	8004262 <UART_SetConfig+0x2b2>
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004256:	d204      	bcs.n	8004262 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	e0c2      	b.n	80043e8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004268:	e0be      	b.n	80043e8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004272:	d16a      	bne.n	800434a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004278:	2b08      	cmp	r3, #8
 800427a:	d834      	bhi.n	80042e6 <UART_SetConfig+0x336>
 800427c:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <UART_SetConfig+0x2d4>)
 800427e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004282:	bf00      	nop
 8004284:	080042a9 	.word	0x080042a9
 8004288:	080042c9 	.word	0x080042c9
 800428c:	080042d1 	.word	0x080042d1
 8004290:	080042e7 	.word	0x080042e7
 8004294:	080042d7 	.word	0x080042d7
 8004298:	080042e7 	.word	0x080042e7
 800429c:	080042e7 	.word	0x080042e7
 80042a0:	080042e7 	.word	0x080042e7
 80042a4:	080042df 	.word	0x080042df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a8:	f7fe fe52 	bl	8002f50 <HAL_RCC_GetPCLK1Freq>
 80042ac:	61f8      	str	r0, [r7, #28]
        break;
 80042ae:	e020      	b.n	80042f2 <UART_SetConfig+0x342>
 80042b0:	efff69f3 	.word	0xefff69f3
 80042b4:	40008000 	.word	0x40008000
 80042b8:	40013800 	.word	0x40013800
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40004400 	.word	0x40004400
 80042c4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c8:	f7fe fe58 	bl	8002f7c <HAL_RCC_GetPCLK2Freq>
 80042cc:	61f8      	str	r0, [r7, #28]
        break;
 80042ce:	e010      	b.n	80042f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d0:	4b4c      	ldr	r3, [pc, #304]	; (8004404 <UART_SetConfig+0x454>)
 80042d2:	61fb      	str	r3, [r7, #28]
        break;
 80042d4:	e00d      	b.n	80042f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d6:	f7fe fda3 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 80042da:	61f8      	str	r0, [r7, #28]
        break;
 80042dc:	e009      	b.n	80042f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042e2:	61fb      	str	r3, [r7, #28]
        break;
 80042e4:	e005      	b.n	80042f2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d077      	beq.n	80043e8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	005a      	lsls	r2, r3, #1
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	441a      	add	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b0f      	cmp	r3, #15
 8004312:	d916      	bls.n	8004342 <UART_SetConfig+0x392>
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431a:	d212      	bcs.n	8004342 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f023 030f 	bic.w	r3, r3, #15
 8004324:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	b29b      	uxth	r3, r3
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	b29a      	uxth	r2, r3
 8004332:	8afb      	ldrh	r3, [r7, #22]
 8004334:	4313      	orrs	r3, r2
 8004336:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	8afa      	ldrh	r2, [r7, #22]
 800433e:	60da      	str	r2, [r3, #12]
 8004340:	e052      	b.n	80043e8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004348:	e04e      	b.n	80043e8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800434a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800434e:	2b08      	cmp	r3, #8
 8004350:	d827      	bhi.n	80043a2 <UART_SetConfig+0x3f2>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <UART_SetConfig+0x3a8>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	0800437d 	.word	0x0800437d
 800435c:	08004385 	.word	0x08004385
 8004360:	0800438d 	.word	0x0800438d
 8004364:	080043a3 	.word	0x080043a3
 8004368:	08004393 	.word	0x08004393
 800436c:	080043a3 	.word	0x080043a3
 8004370:	080043a3 	.word	0x080043a3
 8004374:	080043a3 	.word	0x080043a3
 8004378:	0800439b 	.word	0x0800439b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800437c:	f7fe fde8 	bl	8002f50 <HAL_RCC_GetPCLK1Freq>
 8004380:	61f8      	str	r0, [r7, #28]
        break;
 8004382:	e014      	b.n	80043ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004384:	f7fe fdfa 	bl	8002f7c <HAL_RCC_GetPCLK2Freq>
 8004388:	61f8      	str	r0, [r7, #28]
        break;
 800438a:	e010      	b.n	80043ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800438c:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <UART_SetConfig+0x454>)
 800438e:	61fb      	str	r3, [r7, #28]
        break;
 8004390:	e00d      	b.n	80043ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004392:	f7fe fd45 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8004396:	61f8      	str	r0, [r7, #28]
        break;
 8004398:	e009      	b.n	80043ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439e:	61fb      	str	r3, [r7, #28]
        break;
 80043a0:	e005      	b.n	80043ae <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043ac:	bf00      	nop
    }

    if (pclk != 0U)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d019      	beq.n	80043e8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	085a      	lsrs	r2, r3, #1
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	441a      	add	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b0f      	cmp	r3, #15
 80043cc:	d909      	bls.n	80043e2 <UART_SetConfig+0x432>
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d205      	bcs.n	80043e2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60da      	str	r2, [r3, #12]
 80043e0:	e002      	b.n	80043e8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3728      	adds	r7, #40	; 0x28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004402:	bf00      	nop
 8004404:	00f42400 	.word	0x00f42400

08004408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01a      	beq.n	800451e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004506:	d10a      	bne.n	800451e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	605a      	str	r2, [r3, #4]
  }
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b098      	sub	sp, #96	; 0x60
 8004550:	af02      	add	r7, sp, #8
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800455c:	f7fd fb96 	bl	8001c8c <HAL_GetTick>
 8004560:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b08      	cmp	r3, #8
 800456e:	d12e      	bne.n	80045ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004578:	2200      	movs	r2, #0
 800457a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f88c 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d021      	beq.n	80045ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800459e:	653b      	str	r3, [r7, #80]	; 0x50
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a8:	647b      	str	r3, [r7, #68]	; 0x44
 80045aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e6      	bne.n	800458a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e062      	b.n	8004694 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d149      	bne.n	8004670 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e4:	2200      	movs	r2, #0
 80045e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f856 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d03c      	beq.n	8004670 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	623b      	str	r3, [r7, #32]
   return(result);
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800460a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004614:	633b      	str	r3, [r7, #48]	; 0x30
 8004616:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800461a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e6      	bne.n	80045f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3308      	adds	r3, #8
 800462e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	60fb      	str	r3, [r7, #12]
   return(result);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3308      	adds	r3, #8
 8004646:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004648:	61fa      	str	r2, [r7, #28]
 800464a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	69b9      	ldr	r1, [r7, #24]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	617b      	str	r3, [r7, #20]
   return(result);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e5      	bne.n	8004628 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e011      	b.n	8004694 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3758      	adds	r7, #88	; 0x58
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ac:	e049      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d045      	beq.n	8004742 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b6:	f7fd fae9 	bl	8001c8c <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <UART_WaitOnFlagUntilTimeout+0x30>
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e048      	b.n	8004762 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d031      	beq.n	8004742 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d110      	bne.n	800470e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2208      	movs	r2, #8
 80046f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f838 	bl	800476a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2208      	movs	r2, #8
 80046fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e029      	b.n	8004762 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800471c:	d111      	bne.n	8004742 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f81e 	bl	800476a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2220      	movs	r2, #32
 8004732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e00f      	b.n	8004762 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4013      	ands	r3, r2
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	429a      	cmp	r2, r3
 8004750:	bf0c      	ite	eq
 8004752:	2301      	moveq	r3, #1
 8004754:	2300      	movne	r3, #0
 8004756:	b2db      	uxtb	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	429a      	cmp	r2, r3
 800475e:	d0a6      	beq.n	80046ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800476a:	b480      	push	{r7}
 800476c:	b095      	sub	sp, #84	; 0x54
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004790:	643b      	str	r3, [r7, #64]	; 0x40
 8004792:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e6      	bne.n	8004772 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3308      	adds	r3, #8
 80047aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3308      	adds	r3, #8
 80047c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e5      	bne.n	80047a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d118      	bne.n	8004812 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f023 0310 	bic.w	r3, r3, #16
 80047f4:	647b      	str	r3, [r7, #68]	; 0x44
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6979      	ldr	r1, [r7, #20]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	613b      	str	r3, [r7, #16]
   return(result);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e6      	bne.n	80047e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004826:	bf00      	nop
 8004828:	3754      	adds	r7, #84	; 0x54
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff fb97 	bl	8003f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b088      	sub	sp, #32
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	60bb      	str	r3, [r7, #8]
   return(result);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6979      	ldr	r1, [r7, #20]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	613b      	str	r3, [r7, #16]
   return(result);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e6      	bne.n	8004866 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff fb63 	bl	8003f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048aa:	bf00      	nop
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e03c      	b.n	8004952 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fc ffb3 	bl	8001858 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa98 	bl	8004e40 <USART_SetConfig>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e01b      	b.n	8004952 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004928:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004938:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0201 	orr.w	r2, r2, #1
 8004948:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fba6 	bl	800509c <USART_CheckIdleState>
 8004950:	4603      	mov	r3, r0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b08a      	sub	sp, #40	; 0x28
 800495e:	af02      	add	r7, sp, #8
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	f040 809a 	bne.w	8004aac <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <HAL_USART_Transmit+0x2a>
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e092      	b.n	8004aae <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_USART_Transmit+0x3c>
 8004992:	2302      	movs	r3, #2
 8004994:	e08b      	b.n	8004aae <HAL_USART_Transmit+0x154>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2212      	movs	r2, #18
 80049a8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ac:	f7fd f96e 	bl	8001c8c <HAL_GetTick>
 80049b0:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	88fa      	ldrh	r2, [r7, #6]
 80049b6:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	88fa      	ldrh	r2, [r7, #6]
 80049bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c6:	d108      	bne.n	80049da <HAL_USART_Transmit+0x80>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d104      	bne.n	80049da <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	61bb      	str	r3, [r7, #24]
 80049d8:	e003      	b.n	80049e2 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80049e2:	e02b      	b.n	8004a3c <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2200      	movs	r2, #0
 80049ec:	2180      	movs	r1, #128	; 0x80
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f9f0 	bl	8004dd4 <USART_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e057      	b.n	8004aae <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10b      	bne.n	8004a1c <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	881a      	ldrh	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a10:	b292      	uxth	r2, r2
 8004a12:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	3302      	adds	r3, #2
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	e008      	b.n	8004a2e <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	781a      	ldrb	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	b292      	uxth	r2, r2
 8004a26:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1ce      	bne.n	80049e4 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2140      	movs	r1, #64	; 0x40
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f9bf 	bl	8004dd4 <USART_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e026      	b.n	8004aae <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2240      	movs	r2, #64	; 0x40
 8004a66:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	8b1b      	ldrh	r3, [r3, #24]
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0208 	orr.w	r2, r2, #8
 8004a80:	b292      	uxth	r2, r2
 8004a82:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	8b1b      	ldrh	r3, [r3, #24]
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0210 	orr.w	r2, r2, #16
 8004a94:	b292      	uxth	r2, r2
 8004a96:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e000      	b.n	8004aae <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
  }
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3720      	adds	r7, #32
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	617b      	str	r3, [r7, #20]
  /* If no error occurs */
#if defined(USART_CR2_SLVEN)
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
                                      USART_ISR_UDR));
#else
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ade:	4013      	ands	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
#endif /* USART_CR2_SLVEN */
  if (errorflags == 0U)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d113      	bne.n	8004b10 <HAL_USART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00e      	beq.n	8004b10 <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d009      	beq.n	8004b10 <HAL_USART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (husart->RxISR != NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 810d 	beq.w	8004d20 <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	4798      	blx	r3
      }
      return;
 8004b0e:	e107      	b.n	8004d20 <HAL_USART_IRQHandler+0x268>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
#else
  if ((errorflags != 0U)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 80e3 	beq.w	8004cde <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d105      	bne.n	8004b2e <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80d8 	beq.w	8004cde <HAL_USART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00e      	beq.n	8004b56 <HAL_USART_IRQHandler+0x9e>
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2201      	movs	r2, #1
 8004b48:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4e:	f043 0201 	orr.w	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00e      	beq.n	8004b7e <HAL_USART_IRQHandler+0xc6>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b76:	f043 0204 	orr.w	r2, r3, #4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00e      	beq.n	8004ba6 <HAL_USART_IRQHandler+0xee>
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2204      	movs	r2, #4
 8004b98:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9e:	f043 0202 	orr.w	r2, r3, #2
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	64da      	str	r2, [r3, #76]	; 0x4c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d013      	beq.n	8004bd8 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d009      	beq.n	8004bd8 <HAL_USART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2208      	movs	r2, #8
 8004bca:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd0:	f043 0208 	orr.w	r2, r3, #8
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00f      	beq.n	8004c02 <HAL_USART_IRQHandler+0x14a>
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bf4:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
#endif /* USART_CR2_SLVEN */

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 808c 	beq.w	8004d24 <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00c      	beq.n	8004c30 <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <HAL_USART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (husart->RxISR != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b40      	cmp	r3, #64	; 0x40
 8004c46:	d002      	beq.n	8004c4e <HAL_USART_IRQHandler+0x196>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d03e      	beq.n	8004ccc <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f88e 	bl	8004d70 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5e:	2b40      	cmp	r3, #64	; 0x40
 8004c60:	d130      	bne.n	8004cc4 <HAL_USART_IRQHandler+0x20c>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c70:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d008      	beq.n	8004c8c <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	2200      	movs	r2, #0
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fd f97f 	bl	8001f8a <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d013      	beq.n	8004cbc <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	4a25      	ldr	r2, [pc, #148]	; (8004d30 <HAL_USART_IRQHandler+0x278>)
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fd f972 	bl	8001f8a <HAL_DMA_Abort_IT>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d016      	beq.n	8004cda <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8004cba:	e00e      	b.n	8004cda <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f84d 	bl	8004d5c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8004cc2:	e00a      	b.n	8004cda <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f849 	bl	8004d5c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8004cca:	e006      	b.n	8004cda <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f845 	bl	8004d5c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    return;
 8004cd8:	e024      	b.n	8004d24 <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8004cda:	bf00      	nop
    return;
 8004cdc:	e022      	b.n	8004d24 <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00d      	beq.n	8004d04 <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d008      	beq.n	8004d04 <HAL_USART_IRQHandler+0x24c>
#endif /* USART_CR1_FIFOEN */
  {
    if (husart->TxISR != NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d016      	beq.n	8004d28 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	4798      	blx	r3
    }
    return;
 8004d02:	e011      	b.n	8004d28 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00d      	beq.n	8004d2a <HAL_USART_IRQHandler+0x272>
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fa02 	bl	8005122 <USART_EndTransmit_IT>
    return;
 8004d1e:	e004      	b.n	8004d2a <HAL_USART_IRQHandler+0x272>
      return;
 8004d20:	bf00      	nop
 8004d22:	e002      	b.n	8004d2a <HAL_USART_IRQHandler+0x272>
    return;
 8004d24:	bf00      	nop
 8004d26:	e000      	b.n	8004d2a <HAL_USART_IRQHandler+0x272>
    return;
 8004d28:	bf00      	nop
    HAL_USARTEx_RxFifoFullCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	08004dad 	.word	0x08004dad

08004d34 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8004d86:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff ffc8 	bl	8004d5c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004de4:	e018      	b.n	8004e18 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d014      	beq.n	8004e18 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dee:	f7fc ff4d 	bl	8001c8c <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <USART_WaitOnFlagUntilTimeout+0x30>
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e00f      	b.n	8004e38 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69da      	ldr	r2, [r3, #28]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4013      	ands	r3, r2
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d0d7      	beq.n	8004de6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4b87      	ldr	r3, [pc, #540]	; (800508c <USART_SetConfig+0x24c>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	6979      	ldr	r1, [r7, #20]
 8004e76:	430b      	orrs	r3, r1
 8004e78:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8004e7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e7e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a74      	ldr	r2, [pc, #464]	; (8005090 <USART_SetConfig+0x250>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d121      	bne.n	8004f06 <USART_SetConfig+0xc6>
 8004ec2:	4b74      	ldr	r3, [pc, #464]	; (8005094 <USART_SetConfig+0x254>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d817      	bhi.n	8004f00 <USART_SetConfig+0xc0>
 8004ed0:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <USART_SetConfig+0x98>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004ee9 	.word	0x08004ee9
 8004edc:	08004ef5 	.word	0x08004ef5
 8004ee0:	08004eef 	.word	0x08004eef
 8004ee4:	08004efb 	.word	0x08004efb
 8004ee8:	2301      	movs	r3, #1
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e045      	b.n	8004f7a <USART_SetConfig+0x13a>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e042      	b.n	8004f7a <USART_SetConfig+0x13a>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e03f      	b.n	8004f7a <USART_SetConfig+0x13a>
 8004efa:	2308      	movs	r3, #8
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e03c      	b.n	8004f7a <USART_SetConfig+0x13a>
 8004f00:	2310      	movs	r3, #16
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e039      	b.n	8004f7a <USART_SetConfig+0x13a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a63      	ldr	r2, [pc, #396]	; (8005098 <USART_SetConfig+0x258>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d132      	bne.n	8004f76 <USART_SetConfig+0x136>
 8004f10:	4b60      	ldr	r3, [pc, #384]	; (8005094 <USART_SetConfig+0x254>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d828      	bhi.n	8004f70 <USART_SetConfig+0x130>
 8004f1e:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <USART_SetConfig+0xe4>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f59 	.word	0x08004f59
 8004f28:	08004f71 	.word	0x08004f71
 8004f2c:	08004f71 	.word	0x08004f71
 8004f30:	08004f71 	.word	0x08004f71
 8004f34:	08004f65 	.word	0x08004f65
 8004f38:	08004f71 	.word	0x08004f71
 8004f3c:	08004f71 	.word	0x08004f71
 8004f40:	08004f71 	.word	0x08004f71
 8004f44:	08004f5f 	.word	0x08004f5f
 8004f48:	08004f71 	.word	0x08004f71
 8004f4c:	08004f71 	.word	0x08004f71
 8004f50:	08004f71 	.word	0x08004f71
 8004f54:	08004f6b 	.word	0x08004f6b
 8004f58:	2300      	movs	r3, #0
 8004f5a:	77fb      	strb	r3, [r7, #31]
 8004f5c:	e00d      	b.n	8004f7a <USART_SetConfig+0x13a>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	77fb      	strb	r3, [r7, #31]
 8004f62:	e00a      	b.n	8004f7a <USART_SetConfig+0x13a>
 8004f64:	2304      	movs	r3, #4
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e007      	b.n	8004f7a <USART_SetConfig+0x13a>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	77fb      	strb	r3, [r7, #31]
 8004f6e:	e004      	b.n	8004f7a <USART_SetConfig+0x13a>
 8004f70:	2310      	movs	r3, #16
 8004f72:	77fb      	strb	r3, [r7, #31]
 8004f74:	e001      	b.n	8004f7a <USART_SetConfig+0x13a>
 8004f76:	2310      	movs	r3, #16
 8004f78:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8004f7a:	7ffb      	ldrb	r3, [r7, #31]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d85a      	bhi.n	8005036 <USART_SetConfig+0x1f6>
 8004f80:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <USART_SetConfig+0x148>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fcb 	.word	0x08004fcb
 8004f90:	08004fe9 	.word	0x08004fe9
 8004f94:	08005037 	.word	0x08005037
 8004f98:	08005003 	.word	0x08005003
 8004f9c:	08005037 	.word	0x08005037
 8004fa0:	08005037 	.word	0x08005037
 8004fa4:	08005037 	.word	0x08005037
 8004fa8:	08005021 	.word	0x08005021
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fac:	f7fd ffd0 	bl	8002f50 <HAL_RCC_GetPCLK1Freq>
 8004fb0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	005a      	lsls	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	441a      	add	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004fc8:	e038      	b.n	800503c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fca:	f7fd ffd7 	bl	8002f7c <HAL_RCC_GetPCLK2Freq>
 8004fce:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	005a      	lsls	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	085b      	lsrs	r3, r3, #1
 8004fda:	441a      	add	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8004fe6:	e029      	b.n	800503c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004ff2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6852      	ldr	r2, [r2, #4]
 8004ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005000:	e01c      	b.n	800503c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005002:	f7fd ff0d 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8005006:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	005a      	lsls	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	085b      	lsrs	r3, r3, #1
 8005012:	441a      	add	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800501e:	e00d      	b.n	800503c <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005032:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005034:	e002      	b.n	800503c <USART_SetConfig+0x1fc>
    default:
      ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	77bb      	strb	r3, [r7, #30]
      break;
 800503a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b0f      	cmp	r3, #15
 8005040:	d916      	bls.n	8005070 <USART_SetConfig+0x230>
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005048:	d212      	bcs.n	8005070 <USART_SetConfig+0x230>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	b29b      	uxth	r3, r3
 800504e:	f023 030f 	bic.w	r3, r3, #15
 8005052:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	b29b      	uxth	r3, r3
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	b29a      	uxth	r2, r3
 8005060:	89fb      	ldrh	r3, [r7, #14]
 8005062:	4313      	orrs	r3, r2
 8005064:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	89fa      	ldrh	r2, [r7, #14]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	e001      	b.n	8005074 <USART_SetConfig+0x234>
  }
  else
  {
    ret = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8005080:	7fbb      	ldrb	r3, [r7, #30]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3720      	adds	r7, #32
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	efff69f3 	.word	0xefff69f3
 8005090:	40013800 	.word	0x40013800
 8005094:	40021000 	.word	0x40021000
 8005098:	40004400 	.word	0x40004400

0800509c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050aa:	f7fc fdef 	bl	8001c8c <HAL_GetTick>
 80050ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d10e      	bne.n	80050dc <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80050be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff fe81 	bl	8004dd4 <USART_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e01e      	b.n	800511a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d10e      	bne.n	8005108 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80050ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff fe6b 	bl	8004dd4 <USART_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e008      	b.n	800511a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005138:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0201 	bic.w	r2, r2, #1
 8005148:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	63da      	str	r2, [r3, #60]	; 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b12      	cmp	r3, #18
 800515a:	d115      	bne.n	8005188 <USART_EndTransmit_IT+0x66>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2208      	movs	r2, #8
 8005162:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	8b1b      	ldrh	r3, [r3, #24]
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0208 	orr.w	r2, r2, #8
 8005174:	b292      	uxth	r2, r2
 8005176:	831a      	strh	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff fdd7 	bl	8004d34 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005186:	e00b      	b.n	80051a0 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    HAL_USART_TxRxCpltCallback(husart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff fdd4 	bl	8004d48 <HAL_USART_TxRxCpltCallback>
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <__cvt>:
 80051a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051ac:	ec55 4b10 	vmov	r4, r5, d0
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	460e      	mov	r6, r1
 80051b4:	4619      	mov	r1, r3
 80051b6:	462b      	mov	r3, r5
 80051b8:	bfbb      	ittet	lt
 80051ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051be:	461d      	movlt	r5, r3
 80051c0:	2300      	movge	r3, #0
 80051c2:	232d      	movlt	r3, #45	; 0x2d
 80051c4:	700b      	strb	r3, [r1, #0]
 80051c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051cc:	4691      	mov	r9, r2
 80051ce:	f023 0820 	bic.w	r8, r3, #32
 80051d2:	bfbc      	itt	lt
 80051d4:	4622      	movlt	r2, r4
 80051d6:	4614      	movlt	r4, r2
 80051d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051dc:	d005      	beq.n	80051ea <__cvt+0x42>
 80051de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051e2:	d100      	bne.n	80051e6 <__cvt+0x3e>
 80051e4:	3601      	adds	r6, #1
 80051e6:	2102      	movs	r1, #2
 80051e8:	e000      	b.n	80051ec <__cvt+0x44>
 80051ea:	2103      	movs	r1, #3
 80051ec:	ab03      	add	r3, sp, #12
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	ab02      	add	r3, sp, #8
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	ec45 4b10 	vmov	d0, r4, r5
 80051f8:	4653      	mov	r3, sl
 80051fa:	4632      	mov	r2, r6
 80051fc:	f000 fe80 	bl	8005f00 <_dtoa_r>
 8005200:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005204:	4607      	mov	r7, r0
 8005206:	d102      	bne.n	800520e <__cvt+0x66>
 8005208:	f019 0f01 	tst.w	r9, #1
 800520c:	d022      	beq.n	8005254 <__cvt+0xac>
 800520e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005212:	eb07 0906 	add.w	r9, r7, r6
 8005216:	d110      	bne.n	800523a <__cvt+0x92>
 8005218:	783b      	ldrb	r3, [r7, #0]
 800521a:	2b30      	cmp	r3, #48	; 0x30
 800521c:	d10a      	bne.n	8005234 <__cvt+0x8c>
 800521e:	2200      	movs	r2, #0
 8005220:	2300      	movs	r3, #0
 8005222:	4620      	mov	r0, r4
 8005224:	4629      	mov	r1, r5
 8005226:	f7fb fc4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800522a:	b918      	cbnz	r0, 8005234 <__cvt+0x8c>
 800522c:	f1c6 0601 	rsb	r6, r6, #1
 8005230:	f8ca 6000 	str.w	r6, [sl]
 8005234:	f8da 3000 	ldr.w	r3, [sl]
 8005238:	4499      	add	r9, r3
 800523a:	2200      	movs	r2, #0
 800523c:	2300      	movs	r3, #0
 800523e:	4620      	mov	r0, r4
 8005240:	4629      	mov	r1, r5
 8005242:	f7fb fc41 	bl	8000ac8 <__aeabi_dcmpeq>
 8005246:	b108      	cbz	r0, 800524c <__cvt+0xa4>
 8005248:	f8cd 900c 	str.w	r9, [sp, #12]
 800524c:	2230      	movs	r2, #48	; 0x30
 800524e:	9b03      	ldr	r3, [sp, #12]
 8005250:	454b      	cmp	r3, r9
 8005252:	d307      	bcc.n	8005264 <__cvt+0xbc>
 8005254:	9b03      	ldr	r3, [sp, #12]
 8005256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005258:	1bdb      	subs	r3, r3, r7
 800525a:	4638      	mov	r0, r7
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	b004      	add	sp, #16
 8005260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005264:	1c59      	adds	r1, r3, #1
 8005266:	9103      	str	r1, [sp, #12]
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e7f0      	b.n	800524e <__cvt+0xa6>

0800526c <__exponent>:
 800526c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800526e:	4603      	mov	r3, r0
 8005270:	2900      	cmp	r1, #0
 8005272:	bfb8      	it	lt
 8005274:	4249      	neglt	r1, r1
 8005276:	f803 2b02 	strb.w	r2, [r3], #2
 800527a:	bfb4      	ite	lt
 800527c:	222d      	movlt	r2, #45	; 0x2d
 800527e:	222b      	movge	r2, #43	; 0x2b
 8005280:	2909      	cmp	r1, #9
 8005282:	7042      	strb	r2, [r0, #1]
 8005284:	dd2a      	ble.n	80052dc <__exponent+0x70>
 8005286:	f10d 0207 	add.w	r2, sp, #7
 800528a:	4617      	mov	r7, r2
 800528c:	260a      	movs	r6, #10
 800528e:	4694      	mov	ip, r2
 8005290:	fb91 f5f6 	sdiv	r5, r1, r6
 8005294:	fb06 1415 	mls	r4, r6, r5, r1
 8005298:	3430      	adds	r4, #48	; 0x30
 800529a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800529e:	460c      	mov	r4, r1
 80052a0:	2c63      	cmp	r4, #99	; 0x63
 80052a2:	f102 32ff 	add.w	r2, r2, #4294967295
 80052a6:	4629      	mov	r1, r5
 80052a8:	dcf1      	bgt.n	800528e <__exponent+0x22>
 80052aa:	3130      	adds	r1, #48	; 0x30
 80052ac:	f1ac 0402 	sub.w	r4, ip, #2
 80052b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80052b4:	1c41      	adds	r1, r0, #1
 80052b6:	4622      	mov	r2, r4
 80052b8:	42ba      	cmp	r2, r7
 80052ba:	d30a      	bcc.n	80052d2 <__exponent+0x66>
 80052bc:	f10d 0209 	add.w	r2, sp, #9
 80052c0:	eba2 020c 	sub.w	r2, r2, ip
 80052c4:	42bc      	cmp	r4, r7
 80052c6:	bf88      	it	hi
 80052c8:	2200      	movhi	r2, #0
 80052ca:	4413      	add	r3, r2
 80052cc:	1a18      	subs	r0, r3, r0
 80052ce:	b003      	add	sp, #12
 80052d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80052d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80052da:	e7ed      	b.n	80052b8 <__exponent+0x4c>
 80052dc:	2330      	movs	r3, #48	; 0x30
 80052de:	3130      	adds	r1, #48	; 0x30
 80052e0:	7083      	strb	r3, [r0, #2]
 80052e2:	70c1      	strb	r1, [r0, #3]
 80052e4:	1d03      	adds	r3, r0, #4
 80052e6:	e7f1      	b.n	80052cc <__exponent+0x60>

080052e8 <_printf_float>:
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	ed2d 8b02 	vpush	{d8}
 80052f0:	b08d      	sub	sp, #52	; 0x34
 80052f2:	460c      	mov	r4, r1
 80052f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80052f8:	4616      	mov	r6, r2
 80052fa:	461f      	mov	r7, r3
 80052fc:	4605      	mov	r5, r0
 80052fe:	f000 fcfd 	bl	8005cfc <_localeconv_r>
 8005302:	f8d0 a000 	ldr.w	sl, [r0]
 8005306:	4650      	mov	r0, sl
 8005308:	f7fa ffb2 	bl	8000270 <strlen>
 800530c:	2300      	movs	r3, #0
 800530e:	930a      	str	r3, [sp, #40]	; 0x28
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	9305      	str	r3, [sp, #20]
 8005314:	f8d8 3000 	ldr.w	r3, [r8]
 8005318:	f894 b018 	ldrb.w	fp, [r4, #24]
 800531c:	3307      	adds	r3, #7
 800531e:	f023 0307 	bic.w	r3, r3, #7
 8005322:	f103 0208 	add.w	r2, r3, #8
 8005326:	f8c8 2000 	str.w	r2, [r8]
 800532a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800532e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005332:	9307      	str	r3, [sp, #28]
 8005334:	f8cd 8018 	str.w	r8, [sp, #24]
 8005338:	ee08 0a10 	vmov	s16, r0
 800533c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005344:	4b9e      	ldr	r3, [pc, #632]	; (80055c0 <_printf_float+0x2d8>)
 8005346:	f04f 32ff 	mov.w	r2, #4294967295
 800534a:	f7fb fbef 	bl	8000b2c <__aeabi_dcmpun>
 800534e:	bb88      	cbnz	r0, 80053b4 <_printf_float+0xcc>
 8005350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005354:	4b9a      	ldr	r3, [pc, #616]	; (80055c0 <_printf_float+0x2d8>)
 8005356:	f04f 32ff 	mov.w	r2, #4294967295
 800535a:	f7fb fbc9 	bl	8000af0 <__aeabi_dcmple>
 800535e:	bb48      	cbnz	r0, 80053b4 <_printf_float+0xcc>
 8005360:	2200      	movs	r2, #0
 8005362:	2300      	movs	r3, #0
 8005364:	4640      	mov	r0, r8
 8005366:	4649      	mov	r1, r9
 8005368:	f7fb fbb8 	bl	8000adc <__aeabi_dcmplt>
 800536c:	b110      	cbz	r0, 8005374 <_printf_float+0x8c>
 800536e:	232d      	movs	r3, #45	; 0x2d
 8005370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005374:	4a93      	ldr	r2, [pc, #588]	; (80055c4 <_printf_float+0x2dc>)
 8005376:	4b94      	ldr	r3, [pc, #592]	; (80055c8 <_printf_float+0x2e0>)
 8005378:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800537c:	bf94      	ite	ls
 800537e:	4690      	movls	r8, r2
 8005380:	4698      	movhi	r8, r3
 8005382:	2303      	movs	r3, #3
 8005384:	6123      	str	r3, [r4, #16]
 8005386:	9b05      	ldr	r3, [sp, #20]
 8005388:	f023 0304 	bic.w	r3, r3, #4
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	f04f 0900 	mov.w	r9, #0
 8005392:	9700      	str	r7, [sp, #0]
 8005394:	4633      	mov	r3, r6
 8005396:	aa0b      	add	r2, sp, #44	; 0x2c
 8005398:	4621      	mov	r1, r4
 800539a:	4628      	mov	r0, r5
 800539c:	f000 f9da 	bl	8005754 <_printf_common>
 80053a0:	3001      	adds	r0, #1
 80053a2:	f040 8090 	bne.w	80054c6 <_printf_float+0x1de>
 80053a6:	f04f 30ff 	mov.w	r0, #4294967295
 80053aa:	b00d      	add	sp, #52	; 0x34
 80053ac:	ecbd 8b02 	vpop	{d8}
 80053b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b4:	4642      	mov	r2, r8
 80053b6:	464b      	mov	r3, r9
 80053b8:	4640      	mov	r0, r8
 80053ba:	4649      	mov	r1, r9
 80053bc:	f7fb fbb6 	bl	8000b2c <__aeabi_dcmpun>
 80053c0:	b140      	cbz	r0, 80053d4 <_printf_float+0xec>
 80053c2:	464b      	mov	r3, r9
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bfbc      	itt	lt
 80053c8:	232d      	movlt	r3, #45	; 0x2d
 80053ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053ce:	4a7f      	ldr	r2, [pc, #508]	; (80055cc <_printf_float+0x2e4>)
 80053d0:	4b7f      	ldr	r3, [pc, #508]	; (80055d0 <_printf_float+0x2e8>)
 80053d2:	e7d1      	b.n	8005378 <_printf_float+0x90>
 80053d4:	6863      	ldr	r3, [r4, #4]
 80053d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80053da:	9206      	str	r2, [sp, #24]
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	d13f      	bne.n	8005460 <_printf_float+0x178>
 80053e0:	2306      	movs	r3, #6
 80053e2:	6063      	str	r3, [r4, #4]
 80053e4:	9b05      	ldr	r3, [sp, #20]
 80053e6:	6861      	ldr	r1, [r4, #4]
 80053e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053ec:	2300      	movs	r3, #0
 80053ee:	9303      	str	r3, [sp, #12]
 80053f0:	ab0a      	add	r3, sp, #40	; 0x28
 80053f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80053f6:	ab09      	add	r3, sp, #36	; 0x24
 80053f8:	ec49 8b10 	vmov	d0, r8, r9
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	6022      	str	r2, [r4, #0]
 8005400:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005404:	4628      	mov	r0, r5
 8005406:	f7ff fecf 	bl	80051a8 <__cvt>
 800540a:	9b06      	ldr	r3, [sp, #24]
 800540c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800540e:	2b47      	cmp	r3, #71	; 0x47
 8005410:	4680      	mov	r8, r0
 8005412:	d108      	bne.n	8005426 <_printf_float+0x13e>
 8005414:	1cc8      	adds	r0, r1, #3
 8005416:	db02      	blt.n	800541e <_printf_float+0x136>
 8005418:	6863      	ldr	r3, [r4, #4]
 800541a:	4299      	cmp	r1, r3
 800541c:	dd41      	ble.n	80054a2 <_printf_float+0x1ba>
 800541e:	f1ab 0302 	sub.w	r3, fp, #2
 8005422:	fa5f fb83 	uxtb.w	fp, r3
 8005426:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800542a:	d820      	bhi.n	800546e <_printf_float+0x186>
 800542c:	3901      	subs	r1, #1
 800542e:	465a      	mov	r2, fp
 8005430:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005434:	9109      	str	r1, [sp, #36]	; 0x24
 8005436:	f7ff ff19 	bl	800526c <__exponent>
 800543a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800543c:	1813      	adds	r3, r2, r0
 800543e:	2a01      	cmp	r2, #1
 8005440:	4681      	mov	r9, r0
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	dc02      	bgt.n	800544c <_printf_float+0x164>
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	07d2      	lsls	r2, r2, #31
 800544a:	d501      	bpl.n	8005450 <_printf_float+0x168>
 800544c:	3301      	adds	r3, #1
 800544e:	6123      	str	r3, [r4, #16]
 8005450:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005454:	2b00      	cmp	r3, #0
 8005456:	d09c      	beq.n	8005392 <_printf_float+0xaa>
 8005458:	232d      	movs	r3, #45	; 0x2d
 800545a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800545e:	e798      	b.n	8005392 <_printf_float+0xaa>
 8005460:	9a06      	ldr	r2, [sp, #24]
 8005462:	2a47      	cmp	r2, #71	; 0x47
 8005464:	d1be      	bne.n	80053e4 <_printf_float+0xfc>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1bc      	bne.n	80053e4 <_printf_float+0xfc>
 800546a:	2301      	movs	r3, #1
 800546c:	e7b9      	b.n	80053e2 <_printf_float+0xfa>
 800546e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005472:	d118      	bne.n	80054a6 <_printf_float+0x1be>
 8005474:	2900      	cmp	r1, #0
 8005476:	6863      	ldr	r3, [r4, #4]
 8005478:	dd0b      	ble.n	8005492 <_printf_float+0x1aa>
 800547a:	6121      	str	r1, [r4, #16]
 800547c:	b913      	cbnz	r3, 8005484 <_printf_float+0x19c>
 800547e:	6822      	ldr	r2, [r4, #0]
 8005480:	07d0      	lsls	r0, r2, #31
 8005482:	d502      	bpl.n	800548a <_printf_float+0x1a2>
 8005484:	3301      	adds	r3, #1
 8005486:	440b      	add	r3, r1
 8005488:	6123      	str	r3, [r4, #16]
 800548a:	65a1      	str	r1, [r4, #88]	; 0x58
 800548c:	f04f 0900 	mov.w	r9, #0
 8005490:	e7de      	b.n	8005450 <_printf_float+0x168>
 8005492:	b913      	cbnz	r3, 800549a <_printf_float+0x1b2>
 8005494:	6822      	ldr	r2, [r4, #0]
 8005496:	07d2      	lsls	r2, r2, #31
 8005498:	d501      	bpl.n	800549e <_printf_float+0x1b6>
 800549a:	3302      	adds	r3, #2
 800549c:	e7f4      	b.n	8005488 <_printf_float+0x1a0>
 800549e:	2301      	movs	r3, #1
 80054a0:	e7f2      	b.n	8005488 <_printf_float+0x1a0>
 80054a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80054a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a8:	4299      	cmp	r1, r3
 80054aa:	db05      	blt.n	80054b8 <_printf_float+0x1d0>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	6121      	str	r1, [r4, #16]
 80054b0:	07d8      	lsls	r0, r3, #31
 80054b2:	d5ea      	bpl.n	800548a <_printf_float+0x1a2>
 80054b4:	1c4b      	adds	r3, r1, #1
 80054b6:	e7e7      	b.n	8005488 <_printf_float+0x1a0>
 80054b8:	2900      	cmp	r1, #0
 80054ba:	bfd4      	ite	le
 80054bc:	f1c1 0202 	rsble	r2, r1, #2
 80054c0:	2201      	movgt	r2, #1
 80054c2:	4413      	add	r3, r2
 80054c4:	e7e0      	b.n	8005488 <_printf_float+0x1a0>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	055a      	lsls	r2, r3, #21
 80054ca:	d407      	bmi.n	80054dc <_printf_float+0x1f4>
 80054cc:	6923      	ldr	r3, [r4, #16]
 80054ce:	4642      	mov	r2, r8
 80054d0:	4631      	mov	r1, r6
 80054d2:	4628      	mov	r0, r5
 80054d4:	47b8      	blx	r7
 80054d6:	3001      	adds	r0, #1
 80054d8:	d12c      	bne.n	8005534 <_printf_float+0x24c>
 80054da:	e764      	b.n	80053a6 <_printf_float+0xbe>
 80054dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054e0:	f240 80e0 	bls.w	80056a4 <_printf_float+0x3bc>
 80054e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054e8:	2200      	movs	r2, #0
 80054ea:	2300      	movs	r3, #0
 80054ec:	f7fb faec 	bl	8000ac8 <__aeabi_dcmpeq>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d034      	beq.n	800555e <_printf_float+0x276>
 80054f4:	4a37      	ldr	r2, [pc, #220]	; (80055d4 <_printf_float+0x2ec>)
 80054f6:	2301      	movs	r3, #1
 80054f8:	4631      	mov	r1, r6
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b8      	blx	r7
 80054fe:	3001      	adds	r0, #1
 8005500:	f43f af51 	beq.w	80053a6 <_printf_float+0xbe>
 8005504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005508:	429a      	cmp	r2, r3
 800550a:	db02      	blt.n	8005512 <_printf_float+0x22a>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	07d8      	lsls	r0, r3, #31
 8005510:	d510      	bpl.n	8005534 <_printf_float+0x24c>
 8005512:	ee18 3a10 	vmov	r3, s16
 8005516:	4652      	mov	r2, sl
 8005518:	4631      	mov	r1, r6
 800551a:	4628      	mov	r0, r5
 800551c:	47b8      	blx	r7
 800551e:	3001      	adds	r0, #1
 8005520:	f43f af41 	beq.w	80053a6 <_printf_float+0xbe>
 8005524:	f04f 0800 	mov.w	r8, #0
 8005528:	f104 091a 	add.w	r9, r4, #26
 800552c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800552e:	3b01      	subs	r3, #1
 8005530:	4543      	cmp	r3, r8
 8005532:	dc09      	bgt.n	8005548 <_printf_float+0x260>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	079b      	lsls	r3, r3, #30
 8005538:	f100 8107 	bmi.w	800574a <_printf_float+0x462>
 800553c:	68e0      	ldr	r0, [r4, #12]
 800553e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005540:	4298      	cmp	r0, r3
 8005542:	bfb8      	it	lt
 8005544:	4618      	movlt	r0, r3
 8005546:	e730      	b.n	80053aa <_printf_float+0xc2>
 8005548:	2301      	movs	r3, #1
 800554a:	464a      	mov	r2, r9
 800554c:	4631      	mov	r1, r6
 800554e:	4628      	mov	r0, r5
 8005550:	47b8      	blx	r7
 8005552:	3001      	adds	r0, #1
 8005554:	f43f af27 	beq.w	80053a6 <_printf_float+0xbe>
 8005558:	f108 0801 	add.w	r8, r8, #1
 800555c:	e7e6      	b.n	800552c <_printf_float+0x244>
 800555e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005560:	2b00      	cmp	r3, #0
 8005562:	dc39      	bgt.n	80055d8 <_printf_float+0x2f0>
 8005564:	4a1b      	ldr	r2, [pc, #108]	; (80055d4 <_printf_float+0x2ec>)
 8005566:	2301      	movs	r3, #1
 8005568:	4631      	mov	r1, r6
 800556a:	4628      	mov	r0, r5
 800556c:	47b8      	blx	r7
 800556e:	3001      	adds	r0, #1
 8005570:	f43f af19 	beq.w	80053a6 <_printf_float+0xbe>
 8005574:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005578:	4313      	orrs	r3, r2
 800557a:	d102      	bne.n	8005582 <_printf_float+0x29a>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	07d9      	lsls	r1, r3, #31
 8005580:	d5d8      	bpl.n	8005534 <_printf_float+0x24c>
 8005582:	ee18 3a10 	vmov	r3, s16
 8005586:	4652      	mov	r2, sl
 8005588:	4631      	mov	r1, r6
 800558a:	4628      	mov	r0, r5
 800558c:	47b8      	blx	r7
 800558e:	3001      	adds	r0, #1
 8005590:	f43f af09 	beq.w	80053a6 <_printf_float+0xbe>
 8005594:	f04f 0900 	mov.w	r9, #0
 8005598:	f104 0a1a 	add.w	sl, r4, #26
 800559c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800559e:	425b      	negs	r3, r3
 80055a0:	454b      	cmp	r3, r9
 80055a2:	dc01      	bgt.n	80055a8 <_printf_float+0x2c0>
 80055a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055a6:	e792      	b.n	80054ce <_printf_float+0x1e6>
 80055a8:	2301      	movs	r3, #1
 80055aa:	4652      	mov	r2, sl
 80055ac:	4631      	mov	r1, r6
 80055ae:	4628      	mov	r0, r5
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	f43f aef7 	beq.w	80053a6 <_printf_float+0xbe>
 80055b8:	f109 0901 	add.w	r9, r9, #1
 80055bc:	e7ee      	b.n	800559c <_printf_float+0x2b4>
 80055be:	bf00      	nop
 80055c0:	7fefffff 	.word	0x7fefffff
 80055c4:	08008230 	.word	0x08008230
 80055c8:	08008234 	.word	0x08008234
 80055cc:	08008238 	.word	0x08008238
 80055d0:	0800823c 	.word	0x0800823c
 80055d4:	08008240 	.word	0x08008240
 80055d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055dc:	429a      	cmp	r2, r3
 80055de:	bfa8      	it	ge
 80055e0:	461a      	movge	r2, r3
 80055e2:	2a00      	cmp	r2, #0
 80055e4:	4691      	mov	r9, r2
 80055e6:	dc37      	bgt.n	8005658 <_printf_float+0x370>
 80055e8:	f04f 0b00 	mov.w	fp, #0
 80055ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055f0:	f104 021a 	add.w	r2, r4, #26
 80055f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055f6:	9305      	str	r3, [sp, #20]
 80055f8:	eba3 0309 	sub.w	r3, r3, r9
 80055fc:	455b      	cmp	r3, fp
 80055fe:	dc33      	bgt.n	8005668 <_printf_float+0x380>
 8005600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005604:	429a      	cmp	r2, r3
 8005606:	db3b      	blt.n	8005680 <_printf_float+0x398>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	07da      	lsls	r2, r3, #31
 800560c:	d438      	bmi.n	8005680 <_printf_float+0x398>
 800560e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005612:	eba2 0903 	sub.w	r9, r2, r3
 8005616:	9b05      	ldr	r3, [sp, #20]
 8005618:	1ad2      	subs	r2, r2, r3
 800561a:	4591      	cmp	r9, r2
 800561c:	bfa8      	it	ge
 800561e:	4691      	movge	r9, r2
 8005620:	f1b9 0f00 	cmp.w	r9, #0
 8005624:	dc35      	bgt.n	8005692 <_printf_float+0x3aa>
 8005626:	f04f 0800 	mov.w	r8, #0
 800562a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800562e:	f104 0a1a 	add.w	sl, r4, #26
 8005632:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	eba3 0309 	sub.w	r3, r3, r9
 800563c:	4543      	cmp	r3, r8
 800563e:	f77f af79 	ble.w	8005534 <_printf_float+0x24c>
 8005642:	2301      	movs	r3, #1
 8005644:	4652      	mov	r2, sl
 8005646:	4631      	mov	r1, r6
 8005648:	4628      	mov	r0, r5
 800564a:	47b8      	blx	r7
 800564c:	3001      	adds	r0, #1
 800564e:	f43f aeaa 	beq.w	80053a6 <_printf_float+0xbe>
 8005652:	f108 0801 	add.w	r8, r8, #1
 8005656:	e7ec      	b.n	8005632 <_printf_float+0x34a>
 8005658:	4613      	mov	r3, r2
 800565a:	4631      	mov	r1, r6
 800565c:	4642      	mov	r2, r8
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	d1c0      	bne.n	80055e8 <_printf_float+0x300>
 8005666:	e69e      	b.n	80053a6 <_printf_float+0xbe>
 8005668:	2301      	movs	r3, #1
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	9205      	str	r2, [sp, #20]
 8005670:	47b8      	blx	r7
 8005672:	3001      	adds	r0, #1
 8005674:	f43f ae97 	beq.w	80053a6 <_printf_float+0xbe>
 8005678:	9a05      	ldr	r2, [sp, #20]
 800567a:	f10b 0b01 	add.w	fp, fp, #1
 800567e:	e7b9      	b.n	80055f4 <_printf_float+0x30c>
 8005680:	ee18 3a10 	vmov	r3, s16
 8005684:	4652      	mov	r2, sl
 8005686:	4631      	mov	r1, r6
 8005688:	4628      	mov	r0, r5
 800568a:	47b8      	blx	r7
 800568c:	3001      	adds	r0, #1
 800568e:	d1be      	bne.n	800560e <_printf_float+0x326>
 8005690:	e689      	b.n	80053a6 <_printf_float+0xbe>
 8005692:	9a05      	ldr	r2, [sp, #20]
 8005694:	464b      	mov	r3, r9
 8005696:	4442      	add	r2, r8
 8005698:	4631      	mov	r1, r6
 800569a:	4628      	mov	r0, r5
 800569c:	47b8      	blx	r7
 800569e:	3001      	adds	r0, #1
 80056a0:	d1c1      	bne.n	8005626 <_printf_float+0x33e>
 80056a2:	e680      	b.n	80053a6 <_printf_float+0xbe>
 80056a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056a6:	2a01      	cmp	r2, #1
 80056a8:	dc01      	bgt.n	80056ae <_printf_float+0x3c6>
 80056aa:	07db      	lsls	r3, r3, #31
 80056ac:	d53a      	bpl.n	8005724 <_printf_float+0x43c>
 80056ae:	2301      	movs	r3, #1
 80056b0:	4642      	mov	r2, r8
 80056b2:	4631      	mov	r1, r6
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b8      	blx	r7
 80056b8:	3001      	adds	r0, #1
 80056ba:	f43f ae74 	beq.w	80053a6 <_printf_float+0xbe>
 80056be:	ee18 3a10 	vmov	r3, s16
 80056c2:	4652      	mov	r2, sl
 80056c4:	4631      	mov	r1, r6
 80056c6:	4628      	mov	r0, r5
 80056c8:	47b8      	blx	r7
 80056ca:	3001      	adds	r0, #1
 80056cc:	f43f ae6b 	beq.w	80053a6 <_printf_float+0xbe>
 80056d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056d4:	2200      	movs	r2, #0
 80056d6:	2300      	movs	r3, #0
 80056d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80056dc:	f7fb f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80056e0:	b9d8      	cbnz	r0, 800571a <_printf_float+0x432>
 80056e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80056e6:	f108 0201 	add.w	r2, r8, #1
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b8      	blx	r7
 80056f0:	3001      	adds	r0, #1
 80056f2:	d10e      	bne.n	8005712 <_printf_float+0x42a>
 80056f4:	e657      	b.n	80053a6 <_printf_float+0xbe>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4652      	mov	r2, sl
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b8      	blx	r7
 8005700:	3001      	adds	r0, #1
 8005702:	f43f ae50 	beq.w	80053a6 <_printf_float+0xbe>
 8005706:	f108 0801 	add.w	r8, r8, #1
 800570a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800570c:	3b01      	subs	r3, #1
 800570e:	4543      	cmp	r3, r8
 8005710:	dcf1      	bgt.n	80056f6 <_printf_float+0x40e>
 8005712:	464b      	mov	r3, r9
 8005714:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005718:	e6da      	b.n	80054d0 <_printf_float+0x1e8>
 800571a:	f04f 0800 	mov.w	r8, #0
 800571e:	f104 0a1a 	add.w	sl, r4, #26
 8005722:	e7f2      	b.n	800570a <_printf_float+0x422>
 8005724:	2301      	movs	r3, #1
 8005726:	4642      	mov	r2, r8
 8005728:	e7df      	b.n	80056ea <_printf_float+0x402>
 800572a:	2301      	movs	r3, #1
 800572c:	464a      	mov	r2, r9
 800572e:	4631      	mov	r1, r6
 8005730:	4628      	mov	r0, r5
 8005732:	47b8      	blx	r7
 8005734:	3001      	adds	r0, #1
 8005736:	f43f ae36 	beq.w	80053a6 <_printf_float+0xbe>
 800573a:	f108 0801 	add.w	r8, r8, #1
 800573e:	68e3      	ldr	r3, [r4, #12]
 8005740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005742:	1a5b      	subs	r3, r3, r1
 8005744:	4543      	cmp	r3, r8
 8005746:	dcf0      	bgt.n	800572a <_printf_float+0x442>
 8005748:	e6f8      	b.n	800553c <_printf_float+0x254>
 800574a:	f04f 0800 	mov.w	r8, #0
 800574e:	f104 0919 	add.w	r9, r4, #25
 8005752:	e7f4      	b.n	800573e <_printf_float+0x456>

08005754 <_printf_common>:
 8005754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005758:	4616      	mov	r6, r2
 800575a:	4699      	mov	r9, r3
 800575c:	688a      	ldr	r2, [r1, #8]
 800575e:	690b      	ldr	r3, [r1, #16]
 8005760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005764:	4293      	cmp	r3, r2
 8005766:	bfb8      	it	lt
 8005768:	4613      	movlt	r3, r2
 800576a:	6033      	str	r3, [r6, #0]
 800576c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005770:	4607      	mov	r7, r0
 8005772:	460c      	mov	r4, r1
 8005774:	b10a      	cbz	r2, 800577a <_printf_common+0x26>
 8005776:	3301      	adds	r3, #1
 8005778:	6033      	str	r3, [r6, #0]
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	0699      	lsls	r1, r3, #26
 800577e:	bf42      	ittt	mi
 8005780:	6833      	ldrmi	r3, [r6, #0]
 8005782:	3302      	addmi	r3, #2
 8005784:	6033      	strmi	r3, [r6, #0]
 8005786:	6825      	ldr	r5, [r4, #0]
 8005788:	f015 0506 	ands.w	r5, r5, #6
 800578c:	d106      	bne.n	800579c <_printf_common+0x48>
 800578e:	f104 0a19 	add.w	sl, r4, #25
 8005792:	68e3      	ldr	r3, [r4, #12]
 8005794:	6832      	ldr	r2, [r6, #0]
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	42ab      	cmp	r3, r5
 800579a:	dc26      	bgt.n	80057ea <_printf_common+0x96>
 800579c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057a0:	1e13      	subs	r3, r2, #0
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	bf18      	it	ne
 80057a6:	2301      	movne	r3, #1
 80057a8:	0692      	lsls	r2, r2, #26
 80057aa:	d42b      	bmi.n	8005804 <_printf_common+0xb0>
 80057ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b0:	4649      	mov	r1, r9
 80057b2:	4638      	mov	r0, r7
 80057b4:	47c0      	blx	r8
 80057b6:	3001      	adds	r0, #1
 80057b8:	d01e      	beq.n	80057f8 <_printf_common+0xa4>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	6922      	ldr	r2, [r4, #16]
 80057be:	f003 0306 	and.w	r3, r3, #6
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	bf02      	ittt	eq
 80057c6:	68e5      	ldreq	r5, [r4, #12]
 80057c8:	6833      	ldreq	r3, [r6, #0]
 80057ca:	1aed      	subeq	r5, r5, r3
 80057cc:	68a3      	ldr	r3, [r4, #8]
 80057ce:	bf0c      	ite	eq
 80057d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d4:	2500      	movne	r5, #0
 80057d6:	4293      	cmp	r3, r2
 80057d8:	bfc4      	itt	gt
 80057da:	1a9b      	subgt	r3, r3, r2
 80057dc:	18ed      	addgt	r5, r5, r3
 80057de:	2600      	movs	r6, #0
 80057e0:	341a      	adds	r4, #26
 80057e2:	42b5      	cmp	r5, r6
 80057e4:	d11a      	bne.n	800581c <_printf_common+0xc8>
 80057e6:	2000      	movs	r0, #0
 80057e8:	e008      	b.n	80057fc <_printf_common+0xa8>
 80057ea:	2301      	movs	r3, #1
 80057ec:	4652      	mov	r2, sl
 80057ee:	4649      	mov	r1, r9
 80057f0:	4638      	mov	r0, r7
 80057f2:	47c0      	blx	r8
 80057f4:	3001      	adds	r0, #1
 80057f6:	d103      	bne.n	8005800 <_printf_common+0xac>
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005800:	3501      	adds	r5, #1
 8005802:	e7c6      	b.n	8005792 <_printf_common+0x3e>
 8005804:	18e1      	adds	r1, r4, r3
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	2030      	movs	r0, #48	; 0x30
 800580a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800580e:	4422      	add	r2, r4
 8005810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005818:	3302      	adds	r3, #2
 800581a:	e7c7      	b.n	80057ac <_printf_common+0x58>
 800581c:	2301      	movs	r3, #1
 800581e:	4622      	mov	r2, r4
 8005820:	4649      	mov	r1, r9
 8005822:	4638      	mov	r0, r7
 8005824:	47c0      	blx	r8
 8005826:	3001      	adds	r0, #1
 8005828:	d0e6      	beq.n	80057f8 <_printf_common+0xa4>
 800582a:	3601      	adds	r6, #1
 800582c:	e7d9      	b.n	80057e2 <_printf_common+0x8e>
	...

08005830 <_printf_i>:
 8005830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005834:	7e0f      	ldrb	r7, [r1, #24]
 8005836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005838:	2f78      	cmp	r7, #120	; 0x78
 800583a:	4691      	mov	r9, r2
 800583c:	4680      	mov	r8, r0
 800583e:	460c      	mov	r4, r1
 8005840:	469a      	mov	sl, r3
 8005842:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005846:	d807      	bhi.n	8005858 <_printf_i+0x28>
 8005848:	2f62      	cmp	r7, #98	; 0x62
 800584a:	d80a      	bhi.n	8005862 <_printf_i+0x32>
 800584c:	2f00      	cmp	r7, #0
 800584e:	f000 80d4 	beq.w	80059fa <_printf_i+0x1ca>
 8005852:	2f58      	cmp	r7, #88	; 0x58
 8005854:	f000 80c0 	beq.w	80059d8 <_printf_i+0x1a8>
 8005858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800585c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005860:	e03a      	b.n	80058d8 <_printf_i+0xa8>
 8005862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005866:	2b15      	cmp	r3, #21
 8005868:	d8f6      	bhi.n	8005858 <_printf_i+0x28>
 800586a:	a101      	add	r1, pc, #4	; (adr r1, 8005870 <_printf_i+0x40>)
 800586c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005870:	080058c9 	.word	0x080058c9
 8005874:	080058dd 	.word	0x080058dd
 8005878:	08005859 	.word	0x08005859
 800587c:	08005859 	.word	0x08005859
 8005880:	08005859 	.word	0x08005859
 8005884:	08005859 	.word	0x08005859
 8005888:	080058dd 	.word	0x080058dd
 800588c:	08005859 	.word	0x08005859
 8005890:	08005859 	.word	0x08005859
 8005894:	08005859 	.word	0x08005859
 8005898:	08005859 	.word	0x08005859
 800589c:	080059e1 	.word	0x080059e1
 80058a0:	08005909 	.word	0x08005909
 80058a4:	0800599b 	.word	0x0800599b
 80058a8:	08005859 	.word	0x08005859
 80058ac:	08005859 	.word	0x08005859
 80058b0:	08005a03 	.word	0x08005a03
 80058b4:	08005859 	.word	0x08005859
 80058b8:	08005909 	.word	0x08005909
 80058bc:	08005859 	.word	0x08005859
 80058c0:	08005859 	.word	0x08005859
 80058c4:	080059a3 	.word	0x080059a3
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	1d1a      	adds	r2, r3, #4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	602a      	str	r2, [r5, #0]
 80058d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058d8:	2301      	movs	r3, #1
 80058da:	e09f      	b.n	8005a1c <_printf_i+0x1ec>
 80058dc:	6820      	ldr	r0, [r4, #0]
 80058de:	682b      	ldr	r3, [r5, #0]
 80058e0:	0607      	lsls	r7, r0, #24
 80058e2:	f103 0104 	add.w	r1, r3, #4
 80058e6:	6029      	str	r1, [r5, #0]
 80058e8:	d501      	bpl.n	80058ee <_printf_i+0xbe>
 80058ea:	681e      	ldr	r6, [r3, #0]
 80058ec:	e003      	b.n	80058f6 <_printf_i+0xc6>
 80058ee:	0646      	lsls	r6, r0, #25
 80058f0:	d5fb      	bpl.n	80058ea <_printf_i+0xba>
 80058f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058f6:	2e00      	cmp	r6, #0
 80058f8:	da03      	bge.n	8005902 <_printf_i+0xd2>
 80058fa:	232d      	movs	r3, #45	; 0x2d
 80058fc:	4276      	negs	r6, r6
 80058fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005902:	485a      	ldr	r0, [pc, #360]	; (8005a6c <_printf_i+0x23c>)
 8005904:	230a      	movs	r3, #10
 8005906:	e012      	b.n	800592e <_printf_i+0xfe>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	6820      	ldr	r0, [r4, #0]
 800590c:	1d19      	adds	r1, r3, #4
 800590e:	6029      	str	r1, [r5, #0]
 8005910:	0605      	lsls	r5, r0, #24
 8005912:	d501      	bpl.n	8005918 <_printf_i+0xe8>
 8005914:	681e      	ldr	r6, [r3, #0]
 8005916:	e002      	b.n	800591e <_printf_i+0xee>
 8005918:	0641      	lsls	r1, r0, #25
 800591a:	d5fb      	bpl.n	8005914 <_printf_i+0xe4>
 800591c:	881e      	ldrh	r6, [r3, #0]
 800591e:	4853      	ldr	r0, [pc, #332]	; (8005a6c <_printf_i+0x23c>)
 8005920:	2f6f      	cmp	r7, #111	; 0x6f
 8005922:	bf0c      	ite	eq
 8005924:	2308      	moveq	r3, #8
 8005926:	230a      	movne	r3, #10
 8005928:	2100      	movs	r1, #0
 800592a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800592e:	6865      	ldr	r5, [r4, #4]
 8005930:	60a5      	str	r5, [r4, #8]
 8005932:	2d00      	cmp	r5, #0
 8005934:	bfa2      	ittt	ge
 8005936:	6821      	ldrge	r1, [r4, #0]
 8005938:	f021 0104 	bicge.w	r1, r1, #4
 800593c:	6021      	strge	r1, [r4, #0]
 800593e:	b90e      	cbnz	r6, 8005944 <_printf_i+0x114>
 8005940:	2d00      	cmp	r5, #0
 8005942:	d04b      	beq.n	80059dc <_printf_i+0x1ac>
 8005944:	4615      	mov	r5, r2
 8005946:	fbb6 f1f3 	udiv	r1, r6, r3
 800594a:	fb03 6711 	mls	r7, r3, r1, r6
 800594e:	5dc7      	ldrb	r7, [r0, r7]
 8005950:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005954:	4637      	mov	r7, r6
 8005956:	42bb      	cmp	r3, r7
 8005958:	460e      	mov	r6, r1
 800595a:	d9f4      	bls.n	8005946 <_printf_i+0x116>
 800595c:	2b08      	cmp	r3, #8
 800595e:	d10b      	bne.n	8005978 <_printf_i+0x148>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	07de      	lsls	r6, r3, #31
 8005964:	d508      	bpl.n	8005978 <_printf_i+0x148>
 8005966:	6923      	ldr	r3, [r4, #16]
 8005968:	6861      	ldr	r1, [r4, #4]
 800596a:	4299      	cmp	r1, r3
 800596c:	bfde      	ittt	le
 800596e:	2330      	movle	r3, #48	; 0x30
 8005970:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005974:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005978:	1b52      	subs	r2, r2, r5
 800597a:	6122      	str	r2, [r4, #16]
 800597c:	f8cd a000 	str.w	sl, [sp]
 8005980:	464b      	mov	r3, r9
 8005982:	aa03      	add	r2, sp, #12
 8005984:	4621      	mov	r1, r4
 8005986:	4640      	mov	r0, r8
 8005988:	f7ff fee4 	bl	8005754 <_printf_common>
 800598c:	3001      	adds	r0, #1
 800598e:	d14a      	bne.n	8005a26 <_printf_i+0x1f6>
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	b004      	add	sp, #16
 8005996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	f043 0320 	orr.w	r3, r3, #32
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	4833      	ldr	r0, [pc, #204]	; (8005a70 <_printf_i+0x240>)
 80059a4:	2778      	movs	r7, #120	; 0x78
 80059a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	6829      	ldr	r1, [r5, #0]
 80059ae:	061f      	lsls	r7, r3, #24
 80059b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80059b4:	d402      	bmi.n	80059bc <_printf_i+0x18c>
 80059b6:	065f      	lsls	r7, r3, #25
 80059b8:	bf48      	it	mi
 80059ba:	b2b6      	uxthmi	r6, r6
 80059bc:	07df      	lsls	r7, r3, #31
 80059be:	bf48      	it	mi
 80059c0:	f043 0320 	orrmi.w	r3, r3, #32
 80059c4:	6029      	str	r1, [r5, #0]
 80059c6:	bf48      	it	mi
 80059c8:	6023      	strmi	r3, [r4, #0]
 80059ca:	b91e      	cbnz	r6, 80059d4 <_printf_i+0x1a4>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	f023 0320 	bic.w	r3, r3, #32
 80059d2:	6023      	str	r3, [r4, #0]
 80059d4:	2310      	movs	r3, #16
 80059d6:	e7a7      	b.n	8005928 <_printf_i+0xf8>
 80059d8:	4824      	ldr	r0, [pc, #144]	; (8005a6c <_printf_i+0x23c>)
 80059da:	e7e4      	b.n	80059a6 <_printf_i+0x176>
 80059dc:	4615      	mov	r5, r2
 80059de:	e7bd      	b.n	800595c <_printf_i+0x12c>
 80059e0:	682b      	ldr	r3, [r5, #0]
 80059e2:	6826      	ldr	r6, [r4, #0]
 80059e4:	6961      	ldr	r1, [r4, #20]
 80059e6:	1d18      	adds	r0, r3, #4
 80059e8:	6028      	str	r0, [r5, #0]
 80059ea:	0635      	lsls	r5, r6, #24
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	d501      	bpl.n	80059f4 <_printf_i+0x1c4>
 80059f0:	6019      	str	r1, [r3, #0]
 80059f2:	e002      	b.n	80059fa <_printf_i+0x1ca>
 80059f4:	0670      	lsls	r0, r6, #25
 80059f6:	d5fb      	bpl.n	80059f0 <_printf_i+0x1c0>
 80059f8:	8019      	strh	r1, [r3, #0]
 80059fa:	2300      	movs	r3, #0
 80059fc:	6123      	str	r3, [r4, #16]
 80059fe:	4615      	mov	r5, r2
 8005a00:	e7bc      	b.n	800597c <_printf_i+0x14c>
 8005a02:	682b      	ldr	r3, [r5, #0]
 8005a04:	1d1a      	adds	r2, r3, #4
 8005a06:	602a      	str	r2, [r5, #0]
 8005a08:	681d      	ldr	r5, [r3, #0]
 8005a0a:	6862      	ldr	r2, [r4, #4]
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f7fa fbde 	bl	80001d0 <memchr>
 8005a14:	b108      	cbz	r0, 8005a1a <_printf_i+0x1ea>
 8005a16:	1b40      	subs	r0, r0, r5
 8005a18:	6060      	str	r0, [r4, #4]
 8005a1a:	6863      	ldr	r3, [r4, #4]
 8005a1c:	6123      	str	r3, [r4, #16]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a24:	e7aa      	b.n	800597c <_printf_i+0x14c>
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	462a      	mov	r2, r5
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	47d0      	blx	sl
 8005a30:	3001      	adds	r0, #1
 8005a32:	d0ad      	beq.n	8005990 <_printf_i+0x160>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	079b      	lsls	r3, r3, #30
 8005a38:	d413      	bmi.n	8005a62 <_printf_i+0x232>
 8005a3a:	68e0      	ldr	r0, [r4, #12]
 8005a3c:	9b03      	ldr	r3, [sp, #12]
 8005a3e:	4298      	cmp	r0, r3
 8005a40:	bfb8      	it	lt
 8005a42:	4618      	movlt	r0, r3
 8005a44:	e7a6      	b.n	8005994 <_printf_i+0x164>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4632      	mov	r2, r6
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	47d0      	blx	sl
 8005a50:	3001      	adds	r0, #1
 8005a52:	d09d      	beq.n	8005990 <_printf_i+0x160>
 8005a54:	3501      	adds	r5, #1
 8005a56:	68e3      	ldr	r3, [r4, #12]
 8005a58:	9903      	ldr	r1, [sp, #12]
 8005a5a:	1a5b      	subs	r3, r3, r1
 8005a5c:	42ab      	cmp	r3, r5
 8005a5e:	dcf2      	bgt.n	8005a46 <_printf_i+0x216>
 8005a60:	e7eb      	b.n	8005a3a <_printf_i+0x20a>
 8005a62:	2500      	movs	r5, #0
 8005a64:	f104 0619 	add.w	r6, r4, #25
 8005a68:	e7f5      	b.n	8005a56 <_printf_i+0x226>
 8005a6a:	bf00      	nop
 8005a6c:	08008242 	.word	0x08008242
 8005a70:	08008253 	.word	0x08008253

08005a74 <std>:
 8005a74:	2300      	movs	r3, #0
 8005a76:	b510      	push	{r4, lr}
 8005a78:	4604      	mov	r4, r0
 8005a7a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a82:	6083      	str	r3, [r0, #8]
 8005a84:	8181      	strh	r1, [r0, #12]
 8005a86:	6643      	str	r3, [r0, #100]	; 0x64
 8005a88:	81c2      	strh	r2, [r0, #14]
 8005a8a:	6183      	str	r3, [r0, #24]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	2208      	movs	r2, #8
 8005a90:	305c      	adds	r0, #92	; 0x5c
 8005a92:	f000 f914 	bl	8005cbe <memset>
 8005a96:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <std+0x58>)
 8005a98:	6263      	str	r3, [r4, #36]	; 0x24
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <std+0x5c>)
 8005a9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <std+0x60>)
 8005aa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <std+0x64>)
 8005aa4:	6323      	str	r3, [r4, #48]	; 0x30
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <std+0x68>)
 8005aa8:	6224      	str	r4, [r4, #32]
 8005aaa:	429c      	cmp	r4, r3
 8005aac:	d006      	beq.n	8005abc <std+0x48>
 8005aae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005ab2:	4294      	cmp	r4, r2
 8005ab4:	d002      	beq.n	8005abc <std+0x48>
 8005ab6:	33d0      	adds	r3, #208	; 0xd0
 8005ab8:	429c      	cmp	r4, r3
 8005aba:	d105      	bne.n	8005ac8 <std+0x54>
 8005abc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ac4:	f000 b98e 	b.w	8005de4 <__retarget_lock_init_recursive>
 8005ac8:	bd10      	pop	{r4, pc}
 8005aca:	bf00      	nop
 8005acc:	08005c39 	.word	0x08005c39
 8005ad0:	08005c5b 	.word	0x08005c5b
 8005ad4:	08005c93 	.word	0x08005c93
 8005ad8:	08005cb7 	.word	0x08005cb7
 8005adc:	200006b8 	.word	0x200006b8

08005ae0 <stdio_exit_handler>:
 8005ae0:	4a02      	ldr	r2, [pc, #8]	; (8005aec <stdio_exit_handler+0xc>)
 8005ae2:	4903      	ldr	r1, [pc, #12]	; (8005af0 <stdio_exit_handler+0x10>)
 8005ae4:	4803      	ldr	r0, [pc, #12]	; (8005af4 <stdio_exit_handler+0x14>)
 8005ae6:	f000 b869 	b.w	8005bbc <_fwalk_sglue>
 8005aea:	bf00      	nop
 8005aec:	2000000c 	.word	0x2000000c
 8005af0:	08007799 	.word	0x08007799
 8005af4:	20000018 	.word	0x20000018

08005af8 <cleanup_stdio>:
 8005af8:	6841      	ldr	r1, [r0, #4]
 8005afa:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <cleanup_stdio+0x34>)
 8005afc:	4299      	cmp	r1, r3
 8005afe:	b510      	push	{r4, lr}
 8005b00:	4604      	mov	r4, r0
 8005b02:	d001      	beq.n	8005b08 <cleanup_stdio+0x10>
 8005b04:	f001 fe48 	bl	8007798 <_fflush_r>
 8005b08:	68a1      	ldr	r1, [r4, #8]
 8005b0a:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <cleanup_stdio+0x38>)
 8005b0c:	4299      	cmp	r1, r3
 8005b0e:	d002      	beq.n	8005b16 <cleanup_stdio+0x1e>
 8005b10:	4620      	mov	r0, r4
 8005b12:	f001 fe41 	bl	8007798 <_fflush_r>
 8005b16:	68e1      	ldr	r1, [r4, #12]
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <cleanup_stdio+0x3c>)
 8005b1a:	4299      	cmp	r1, r3
 8005b1c:	d004      	beq.n	8005b28 <cleanup_stdio+0x30>
 8005b1e:	4620      	mov	r0, r4
 8005b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b24:	f001 be38 	b.w	8007798 <_fflush_r>
 8005b28:	bd10      	pop	{r4, pc}
 8005b2a:	bf00      	nop
 8005b2c:	200006b8 	.word	0x200006b8
 8005b30:	20000720 	.word	0x20000720
 8005b34:	20000788 	.word	0x20000788

08005b38 <global_stdio_init.part.0>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <global_stdio_init.part.0+0x30>)
 8005b3c:	4c0b      	ldr	r4, [pc, #44]	; (8005b6c <global_stdio_init.part.0+0x34>)
 8005b3e:	4a0c      	ldr	r2, [pc, #48]	; (8005b70 <global_stdio_init.part.0+0x38>)
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	4620      	mov	r0, r4
 8005b44:	2200      	movs	r2, #0
 8005b46:	2104      	movs	r1, #4
 8005b48:	f7ff ff94 	bl	8005a74 <std>
 8005b4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b50:	2201      	movs	r2, #1
 8005b52:	2109      	movs	r1, #9
 8005b54:	f7ff ff8e 	bl	8005a74 <std>
 8005b58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b62:	2112      	movs	r1, #18
 8005b64:	f7ff bf86 	b.w	8005a74 <std>
 8005b68:	200007f0 	.word	0x200007f0
 8005b6c:	200006b8 	.word	0x200006b8
 8005b70:	08005ae1 	.word	0x08005ae1

08005b74 <__sfp_lock_acquire>:
 8005b74:	4801      	ldr	r0, [pc, #4]	; (8005b7c <__sfp_lock_acquire+0x8>)
 8005b76:	f000 b936 	b.w	8005de6 <__retarget_lock_acquire_recursive>
 8005b7a:	bf00      	nop
 8005b7c:	200007f9 	.word	0x200007f9

08005b80 <__sfp_lock_release>:
 8005b80:	4801      	ldr	r0, [pc, #4]	; (8005b88 <__sfp_lock_release+0x8>)
 8005b82:	f000 b931 	b.w	8005de8 <__retarget_lock_release_recursive>
 8005b86:	bf00      	nop
 8005b88:	200007f9 	.word	0x200007f9

08005b8c <__sinit>:
 8005b8c:	b510      	push	{r4, lr}
 8005b8e:	4604      	mov	r4, r0
 8005b90:	f7ff fff0 	bl	8005b74 <__sfp_lock_acquire>
 8005b94:	6a23      	ldr	r3, [r4, #32]
 8005b96:	b11b      	cbz	r3, 8005ba0 <__sinit+0x14>
 8005b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b9c:	f7ff bff0 	b.w	8005b80 <__sfp_lock_release>
 8005ba0:	4b04      	ldr	r3, [pc, #16]	; (8005bb4 <__sinit+0x28>)
 8005ba2:	6223      	str	r3, [r4, #32]
 8005ba4:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <__sinit+0x2c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1f5      	bne.n	8005b98 <__sinit+0xc>
 8005bac:	f7ff ffc4 	bl	8005b38 <global_stdio_init.part.0>
 8005bb0:	e7f2      	b.n	8005b98 <__sinit+0xc>
 8005bb2:	bf00      	nop
 8005bb4:	08005af9 	.word	0x08005af9
 8005bb8:	200007f0 	.word	0x200007f0

08005bbc <_fwalk_sglue>:
 8005bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc0:	4607      	mov	r7, r0
 8005bc2:	4688      	mov	r8, r1
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	2600      	movs	r6, #0
 8005bc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bcc:	f1b9 0901 	subs.w	r9, r9, #1
 8005bd0:	d505      	bpl.n	8005bde <_fwalk_sglue+0x22>
 8005bd2:	6824      	ldr	r4, [r4, #0]
 8005bd4:	2c00      	cmp	r4, #0
 8005bd6:	d1f7      	bne.n	8005bc8 <_fwalk_sglue+0xc>
 8005bd8:	4630      	mov	r0, r6
 8005bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bde:	89ab      	ldrh	r3, [r5, #12]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d907      	bls.n	8005bf4 <_fwalk_sglue+0x38>
 8005be4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005be8:	3301      	adds	r3, #1
 8005bea:	d003      	beq.n	8005bf4 <_fwalk_sglue+0x38>
 8005bec:	4629      	mov	r1, r5
 8005bee:	4638      	mov	r0, r7
 8005bf0:	47c0      	blx	r8
 8005bf2:	4306      	orrs	r6, r0
 8005bf4:	3568      	adds	r5, #104	; 0x68
 8005bf6:	e7e9      	b.n	8005bcc <_fwalk_sglue+0x10>

08005bf8 <siprintf>:
 8005bf8:	b40e      	push	{r1, r2, r3}
 8005bfa:	b500      	push	{lr}
 8005bfc:	b09c      	sub	sp, #112	; 0x70
 8005bfe:	ab1d      	add	r3, sp, #116	; 0x74
 8005c00:	9002      	str	r0, [sp, #8]
 8005c02:	9006      	str	r0, [sp, #24]
 8005c04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c08:	4809      	ldr	r0, [pc, #36]	; (8005c30 <siprintf+0x38>)
 8005c0a:	9107      	str	r1, [sp, #28]
 8005c0c:	9104      	str	r1, [sp, #16]
 8005c0e:	4909      	ldr	r1, [pc, #36]	; (8005c34 <siprintf+0x3c>)
 8005c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c14:	9105      	str	r1, [sp, #20]
 8005c16:	6800      	ldr	r0, [r0, #0]
 8005c18:	9301      	str	r3, [sp, #4]
 8005c1a:	a902      	add	r1, sp, #8
 8005c1c:	f001 fc38 	bl	8007490 <_svfiprintf_r>
 8005c20:	9b02      	ldr	r3, [sp, #8]
 8005c22:	2200      	movs	r2, #0
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	b01c      	add	sp, #112	; 0x70
 8005c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c2c:	b003      	add	sp, #12
 8005c2e:	4770      	bx	lr
 8005c30:	20000064 	.word	0x20000064
 8005c34:	ffff0208 	.word	0xffff0208

08005c38 <__sread>:
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c40:	f000 f882 	bl	8005d48 <_read_r>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	bfab      	itete	ge
 8005c48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005c4c:	181b      	addge	r3, r3, r0
 8005c4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c52:	bfac      	ite	ge
 8005c54:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c56:	81a3      	strhlt	r3, [r4, #12]
 8005c58:	bd10      	pop	{r4, pc}

08005c5a <__swrite>:
 8005c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5e:	461f      	mov	r7, r3
 8005c60:	898b      	ldrh	r3, [r1, #12]
 8005c62:	05db      	lsls	r3, r3, #23
 8005c64:	4605      	mov	r5, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	4616      	mov	r6, r2
 8005c6a:	d505      	bpl.n	8005c78 <__swrite+0x1e>
 8005c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c70:	2302      	movs	r3, #2
 8005c72:	2200      	movs	r2, #0
 8005c74:	f000 f856 	bl	8005d24 <_lseek_r>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	4632      	mov	r2, r6
 8005c86:	463b      	mov	r3, r7
 8005c88:	4628      	mov	r0, r5
 8005c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8e:	f000 b86d 	b.w	8005d6c <_write_r>

08005c92 <__sseek>:
 8005c92:	b510      	push	{r4, lr}
 8005c94:	460c      	mov	r4, r1
 8005c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9a:	f000 f843 	bl	8005d24 <_lseek_r>
 8005c9e:	1c43      	adds	r3, r0, #1
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	bf15      	itete	ne
 8005ca4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cae:	81a3      	strheq	r3, [r4, #12]
 8005cb0:	bf18      	it	ne
 8005cb2:	81a3      	strhne	r3, [r4, #12]
 8005cb4:	bd10      	pop	{r4, pc}

08005cb6 <__sclose>:
 8005cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cba:	f000 b823 	b.w	8005d04 <_close_r>

08005cbe <memset>:
 8005cbe:	4402      	add	r2, r0
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d100      	bne.n	8005cc8 <memset+0xa>
 8005cc6:	4770      	bx	lr
 8005cc8:	f803 1b01 	strb.w	r1, [r3], #1
 8005ccc:	e7f9      	b.n	8005cc2 <memset+0x4>

08005cce <strstr>:
 8005cce:	780a      	ldrb	r2, [r1, #0]
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	b96a      	cbnz	r2, 8005cf0 <strstr+0x22>
 8005cd4:	bd70      	pop	{r4, r5, r6, pc}
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d109      	bne.n	8005cee <strstr+0x20>
 8005cda:	460c      	mov	r4, r1
 8005cdc:	4605      	mov	r5, r0
 8005cde:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0f6      	beq.n	8005cd4 <strstr+0x6>
 8005ce6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005cea:	429e      	cmp	r6, r3
 8005cec:	d0f7      	beq.n	8005cde <strstr+0x10>
 8005cee:	3001      	adds	r0, #1
 8005cf0:	7803      	ldrb	r3, [r0, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1ef      	bne.n	8005cd6 <strstr+0x8>
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	e7ec      	b.n	8005cd4 <strstr+0x6>
	...

08005cfc <_localeconv_r>:
 8005cfc:	4800      	ldr	r0, [pc, #0]	; (8005d00 <_localeconv_r+0x4>)
 8005cfe:	4770      	bx	lr
 8005d00:	20000158 	.word	0x20000158

08005d04 <_close_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d06      	ldr	r5, [pc, #24]	; (8005d20 <_close_r+0x1c>)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	602b      	str	r3, [r5, #0]
 8005d10:	f7fb fead 	bl	8001a6e <_close>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_close_r+0x1a>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_close_r+0x1a>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	200007f4 	.word	0x200007f4

08005d24 <_lseek_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	; (8005d44 <_lseek_r+0x20>)
 8005d28:	4604      	mov	r4, r0
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	602a      	str	r2, [r5, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f7fb fec2 	bl	8001abc <_lseek>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_lseek_r+0x1e>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_lseek_r+0x1e>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	200007f4 	.word	0x200007f4

08005d48 <_read_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4d07      	ldr	r5, [pc, #28]	; (8005d68 <_read_r+0x20>)
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	4608      	mov	r0, r1
 8005d50:	4611      	mov	r1, r2
 8005d52:	2200      	movs	r2, #0
 8005d54:	602a      	str	r2, [r5, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	f7fb fe50 	bl	80019fc <_read>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d102      	bne.n	8005d66 <_read_r+0x1e>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	b103      	cbz	r3, 8005d66 <_read_r+0x1e>
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	200007f4 	.word	0x200007f4

08005d6c <_write_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d07      	ldr	r5, [pc, #28]	; (8005d8c <_write_r+0x20>)
 8005d70:	4604      	mov	r4, r0
 8005d72:	4608      	mov	r0, r1
 8005d74:	4611      	mov	r1, r2
 8005d76:	2200      	movs	r2, #0
 8005d78:	602a      	str	r2, [r5, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f7fb fe5b 	bl	8001a36 <_write>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d102      	bne.n	8005d8a <_write_r+0x1e>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	b103      	cbz	r3, 8005d8a <_write_r+0x1e>
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	200007f4 	.word	0x200007f4

08005d90 <__errno>:
 8005d90:	4b01      	ldr	r3, [pc, #4]	; (8005d98 <__errno+0x8>)
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	20000064 	.word	0x20000064

08005d9c <__libc_init_array>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	4d0d      	ldr	r5, [pc, #52]	; (8005dd4 <__libc_init_array+0x38>)
 8005da0:	4c0d      	ldr	r4, [pc, #52]	; (8005dd8 <__libc_init_array+0x3c>)
 8005da2:	1b64      	subs	r4, r4, r5
 8005da4:	10a4      	asrs	r4, r4, #2
 8005da6:	2600      	movs	r6, #0
 8005da8:	42a6      	cmp	r6, r4
 8005daa:	d109      	bne.n	8005dc0 <__libc_init_array+0x24>
 8005dac:	4d0b      	ldr	r5, [pc, #44]	; (8005ddc <__libc_init_array+0x40>)
 8005dae:	4c0c      	ldr	r4, [pc, #48]	; (8005de0 <__libc_init_array+0x44>)
 8005db0:	f002 f896 	bl	8007ee0 <_init>
 8005db4:	1b64      	subs	r4, r4, r5
 8005db6:	10a4      	asrs	r4, r4, #2
 8005db8:	2600      	movs	r6, #0
 8005dba:	42a6      	cmp	r6, r4
 8005dbc:	d105      	bne.n	8005dca <__libc_init_array+0x2e>
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}
 8005dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc4:	4798      	blx	r3
 8005dc6:	3601      	adds	r6, #1
 8005dc8:	e7ee      	b.n	8005da8 <__libc_init_array+0xc>
 8005dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dce:	4798      	blx	r3
 8005dd0:	3601      	adds	r6, #1
 8005dd2:	e7f2      	b.n	8005dba <__libc_init_array+0x1e>
 8005dd4:	080085ac 	.word	0x080085ac
 8005dd8:	080085ac 	.word	0x080085ac
 8005ddc:	080085ac 	.word	0x080085ac
 8005de0:	080085b0 	.word	0x080085b0

08005de4 <__retarget_lock_init_recursive>:
 8005de4:	4770      	bx	lr

08005de6 <__retarget_lock_acquire_recursive>:
 8005de6:	4770      	bx	lr

08005de8 <__retarget_lock_release_recursive>:
 8005de8:	4770      	bx	lr

08005dea <quorem>:
 8005dea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dee:	6903      	ldr	r3, [r0, #16]
 8005df0:	690c      	ldr	r4, [r1, #16]
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	4607      	mov	r7, r0
 8005df6:	db7e      	blt.n	8005ef6 <quorem+0x10c>
 8005df8:	3c01      	subs	r4, #1
 8005dfa:	f101 0814 	add.w	r8, r1, #20
 8005dfe:	f100 0514 	add.w	r5, r0, #20
 8005e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e10:	3301      	adds	r3, #1
 8005e12:	429a      	cmp	r2, r3
 8005e14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e20:	d331      	bcc.n	8005e86 <quorem+0x9c>
 8005e22:	f04f 0e00 	mov.w	lr, #0
 8005e26:	4640      	mov	r0, r8
 8005e28:	46ac      	mov	ip, r5
 8005e2a:	46f2      	mov	sl, lr
 8005e2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e30:	b293      	uxth	r3, r2
 8005e32:	fb06 e303 	mla	r3, r6, r3, lr
 8005e36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e3a:	0c1a      	lsrs	r2, r3, #16
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	ebaa 0303 	sub.w	r3, sl, r3
 8005e42:	f8dc a000 	ldr.w	sl, [ip]
 8005e46:	fa13 f38a 	uxtah	r3, r3, sl
 8005e4a:	fb06 220e 	mla	r2, r6, lr, r2
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	9b00      	ldr	r3, [sp, #0]
 8005e52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e56:	b292      	uxth	r2, r2
 8005e58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e60:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e64:	4581      	cmp	r9, r0
 8005e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e6a:	f84c 3b04 	str.w	r3, [ip], #4
 8005e6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e72:	d2db      	bcs.n	8005e2c <quorem+0x42>
 8005e74:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e78:	b92b      	cbnz	r3, 8005e86 <quorem+0x9c>
 8005e7a:	9b01      	ldr	r3, [sp, #4]
 8005e7c:	3b04      	subs	r3, #4
 8005e7e:	429d      	cmp	r5, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	d32c      	bcc.n	8005ede <quorem+0xf4>
 8005e84:	613c      	str	r4, [r7, #16]
 8005e86:	4638      	mov	r0, r7
 8005e88:	f001 f9a8 	bl	80071dc <__mcmp>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	db22      	blt.n	8005ed6 <quorem+0xec>
 8005e90:	3601      	adds	r6, #1
 8005e92:	4629      	mov	r1, r5
 8005e94:	2000      	movs	r0, #0
 8005e96:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e9a:	f8d1 c000 	ldr.w	ip, [r1]
 8005e9e:	b293      	uxth	r3, r2
 8005ea0:	1ac3      	subs	r3, r0, r3
 8005ea2:	0c12      	lsrs	r2, r2, #16
 8005ea4:	fa13 f38c 	uxtah	r3, r3, ip
 8005ea8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005eac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eb6:	45c1      	cmp	r9, r8
 8005eb8:	f841 3b04 	str.w	r3, [r1], #4
 8005ebc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ec0:	d2e9      	bcs.n	8005e96 <quorem+0xac>
 8005ec2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ec6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eca:	b922      	cbnz	r2, 8005ed6 <quorem+0xec>
 8005ecc:	3b04      	subs	r3, #4
 8005ece:	429d      	cmp	r5, r3
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	d30a      	bcc.n	8005eea <quorem+0x100>
 8005ed4:	613c      	str	r4, [r7, #16]
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	b003      	add	sp, #12
 8005eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	3b04      	subs	r3, #4
 8005ee2:	2a00      	cmp	r2, #0
 8005ee4:	d1ce      	bne.n	8005e84 <quorem+0x9a>
 8005ee6:	3c01      	subs	r4, #1
 8005ee8:	e7c9      	b.n	8005e7e <quorem+0x94>
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	3b04      	subs	r3, #4
 8005eee:	2a00      	cmp	r2, #0
 8005ef0:	d1f0      	bne.n	8005ed4 <quorem+0xea>
 8005ef2:	3c01      	subs	r4, #1
 8005ef4:	e7eb      	b.n	8005ece <quorem+0xe4>
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	e7ee      	b.n	8005ed8 <quorem+0xee>
 8005efa:	0000      	movs	r0, r0
 8005efc:	0000      	movs	r0, r0
	...

08005f00 <_dtoa_r>:
 8005f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f04:	ed2d 8b04 	vpush	{d8-d9}
 8005f08:	69c5      	ldr	r5, [r0, #28]
 8005f0a:	b093      	sub	sp, #76	; 0x4c
 8005f0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f10:	ec57 6b10 	vmov	r6, r7, d0
 8005f14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f18:	9107      	str	r1, [sp, #28]
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	920a      	str	r2, [sp, #40]	; 0x28
 8005f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8005f20:	b975      	cbnz	r5, 8005f40 <_dtoa_r+0x40>
 8005f22:	2010      	movs	r0, #16
 8005f24:	f000 fe2a 	bl	8006b7c <malloc>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	61e0      	str	r0, [r4, #28]
 8005f2c:	b920      	cbnz	r0, 8005f38 <_dtoa_r+0x38>
 8005f2e:	4bae      	ldr	r3, [pc, #696]	; (80061e8 <_dtoa_r+0x2e8>)
 8005f30:	21ef      	movs	r1, #239	; 0xef
 8005f32:	48ae      	ldr	r0, [pc, #696]	; (80061ec <_dtoa_r+0x2ec>)
 8005f34:	f001 fc90 	bl	8007858 <__assert_func>
 8005f38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f3c:	6005      	str	r5, [r0, #0]
 8005f3e:	60c5      	str	r5, [r0, #12]
 8005f40:	69e3      	ldr	r3, [r4, #28]
 8005f42:	6819      	ldr	r1, [r3, #0]
 8005f44:	b151      	cbz	r1, 8005f5c <_dtoa_r+0x5c>
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	604a      	str	r2, [r1, #4]
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4093      	lsls	r3, r2
 8005f4e:	608b      	str	r3, [r1, #8]
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 ff07 	bl	8006d64 <_Bfree>
 8005f56:	69e3      	ldr	r3, [r4, #28]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	1e3b      	subs	r3, r7, #0
 8005f5e:	bfbb      	ittet	lt
 8005f60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f64:	9303      	strlt	r3, [sp, #12]
 8005f66:	2300      	movge	r3, #0
 8005f68:	2201      	movlt	r2, #1
 8005f6a:	bfac      	ite	ge
 8005f6c:	f8c8 3000 	strge.w	r3, [r8]
 8005f70:	f8c8 2000 	strlt.w	r2, [r8]
 8005f74:	4b9e      	ldr	r3, [pc, #632]	; (80061f0 <_dtoa_r+0x2f0>)
 8005f76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f7a:	ea33 0308 	bics.w	r3, r3, r8
 8005f7e:	d11b      	bne.n	8005fb8 <_dtoa_r+0xb8>
 8005f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f82:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005f8c:	4333      	orrs	r3, r6
 8005f8e:	f000 8593 	beq.w	8006ab8 <_dtoa_r+0xbb8>
 8005f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f94:	b963      	cbnz	r3, 8005fb0 <_dtoa_r+0xb0>
 8005f96:	4b97      	ldr	r3, [pc, #604]	; (80061f4 <_dtoa_r+0x2f4>)
 8005f98:	e027      	b.n	8005fea <_dtoa_r+0xea>
 8005f9a:	4b97      	ldr	r3, [pc, #604]	; (80061f8 <_dtoa_r+0x2f8>)
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	9800      	ldr	r0, [sp, #0]
 8005fa6:	b013      	add	sp, #76	; 0x4c
 8005fa8:	ecbd 8b04 	vpop	{d8-d9}
 8005fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb0:	4b90      	ldr	r3, [pc, #576]	; (80061f4 <_dtoa_r+0x2f4>)
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	3303      	adds	r3, #3
 8005fb6:	e7f3      	b.n	8005fa0 <_dtoa_r+0xa0>
 8005fb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	ec51 0b17 	vmov	r0, r1, d7
 8005fc2:	eeb0 8a47 	vmov.f32	s16, s14
 8005fc6:	eef0 8a67 	vmov.f32	s17, s15
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f7fa fd7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fd0:	4681      	mov	r9, r0
 8005fd2:	b160      	cbz	r0, 8005fee <_dtoa_r+0xee>
 8005fd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8568 	beq.w	8006ab2 <_dtoa_r+0xbb2>
 8005fe2:	4b86      	ldr	r3, [pc, #536]	; (80061fc <_dtoa_r+0x2fc>)
 8005fe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	e7da      	b.n	8005fa4 <_dtoa_r+0xa4>
 8005fee:	aa10      	add	r2, sp, #64	; 0x40
 8005ff0:	a911      	add	r1, sp, #68	; 0x44
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8005ff8:	eef0 0a68 	vmov.f32	s1, s17
 8005ffc:	f001 f994 	bl	8007328 <__d2b>
 8006000:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006004:	4682      	mov	sl, r0
 8006006:	2d00      	cmp	r5, #0
 8006008:	d07f      	beq.n	800610a <_dtoa_r+0x20a>
 800600a:	ee18 3a90 	vmov	r3, s17
 800600e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006012:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006016:	ec51 0b18 	vmov	r0, r1, d8
 800601a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800601e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006022:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006026:	4619      	mov	r1, r3
 8006028:	2200      	movs	r2, #0
 800602a:	4b75      	ldr	r3, [pc, #468]	; (8006200 <_dtoa_r+0x300>)
 800602c:	f7fa f92c 	bl	8000288 <__aeabi_dsub>
 8006030:	a367      	add	r3, pc, #412	; (adr r3, 80061d0 <_dtoa_r+0x2d0>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f7fa fadf 	bl	80005f8 <__aeabi_dmul>
 800603a:	a367      	add	r3, pc, #412	; (adr r3, 80061d8 <_dtoa_r+0x2d8>)
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f7fa f924 	bl	800028c <__adddf3>
 8006044:	4606      	mov	r6, r0
 8006046:	4628      	mov	r0, r5
 8006048:	460f      	mov	r7, r1
 800604a:	f7fa fa6b 	bl	8000524 <__aeabi_i2d>
 800604e:	a364      	add	r3, pc, #400	; (adr r3, 80061e0 <_dtoa_r+0x2e0>)
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f7fa fad0 	bl	80005f8 <__aeabi_dmul>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4630      	mov	r0, r6
 800605e:	4639      	mov	r1, r7
 8006060:	f7fa f914 	bl	800028c <__adddf3>
 8006064:	4606      	mov	r6, r0
 8006066:	460f      	mov	r7, r1
 8006068:	f7fa fd76 	bl	8000b58 <__aeabi_d2iz>
 800606c:	2200      	movs	r2, #0
 800606e:	4683      	mov	fp, r0
 8006070:	2300      	movs	r3, #0
 8006072:	4630      	mov	r0, r6
 8006074:	4639      	mov	r1, r7
 8006076:	f7fa fd31 	bl	8000adc <__aeabi_dcmplt>
 800607a:	b148      	cbz	r0, 8006090 <_dtoa_r+0x190>
 800607c:	4658      	mov	r0, fp
 800607e:	f7fa fa51 	bl	8000524 <__aeabi_i2d>
 8006082:	4632      	mov	r2, r6
 8006084:	463b      	mov	r3, r7
 8006086:	f7fa fd1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800608a:	b908      	cbnz	r0, 8006090 <_dtoa_r+0x190>
 800608c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006090:	f1bb 0f16 	cmp.w	fp, #22
 8006094:	d857      	bhi.n	8006146 <_dtoa_r+0x246>
 8006096:	4b5b      	ldr	r3, [pc, #364]	; (8006204 <_dtoa_r+0x304>)
 8006098:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	ec51 0b18 	vmov	r0, r1, d8
 80060a4:	f7fa fd1a 	bl	8000adc <__aeabi_dcmplt>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d04e      	beq.n	800614a <_dtoa_r+0x24a>
 80060ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060b0:	2300      	movs	r3, #0
 80060b2:	930c      	str	r3, [sp, #48]	; 0x30
 80060b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060b6:	1b5b      	subs	r3, r3, r5
 80060b8:	1e5a      	subs	r2, r3, #1
 80060ba:	bf45      	ittet	mi
 80060bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80060c0:	9305      	strmi	r3, [sp, #20]
 80060c2:	2300      	movpl	r3, #0
 80060c4:	2300      	movmi	r3, #0
 80060c6:	9206      	str	r2, [sp, #24]
 80060c8:	bf54      	ite	pl
 80060ca:	9305      	strpl	r3, [sp, #20]
 80060cc:	9306      	strmi	r3, [sp, #24]
 80060ce:	f1bb 0f00 	cmp.w	fp, #0
 80060d2:	db3c      	blt.n	800614e <_dtoa_r+0x24e>
 80060d4:	9b06      	ldr	r3, [sp, #24]
 80060d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80060da:	445b      	add	r3, fp
 80060dc:	9306      	str	r3, [sp, #24]
 80060de:	2300      	movs	r3, #0
 80060e0:	9308      	str	r3, [sp, #32]
 80060e2:	9b07      	ldr	r3, [sp, #28]
 80060e4:	2b09      	cmp	r3, #9
 80060e6:	d868      	bhi.n	80061ba <_dtoa_r+0x2ba>
 80060e8:	2b05      	cmp	r3, #5
 80060ea:	bfc4      	itt	gt
 80060ec:	3b04      	subgt	r3, #4
 80060ee:	9307      	strgt	r3, [sp, #28]
 80060f0:	9b07      	ldr	r3, [sp, #28]
 80060f2:	f1a3 0302 	sub.w	r3, r3, #2
 80060f6:	bfcc      	ite	gt
 80060f8:	2500      	movgt	r5, #0
 80060fa:	2501      	movle	r5, #1
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	f200 8085 	bhi.w	800620c <_dtoa_r+0x30c>
 8006102:	e8df f003 	tbb	[pc, r3]
 8006106:	3b2e      	.short	0x3b2e
 8006108:	5839      	.short	0x5839
 800610a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800610e:	441d      	add	r5, r3
 8006110:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006114:	2b20      	cmp	r3, #32
 8006116:	bfc1      	itttt	gt
 8006118:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800611c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006120:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006124:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006128:	bfd6      	itet	le
 800612a:	f1c3 0320 	rsble	r3, r3, #32
 800612e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006132:	fa06 f003 	lslle.w	r0, r6, r3
 8006136:	f7fa f9e5 	bl	8000504 <__aeabi_ui2d>
 800613a:	2201      	movs	r2, #1
 800613c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006140:	3d01      	subs	r5, #1
 8006142:	920e      	str	r2, [sp, #56]	; 0x38
 8006144:	e76f      	b.n	8006026 <_dtoa_r+0x126>
 8006146:	2301      	movs	r3, #1
 8006148:	e7b3      	b.n	80060b2 <_dtoa_r+0x1b2>
 800614a:	900c      	str	r0, [sp, #48]	; 0x30
 800614c:	e7b2      	b.n	80060b4 <_dtoa_r+0x1b4>
 800614e:	9b05      	ldr	r3, [sp, #20]
 8006150:	eba3 030b 	sub.w	r3, r3, fp
 8006154:	9305      	str	r3, [sp, #20]
 8006156:	f1cb 0300 	rsb	r3, fp, #0
 800615a:	9308      	str	r3, [sp, #32]
 800615c:	2300      	movs	r3, #0
 800615e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006160:	e7bf      	b.n	80060e2 <_dtoa_r+0x1e2>
 8006162:	2300      	movs	r3, #0
 8006164:	9309      	str	r3, [sp, #36]	; 0x24
 8006166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006168:	2b00      	cmp	r3, #0
 800616a:	dc52      	bgt.n	8006212 <_dtoa_r+0x312>
 800616c:	2301      	movs	r3, #1
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	9304      	str	r3, [sp, #16]
 8006172:	461a      	mov	r2, r3
 8006174:	920a      	str	r2, [sp, #40]	; 0x28
 8006176:	e00b      	b.n	8006190 <_dtoa_r+0x290>
 8006178:	2301      	movs	r3, #1
 800617a:	e7f3      	b.n	8006164 <_dtoa_r+0x264>
 800617c:	2300      	movs	r3, #0
 800617e:	9309      	str	r3, [sp, #36]	; 0x24
 8006180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006182:	445b      	add	r3, fp
 8006184:	9301      	str	r3, [sp, #4]
 8006186:	3301      	adds	r3, #1
 8006188:	2b01      	cmp	r3, #1
 800618a:	9304      	str	r3, [sp, #16]
 800618c:	bfb8      	it	lt
 800618e:	2301      	movlt	r3, #1
 8006190:	69e0      	ldr	r0, [r4, #28]
 8006192:	2100      	movs	r1, #0
 8006194:	2204      	movs	r2, #4
 8006196:	f102 0614 	add.w	r6, r2, #20
 800619a:	429e      	cmp	r6, r3
 800619c:	d93d      	bls.n	800621a <_dtoa_r+0x31a>
 800619e:	6041      	str	r1, [r0, #4]
 80061a0:	4620      	mov	r0, r4
 80061a2:	f000 fd9f 	bl	8006ce4 <_Balloc>
 80061a6:	9000      	str	r0, [sp, #0]
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d139      	bne.n	8006220 <_dtoa_r+0x320>
 80061ac:	4b16      	ldr	r3, [pc, #88]	; (8006208 <_dtoa_r+0x308>)
 80061ae:	4602      	mov	r2, r0
 80061b0:	f240 11af 	movw	r1, #431	; 0x1af
 80061b4:	e6bd      	b.n	8005f32 <_dtoa_r+0x32>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e7e1      	b.n	800617e <_dtoa_r+0x27e>
 80061ba:	2501      	movs	r5, #1
 80061bc:	2300      	movs	r3, #0
 80061be:	9307      	str	r3, [sp, #28]
 80061c0:	9509      	str	r5, [sp, #36]	; 0x24
 80061c2:	f04f 33ff 	mov.w	r3, #4294967295
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	2200      	movs	r2, #0
 80061cc:	2312      	movs	r3, #18
 80061ce:	e7d1      	b.n	8006174 <_dtoa_r+0x274>
 80061d0:	636f4361 	.word	0x636f4361
 80061d4:	3fd287a7 	.word	0x3fd287a7
 80061d8:	8b60c8b3 	.word	0x8b60c8b3
 80061dc:	3fc68a28 	.word	0x3fc68a28
 80061e0:	509f79fb 	.word	0x509f79fb
 80061e4:	3fd34413 	.word	0x3fd34413
 80061e8:	08008271 	.word	0x08008271
 80061ec:	08008288 	.word	0x08008288
 80061f0:	7ff00000 	.word	0x7ff00000
 80061f4:	0800826d 	.word	0x0800826d
 80061f8:	08008264 	.word	0x08008264
 80061fc:	08008241 	.word	0x08008241
 8006200:	3ff80000 	.word	0x3ff80000
 8006204:	08008378 	.word	0x08008378
 8006208:	080082e0 	.word	0x080082e0
 800620c:	2301      	movs	r3, #1
 800620e:	9309      	str	r3, [sp, #36]	; 0x24
 8006210:	e7d7      	b.n	80061c2 <_dtoa_r+0x2c2>
 8006212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	9304      	str	r3, [sp, #16]
 8006218:	e7ba      	b.n	8006190 <_dtoa_r+0x290>
 800621a:	3101      	adds	r1, #1
 800621c:	0052      	lsls	r2, r2, #1
 800621e:	e7ba      	b.n	8006196 <_dtoa_r+0x296>
 8006220:	69e3      	ldr	r3, [r4, #28]
 8006222:	9a00      	ldr	r2, [sp, #0]
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	9b04      	ldr	r3, [sp, #16]
 8006228:	2b0e      	cmp	r3, #14
 800622a:	f200 80a8 	bhi.w	800637e <_dtoa_r+0x47e>
 800622e:	2d00      	cmp	r5, #0
 8006230:	f000 80a5 	beq.w	800637e <_dtoa_r+0x47e>
 8006234:	f1bb 0f00 	cmp.w	fp, #0
 8006238:	dd38      	ble.n	80062ac <_dtoa_r+0x3ac>
 800623a:	4bc0      	ldr	r3, [pc, #768]	; (800653c <_dtoa_r+0x63c>)
 800623c:	f00b 020f 	and.w	r2, fp, #15
 8006240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006244:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006248:	e9d3 6700 	ldrd	r6, r7, [r3]
 800624c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006250:	d019      	beq.n	8006286 <_dtoa_r+0x386>
 8006252:	4bbb      	ldr	r3, [pc, #748]	; (8006540 <_dtoa_r+0x640>)
 8006254:	ec51 0b18 	vmov	r0, r1, d8
 8006258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800625c:	f7fa faf6 	bl	800084c <__aeabi_ddiv>
 8006260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006264:	f008 080f 	and.w	r8, r8, #15
 8006268:	2503      	movs	r5, #3
 800626a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006540 <_dtoa_r+0x640>
 800626e:	f1b8 0f00 	cmp.w	r8, #0
 8006272:	d10a      	bne.n	800628a <_dtoa_r+0x38a>
 8006274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006278:	4632      	mov	r2, r6
 800627a:	463b      	mov	r3, r7
 800627c:	f7fa fae6 	bl	800084c <__aeabi_ddiv>
 8006280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006284:	e02b      	b.n	80062de <_dtoa_r+0x3de>
 8006286:	2502      	movs	r5, #2
 8006288:	e7ef      	b.n	800626a <_dtoa_r+0x36a>
 800628a:	f018 0f01 	tst.w	r8, #1
 800628e:	d008      	beq.n	80062a2 <_dtoa_r+0x3a2>
 8006290:	4630      	mov	r0, r6
 8006292:	4639      	mov	r1, r7
 8006294:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006298:	f7fa f9ae 	bl	80005f8 <__aeabi_dmul>
 800629c:	3501      	adds	r5, #1
 800629e:	4606      	mov	r6, r0
 80062a0:	460f      	mov	r7, r1
 80062a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80062a6:	f109 0908 	add.w	r9, r9, #8
 80062aa:	e7e0      	b.n	800626e <_dtoa_r+0x36e>
 80062ac:	f000 809f 	beq.w	80063ee <_dtoa_r+0x4ee>
 80062b0:	f1cb 0600 	rsb	r6, fp, #0
 80062b4:	4ba1      	ldr	r3, [pc, #644]	; (800653c <_dtoa_r+0x63c>)
 80062b6:	4fa2      	ldr	r7, [pc, #648]	; (8006540 <_dtoa_r+0x640>)
 80062b8:	f006 020f 	and.w	r2, r6, #15
 80062bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	ec51 0b18 	vmov	r0, r1, d8
 80062c8:	f7fa f996 	bl	80005f8 <__aeabi_dmul>
 80062cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062d0:	1136      	asrs	r6, r6, #4
 80062d2:	2300      	movs	r3, #0
 80062d4:	2502      	movs	r5, #2
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	d17e      	bne.n	80063d8 <_dtoa_r+0x4d8>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1d0      	bne.n	8006280 <_dtoa_r+0x380>
 80062de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8084 	beq.w	80063f2 <_dtoa_r+0x4f2>
 80062ea:	4b96      	ldr	r3, [pc, #600]	; (8006544 <_dtoa_r+0x644>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	4640      	mov	r0, r8
 80062f0:	4649      	mov	r1, r9
 80062f2:	f7fa fbf3 	bl	8000adc <__aeabi_dcmplt>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d07b      	beq.n	80063f2 <_dtoa_r+0x4f2>
 80062fa:	9b04      	ldr	r3, [sp, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d078      	beq.n	80063f2 <_dtoa_r+0x4f2>
 8006300:	9b01      	ldr	r3, [sp, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	dd39      	ble.n	800637a <_dtoa_r+0x47a>
 8006306:	4b90      	ldr	r3, [pc, #576]	; (8006548 <_dtoa_r+0x648>)
 8006308:	2200      	movs	r2, #0
 800630a:	4640      	mov	r0, r8
 800630c:	4649      	mov	r1, r9
 800630e:	f7fa f973 	bl	80005f8 <__aeabi_dmul>
 8006312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006316:	9e01      	ldr	r6, [sp, #4]
 8006318:	f10b 37ff 	add.w	r7, fp, #4294967295
 800631c:	3501      	adds	r5, #1
 800631e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006322:	4628      	mov	r0, r5
 8006324:	f7fa f8fe 	bl	8000524 <__aeabi_i2d>
 8006328:	4642      	mov	r2, r8
 800632a:	464b      	mov	r3, r9
 800632c:	f7fa f964 	bl	80005f8 <__aeabi_dmul>
 8006330:	4b86      	ldr	r3, [pc, #536]	; (800654c <_dtoa_r+0x64c>)
 8006332:	2200      	movs	r2, #0
 8006334:	f7f9 ffaa 	bl	800028c <__adddf3>
 8006338:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800633c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006340:	9303      	str	r3, [sp, #12]
 8006342:	2e00      	cmp	r6, #0
 8006344:	d158      	bne.n	80063f8 <_dtoa_r+0x4f8>
 8006346:	4b82      	ldr	r3, [pc, #520]	; (8006550 <_dtoa_r+0x650>)
 8006348:	2200      	movs	r2, #0
 800634a:	4640      	mov	r0, r8
 800634c:	4649      	mov	r1, r9
 800634e:	f7f9 ff9b 	bl	8000288 <__aeabi_dsub>
 8006352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006356:	4680      	mov	r8, r0
 8006358:	4689      	mov	r9, r1
 800635a:	f7fa fbdd 	bl	8000b18 <__aeabi_dcmpgt>
 800635e:	2800      	cmp	r0, #0
 8006360:	f040 8296 	bne.w	8006890 <_dtoa_r+0x990>
 8006364:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006368:	4640      	mov	r0, r8
 800636a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800636e:	4649      	mov	r1, r9
 8006370:	f7fa fbb4 	bl	8000adc <__aeabi_dcmplt>
 8006374:	2800      	cmp	r0, #0
 8006376:	f040 8289 	bne.w	800688c <_dtoa_r+0x98c>
 800637a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800637e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006380:	2b00      	cmp	r3, #0
 8006382:	f2c0 814e 	blt.w	8006622 <_dtoa_r+0x722>
 8006386:	f1bb 0f0e 	cmp.w	fp, #14
 800638a:	f300 814a 	bgt.w	8006622 <_dtoa_r+0x722>
 800638e:	4b6b      	ldr	r3, [pc, #428]	; (800653c <_dtoa_r+0x63c>)
 8006390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006394:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800639a:	2b00      	cmp	r3, #0
 800639c:	f280 80dc 	bge.w	8006558 <_dtoa_r+0x658>
 80063a0:	9b04      	ldr	r3, [sp, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f300 80d8 	bgt.w	8006558 <_dtoa_r+0x658>
 80063a8:	f040 826f 	bne.w	800688a <_dtoa_r+0x98a>
 80063ac:	4b68      	ldr	r3, [pc, #416]	; (8006550 <_dtoa_r+0x650>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	4640      	mov	r0, r8
 80063b2:	4649      	mov	r1, r9
 80063b4:	f7fa f920 	bl	80005f8 <__aeabi_dmul>
 80063b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063bc:	f7fa fba2 	bl	8000b04 <__aeabi_dcmpge>
 80063c0:	9e04      	ldr	r6, [sp, #16]
 80063c2:	4637      	mov	r7, r6
 80063c4:	2800      	cmp	r0, #0
 80063c6:	f040 8245 	bne.w	8006854 <_dtoa_r+0x954>
 80063ca:	9d00      	ldr	r5, [sp, #0]
 80063cc:	2331      	movs	r3, #49	; 0x31
 80063ce:	f805 3b01 	strb.w	r3, [r5], #1
 80063d2:	f10b 0b01 	add.w	fp, fp, #1
 80063d6:	e241      	b.n	800685c <_dtoa_r+0x95c>
 80063d8:	07f2      	lsls	r2, r6, #31
 80063da:	d505      	bpl.n	80063e8 <_dtoa_r+0x4e8>
 80063dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063e0:	f7fa f90a 	bl	80005f8 <__aeabi_dmul>
 80063e4:	3501      	adds	r5, #1
 80063e6:	2301      	movs	r3, #1
 80063e8:	1076      	asrs	r6, r6, #1
 80063ea:	3708      	adds	r7, #8
 80063ec:	e773      	b.n	80062d6 <_dtoa_r+0x3d6>
 80063ee:	2502      	movs	r5, #2
 80063f0:	e775      	b.n	80062de <_dtoa_r+0x3de>
 80063f2:	9e04      	ldr	r6, [sp, #16]
 80063f4:	465f      	mov	r7, fp
 80063f6:	e792      	b.n	800631e <_dtoa_r+0x41e>
 80063f8:	9900      	ldr	r1, [sp, #0]
 80063fa:	4b50      	ldr	r3, [pc, #320]	; (800653c <_dtoa_r+0x63c>)
 80063fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006400:	4431      	add	r1, r6
 8006402:	9102      	str	r1, [sp, #8]
 8006404:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006406:	eeb0 9a47 	vmov.f32	s18, s14
 800640a:	eef0 9a67 	vmov.f32	s19, s15
 800640e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006412:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006416:	2900      	cmp	r1, #0
 8006418:	d044      	beq.n	80064a4 <_dtoa_r+0x5a4>
 800641a:	494e      	ldr	r1, [pc, #312]	; (8006554 <_dtoa_r+0x654>)
 800641c:	2000      	movs	r0, #0
 800641e:	f7fa fa15 	bl	800084c <__aeabi_ddiv>
 8006422:	ec53 2b19 	vmov	r2, r3, d9
 8006426:	f7f9 ff2f 	bl	8000288 <__aeabi_dsub>
 800642a:	9d00      	ldr	r5, [sp, #0]
 800642c:	ec41 0b19 	vmov	d9, r0, r1
 8006430:	4649      	mov	r1, r9
 8006432:	4640      	mov	r0, r8
 8006434:	f7fa fb90 	bl	8000b58 <__aeabi_d2iz>
 8006438:	4606      	mov	r6, r0
 800643a:	f7fa f873 	bl	8000524 <__aeabi_i2d>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4640      	mov	r0, r8
 8006444:	4649      	mov	r1, r9
 8006446:	f7f9 ff1f 	bl	8000288 <__aeabi_dsub>
 800644a:	3630      	adds	r6, #48	; 0x30
 800644c:	f805 6b01 	strb.w	r6, [r5], #1
 8006450:	ec53 2b19 	vmov	r2, r3, d9
 8006454:	4680      	mov	r8, r0
 8006456:	4689      	mov	r9, r1
 8006458:	f7fa fb40 	bl	8000adc <__aeabi_dcmplt>
 800645c:	2800      	cmp	r0, #0
 800645e:	d164      	bne.n	800652a <_dtoa_r+0x62a>
 8006460:	4642      	mov	r2, r8
 8006462:	464b      	mov	r3, r9
 8006464:	4937      	ldr	r1, [pc, #220]	; (8006544 <_dtoa_r+0x644>)
 8006466:	2000      	movs	r0, #0
 8006468:	f7f9 ff0e 	bl	8000288 <__aeabi_dsub>
 800646c:	ec53 2b19 	vmov	r2, r3, d9
 8006470:	f7fa fb34 	bl	8000adc <__aeabi_dcmplt>
 8006474:	2800      	cmp	r0, #0
 8006476:	f040 80b6 	bne.w	80065e6 <_dtoa_r+0x6e6>
 800647a:	9b02      	ldr	r3, [sp, #8]
 800647c:	429d      	cmp	r5, r3
 800647e:	f43f af7c 	beq.w	800637a <_dtoa_r+0x47a>
 8006482:	4b31      	ldr	r3, [pc, #196]	; (8006548 <_dtoa_r+0x648>)
 8006484:	ec51 0b19 	vmov	r0, r1, d9
 8006488:	2200      	movs	r2, #0
 800648a:	f7fa f8b5 	bl	80005f8 <__aeabi_dmul>
 800648e:	4b2e      	ldr	r3, [pc, #184]	; (8006548 <_dtoa_r+0x648>)
 8006490:	ec41 0b19 	vmov	d9, r0, r1
 8006494:	2200      	movs	r2, #0
 8006496:	4640      	mov	r0, r8
 8006498:	4649      	mov	r1, r9
 800649a:	f7fa f8ad 	bl	80005f8 <__aeabi_dmul>
 800649e:	4680      	mov	r8, r0
 80064a0:	4689      	mov	r9, r1
 80064a2:	e7c5      	b.n	8006430 <_dtoa_r+0x530>
 80064a4:	ec51 0b17 	vmov	r0, r1, d7
 80064a8:	f7fa f8a6 	bl	80005f8 <__aeabi_dmul>
 80064ac:	9b02      	ldr	r3, [sp, #8]
 80064ae:	9d00      	ldr	r5, [sp, #0]
 80064b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80064b2:	ec41 0b19 	vmov	d9, r0, r1
 80064b6:	4649      	mov	r1, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	f7fa fb4d 	bl	8000b58 <__aeabi_d2iz>
 80064be:	4606      	mov	r6, r0
 80064c0:	f7fa f830 	bl	8000524 <__aeabi_i2d>
 80064c4:	3630      	adds	r6, #48	; 0x30
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4640      	mov	r0, r8
 80064cc:	4649      	mov	r1, r9
 80064ce:	f7f9 fedb 	bl	8000288 <__aeabi_dsub>
 80064d2:	f805 6b01 	strb.w	r6, [r5], #1
 80064d6:	9b02      	ldr	r3, [sp, #8]
 80064d8:	429d      	cmp	r5, r3
 80064da:	4680      	mov	r8, r0
 80064dc:	4689      	mov	r9, r1
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	d124      	bne.n	800652e <_dtoa_r+0x62e>
 80064e4:	4b1b      	ldr	r3, [pc, #108]	; (8006554 <_dtoa_r+0x654>)
 80064e6:	ec51 0b19 	vmov	r0, r1, d9
 80064ea:	f7f9 fecf 	bl	800028c <__adddf3>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4640      	mov	r0, r8
 80064f4:	4649      	mov	r1, r9
 80064f6:	f7fa fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d173      	bne.n	80065e6 <_dtoa_r+0x6e6>
 80064fe:	ec53 2b19 	vmov	r2, r3, d9
 8006502:	4914      	ldr	r1, [pc, #80]	; (8006554 <_dtoa_r+0x654>)
 8006504:	2000      	movs	r0, #0
 8006506:	f7f9 febf 	bl	8000288 <__aeabi_dsub>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4640      	mov	r0, r8
 8006510:	4649      	mov	r1, r9
 8006512:	f7fa fae3 	bl	8000adc <__aeabi_dcmplt>
 8006516:	2800      	cmp	r0, #0
 8006518:	f43f af2f 	beq.w	800637a <_dtoa_r+0x47a>
 800651c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800651e:	1e6b      	subs	r3, r5, #1
 8006520:	930f      	str	r3, [sp, #60]	; 0x3c
 8006522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006526:	2b30      	cmp	r3, #48	; 0x30
 8006528:	d0f8      	beq.n	800651c <_dtoa_r+0x61c>
 800652a:	46bb      	mov	fp, r7
 800652c:	e04a      	b.n	80065c4 <_dtoa_r+0x6c4>
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <_dtoa_r+0x648>)
 8006530:	f7fa f862 	bl	80005f8 <__aeabi_dmul>
 8006534:	4680      	mov	r8, r0
 8006536:	4689      	mov	r9, r1
 8006538:	e7bd      	b.n	80064b6 <_dtoa_r+0x5b6>
 800653a:	bf00      	nop
 800653c:	08008378 	.word	0x08008378
 8006540:	08008350 	.word	0x08008350
 8006544:	3ff00000 	.word	0x3ff00000
 8006548:	40240000 	.word	0x40240000
 800654c:	401c0000 	.word	0x401c0000
 8006550:	40140000 	.word	0x40140000
 8006554:	3fe00000 	.word	0x3fe00000
 8006558:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800655c:	9d00      	ldr	r5, [sp, #0]
 800655e:	4642      	mov	r2, r8
 8006560:	464b      	mov	r3, r9
 8006562:	4630      	mov	r0, r6
 8006564:	4639      	mov	r1, r7
 8006566:	f7fa f971 	bl	800084c <__aeabi_ddiv>
 800656a:	f7fa faf5 	bl	8000b58 <__aeabi_d2iz>
 800656e:	9001      	str	r0, [sp, #4]
 8006570:	f7f9 ffd8 	bl	8000524 <__aeabi_i2d>
 8006574:	4642      	mov	r2, r8
 8006576:	464b      	mov	r3, r9
 8006578:	f7fa f83e 	bl	80005f8 <__aeabi_dmul>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4630      	mov	r0, r6
 8006582:	4639      	mov	r1, r7
 8006584:	f7f9 fe80 	bl	8000288 <__aeabi_dsub>
 8006588:	9e01      	ldr	r6, [sp, #4]
 800658a:	9f04      	ldr	r7, [sp, #16]
 800658c:	3630      	adds	r6, #48	; 0x30
 800658e:	f805 6b01 	strb.w	r6, [r5], #1
 8006592:	9e00      	ldr	r6, [sp, #0]
 8006594:	1bae      	subs	r6, r5, r6
 8006596:	42b7      	cmp	r7, r6
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	d134      	bne.n	8006608 <_dtoa_r+0x708>
 800659e:	f7f9 fe75 	bl	800028c <__adddf3>
 80065a2:	4642      	mov	r2, r8
 80065a4:	464b      	mov	r3, r9
 80065a6:	4606      	mov	r6, r0
 80065a8:	460f      	mov	r7, r1
 80065aa:	f7fa fab5 	bl	8000b18 <__aeabi_dcmpgt>
 80065ae:	b9c8      	cbnz	r0, 80065e4 <_dtoa_r+0x6e4>
 80065b0:	4642      	mov	r2, r8
 80065b2:	464b      	mov	r3, r9
 80065b4:	4630      	mov	r0, r6
 80065b6:	4639      	mov	r1, r7
 80065b8:	f7fa fa86 	bl	8000ac8 <__aeabi_dcmpeq>
 80065bc:	b110      	cbz	r0, 80065c4 <_dtoa_r+0x6c4>
 80065be:	9b01      	ldr	r3, [sp, #4]
 80065c0:	07db      	lsls	r3, r3, #31
 80065c2:	d40f      	bmi.n	80065e4 <_dtoa_r+0x6e4>
 80065c4:	4651      	mov	r1, sl
 80065c6:	4620      	mov	r0, r4
 80065c8:	f000 fbcc 	bl	8006d64 <_Bfree>
 80065cc:	2300      	movs	r3, #0
 80065ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065d0:	702b      	strb	r3, [r5, #0]
 80065d2:	f10b 0301 	add.w	r3, fp, #1
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f43f ace2 	beq.w	8005fa4 <_dtoa_r+0xa4>
 80065e0:	601d      	str	r5, [r3, #0]
 80065e2:	e4df      	b.n	8005fa4 <_dtoa_r+0xa4>
 80065e4:	465f      	mov	r7, fp
 80065e6:	462b      	mov	r3, r5
 80065e8:	461d      	mov	r5, r3
 80065ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065ee:	2a39      	cmp	r2, #57	; 0x39
 80065f0:	d106      	bne.n	8006600 <_dtoa_r+0x700>
 80065f2:	9a00      	ldr	r2, [sp, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d1f7      	bne.n	80065e8 <_dtoa_r+0x6e8>
 80065f8:	9900      	ldr	r1, [sp, #0]
 80065fa:	2230      	movs	r2, #48	; 0x30
 80065fc:	3701      	adds	r7, #1
 80065fe:	700a      	strb	r2, [r1, #0]
 8006600:	781a      	ldrb	r2, [r3, #0]
 8006602:	3201      	adds	r2, #1
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e790      	b.n	800652a <_dtoa_r+0x62a>
 8006608:	4ba3      	ldr	r3, [pc, #652]	; (8006898 <_dtoa_r+0x998>)
 800660a:	2200      	movs	r2, #0
 800660c:	f7f9 fff4 	bl	80005f8 <__aeabi_dmul>
 8006610:	2200      	movs	r2, #0
 8006612:	2300      	movs	r3, #0
 8006614:	4606      	mov	r6, r0
 8006616:	460f      	mov	r7, r1
 8006618:	f7fa fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800661c:	2800      	cmp	r0, #0
 800661e:	d09e      	beq.n	800655e <_dtoa_r+0x65e>
 8006620:	e7d0      	b.n	80065c4 <_dtoa_r+0x6c4>
 8006622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006624:	2a00      	cmp	r2, #0
 8006626:	f000 80ca 	beq.w	80067be <_dtoa_r+0x8be>
 800662a:	9a07      	ldr	r2, [sp, #28]
 800662c:	2a01      	cmp	r2, #1
 800662e:	f300 80ad 	bgt.w	800678c <_dtoa_r+0x88c>
 8006632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006634:	2a00      	cmp	r2, #0
 8006636:	f000 80a5 	beq.w	8006784 <_dtoa_r+0x884>
 800663a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800663e:	9e08      	ldr	r6, [sp, #32]
 8006640:	9d05      	ldr	r5, [sp, #20]
 8006642:	9a05      	ldr	r2, [sp, #20]
 8006644:	441a      	add	r2, r3
 8006646:	9205      	str	r2, [sp, #20]
 8006648:	9a06      	ldr	r2, [sp, #24]
 800664a:	2101      	movs	r1, #1
 800664c:	441a      	add	r2, r3
 800664e:	4620      	mov	r0, r4
 8006650:	9206      	str	r2, [sp, #24]
 8006652:	f000 fc3d 	bl	8006ed0 <__i2b>
 8006656:	4607      	mov	r7, r0
 8006658:	b165      	cbz	r5, 8006674 <_dtoa_r+0x774>
 800665a:	9b06      	ldr	r3, [sp, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	dd09      	ble.n	8006674 <_dtoa_r+0x774>
 8006660:	42ab      	cmp	r3, r5
 8006662:	9a05      	ldr	r2, [sp, #20]
 8006664:	bfa8      	it	ge
 8006666:	462b      	movge	r3, r5
 8006668:	1ad2      	subs	r2, r2, r3
 800666a:	9205      	str	r2, [sp, #20]
 800666c:	9a06      	ldr	r2, [sp, #24]
 800666e:	1aed      	subs	r5, r5, r3
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	9306      	str	r3, [sp, #24]
 8006674:	9b08      	ldr	r3, [sp, #32]
 8006676:	b1f3      	cbz	r3, 80066b6 <_dtoa_r+0x7b6>
 8006678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 80a3 	beq.w	80067c6 <_dtoa_r+0x8c6>
 8006680:	2e00      	cmp	r6, #0
 8006682:	dd10      	ble.n	80066a6 <_dtoa_r+0x7a6>
 8006684:	4639      	mov	r1, r7
 8006686:	4632      	mov	r2, r6
 8006688:	4620      	mov	r0, r4
 800668a:	f000 fce1 	bl	8007050 <__pow5mult>
 800668e:	4652      	mov	r2, sl
 8006690:	4601      	mov	r1, r0
 8006692:	4607      	mov	r7, r0
 8006694:	4620      	mov	r0, r4
 8006696:	f000 fc31 	bl	8006efc <__multiply>
 800669a:	4651      	mov	r1, sl
 800669c:	4680      	mov	r8, r0
 800669e:	4620      	mov	r0, r4
 80066a0:	f000 fb60 	bl	8006d64 <_Bfree>
 80066a4:	46c2      	mov	sl, r8
 80066a6:	9b08      	ldr	r3, [sp, #32]
 80066a8:	1b9a      	subs	r2, r3, r6
 80066aa:	d004      	beq.n	80066b6 <_dtoa_r+0x7b6>
 80066ac:	4651      	mov	r1, sl
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 fcce 	bl	8007050 <__pow5mult>
 80066b4:	4682      	mov	sl, r0
 80066b6:	2101      	movs	r1, #1
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 fc09 	bl	8006ed0 <__i2b>
 80066be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	4606      	mov	r6, r0
 80066c4:	f340 8081 	ble.w	80067ca <_dtoa_r+0x8ca>
 80066c8:	461a      	mov	r2, r3
 80066ca:	4601      	mov	r1, r0
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 fcbf 	bl	8007050 <__pow5mult>
 80066d2:	9b07      	ldr	r3, [sp, #28]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	4606      	mov	r6, r0
 80066d8:	dd7a      	ble.n	80067d0 <_dtoa_r+0x8d0>
 80066da:	f04f 0800 	mov.w	r8, #0
 80066de:	6933      	ldr	r3, [r6, #16]
 80066e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066e4:	6918      	ldr	r0, [r3, #16]
 80066e6:	f000 fba5 	bl	8006e34 <__hi0bits>
 80066ea:	f1c0 0020 	rsb	r0, r0, #32
 80066ee:	9b06      	ldr	r3, [sp, #24]
 80066f0:	4418      	add	r0, r3
 80066f2:	f010 001f 	ands.w	r0, r0, #31
 80066f6:	f000 8094 	beq.w	8006822 <_dtoa_r+0x922>
 80066fa:	f1c0 0320 	rsb	r3, r0, #32
 80066fe:	2b04      	cmp	r3, #4
 8006700:	f340 8085 	ble.w	800680e <_dtoa_r+0x90e>
 8006704:	9b05      	ldr	r3, [sp, #20]
 8006706:	f1c0 001c 	rsb	r0, r0, #28
 800670a:	4403      	add	r3, r0
 800670c:	9305      	str	r3, [sp, #20]
 800670e:	9b06      	ldr	r3, [sp, #24]
 8006710:	4403      	add	r3, r0
 8006712:	4405      	add	r5, r0
 8006714:	9306      	str	r3, [sp, #24]
 8006716:	9b05      	ldr	r3, [sp, #20]
 8006718:	2b00      	cmp	r3, #0
 800671a:	dd05      	ble.n	8006728 <_dtoa_r+0x828>
 800671c:	4651      	mov	r1, sl
 800671e:	461a      	mov	r2, r3
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fcef 	bl	8007104 <__lshift>
 8006726:	4682      	mov	sl, r0
 8006728:	9b06      	ldr	r3, [sp, #24]
 800672a:	2b00      	cmp	r3, #0
 800672c:	dd05      	ble.n	800673a <_dtoa_r+0x83a>
 800672e:	4631      	mov	r1, r6
 8006730:	461a      	mov	r2, r3
 8006732:	4620      	mov	r0, r4
 8006734:	f000 fce6 	bl	8007104 <__lshift>
 8006738:	4606      	mov	r6, r0
 800673a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800673c:	2b00      	cmp	r3, #0
 800673e:	d072      	beq.n	8006826 <_dtoa_r+0x926>
 8006740:	4631      	mov	r1, r6
 8006742:	4650      	mov	r0, sl
 8006744:	f000 fd4a 	bl	80071dc <__mcmp>
 8006748:	2800      	cmp	r0, #0
 800674a:	da6c      	bge.n	8006826 <_dtoa_r+0x926>
 800674c:	2300      	movs	r3, #0
 800674e:	4651      	mov	r1, sl
 8006750:	220a      	movs	r2, #10
 8006752:	4620      	mov	r0, r4
 8006754:	f000 fb28 	bl	8006da8 <__multadd>
 8006758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800675e:	4682      	mov	sl, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 81b0 	beq.w	8006ac6 <_dtoa_r+0xbc6>
 8006766:	2300      	movs	r3, #0
 8006768:	4639      	mov	r1, r7
 800676a:	220a      	movs	r2, #10
 800676c:	4620      	mov	r0, r4
 800676e:	f000 fb1b 	bl	8006da8 <__multadd>
 8006772:	9b01      	ldr	r3, [sp, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	4607      	mov	r7, r0
 8006778:	f300 8096 	bgt.w	80068a8 <_dtoa_r+0x9a8>
 800677c:	9b07      	ldr	r3, [sp, #28]
 800677e:	2b02      	cmp	r3, #2
 8006780:	dc59      	bgt.n	8006836 <_dtoa_r+0x936>
 8006782:	e091      	b.n	80068a8 <_dtoa_r+0x9a8>
 8006784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800678a:	e758      	b.n	800663e <_dtoa_r+0x73e>
 800678c:	9b04      	ldr	r3, [sp, #16]
 800678e:	1e5e      	subs	r6, r3, #1
 8006790:	9b08      	ldr	r3, [sp, #32]
 8006792:	42b3      	cmp	r3, r6
 8006794:	bfbf      	itttt	lt
 8006796:	9b08      	ldrlt	r3, [sp, #32]
 8006798:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800679a:	9608      	strlt	r6, [sp, #32]
 800679c:	1af3      	sublt	r3, r6, r3
 800679e:	bfb4      	ite	lt
 80067a0:	18d2      	addlt	r2, r2, r3
 80067a2:	1b9e      	subge	r6, r3, r6
 80067a4:	9b04      	ldr	r3, [sp, #16]
 80067a6:	bfbc      	itt	lt
 80067a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80067aa:	2600      	movlt	r6, #0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bfb7      	itett	lt
 80067b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80067b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80067b8:	1a9d      	sublt	r5, r3, r2
 80067ba:	2300      	movlt	r3, #0
 80067bc:	e741      	b.n	8006642 <_dtoa_r+0x742>
 80067be:	9e08      	ldr	r6, [sp, #32]
 80067c0:	9d05      	ldr	r5, [sp, #20]
 80067c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80067c4:	e748      	b.n	8006658 <_dtoa_r+0x758>
 80067c6:	9a08      	ldr	r2, [sp, #32]
 80067c8:	e770      	b.n	80066ac <_dtoa_r+0x7ac>
 80067ca:	9b07      	ldr	r3, [sp, #28]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	dc19      	bgt.n	8006804 <_dtoa_r+0x904>
 80067d0:	9b02      	ldr	r3, [sp, #8]
 80067d2:	b9bb      	cbnz	r3, 8006804 <_dtoa_r+0x904>
 80067d4:	9b03      	ldr	r3, [sp, #12]
 80067d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067da:	b99b      	cbnz	r3, 8006804 <_dtoa_r+0x904>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067e2:	0d1b      	lsrs	r3, r3, #20
 80067e4:	051b      	lsls	r3, r3, #20
 80067e6:	b183      	cbz	r3, 800680a <_dtoa_r+0x90a>
 80067e8:	9b05      	ldr	r3, [sp, #20]
 80067ea:	3301      	adds	r3, #1
 80067ec:	9305      	str	r3, [sp, #20]
 80067ee:	9b06      	ldr	r3, [sp, #24]
 80067f0:	3301      	adds	r3, #1
 80067f2:	9306      	str	r3, [sp, #24]
 80067f4:	f04f 0801 	mov.w	r8, #1
 80067f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f47f af6f 	bne.w	80066de <_dtoa_r+0x7de>
 8006800:	2001      	movs	r0, #1
 8006802:	e774      	b.n	80066ee <_dtoa_r+0x7ee>
 8006804:	f04f 0800 	mov.w	r8, #0
 8006808:	e7f6      	b.n	80067f8 <_dtoa_r+0x8f8>
 800680a:	4698      	mov	r8, r3
 800680c:	e7f4      	b.n	80067f8 <_dtoa_r+0x8f8>
 800680e:	d082      	beq.n	8006716 <_dtoa_r+0x816>
 8006810:	9a05      	ldr	r2, [sp, #20]
 8006812:	331c      	adds	r3, #28
 8006814:	441a      	add	r2, r3
 8006816:	9205      	str	r2, [sp, #20]
 8006818:	9a06      	ldr	r2, [sp, #24]
 800681a:	441a      	add	r2, r3
 800681c:	441d      	add	r5, r3
 800681e:	9206      	str	r2, [sp, #24]
 8006820:	e779      	b.n	8006716 <_dtoa_r+0x816>
 8006822:	4603      	mov	r3, r0
 8006824:	e7f4      	b.n	8006810 <_dtoa_r+0x910>
 8006826:	9b04      	ldr	r3, [sp, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	dc37      	bgt.n	800689c <_dtoa_r+0x99c>
 800682c:	9b07      	ldr	r3, [sp, #28]
 800682e:	2b02      	cmp	r3, #2
 8006830:	dd34      	ble.n	800689c <_dtoa_r+0x99c>
 8006832:	9b04      	ldr	r3, [sp, #16]
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	9b01      	ldr	r3, [sp, #4]
 8006838:	b963      	cbnz	r3, 8006854 <_dtoa_r+0x954>
 800683a:	4631      	mov	r1, r6
 800683c:	2205      	movs	r2, #5
 800683e:	4620      	mov	r0, r4
 8006840:	f000 fab2 	bl	8006da8 <__multadd>
 8006844:	4601      	mov	r1, r0
 8006846:	4606      	mov	r6, r0
 8006848:	4650      	mov	r0, sl
 800684a:	f000 fcc7 	bl	80071dc <__mcmp>
 800684e:	2800      	cmp	r0, #0
 8006850:	f73f adbb 	bgt.w	80063ca <_dtoa_r+0x4ca>
 8006854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006856:	9d00      	ldr	r5, [sp, #0]
 8006858:	ea6f 0b03 	mvn.w	fp, r3
 800685c:	f04f 0800 	mov.w	r8, #0
 8006860:	4631      	mov	r1, r6
 8006862:	4620      	mov	r0, r4
 8006864:	f000 fa7e 	bl	8006d64 <_Bfree>
 8006868:	2f00      	cmp	r7, #0
 800686a:	f43f aeab 	beq.w	80065c4 <_dtoa_r+0x6c4>
 800686e:	f1b8 0f00 	cmp.w	r8, #0
 8006872:	d005      	beq.n	8006880 <_dtoa_r+0x980>
 8006874:	45b8      	cmp	r8, r7
 8006876:	d003      	beq.n	8006880 <_dtoa_r+0x980>
 8006878:	4641      	mov	r1, r8
 800687a:	4620      	mov	r0, r4
 800687c:	f000 fa72 	bl	8006d64 <_Bfree>
 8006880:	4639      	mov	r1, r7
 8006882:	4620      	mov	r0, r4
 8006884:	f000 fa6e 	bl	8006d64 <_Bfree>
 8006888:	e69c      	b.n	80065c4 <_dtoa_r+0x6c4>
 800688a:	2600      	movs	r6, #0
 800688c:	4637      	mov	r7, r6
 800688e:	e7e1      	b.n	8006854 <_dtoa_r+0x954>
 8006890:	46bb      	mov	fp, r7
 8006892:	4637      	mov	r7, r6
 8006894:	e599      	b.n	80063ca <_dtoa_r+0x4ca>
 8006896:	bf00      	nop
 8006898:	40240000 	.word	0x40240000
 800689c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80c8 	beq.w	8006a34 <_dtoa_r+0xb34>
 80068a4:	9b04      	ldr	r3, [sp, #16]
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	2d00      	cmp	r5, #0
 80068aa:	dd05      	ble.n	80068b8 <_dtoa_r+0x9b8>
 80068ac:	4639      	mov	r1, r7
 80068ae:	462a      	mov	r2, r5
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fc27 	bl	8007104 <__lshift>
 80068b6:	4607      	mov	r7, r0
 80068b8:	f1b8 0f00 	cmp.w	r8, #0
 80068bc:	d05b      	beq.n	8006976 <_dtoa_r+0xa76>
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	4620      	mov	r0, r4
 80068c2:	f000 fa0f 	bl	8006ce4 <_Balloc>
 80068c6:	4605      	mov	r5, r0
 80068c8:	b928      	cbnz	r0, 80068d6 <_dtoa_r+0x9d6>
 80068ca:	4b83      	ldr	r3, [pc, #524]	; (8006ad8 <_dtoa_r+0xbd8>)
 80068cc:	4602      	mov	r2, r0
 80068ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80068d2:	f7ff bb2e 	b.w	8005f32 <_dtoa_r+0x32>
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	3202      	adds	r2, #2
 80068da:	0092      	lsls	r2, r2, #2
 80068dc:	f107 010c 	add.w	r1, r7, #12
 80068e0:	300c      	adds	r0, #12
 80068e2:	f000 ffab 	bl	800783c <memcpy>
 80068e6:	2201      	movs	r2, #1
 80068e8:	4629      	mov	r1, r5
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 fc0a 	bl	8007104 <__lshift>
 80068f0:	9b00      	ldr	r3, [sp, #0]
 80068f2:	3301      	adds	r3, #1
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068fa:	4413      	add	r3, r2
 80068fc:	9308      	str	r3, [sp, #32]
 80068fe:	9b02      	ldr	r3, [sp, #8]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	46b8      	mov	r8, r7
 8006906:	9306      	str	r3, [sp, #24]
 8006908:	4607      	mov	r7, r0
 800690a:	9b04      	ldr	r3, [sp, #16]
 800690c:	4631      	mov	r1, r6
 800690e:	3b01      	subs	r3, #1
 8006910:	4650      	mov	r0, sl
 8006912:	9301      	str	r3, [sp, #4]
 8006914:	f7ff fa69 	bl	8005dea <quorem>
 8006918:	4641      	mov	r1, r8
 800691a:	9002      	str	r0, [sp, #8]
 800691c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006920:	4650      	mov	r0, sl
 8006922:	f000 fc5b 	bl	80071dc <__mcmp>
 8006926:	463a      	mov	r2, r7
 8006928:	9005      	str	r0, [sp, #20]
 800692a:	4631      	mov	r1, r6
 800692c:	4620      	mov	r0, r4
 800692e:	f000 fc71 	bl	8007214 <__mdiff>
 8006932:	68c2      	ldr	r2, [r0, #12]
 8006934:	4605      	mov	r5, r0
 8006936:	bb02      	cbnz	r2, 800697a <_dtoa_r+0xa7a>
 8006938:	4601      	mov	r1, r0
 800693a:	4650      	mov	r0, sl
 800693c:	f000 fc4e 	bl	80071dc <__mcmp>
 8006940:	4602      	mov	r2, r0
 8006942:	4629      	mov	r1, r5
 8006944:	4620      	mov	r0, r4
 8006946:	9209      	str	r2, [sp, #36]	; 0x24
 8006948:	f000 fa0c 	bl	8006d64 <_Bfree>
 800694c:	9b07      	ldr	r3, [sp, #28]
 800694e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006950:	9d04      	ldr	r5, [sp, #16]
 8006952:	ea43 0102 	orr.w	r1, r3, r2
 8006956:	9b06      	ldr	r3, [sp, #24]
 8006958:	4319      	orrs	r1, r3
 800695a:	d110      	bne.n	800697e <_dtoa_r+0xa7e>
 800695c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006960:	d029      	beq.n	80069b6 <_dtoa_r+0xab6>
 8006962:	9b05      	ldr	r3, [sp, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	dd02      	ble.n	800696e <_dtoa_r+0xa6e>
 8006968:	9b02      	ldr	r3, [sp, #8]
 800696a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800696e:	9b01      	ldr	r3, [sp, #4]
 8006970:	f883 9000 	strb.w	r9, [r3]
 8006974:	e774      	b.n	8006860 <_dtoa_r+0x960>
 8006976:	4638      	mov	r0, r7
 8006978:	e7ba      	b.n	80068f0 <_dtoa_r+0x9f0>
 800697a:	2201      	movs	r2, #1
 800697c:	e7e1      	b.n	8006942 <_dtoa_r+0xa42>
 800697e:	9b05      	ldr	r3, [sp, #20]
 8006980:	2b00      	cmp	r3, #0
 8006982:	db04      	blt.n	800698e <_dtoa_r+0xa8e>
 8006984:	9907      	ldr	r1, [sp, #28]
 8006986:	430b      	orrs	r3, r1
 8006988:	9906      	ldr	r1, [sp, #24]
 800698a:	430b      	orrs	r3, r1
 800698c:	d120      	bne.n	80069d0 <_dtoa_r+0xad0>
 800698e:	2a00      	cmp	r2, #0
 8006990:	dded      	ble.n	800696e <_dtoa_r+0xa6e>
 8006992:	4651      	mov	r1, sl
 8006994:	2201      	movs	r2, #1
 8006996:	4620      	mov	r0, r4
 8006998:	f000 fbb4 	bl	8007104 <__lshift>
 800699c:	4631      	mov	r1, r6
 800699e:	4682      	mov	sl, r0
 80069a0:	f000 fc1c 	bl	80071dc <__mcmp>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	dc03      	bgt.n	80069b0 <_dtoa_r+0xab0>
 80069a8:	d1e1      	bne.n	800696e <_dtoa_r+0xa6e>
 80069aa:	f019 0f01 	tst.w	r9, #1
 80069ae:	d0de      	beq.n	800696e <_dtoa_r+0xa6e>
 80069b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069b4:	d1d8      	bne.n	8006968 <_dtoa_r+0xa68>
 80069b6:	9a01      	ldr	r2, [sp, #4]
 80069b8:	2339      	movs	r3, #57	; 0x39
 80069ba:	7013      	strb	r3, [r2, #0]
 80069bc:	462b      	mov	r3, r5
 80069be:	461d      	mov	r5, r3
 80069c0:	3b01      	subs	r3, #1
 80069c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069c6:	2a39      	cmp	r2, #57	; 0x39
 80069c8:	d06c      	beq.n	8006aa4 <_dtoa_r+0xba4>
 80069ca:	3201      	adds	r2, #1
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	e747      	b.n	8006860 <_dtoa_r+0x960>
 80069d0:	2a00      	cmp	r2, #0
 80069d2:	dd07      	ble.n	80069e4 <_dtoa_r+0xae4>
 80069d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069d8:	d0ed      	beq.n	80069b6 <_dtoa_r+0xab6>
 80069da:	9a01      	ldr	r2, [sp, #4]
 80069dc:	f109 0301 	add.w	r3, r9, #1
 80069e0:	7013      	strb	r3, [r2, #0]
 80069e2:	e73d      	b.n	8006860 <_dtoa_r+0x960>
 80069e4:	9b04      	ldr	r3, [sp, #16]
 80069e6:	9a08      	ldr	r2, [sp, #32]
 80069e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d043      	beq.n	8006a78 <_dtoa_r+0xb78>
 80069f0:	4651      	mov	r1, sl
 80069f2:	2300      	movs	r3, #0
 80069f4:	220a      	movs	r2, #10
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 f9d6 	bl	8006da8 <__multadd>
 80069fc:	45b8      	cmp	r8, r7
 80069fe:	4682      	mov	sl, r0
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	f04f 020a 	mov.w	r2, #10
 8006a08:	4641      	mov	r1, r8
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	d107      	bne.n	8006a1e <_dtoa_r+0xb1e>
 8006a0e:	f000 f9cb 	bl	8006da8 <__multadd>
 8006a12:	4680      	mov	r8, r0
 8006a14:	4607      	mov	r7, r0
 8006a16:	9b04      	ldr	r3, [sp, #16]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	9304      	str	r3, [sp, #16]
 8006a1c:	e775      	b.n	800690a <_dtoa_r+0xa0a>
 8006a1e:	f000 f9c3 	bl	8006da8 <__multadd>
 8006a22:	4639      	mov	r1, r7
 8006a24:	4680      	mov	r8, r0
 8006a26:	2300      	movs	r3, #0
 8006a28:	220a      	movs	r2, #10
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f000 f9bc 	bl	8006da8 <__multadd>
 8006a30:	4607      	mov	r7, r0
 8006a32:	e7f0      	b.n	8006a16 <_dtoa_r+0xb16>
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	9d00      	ldr	r5, [sp, #0]
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4650      	mov	r0, sl
 8006a3e:	f7ff f9d4 	bl	8005dea <quorem>
 8006a42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a46:	9b00      	ldr	r3, [sp, #0]
 8006a48:	f805 9b01 	strb.w	r9, [r5], #1
 8006a4c:	1aea      	subs	r2, r5, r3
 8006a4e:	9b01      	ldr	r3, [sp, #4]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	dd07      	ble.n	8006a64 <_dtoa_r+0xb64>
 8006a54:	4651      	mov	r1, sl
 8006a56:	2300      	movs	r3, #0
 8006a58:	220a      	movs	r2, #10
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 f9a4 	bl	8006da8 <__multadd>
 8006a60:	4682      	mov	sl, r0
 8006a62:	e7ea      	b.n	8006a3a <_dtoa_r+0xb3a>
 8006a64:	9b01      	ldr	r3, [sp, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bfc8      	it	gt
 8006a6a:	461d      	movgt	r5, r3
 8006a6c:	9b00      	ldr	r3, [sp, #0]
 8006a6e:	bfd8      	it	le
 8006a70:	2501      	movle	r5, #1
 8006a72:	441d      	add	r5, r3
 8006a74:	f04f 0800 	mov.w	r8, #0
 8006a78:	4651      	mov	r1, sl
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 fb41 	bl	8007104 <__lshift>
 8006a82:	4631      	mov	r1, r6
 8006a84:	4682      	mov	sl, r0
 8006a86:	f000 fba9 	bl	80071dc <__mcmp>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	dc96      	bgt.n	80069bc <_dtoa_r+0xabc>
 8006a8e:	d102      	bne.n	8006a96 <_dtoa_r+0xb96>
 8006a90:	f019 0f01 	tst.w	r9, #1
 8006a94:	d192      	bne.n	80069bc <_dtoa_r+0xabc>
 8006a96:	462b      	mov	r3, r5
 8006a98:	461d      	mov	r5, r3
 8006a9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a9e:	2a30      	cmp	r2, #48	; 0x30
 8006aa0:	d0fa      	beq.n	8006a98 <_dtoa_r+0xb98>
 8006aa2:	e6dd      	b.n	8006860 <_dtoa_r+0x960>
 8006aa4:	9a00      	ldr	r2, [sp, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d189      	bne.n	80069be <_dtoa_r+0xabe>
 8006aaa:	f10b 0b01 	add.w	fp, fp, #1
 8006aae:	2331      	movs	r3, #49	; 0x31
 8006ab0:	e796      	b.n	80069e0 <_dtoa_r+0xae0>
 8006ab2:	4b0a      	ldr	r3, [pc, #40]	; (8006adc <_dtoa_r+0xbdc>)
 8006ab4:	f7ff ba99 	b.w	8005fea <_dtoa_r+0xea>
 8006ab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f47f aa6d 	bne.w	8005f9a <_dtoa_r+0x9a>
 8006ac0:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <_dtoa_r+0xbe0>)
 8006ac2:	f7ff ba92 	b.w	8005fea <_dtoa_r+0xea>
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	dcb5      	bgt.n	8006a38 <_dtoa_r+0xb38>
 8006acc:	9b07      	ldr	r3, [sp, #28]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	f73f aeb1 	bgt.w	8006836 <_dtoa_r+0x936>
 8006ad4:	e7b0      	b.n	8006a38 <_dtoa_r+0xb38>
 8006ad6:	bf00      	nop
 8006ad8:	080082e0 	.word	0x080082e0
 8006adc:	08008240 	.word	0x08008240
 8006ae0:	08008264 	.word	0x08008264

08006ae4 <_free_r>:
 8006ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ae6:	2900      	cmp	r1, #0
 8006ae8:	d044      	beq.n	8006b74 <_free_r+0x90>
 8006aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aee:	9001      	str	r0, [sp, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f1a1 0404 	sub.w	r4, r1, #4
 8006af6:	bfb8      	it	lt
 8006af8:	18e4      	addlt	r4, r4, r3
 8006afa:	f000 f8e7 	bl	8006ccc <__malloc_lock>
 8006afe:	4a1e      	ldr	r2, [pc, #120]	; (8006b78 <_free_r+0x94>)
 8006b00:	9801      	ldr	r0, [sp, #4]
 8006b02:	6813      	ldr	r3, [r2, #0]
 8006b04:	b933      	cbnz	r3, 8006b14 <_free_r+0x30>
 8006b06:	6063      	str	r3, [r4, #4]
 8006b08:	6014      	str	r4, [r2, #0]
 8006b0a:	b003      	add	sp, #12
 8006b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b10:	f000 b8e2 	b.w	8006cd8 <__malloc_unlock>
 8006b14:	42a3      	cmp	r3, r4
 8006b16:	d908      	bls.n	8006b2a <_free_r+0x46>
 8006b18:	6825      	ldr	r5, [r4, #0]
 8006b1a:	1961      	adds	r1, r4, r5
 8006b1c:	428b      	cmp	r3, r1
 8006b1e:	bf01      	itttt	eq
 8006b20:	6819      	ldreq	r1, [r3, #0]
 8006b22:	685b      	ldreq	r3, [r3, #4]
 8006b24:	1949      	addeq	r1, r1, r5
 8006b26:	6021      	streq	r1, [r4, #0]
 8006b28:	e7ed      	b.n	8006b06 <_free_r+0x22>
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	b10b      	cbz	r3, 8006b34 <_free_r+0x50>
 8006b30:	42a3      	cmp	r3, r4
 8006b32:	d9fa      	bls.n	8006b2a <_free_r+0x46>
 8006b34:	6811      	ldr	r1, [r2, #0]
 8006b36:	1855      	adds	r5, r2, r1
 8006b38:	42a5      	cmp	r5, r4
 8006b3a:	d10b      	bne.n	8006b54 <_free_r+0x70>
 8006b3c:	6824      	ldr	r4, [r4, #0]
 8006b3e:	4421      	add	r1, r4
 8006b40:	1854      	adds	r4, r2, r1
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	6011      	str	r1, [r2, #0]
 8006b46:	d1e0      	bne.n	8006b0a <_free_r+0x26>
 8006b48:	681c      	ldr	r4, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	6053      	str	r3, [r2, #4]
 8006b4e:	440c      	add	r4, r1
 8006b50:	6014      	str	r4, [r2, #0]
 8006b52:	e7da      	b.n	8006b0a <_free_r+0x26>
 8006b54:	d902      	bls.n	8006b5c <_free_r+0x78>
 8006b56:	230c      	movs	r3, #12
 8006b58:	6003      	str	r3, [r0, #0]
 8006b5a:	e7d6      	b.n	8006b0a <_free_r+0x26>
 8006b5c:	6825      	ldr	r5, [r4, #0]
 8006b5e:	1961      	adds	r1, r4, r5
 8006b60:	428b      	cmp	r3, r1
 8006b62:	bf04      	itt	eq
 8006b64:	6819      	ldreq	r1, [r3, #0]
 8006b66:	685b      	ldreq	r3, [r3, #4]
 8006b68:	6063      	str	r3, [r4, #4]
 8006b6a:	bf04      	itt	eq
 8006b6c:	1949      	addeq	r1, r1, r5
 8006b6e:	6021      	streq	r1, [r4, #0]
 8006b70:	6054      	str	r4, [r2, #4]
 8006b72:	e7ca      	b.n	8006b0a <_free_r+0x26>
 8006b74:	b003      	add	sp, #12
 8006b76:	bd30      	pop	{r4, r5, pc}
 8006b78:	200007fc 	.word	0x200007fc

08006b7c <malloc>:
 8006b7c:	4b02      	ldr	r3, [pc, #8]	; (8006b88 <malloc+0xc>)
 8006b7e:	4601      	mov	r1, r0
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	f000 b823 	b.w	8006bcc <_malloc_r>
 8006b86:	bf00      	nop
 8006b88:	20000064 	.word	0x20000064

08006b8c <sbrk_aligned>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4e0e      	ldr	r6, [pc, #56]	; (8006bc8 <sbrk_aligned+0x3c>)
 8006b90:	460c      	mov	r4, r1
 8006b92:	6831      	ldr	r1, [r6, #0]
 8006b94:	4605      	mov	r5, r0
 8006b96:	b911      	cbnz	r1, 8006b9e <sbrk_aligned+0x12>
 8006b98:	f000 fe40 	bl	800781c <_sbrk_r>
 8006b9c:	6030      	str	r0, [r6, #0]
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	f000 fe3b 	bl	800781c <_sbrk_r>
 8006ba6:	1c43      	adds	r3, r0, #1
 8006ba8:	d00a      	beq.n	8006bc0 <sbrk_aligned+0x34>
 8006baa:	1cc4      	adds	r4, r0, #3
 8006bac:	f024 0403 	bic.w	r4, r4, #3
 8006bb0:	42a0      	cmp	r0, r4
 8006bb2:	d007      	beq.n	8006bc4 <sbrk_aligned+0x38>
 8006bb4:	1a21      	subs	r1, r4, r0
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f000 fe30 	bl	800781c <_sbrk_r>
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d101      	bne.n	8006bc4 <sbrk_aligned+0x38>
 8006bc0:	f04f 34ff 	mov.w	r4, #4294967295
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	bd70      	pop	{r4, r5, r6, pc}
 8006bc8:	20000800 	.word	0x20000800

08006bcc <_malloc_r>:
 8006bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd0:	1ccd      	adds	r5, r1, #3
 8006bd2:	f025 0503 	bic.w	r5, r5, #3
 8006bd6:	3508      	adds	r5, #8
 8006bd8:	2d0c      	cmp	r5, #12
 8006bda:	bf38      	it	cc
 8006bdc:	250c      	movcc	r5, #12
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	4607      	mov	r7, r0
 8006be2:	db01      	blt.n	8006be8 <_malloc_r+0x1c>
 8006be4:	42a9      	cmp	r1, r5
 8006be6:	d905      	bls.n	8006bf4 <_malloc_r+0x28>
 8006be8:	230c      	movs	r3, #12
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	2600      	movs	r6, #0
 8006bee:	4630      	mov	r0, r6
 8006bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006cc8 <_malloc_r+0xfc>
 8006bf8:	f000 f868 	bl	8006ccc <__malloc_lock>
 8006bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8006c00:	461c      	mov	r4, r3
 8006c02:	bb5c      	cbnz	r4, 8006c5c <_malloc_r+0x90>
 8006c04:	4629      	mov	r1, r5
 8006c06:	4638      	mov	r0, r7
 8006c08:	f7ff ffc0 	bl	8006b8c <sbrk_aligned>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	4604      	mov	r4, r0
 8006c10:	d155      	bne.n	8006cbe <_malloc_r+0xf2>
 8006c12:	f8d8 4000 	ldr.w	r4, [r8]
 8006c16:	4626      	mov	r6, r4
 8006c18:	2e00      	cmp	r6, #0
 8006c1a:	d145      	bne.n	8006ca8 <_malloc_r+0xdc>
 8006c1c:	2c00      	cmp	r4, #0
 8006c1e:	d048      	beq.n	8006cb2 <_malloc_r+0xe6>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	4631      	mov	r1, r6
 8006c24:	4638      	mov	r0, r7
 8006c26:	eb04 0903 	add.w	r9, r4, r3
 8006c2a:	f000 fdf7 	bl	800781c <_sbrk_r>
 8006c2e:	4581      	cmp	r9, r0
 8006c30:	d13f      	bne.n	8006cb2 <_malloc_r+0xe6>
 8006c32:	6821      	ldr	r1, [r4, #0]
 8006c34:	1a6d      	subs	r5, r5, r1
 8006c36:	4629      	mov	r1, r5
 8006c38:	4638      	mov	r0, r7
 8006c3a:	f7ff ffa7 	bl	8006b8c <sbrk_aligned>
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d037      	beq.n	8006cb2 <_malloc_r+0xe6>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	442b      	add	r3, r5
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	f8d8 3000 	ldr.w	r3, [r8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d038      	beq.n	8006cc2 <_malloc_r+0xf6>
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	42a2      	cmp	r2, r4
 8006c54:	d12b      	bne.n	8006cae <_malloc_r+0xe2>
 8006c56:	2200      	movs	r2, #0
 8006c58:	605a      	str	r2, [r3, #4]
 8006c5a:	e00f      	b.n	8006c7c <_malloc_r+0xb0>
 8006c5c:	6822      	ldr	r2, [r4, #0]
 8006c5e:	1b52      	subs	r2, r2, r5
 8006c60:	d41f      	bmi.n	8006ca2 <_malloc_r+0xd6>
 8006c62:	2a0b      	cmp	r2, #11
 8006c64:	d917      	bls.n	8006c96 <_malloc_r+0xca>
 8006c66:	1961      	adds	r1, r4, r5
 8006c68:	42a3      	cmp	r3, r4
 8006c6a:	6025      	str	r5, [r4, #0]
 8006c6c:	bf18      	it	ne
 8006c6e:	6059      	strne	r1, [r3, #4]
 8006c70:	6863      	ldr	r3, [r4, #4]
 8006c72:	bf08      	it	eq
 8006c74:	f8c8 1000 	streq.w	r1, [r8]
 8006c78:	5162      	str	r2, [r4, r5]
 8006c7a:	604b      	str	r3, [r1, #4]
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	f104 060b 	add.w	r6, r4, #11
 8006c82:	f000 f829 	bl	8006cd8 <__malloc_unlock>
 8006c86:	f026 0607 	bic.w	r6, r6, #7
 8006c8a:	1d23      	adds	r3, r4, #4
 8006c8c:	1af2      	subs	r2, r6, r3
 8006c8e:	d0ae      	beq.n	8006bee <_malloc_r+0x22>
 8006c90:	1b9b      	subs	r3, r3, r6
 8006c92:	50a3      	str	r3, [r4, r2]
 8006c94:	e7ab      	b.n	8006bee <_malloc_r+0x22>
 8006c96:	42a3      	cmp	r3, r4
 8006c98:	6862      	ldr	r2, [r4, #4]
 8006c9a:	d1dd      	bne.n	8006c58 <_malloc_r+0x8c>
 8006c9c:	f8c8 2000 	str.w	r2, [r8]
 8006ca0:	e7ec      	b.n	8006c7c <_malloc_r+0xb0>
 8006ca2:	4623      	mov	r3, r4
 8006ca4:	6864      	ldr	r4, [r4, #4]
 8006ca6:	e7ac      	b.n	8006c02 <_malloc_r+0x36>
 8006ca8:	4634      	mov	r4, r6
 8006caa:	6876      	ldr	r6, [r6, #4]
 8006cac:	e7b4      	b.n	8006c18 <_malloc_r+0x4c>
 8006cae:	4613      	mov	r3, r2
 8006cb0:	e7cc      	b.n	8006c4c <_malloc_r+0x80>
 8006cb2:	230c      	movs	r3, #12
 8006cb4:	603b      	str	r3, [r7, #0]
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	f000 f80e 	bl	8006cd8 <__malloc_unlock>
 8006cbc:	e797      	b.n	8006bee <_malloc_r+0x22>
 8006cbe:	6025      	str	r5, [r4, #0]
 8006cc0:	e7dc      	b.n	8006c7c <_malloc_r+0xb0>
 8006cc2:	605b      	str	r3, [r3, #4]
 8006cc4:	deff      	udf	#255	; 0xff
 8006cc6:	bf00      	nop
 8006cc8:	200007fc 	.word	0x200007fc

08006ccc <__malloc_lock>:
 8006ccc:	4801      	ldr	r0, [pc, #4]	; (8006cd4 <__malloc_lock+0x8>)
 8006cce:	f7ff b88a 	b.w	8005de6 <__retarget_lock_acquire_recursive>
 8006cd2:	bf00      	nop
 8006cd4:	200007f8 	.word	0x200007f8

08006cd8 <__malloc_unlock>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	; (8006ce0 <__malloc_unlock+0x8>)
 8006cda:	f7ff b885 	b.w	8005de8 <__retarget_lock_release_recursive>
 8006cde:	bf00      	nop
 8006ce0:	200007f8 	.word	0x200007f8

08006ce4 <_Balloc>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	69c6      	ldr	r6, [r0, #28]
 8006ce8:	4604      	mov	r4, r0
 8006cea:	460d      	mov	r5, r1
 8006cec:	b976      	cbnz	r6, 8006d0c <_Balloc+0x28>
 8006cee:	2010      	movs	r0, #16
 8006cf0:	f7ff ff44 	bl	8006b7c <malloc>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	61e0      	str	r0, [r4, #28]
 8006cf8:	b920      	cbnz	r0, 8006d04 <_Balloc+0x20>
 8006cfa:	4b18      	ldr	r3, [pc, #96]	; (8006d5c <_Balloc+0x78>)
 8006cfc:	4818      	ldr	r0, [pc, #96]	; (8006d60 <_Balloc+0x7c>)
 8006cfe:	216b      	movs	r1, #107	; 0x6b
 8006d00:	f000 fdaa 	bl	8007858 <__assert_func>
 8006d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d08:	6006      	str	r6, [r0, #0]
 8006d0a:	60c6      	str	r6, [r0, #12]
 8006d0c:	69e6      	ldr	r6, [r4, #28]
 8006d0e:	68f3      	ldr	r3, [r6, #12]
 8006d10:	b183      	cbz	r3, 8006d34 <_Balloc+0x50>
 8006d12:	69e3      	ldr	r3, [r4, #28]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d1a:	b9b8      	cbnz	r0, 8006d4c <_Balloc+0x68>
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	fa01 f605 	lsl.w	r6, r1, r5
 8006d22:	1d72      	adds	r2, r6, #5
 8006d24:	0092      	lsls	r2, r2, #2
 8006d26:	4620      	mov	r0, r4
 8006d28:	f000 fdb4 	bl	8007894 <_calloc_r>
 8006d2c:	b160      	cbz	r0, 8006d48 <_Balloc+0x64>
 8006d2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d32:	e00e      	b.n	8006d52 <_Balloc+0x6e>
 8006d34:	2221      	movs	r2, #33	; 0x21
 8006d36:	2104      	movs	r1, #4
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 fdab 	bl	8007894 <_calloc_r>
 8006d3e:	69e3      	ldr	r3, [r4, #28]
 8006d40:	60f0      	str	r0, [r6, #12]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e4      	bne.n	8006d12 <_Balloc+0x2e>
 8006d48:	2000      	movs	r0, #0
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	6802      	ldr	r2, [r0, #0]
 8006d4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d52:	2300      	movs	r3, #0
 8006d54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d58:	e7f7      	b.n	8006d4a <_Balloc+0x66>
 8006d5a:	bf00      	nop
 8006d5c:	08008271 	.word	0x08008271
 8006d60:	080082f1 	.word	0x080082f1

08006d64 <_Bfree>:
 8006d64:	b570      	push	{r4, r5, r6, lr}
 8006d66:	69c6      	ldr	r6, [r0, #28]
 8006d68:	4605      	mov	r5, r0
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	b976      	cbnz	r6, 8006d8c <_Bfree+0x28>
 8006d6e:	2010      	movs	r0, #16
 8006d70:	f7ff ff04 	bl	8006b7c <malloc>
 8006d74:	4602      	mov	r2, r0
 8006d76:	61e8      	str	r0, [r5, #28]
 8006d78:	b920      	cbnz	r0, 8006d84 <_Bfree+0x20>
 8006d7a:	4b09      	ldr	r3, [pc, #36]	; (8006da0 <_Bfree+0x3c>)
 8006d7c:	4809      	ldr	r0, [pc, #36]	; (8006da4 <_Bfree+0x40>)
 8006d7e:	218f      	movs	r1, #143	; 0x8f
 8006d80:	f000 fd6a 	bl	8007858 <__assert_func>
 8006d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d88:	6006      	str	r6, [r0, #0]
 8006d8a:	60c6      	str	r6, [r0, #12]
 8006d8c:	b13c      	cbz	r4, 8006d9e <_Bfree+0x3a>
 8006d8e:	69eb      	ldr	r3, [r5, #28]
 8006d90:	6862      	ldr	r2, [r4, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d98:	6021      	str	r1, [r4, #0]
 8006d9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	08008271 	.word	0x08008271
 8006da4:	080082f1 	.word	0x080082f1

08006da8 <__multadd>:
 8006da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dac:	690d      	ldr	r5, [r1, #16]
 8006dae:	4607      	mov	r7, r0
 8006db0:	460c      	mov	r4, r1
 8006db2:	461e      	mov	r6, r3
 8006db4:	f101 0c14 	add.w	ip, r1, #20
 8006db8:	2000      	movs	r0, #0
 8006dba:	f8dc 3000 	ldr.w	r3, [ip]
 8006dbe:	b299      	uxth	r1, r3
 8006dc0:	fb02 6101 	mla	r1, r2, r1, r6
 8006dc4:	0c1e      	lsrs	r6, r3, #16
 8006dc6:	0c0b      	lsrs	r3, r1, #16
 8006dc8:	fb02 3306 	mla	r3, r2, r6, r3
 8006dcc:	b289      	uxth	r1, r1
 8006dce:	3001      	adds	r0, #1
 8006dd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006dd4:	4285      	cmp	r5, r0
 8006dd6:	f84c 1b04 	str.w	r1, [ip], #4
 8006dda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006dde:	dcec      	bgt.n	8006dba <__multadd+0x12>
 8006de0:	b30e      	cbz	r6, 8006e26 <__multadd+0x7e>
 8006de2:	68a3      	ldr	r3, [r4, #8]
 8006de4:	42ab      	cmp	r3, r5
 8006de6:	dc19      	bgt.n	8006e1c <__multadd+0x74>
 8006de8:	6861      	ldr	r1, [r4, #4]
 8006dea:	4638      	mov	r0, r7
 8006dec:	3101      	adds	r1, #1
 8006dee:	f7ff ff79 	bl	8006ce4 <_Balloc>
 8006df2:	4680      	mov	r8, r0
 8006df4:	b928      	cbnz	r0, 8006e02 <__multadd+0x5a>
 8006df6:	4602      	mov	r2, r0
 8006df8:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <__multadd+0x84>)
 8006dfa:	480d      	ldr	r0, [pc, #52]	; (8006e30 <__multadd+0x88>)
 8006dfc:	21ba      	movs	r1, #186	; 0xba
 8006dfe:	f000 fd2b 	bl	8007858 <__assert_func>
 8006e02:	6922      	ldr	r2, [r4, #16]
 8006e04:	3202      	adds	r2, #2
 8006e06:	f104 010c 	add.w	r1, r4, #12
 8006e0a:	0092      	lsls	r2, r2, #2
 8006e0c:	300c      	adds	r0, #12
 8006e0e:	f000 fd15 	bl	800783c <memcpy>
 8006e12:	4621      	mov	r1, r4
 8006e14:	4638      	mov	r0, r7
 8006e16:	f7ff ffa5 	bl	8006d64 <_Bfree>
 8006e1a:	4644      	mov	r4, r8
 8006e1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e20:	3501      	adds	r5, #1
 8006e22:	615e      	str	r6, [r3, #20]
 8006e24:	6125      	str	r5, [r4, #16]
 8006e26:	4620      	mov	r0, r4
 8006e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e2c:	080082e0 	.word	0x080082e0
 8006e30:	080082f1 	.word	0x080082f1

08006e34 <__hi0bits>:
 8006e34:	0c03      	lsrs	r3, r0, #16
 8006e36:	041b      	lsls	r3, r3, #16
 8006e38:	b9d3      	cbnz	r3, 8006e70 <__hi0bits+0x3c>
 8006e3a:	0400      	lsls	r0, r0, #16
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e42:	bf04      	itt	eq
 8006e44:	0200      	lsleq	r0, r0, #8
 8006e46:	3308      	addeq	r3, #8
 8006e48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e4c:	bf04      	itt	eq
 8006e4e:	0100      	lsleq	r0, r0, #4
 8006e50:	3304      	addeq	r3, #4
 8006e52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e56:	bf04      	itt	eq
 8006e58:	0080      	lsleq	r0, r0, #2
 8006e5a:	3302      	addeq	r3, #2
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	db05      	blt.n	8006e6c <__hi0bits+0x38>
 8006e60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e64:	f103 0301 	add.w	r3, r3, #1
 8006e68:	bf08      	it	eq
 8006e6a:	2320      	moveq	r3, #32
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	4770      	bx	lr
 8006e70:	2300      	movs	r3, #0
 8006e72:	e7e4      	b.n	8006e3e <__hi0bits+0xa>

08006e74 <__lo0bits>:
 8006e74:	6803      	ldr	r3, [r0, #0]
 8006e76:	f013 0207 	ands.w	r2, r3, #7
 8006e7a:	d00c      	beq.n	8006e96 <__lo0bits+0x22>
 8006e7c:	07d9      	lsls	r1, r3, #31
 8006e7e:	d422      	bmi.n	8006ec6 <__lo0bits+0x52>
 8006e80:	079a      	lsls	r2, r3, #30
 8006e82:	bf49      	itett	mi
 8006e84:	085b      	lsrmi	r3, r3, #1
 8006e86:	089b      	lsrpl	r3, r3, #2
 8006e88:	6003      	strmi	r3, [r0, #0]
 8006e8a:	2201      	movmi	r2, #1
 8006e8c:	bf5c      	itt	pl
 8006e8e:	6003      	strpl	r3, [r0, #0]
 8006e90:	2202      	movpl	r2, #2
 8006e92:	4610      	mov	r0, r2
 8006e94:	4770      	bx	lr
 8006e96:	b299      	uxth	r1, r3
 8006e98:	b909      	cbnz	r1, 8006e9e <__lo0bits+0x2a>
 8006e9a:	0c1b      	lsrs	r3, r3, #16
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	b2d9      	uxtb	r1, r3
 8006ea0:	b909      	cbnz	r1, 8006ea6 <__lo0bits+0x32>
 8006ea2:	3208      	adds	r2, #8
 8006ea4:	0a1b      	lsrs	r3, r3, #8
 8006ea6:	0719      	lsls	r1, r3, #28
 8006ea8:	bf04      	itt	eq
 8006eaa:	091b      	lsreq	r3, r3, #4
 8006eac:	3204      	addeq	r2, #4
 8006eae:	0799      	lsls	r1, r3, #30
 8006eb0:	bf04      	itt	eq
 8006eb2:	089b      	lsreq	r3, r3, #2
 8006eb4:	3202      	addeq	r2, #2
 8006eb6:	07d9      	lsls	r1, r3, #31
 8006eb8:	d403      	bmi.n	8006ec2 <__lo0bits+0x4e>
 8006eba:	085b      	lsrs	r3, r3, #1
 8006ebc:	f102 0201 	add.w	r2, r2, #1
 8006ec0:	d003      	beq.n	8006eca <__lo0bits+0x56>
 8006ec2:	6003      	str	r3, [r0, #0]
 8006ec4:	e7e5      	b.n	8006e92 <__lo0bits+0x1e>
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	e7e3      	b.n	8006e92 <__lo0bits+0x1e>
 8006eca:	2220      	movs	r2, #32
 8006ecc:	e7e1      	b.n	8006e92 <__lo0bits+0x1e>
	...

08006ed0 <__i2b>:
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	f7ff ff05 	bl	8006ce4 <_Balloc>
 8006eda:	4602      	mov	r2, r0
 8006edc:	b928      	cbnz	r0, 8006eea <__i2b+0x1a>
 8006ede:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <__i2b+0x24>)
 8006ee0:	4805      	ldr	r0, [pc, #20]	; (8006ef8 <__i2b+0x28>)
 8006ee2:	f240 1145 	movw	r1, #325	; 0x145
 8006ee6:	f000 fcb7 	bl	8007858 <__assert_func>
 8006eea:	2301      	movs	r3, #1
 8006eec:	6144      	str	r4, [r0, #20]
 8006eee:	6103      	str	r3, [r0, #16]
 8006ef0:	bd10      	pop	{r4, pc}
 8006ef2:	bf00      	nop
 8006ef4:	080082e0 	.word	0x080082e0
 8006ef8:	080082f1 	.word	0x080082f1

08006efc <__multiply>:
 8006efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f00:	4691      	mov	r9, r2
 8006f02:	690a      	ldr	r2, [r1, #16]
 8006f04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	bfb8      	it	lt
 8006f0c:	460b      	movlt	r3, r1
 8006f0e:	460c      	mov	r4, r1
 8006f10:	bfbc      	itt	lt
 8006f12:	464c      	movlt	r4, r9
 8006f14:	4699      	movlt	r9, r3
 8006f16:	6927      	ldr	r7, [r4, #16]
 8006f18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f1c:	68a3      	ldr	r3, [r4, #8]
 8006f1e:	6861      	ldr	r1, [r4, #4]
 8006f20:	eb07 060a 	add.w	r6, r7, sl
 8006f24:	42b3      	cmp	r3, r6
 8006f26:	b085      	sub	sp, #20
 8006f28:	bfb8      	it	lt
 8006f2a:	3101      	addlt	r1, #1
 8006f2c:	f7ff feda 	bl	8006ce4 <_Balloc>
 8006f30:	b930      	cbnz	r0, 8006f40 <__multiply+0x44>
 8006f32:	4602      	mov	r2, r0
 8006f34:	4b44      	ldr	r3, [pc, #272]	; (8007048 <__multiply+0x14c>)
 8006f36:	4845      	ldr	r0, [pc, #276]	; (800704c <__multiply+0x150>)
 8006f38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006f3c:	f000 fc8c 	bl	8007858 <__assert_func>
 8006f40:	f100 0514 	add.w	r5, r0, #20
 8006f44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f48:	462b      	mov	r3, r5
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4543      	cmp	r3, r8
 8006f4e:	d321      	bcc.n	8006f94 <__multiply+0x98>
 8006f50:	f104 0314 	add.w	r3, r4, #20
 8006f54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f58:	f109 0314 	add.w	r3, r9, #20
 8006f5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f60:	9202      	str	r2, [sp, #8]
 8006f62:	1b3a      	subs	r2, r7, r4
 8006f64:	3a15      	subs	r2, #21
 8006f66:	f022 0203 	bic.w	r2, r2, #3
 8006f6a:	3204      	adds	r2, #4
 8006f6c:	f104 0115 	add.w	r1, r4, #21
 8006f70:	428f      	cmp	r7, r1
 8006f72:	bf38      	it	cc
 8006f74:	2204      	movcc	r2, #4
 8006f76:	9201      	str	r2, [sp, #4]
 8006f78:	9a02      	ldr	r2, [sp, #8]
 8006f7a:	9303      	str	r3, [sp, #12]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d80c      	bhi.n	8006f9a <__multiply+0x9e>
 8006f80:	2e00      	cmp	r6, #0
 8006f82:	dd03      	ble.n	8006f8c <__multiply+0x90>
 8006f84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d05b      	beq.n	8007044 <__multiply+0x148>
 8006f8c:	6106      	str	r6, [r0, #16]
 8006f8e:	b005      	add	sp, #20
 8006f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f94:	f843 2b04 	str.w	r2, [r3], #4
 8006f98:	e7d8      	b.n	8006f4c <__multiply+0x50>
 8006f9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f9e:	f1ba 0f00 	cmp.w	sl, #0
 8006fa2:	d024      	beq.n	8006fee <__multiply+0xf2>
 8006fa4:	f104 0e14 	add.w	lr, r4, #20
 8006fa8:	46a9      	mov	r9, r5
 8006faa:	f04f 0c00 	mov.w	ip, #0
 8006fae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006fb2:	f8d9 1000 	ldr.w	r1, [r9]
 8006fb6:	fa1f fb82 	uxth.w	fp, r2
 8006fba:	b289      	uxth	r1, r1
 8006fbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8006fc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006fc4:	f8d9 2000 	ldr.w	r2, [r9]
 8006fc8:	4461      	add	r1, ip
 8006fca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fce:	fb0a c20b 	mla	r2, sl, fp, ip
 8006fd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006fd6:	b289      	uxth	r1, r1
 8006fd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006fdc:	4577      	cmp	r7, lr
 8006fde:	f849 1b04 	str.w	r1, [r9], #4
 8006fe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fe6:	d8e2      	bhi.n	8006fae <__multiply+0xb2>
 8006fe8:	9a01      	ldr	r2, [sp, #4]
 8006fea:	f845 c002 	str.w	ip, [r5, r2]
 8006fee:	9a03      	ldr	r2, [sp, #12]
 8006ff0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	f1b9 0f00 	cmp.w	r9, #0
 8006ffa:	d021      	beq.n	8007040 <__multiply+0x144>
 8006ffc:	6829      	ldr	r1, [r5, #0]
 8006ffe:	f104 0c14 	add.w	ip, r4, #20
 8007002:	46ae      	mov	lr, r5
 8007004:	f04f 0a00 	mov.w	sl, #0
 8007008:	f8bc b000 	ldrh.w	fp, [ip]
 800700c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007010:	fb09 220b 	mla	r2, r9, fp, r2
 8007014:	4452      	add	r2, sl
 8007016:	b289      	uxth	r1, r1
 8007018:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800701c:	f84e 1b04 	str.w	r1, [lr], #4
 8007020:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007024:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007028:	f8be 1000 	ldrh.w	r1, [lr]
 800702c:	fb09 110a 	mla	r1, r9, sl, r1
 8007030:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007034:	4567      	cmp	r7, ip
 8007036:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800703a:	d8e5      	bhi.n	8007008 <__multiply+0x10c>
 800703c:	9a01      	ldr	r2, [sp, #4]
 800703e:	50a9      	str	r1, [r5, r2]
 8007040:	3504      	adds	r5, #4
 8007042:	e799      	b.n	8006f78 <__multiply+0x7c>
 8007044:	3e01      	subs	r6, #1
 8007046:	e79b      	b.n	8006f80 <__multiply+0x84>
 8007048:	080082e0 	.word	0x080082e0
 800704c:	080082f1 	.word	0x080082f1

08007050 <__pow5mult>:
 8007050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007054:	4615      	mov	r5, r2
 8007056:	f012 0203 	ands.w	r2, r2, #3
 800705a:	4606      	mov	r6, r0
 800705c:	460f      	mov	r7, r1
 800705e:	d007      	beq.n	8007070 <__pow5mult+0x20>
 8007060:	4c25      	ldr	r4, [pc, #148]	; (80070f8 <__pow5mult+0xa8>)
 8007062:	3a01      	subs	r2, #1
 8007064:	2300      	movs	r3, #0
 8007066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800706a:	f7ff fe9d 	bl	8006da8 <__multadd>
 800706e:	4607      	mov	r7, r0
 8007070:	10ad      	asrs	r5, r5, #2
 8007072:	d03d      	beq.n	80070f0 <__pow5mult+0xa0>
 8007074:	69f4      	ldr	r4, [r6, #28]
 8007076:	b97c      	cbnz	r4, 8007098 <__pow5mult+0x48>
 8007078:	2010      	movs	r0, #16
 800707a:	f7ff fd7f 	bl	8006b7c <malloc>
 800707e:	4602      	mov	r2, r0
 8007080:	61f0      	str	r0, [r6, #28]
 8007082:	b928      	cbnz	r0, 8007090 <__pow5mult+0x40>
 8007084:	4b1d      	ldr	r3, [pc, #116]	; (80070fc <__pow5mult+0xac>)
 8007086:	481e      	ldr	r0, [pc, #120]	; (8007100 <__pow5mult+0xb0>)
 8007088:	f240 11b3 	movw	r1, #435	; 0x1b3
 800708c:	f000 fbe4 	bl	8007858 <__assert_func>
 8007090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007094:	6004      	str	r4, [r0, #0]
 8007096:	60c4      	str	r4, [r0, #12]
 8007098:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800709c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070a0:	b94c      	cbnz	r4, 80070b6 <__pow5mult+0x66>
 80070a2:	f240 2171 	movw	r1, #625	; 0x271
 80070a6:	4630      	mov	r0, r6
 80070a8:	f7ff ff12 	bl	8006ed0 <__i2b>
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80070b2:	4604      	mov	r4, r0
 80070b4:	6003      	str	r3, [r0, #0]
 80070b6:	f04f 0900 	mov.w	r9, #0
 80070ba:	07eb      	lsls	r3, r5, #31
 80070bc:	d50a      	bpl.n	80070d4 <__pow5mult+0x84>
 80070be:	4639      	mov	r1, r7
 80070c0:	4622      	mov	r2, r4
 80070c2:	4630      	mov	r0, r6
 80070c4:	f7ff ff1a 	bl	8006efc <__multiply>
 80070c8:	4639      	mov	r1, r7
 80070ca:	4680      	mov	r8, r0
 80070cc:	4630      	mov	r0, r6
 80070ce:	f7ff fe49 	bl	8006d64 <_Bfree>
 80070d2:	4647      	mov	r7, r8
 80070d4:	106d      	asrs	r5, r5, #1
 80070d6:	d00b      	beq.n	80070f0 <__pow5mult+0xa0>
 80070d8:	6820      	ldr	r0, [r4, #0]
 80070da:	b938      	cbnz	r0, 80070ec <__pow5mult+0x9c>
 80070dc:	4622      	mov	r2, r4
 80070de:	4621      	mov	r1, r4
 80070e0:	4630      	mov	r0, r6
 80070e2:	f7ff ff0b 	bl	8006efc <__multiply>
 80070e6:	6020      	str	r0, [r4, #0]
 80070e8:	f8c0 9000 	str.w	r9, [r0]
 80070ec:	4604      	mov	r4, r0
 80070ee:	e7e4      	b.n	80070ba <__pow5mult+0x6a>
 80070f0:	4638      	mov	r0, r7
 80070f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070f6:	bf00      	nop
 80070f8:	08008440 	.word	0x08008440
 80070fc:	08008271 	.word	0x08008271
 8007100:	080082f1 	.word	0x080082f1

08007104 <__lshift>:
 8007104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	460c      	mov	r4, r1
 800710a:	6849      	ldr	r1, [r1, #4]
 800710c:	6923      	ldr	r3, [r4, #16]
 800710e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007112:	68a3      	ldr	r3, [r4, #8]
 8007114:	4607      	mov	r7, r0
 8007116:	4691      	mov	r9, r2
 8007118:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800711c:	f108 0601 	add.w	r6, r8, #1
 8007120:	42b3      	cmp	r3, r6
 8007122:	db0b      	blt.n	800713c <__lshift+0x38>
 8007124:	4638      	mov	r0, r7
 8007126:	f7ff fddd 	bl	8006ce4 <_Balloc>
 800712a:	4605      	mov	r5, r0
 800712c:	b948      	cbnz	r0, 8007142 <__lshift+0x3e>
 800712e:	4602      	mov	r2, r0
 8007130:	4b28      	ldr	r3, [pc, #160]	; (80071d4 <__lshift+0xd0>)
 8007132:	4829      	ldr	r0, [pc, #164]	; (80071d8 <__lshift+0xd4>)
 8007134:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007138:	f000 fb8e 	bl	8007858 <__assert_func>
 800713c:	3101      	adds	r1, #1
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	e7ee      	b.n	8007120 <__lshift+0x1c>
 8007142:	2300      	movs	r3, #0
 8007144:	f100 0114 	add.w	r1, r0, #20
 8007148:	f100 0210 	add.w	r2, r0, #16
 800714c:	4618      	mov	r0, r3
 800714e:	4553      	cmp	r3, sl
 8007150:	db33      	blt.n	80071ba <__lshift+0xb6>
 8007152:	6920      	ldr	r0, [r4, #16]
 8007154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007158:	f104 0314 	add.w	r3, r4, #20
 800715c:	f019 091f 	ands.w	r9, r9, #31
 8007160:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007164:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007168:	d02b      	beq.n	80071c2 <__lshift+0xbe>
 800716a:	f1c9 0e20 	rsb	lr, r9, #32
 800716e:	468a      	mov	sl, r1
 8007170:	2200      	movs	r2, #0
 8007172:	6818      	ldr	r0, [r3, #0]
 8007174:	fa00 f009 	lsl.w	r0, r0, r9
 8007178:	4310      	orrs	r0, r2
 800717a:	f84a 0b04 	str.w	r0, [sl], #4
 800717e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007182:	459c      	cmp	ip, r3
 8007184:	fa22 f20e 	lsr.w	r2, r2, lr
 8007188:	d8f3      	bhi.n	8007172 <__lshift+0x6e>
 800718a:	ebac 0304 	sub.w	r3, ip, r4
 800718e:	3b15      	subs	r3, #21
 8007190:	f023 0303 	bic.w	r3, r3, #3
 8007194:	3304      	adds	r3, #4
 8007196:	f104 0015 	add.w	r0, r4, #21
 800719a:	4584      	cmp	ip, r0
 800719c:	bf38      	it	cc
 800719e:	2304      	movcc	r3, #4
 80071a0:	50ca      	str	r2, [r1, r3]
 80071a2:	b10a      	cbz	r2, 80071a8 <__lshift+0xa4>
 80071a4:	f108 0602 	add.w	r6, r8, #2
 80071a8:	3e01      	subs	r6, #1
 80071aa:	4638      	mov	r0, r7
 80071ac:	612e      	str	r6, [r5, #16]
 80071ae:	4621      	mov	r1, r4
 80071b0:	f7ff fdd8 	bl	8006d64 <_Bfree>
 80071b4:	4628      	mov	r0, r5
 80071b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80071be:	3301      	adds	r3, #1
 80071c0:	e7c5      	b.n	800714e <__lshift+0x4a>
 80071c2:	3904      	subs	r1, #4
 80071c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80071cc:	459c      	cmp	ip, r3
 80071ce:	d8f9      	bhi.n	80071c4 <__lshift+0xc0>
 80071d0:	e7ea      	b.n	80071a8 <__lshift+0xa4>
 80071d2:	bf00      	nop
 80071d4:	080082e0 	.word	0x080082e0
 80071d8:	080082f1 	.word	0x080082f1

080071dc <__mcmp>:
 80071dc:	b530      	push	{r4, r5, lr}
 80071de:	6902      	ldr	r2, [r0, #16]
 80071e0:	690c      	ldr	r4, [r1, #16]
 80071e2:	1b12      	subs	r2, r2, r4
 80071e4:	d10e      	bne.n	8007204 <__mcmp+0x28>
 80071e6:	f100 0314 	add.w	r3, r0, #20
 80071ea:	3114      	adds	r1, #20
 80071ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80071f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80071f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80071f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80071fc:	42a5      	cmp	r5, r4
 80071fe:	d003      	beq.n	8007208 <__mcmp+0x2c>
 8007200:	d305      	bcc.n	800720e <__mcmp+0x32>
 8007202:	2201      	movs	r2, #1
 8007204:	4610      	mov	r0, r2
 8007206:	bd30      	pop	{r4, r5, pc}
 8007208:	4283      	cmp	r3, r0
 800720a:	d3f3      	bcc.n	80071f4 <__mcmp+0x18>
 800720c:	e7fa      	b.n	8007204 <__mcmp+0x28>
 800720e:	f04f 32ff 	mov.w	r2, #4294967295
 8007212:	e7f7      	b.n	8007204 <__mcmp+0x28>

08007214 <__mdiff>:
 8007214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	460c      	mov	r4, r1
 800721a:	4606      	mov	r6, r0
 800721c:	4611      	mov	r1, r2
 800721e:	4620      	mov	r0, r4
 8007220:	4690      	mov	r8, r2
 8007222:	f7ff ffdb 	bl	80071dc <__mcmp>
 8007226:	1e05      	subs	r5, r0, #0
 8007228:	d110      	bne.n	800724c <__mdiff+0x38>
 800722a:	4629      	mov	r1, r5
 800722c:	4630      	mov	r0, r6
 800722e:	f7ff fd59 	bl	8006ce4 <_Balloc>
 8007232:	b930      	cbnz	r0, 8007242 <__mdiff+0x2e>
 8007234:	4b3a      	ldr	r3, [pc, #232]	; (8007320 <__mdiff+0x10c>)
 8007236:	4602      	mov	r2, r0
 8007238:	f240 2137 	movw	r1, #567	; 0x237
 800723c:	4839      	ldr	r0, [pc, #228]	; (8007324 <__mdiff+0x110>)
 800723e:	f000 fb0b 	bl	8007858 <__assert_func>
 8007242:	2301      	movs	r3, #1
 8007244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724c:	bfa4      	itt	ge
 800724e:	4643      	movge	r3, r8
 8007250:	46a0      	movge	r8, r4
 8007252:	4630      	mov	r0, r6
 8007254:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007258:	bfa6      	itte	ge
 800725a:	461c      	movge	r4, r3
 800725c:	2500      	movge	r5, #0
 800725e:	2501      	movlt	r5, #1
 8007260:	f7ff fd40 	bl	8006ce4 <_Balloc>
 8007264:	b920      	cbnz	r0, 8007270 <__mdiff+0x5c>
 8007266:	4b2e      	ldr	r3, [pc, #184]	; (8007320 <__mdiff+0x10c>)
 8007268:	4602      	mov	r2, r0
 800726a:	f240 2145 	movw	r1, #581	; 0x245
 800726e:	e7e5      	b.n	800723c <__mdiff+0x28>
 8007270:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007274:	6926      	ldr	r6, [r4, #16]
 8007276:	60c5      	str	r5, [r0, #12]
 8007278:	f104 0914 	add.w	r9, r4, #20
 800727c:	f108 0514 	add.w	r5, r8, #20
 8007280:	f100 0e14 	add.w	lr, r0, #20
 8007284:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007288:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800728c:	f108 0210 	add.w	r2, r8, #16
 8007290:	46f2      	mov	sl, lr
 8007292:	2100      	movs	r1, #0
 8007294:	f859 3b04 	ldr.w	r3, [r9], #4
 8007298:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800729c:	fa11 f88b 	uxtah	r8, r1, fp
 80072a0:	b299      	uxth	r1, r3
 80072a2:	0c1b      	lsrs	r3, r3, #16
 80072a4:	eba8 0801 	sub.w	r8, r8, r1
 80072a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072b0:	fa1f f888 	uxth.w	r8, r8
 80072b4:	1419      	asrs	r1, r3, #16
 80072b6:	454e      	cmp	r6, r9
 80072b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80072bc:	f84a 3b04 	str.w	r3, [sl], #4
 80072c0:	d8e8      	bhi.n	8007294 <__mdiff+0x80>
 80072c2:	1b33      	subs	r3, r6, r4
 80072c4:	3b15      	subs	r3, #21
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	3304      	adds	r3, #4
 80072cc:	3415      	adds	r4, #21
 80072ce:	42a6      	cmp	r6, r4
 80072d0:	bf38      	it	cc
 80072d2:	2304      	movcc	r3, #4
 80072d4:	441d      	add	r5, r3
 80072d6:	4473      	add	r3, lr
 80072d8:	469e      	mov	lr, r3
 80072da:	462e      	mov	r6, r5
 80072dc:	4566      	cmp	r6, ip
 80072de:	d30e      	bcc.n	80072fe <__mdiff+0xea>
 80072e0:	f10c 0203 	add.w	r2, ip, #3
 80072e4:	1b52      	subs	r2, r2, r5
 80072e6:	f022 0203 	bic.w	r2, r2, #3
 80072ea:	3d03      	subs	r5, #3
 80072ec:	45ac      	cmp	ip, r5
 80072ee:	bf38      	it	cc
 80072f0:	2200      	movcc	r2, #0
 80072f2:	4413      	add	r3, r2
 80072f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80072f8:	b17a      	cbz	r2, 800731a <__mdiff+0x106>
 80072fa:	6107      	str	r7, [r0, #16]
 80072fc:	e7a4      	b.n	8007248 <__mdiff+0x34>
 80072fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8007302:	fa11 f288 	uxtah	r2, r1, r8
 8007306:	1414      	asrs	r4, r2, #16
 8007308:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800730c:	b292      	uxth	r2, r2
 800730e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007312:	f84e 2b04 	str.w	r2, [lr], #4
 8007316:	1421      	asrs	r1, r4, #16
 8007318:	e7e0      	b.n	80072dc <__mdiff+0xc8>
 800731a:	3f01      	subs	r7, #1
 800731c:	e7ea      	b.n	80072f4 <__mdiff+0xe0>
 800731e:	bf00      	nop
 8007320:	080082e0 	.word	0x080082e0
 8007324:	080082f1 	.word	0x080082f1

08007328 <__d2b>:
 8007328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800732c:	460f      	mov	r7, r1
 800732e:	2101      	movs	r1, #1
 8007330:	ec59 8b10 	vmov	r8, r9, d0
 8007334:	4616      	mov	r6, r2
 8007336:	f7ff fcd5 	bl	8006ce4 <_Balloc>
 800733a:	4604      	mov	r4, r0
 800733c:	b930      	cbnz	r0, 800734c <__d2b+0x24>
 800733e:	4602      	mov	r2, r0
 8007340:	4b24      	ldr	r3, [pc, #144]	; (80073d4 <__d2b+0xac>)
 8007342:	4825      	ldr	r0, [pc, #148]	; (80073d8 <__d2b+0xb0>)
 8007344:	f240 310f 	movw	r1, #783	; 0x30f
 8007348:	f000 fa86 	bl	8007858 <__assert_func>
 800734c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007354:	bb2d      	cbnz	r5, 80073a2 <__d2b+0x7a>
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	f1b8 0300 	subs.w	r3, r8, #0
 800735c:	d026      	beq.n	80073ac <__d2b+0x84>
 800735e:	4668      	mov	r0, sp
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	f7ff fd87 	bl	8006e74 <__lo0bits>
 8007366:	e9dd 1200 	ldrd	r1, r2, [sp]
 800736a:	b1e8      	cbz	r0, 80073a8 <__d2b+0x80>
 800736c:	f1c0 0320 	rsb	r3, r0, #32
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	430b      	orrs	r3, r1
 8007376:	40c2      	lsrs	r2, r0
 8007378:	6163      	str	r3, [r4, #20]
 800737a:	9201      	str	r2, [sp, #4]
 800737c:	9b01      	ldr	r3, [sp, #4]
 800737e:	61a3      	str	r3, [r4, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf14      	ite	ne
 8007384:	2202      	movne	r2, #2
 8007386:	2201      	moveq	r2, #1
 8007388:	6122      	str	r2, [r4, #16]
 800738a:	b1bd      	cbz	r5, 80073bc <__d2b+0x94>
 800738c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007390:	4405      	add	r5, r0
 8007392:	603d      	str	r5, [r7, #0]
 8007394:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007398:	6030      	str	r0, [r6, #0]
 800739a:	4620      	mov	r0, r4
 800739c:	b003      	add	sp, #12
 800739e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073a6:	e7d6      	b.n	8007356 <__d2b+0x2e>
 80073a8:	6161      	str	r1, [r4, #20]
 80073aa:	e7e7      	b.n	800737c <__d2b+0x54>
 80073ac:	a801      	add	r0, sp, #4
 80073ae:	f7ff fd61 	bl	8006e74 <__lo0bits>
 80073b2:	9b01      	ldr	r3, [sp, #4]
 80073b4:	6163      	str	r3, [r4, #20]
 80073b6:	3020      	adds	r0, #32
 80073b8:	2201      	movs	r2, #1
 80073ba:	e7e5      	b.n	8007388 <__d2b+0x60>
 80073bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073c4:	6038      	str	r0, [r7, #0]
 80073c6:	6918      	ldr	r0, [r3, #16]
 80073c8:	f7ff fd34 	bl	8006e34 <__hi0bits>
 80073cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073d0:	e7e2      	b.n	8007398 <__d2b+0x70>
 80073d2:	bf00      	nop
 80073d4:	080082e0 	.word	0x080082e0
 80073d8:	080082f1 	.word	0x080082f1

080073dc <__ssputs_r>:
 80073dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e0:	688e      	ldr	r6, [r1, #8]
 80073e2:	461f      	mov	r7, r3
 80073e4:	42be      	cmp	r6, r7
 80073e6:	680b      	ldr	r3, [r1, #0]
 80073e8:	4682      	mov	sl, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	4690      	mov	r8, r2
 80073ee:	d82c      	bhi.n	800744a <__ssputs_r+0x6e>
 80073f0:	898a      	ldrh	r2, [r1, #12]
 80073f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073f6:	d026      	beq.n	8007446 <__ssputs_r+0x6a>
 80073f8:	6965      	ldr	r5, [r4, #20]
 80073fa:	6909      	ldr	r1, [r1, #16]
 80073fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007400:	eba3 0901 	sub.w	r9, r3, r1
 8007404:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007408:	1c7b      	adds	r3, r7, #1
 800740a:	444b      	add	r3, r9
 800740c:	106d      	asrs	r5, r5, #1
 800740e:	429d      	cmp	r5, r3
 8007410:	bf38      	it	cc
 8007412:	461d      	movcc	r5, r3
 8007414:	0553      	lsls	r3, r2, #21
 8007416:	d527      	bpl.n	8007468 <__ssputs_r+0x8c>
 8007418:	4629      	mov	r1, r5
 800741a:	f7ff fbd7 	bl	8006bcc <_malloc_r>
 800741e:	4606      	mov	r6, r0
 8007420:	b360      	cbz	r0, 800747c <__ssputs_r+0xa0>
 8007422:	6921      	ldr	r1, [r4, #16]
 8007424:	464a      	mov	r2, r9
 8007426:	f000 fa09 	bl	800783c <memcpy>
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007434:	81a3      	strh	r3, [r4, #12]
 8007436:	6126      	str	r6, [r4, #16]
 8007438:	6165      	str	r5, [r4, #20]
 800743a:	444e      	add	r6, r9
 800743c:	eba5 0509 	sub.w	r5, r5, r9
 8007440:	6026      	str	r6, [r4, #0]
 8007442:	60a5      	str	r5, [r4, #8]
 8007444:	463e      	mov	r6, r7
 8007446:	42be      	cmp	r6, r7
 8007448:	d900      	bls.n	800744c <__ssputs_r+0x70>
 800744a:	463e      	mov	r6, r7
 800744c:	6820      	ldr	r0, [r4, #0]
 800744e:	4632      	mov	r2, r6
 8007450:	4641      	mov	r1, r8
 8007452:	f000 f9c9 	bl	80077e8 <memmove>
 8007456:	68a3      	ldr	r3, [r4, #8]
 8007458:	1b9b      	subs	r3, r3, r6
 800745a:	60a3      	str	r3, [r4, #8]
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	4433      	add	r3, r6
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	2000      	movs	r0, #0
 8007464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007468:	462a      	mov	r2, r5
 800746a:	f000 fa3b 	bl	80078e4 <_realloc_r>
 800746e:	4606      	mov	r6, r0
 8007470:	2800      	cmp	r0, #0
 8007472:	d1e0      	bne.n	8007436 <__ssputs_r+0x5a>
 8007474:	6921      	ldr	r1, [r4, #16]
 8007476:	4650      	mov	r0, sl
 8007478:	f7ff fb34 	bl	8006ae4 <_free_r>
 800747c:	230c      	movs	r3, #12
 800747e:	f8ca 3000 	str.w	r3, [sl]
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007488:	81a3      	strh	r3, [r4, #12]
 800748a:	f04f 30ff 	mov.w	r0, #4294967295
 800748e:	e7e9      	b.n	8007464 <__ssputs_r+0x88>

08007490 <_svfiprintf_r>:
 8007490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	4698      	mov	r8, r3
 8007496:	898b      	ldrh	r3, [r1, #12]
 8007498:	061b      	lsls	r3, r3, #24
 800749a:	b09d      	sub	sp, #116	; 0x74
 800749c:	4607      	mov	r7, r0
 800749e:	460d      	mov	r5, r1
 80074a0:	4614      	mov	r4, r2
 80074a2:	d50e      	bpl.n	80074c2 <_svfiprintf_r+0x32>
 80074a4:	690b      	ldr	r3, [r1, #16]
 80074a6:	b963      	cbnz	r3, 80074c2 <_svfiprintf_r+0x32>
 80074a8:	2140      	movs	r1, #64	; 0x40
 80074aa:	f7ff fb8f 	bl	8006bcc <_malloc_r>
 80074ae:	6028      	str	r0, [r5, #0]
 80074b0:	6128      	str	r0, [r5, #16]
 80074b2:	b920      	cbnz	r0, 80074be <_svfiprintf_r+0x2e>
 80074b4:	230c      	movs	r3, #12
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	f04f 30ff 	mov.w	r0, #4294967295
 80074bc:	e0d0      	b.n	8007660 <_svfiprintf_r+0x1d0>
 80074be:	2340      	movs	r3, #64	; 0x40
 80074c0:	616b      	str	r3, [r5, #20]
 80074c2:	2300      	movs	r3, #0
 80074c4:	9309      	str	r3, [sp, #36]	; 0x24
 80074c6:	2320      	movs	r3, #32
 80074c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80074d0:	2330      	movs	r3, #48	; 0x30
 80074d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007678 <_svfiprintf_r+0x1e8>
 80074d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074da:	f04f 0901 	mov.w	r9, #1
 80074de:	4623      	mov	r3, r4
 80074e0:	469a      	mov	sl, r3
 80074e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074e6:	b10a      	cbz	r2, 80074ec <_svfiprintf_r+0x5c>
 80074e8:	2a25      	cmp	r2, #37	; 0x25
 80074ea:	d1f9      	bne.n	80074e0 <_svfiprintf_r+0x50>
 80074ec:	ebba 0b04 	subs.w	fp, sl, r4
 80074f0:	d00b      	beq.n	800750a <_svfiprintf_r+0x7a>
 80074f2:	465b      	mov	r3, fp
 80074f4:	4622      	mov	r2, r4
 80074f6:	4629      	mov	r1, r5
 80074f8:	4638      	mov	r0, r7
 80074fa:	f7ff ff6f 	bl	80073dc <__ssputs_r>
 80074fe:	3001      	adds	r0, #1
 8007500:	f000 80a9 	beq.w	8007656 <_svfiprintf_r+0x1c6>
 8007504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007506:	445a      	add	r2, fp
 8007508:	9209      	str	r2, [sp, #36]	; 0x24
 800750a:	f89a 3000 	ldrb.w	r3, [sl]
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 80a1 	beq.w	8007656 <_svfiprintf_r+0x1c6>
 8007514:	2300      	movs	r3, #0
 8007516:	f04f 32ff 	mov.w	r2, #4294967295
 800751a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800751e:	f10a 0a01 	add.w	sl, sl, #1
 8007522:	9304      	str	r3, [sp, #16]
 8007524:	9307      	str	r3, [sp, #28]
 8007526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800752a:	931a      	str	r3, [sp, #104]	; 0x68
 800752c:	4654      	mov	r4, sl
 800752e:	2205      	movs	r2, #5
 8007530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007534:	4850      	ldr	r0, [pc, #320]	; (8007678 <_svfiprintf_r+0x1e8>)
 8007536:	f7f8 fe4b 	bl	80001d0 <memchr>
 800753a:	9a04      	ldr	r2, [sp, #16]
 800753c:	b9d8      	cbnz	r0, 8007576 <_svfiprintf_r+0xe6>
 800753e:	06d0      	lsls	r0, r2, #27
 8007540:	bf44      	itt	mi
 8007542:	2320      	movmi	r3, #32
 8007544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007548:	0711      	lsls	r1, r2, #28
 800754a:	bf44      	itt	mi
 800754c:	232b      	movmi	r3, #43	; 0x2b
 800754e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007552:	f89a 3000 	ldrb.w	r3, [sl]
 8007556:	2b2a      	cmp	r3, #42	; 0x2a
 8007558:	d015      	beq.n	8007586 <_svfiprintf_r+0xf6>
 800755a:	9a07      	ldr	r2, [sp, #28]
 800755c:	4654      	mov	r4, sl
 800755e:	2000      	movs	r0, #0
 8007560:	f04f 0c0a 	mov.w	ip, #10
 8007564:	4621      	mov	r1, r4
 8007566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800756a:	3b30      	subs	r3, #48	; 0x30
 800756c:	2b09      	cmp	r3, #9
 800756e:	d94d      	bls.n	800760c <_svfiprintf_r+0x17c>
 8007570:	b1b0      	cbz	r0, 80075a0 <_svfiprintf_r+0x110>
 8007572:	9207      	str	r2, [sp, #28]
 8007574:	e014      	b.n	80075a0 <_svfiprintf_r+0x110>
 8007576:	eba0 0308 	sub.w	r3, r0, r8
 800757a:	fa09 f303 	lsl.w	r3, r9, r3
 800757e:	4313      	orrs	r3, r2
 8007580:	9304      	str	r3, [sp, #16]
 8007582:	46a2      	mov	sl, r4
 8007584:	e7d2      	b.n	800752c <_svfiprintf_r+0x9c>
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	1d19      	adds	r1, r3, #4
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	9103      	str	r1, [sp, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	bfbb      	ittet	lt
 8007592:	425b      	neglt	r3, r3
 8007594:	f042 0202 	orrlt.w	r2, r2, #2
 8007598:	9307      	strge	r3, [sp, #28]
 800759a:	9307      	strlt	r3, [sp, #28]
 800759c:	bfb8      	it	lt
 800759e:	9204      	strlt	r2, [sp, #16]
 80075a0:	7823      	ldrb	r3, [r4, #0]
 80075a2:	2b2e      	cmp	r3, #46	; 0x2e
 80075a4:	d10c      	bne.n	80075c0 <_svfiprintf_r+0x130>
 80075a6:	7863      	ldrb	r3, [r4, #1]
 80075a8:	2b2a      	cmp	r3, #42	; 0x2a
 80075aa:	d134      	bne.n	8007616 <_svfiprintf_r+0x186>
 80075ac:	9b03      	ldr	r3, [sp, #12]
 80075ae:	1d1a      	adds	r2, r3, #4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	9203      	str	r2, [sp, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bfb8      	it	lt
 80075b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80075bc:	3402      	adds	r4, #2
 80075be:	9305      	str	r3, [sp, #20]
 80075c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007688 <_svfiprintf_r+0x1f8>
 80075c4:	7821      	ldrb	r1, [r4, #0]
 80075c6:	2203      	movs	r2, #3
 80075c8:	4650      	mov	r0, sl
 80075ca:	f7f8 fe01 	bl	80001d0 <memchr>
 80075ce:	b138      	cbz	r0, 80075e0 <_svfiprintf_r+0x150>
 80075d0:	9b04      	ldr	r3, [sp, #16]
 80075d2:	eba0 000a 	sub.w	r0, r0, sl
 80075d6:	2240      	movs	r2, #64	; 0x40
 80075d8:	4082      	lsls	r2, r0
 80075da:	4313      	orrs	r3, r2
 80075dc:	3401      	adds	r4, #1
 80075de:	9304      	str	r3, [sp, #16]
 80075e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e4:	4825      	ldr	r0, [pc, #148]	; (800767c <_svfiprintf_r+0x1ec>)
 80075e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075ea:	2206      	movs	r2, #6
 80075ec:	f7f8 fdf0 	bl	80001d0 <memchr>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d038      	beq.n	8007666 <_svfiprintf_r+0x1d6>
 80075f4:	4b22      	ldr	r3, [pc, #136]	; (8007680 <_svfiprintf_r+0x1f0>)
 80075f6:	bb1b      	cbnz	r3, 8007640 <_svfiprintf_r+0x1b0>
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	3307      	adds	r3, #7
 80075fc:	f023 0307 	bic.w	r3, r3, #7
 8007600:	3308      	adds	r3, #8
 8007602:	9303      	str	r3, [sp, #12]
 8007604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007606:	4433      	add	r3, r6
 8007608:	9309      	str	r3, [sp, #36]	; 0x24
 800760a:	e768      	b.n	80074de <_svfiprintf_r+0x4e>
 800760c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007610:	460c      	mov	r4, r1
 8007612:	2001      	movs	r0, #1
 8007614:	e7a6      	b.n	8007564 <_svfiprintf_r+0xd4>
 8007616:	2300      	movs	r3, #0
 8007618:	3401      	adds	r4, #1
 800761a:	9305      	str	r3, [sp, #20]
 800761c:	4619      	mov	r1, r3
 800761e:	f04f 0c0a 	mov.w	ip, #10
 8007622:	4620      	mov	r0, r4
 8007624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007628:	3a30      	subs	r2, #48	; 0x30
 800762a:	2a09      	cmp	r2, #9
 800762c:	d903      	bls.n	8007636 <_svfiprintf_r+0x1a6>
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0c6      	beq.n	80075c0 <_svfiprintf_r+0x130>
 8007632:	9105      	str	r1, [sp, #20]
 8007634:	e7c4      	b.n	80075c0 <_svfiprintf_r+0x130>
 8007636:	fb0c 2101 	mla	r1, ip, r1, r2
 800763a:	4604      	mov	r4, r0
 800763c:	2301      	movs	r3, #1
 800763e:	e7f0      	b.n	8007622 <_svfiprintf_r+0x192>
 8007640:	ab03      	add	r3, sp, #12
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	462a      	mov	r2, r5
 8007646:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <_svfiprintf_r+0x1f4>)
 8007648:	a904      	add	r1, sp, #16
 800764a:	4638      	mov	r0, r7
 800764c:	f7fd fe4c 	bl	80052e8 <_printf_float>
 8007650:	1c42      	adds	r2, r0, #1
 8007652:	4606      	mov	r6, r0
 8007654:	d1d6      	bne.n	8007604 <_svfiprintf_r+0x174>
 8007656:	89ab      	ldrh	r3, [r5, #12]
 8007658:	065b      	lsls	r3, r3, #25
 800765a:	f53f af2d 	bmi.w	80074b8 <_svfiprintf_r+0x28>
 800765e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007660:	b01d      	add	sp, #116	; 0x74
 8007662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007666:	ab03      	add	r3, sp, #12
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	462a      	mov	r2, r5
 800766c:	4b05      	ldr	r3, [pc, #20]	; (8007684 <_svfiprintf_r+0x1f4>)
 800766e:	a904      	add	r1, sp, #16
 8007670:	4638      	mov	r0, r7
 8007672:	f7fe f8dd 	bl	8005830 <_printf_i>
 8007676:	e7eb      	b.n	8007650 <_svfiprintf_r+0x1c0>
 8007678:	0800844c 	.word	0x0800844c
 800767c:	08008456 	.word	0x08008456
 8007680:	080052e9 	.word	0x080052e9
 8007684:	080073dd 	.word	0x080073dd
 8007688:	08008452 	.word	0x08008452

0800768c <__sflush_r>:
 800768c:	898a      	ldrh	r2, [r1, #12]
 800768e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007692:	4605      	mov	r5, r0
 8007694:	0710      	lsls	r0, r2, #28
 8007696:	460c      	mov	r4, r1
 8007698:	d458      	bmi.n	800774c <__sflush_r+0xc0>
 800769a:	684b      	ldr	r3, [r1, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	dc05      	bgt.n	80076ac <__sflush_r+0x20>
 80076a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	dc02      	bgt.n	80076ac <__sflush_r+0x20>
 80076a6:	2000      	movs	r0, #0
 80076a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076ae:	2e00      	cmp	r6, #0
 80076b0:	d0f9      	beq.n	80076a6 <__sflush_r+0x1a>
 80076b2:	2300      	movs	r3, #0
 80076b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076b8:	682f      	ldr	r7, [r5, #0]
 80076ba:	6a21      	ldr	r1, [r4, #32]
 80076bc:	602b      	str	r3, [r5, #0]
 80076be:	d032      	beq.n	8007726 <__sflush_r+0x9a>
 80076c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076c2:	89a3      	ldrh	r3, [r4, #12]
 80076c4:	075a      	lsls	r2, r3, #29
 80076c6:	d505      	bpl.n	80076d4 <__sflush_r+0x48>
 80076c8:	6863      	ldr	r3, [r4, #4]
 80076ca:	1ac0      	subs	r0, r0, r3
 80076cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076ce:	b10b      	cbz	r3, 80076d4 <__sflush_r+0x48>
 80076d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076d2:	1ac0      	subs	r0, r0, r3
 80076d4:	2300      	movs	r3, #0
 80076d6:	4602      	mov	r2, r0
 80076d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076da:	6a21      	ldr	r1, [r4, #32]
 80076dc:	4628      	mov	r0, r5
 80076de:	47b0      	blx	r6
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	d106      	bne.n	80076f4 <__sflush_r+0x68>
 80076e6:	6829      	ldr	r1, [r5, #0]
 80076e8:	291d      	cmp	r1, #29
 80076ea:	d82b      	bhi.n	8007744 <__sflush_r+0xb8>
 80076ec:	4a29      	ldr	r2, [pc, #164]	; (8007794 <__sflush_r+0x108>)
 80076ee:	410a      	asrs	r2, r1
 80076f0:	07d6      	lsls	r6, r2, #31
 80076f2:	d427      	bmi.n	8007744 <__sflush_r+0xb8>
 80076f4:	2200      	movs	r2, #0
 80076f6:	6062      	str	r2, [r4, #4]
 80076f8:	04d9      	lsls	r1, r3, #19
 80076fa:	6922      	ldr	r2, [r4, #16]
 80076fc:	6022      	str	r2, [r4, #0]
 80076fe:	d504      	bpl.n	800770a <__sflush_r+0x7e>
 8007700:	1c42      	adds	r2, r0, #1
 8007702:	d101      	bne.n	8007708 <__sflush_r+0x7c>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	b903      	cbnz	r3, 800770a <__sflush_r+0x7e>
 8007708:	6560      	str	r0, [r4, #84]	; 0x54
 800770a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800770c:	602f      	str	r7, [r5, #0]
 800770e:	2900      	cmp	r1, #0
 8007710:	d0c9      	beq.n	80076a6 <__sflush_r+0x1a>
 8007712:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007716:	4299      	cmp	r1, r3
 8007718:	d002      	beq.n	8007720 <__sflush_r+0x94>
 800771a:	4628      	mov	r0, r5
 800771c:	f7ff f9e2 	bl	8006ae4 <_free_r>
 8007720:	2000      	movs	r0, #0
 8007722:	6360      	str	r0, [r4, #52]	; 0x34
 8007724:	e7c0      	b.n	80076a8 <__sflush_r+0x1c>
 8007726:	2301      	movs	r3, #1
 8007728:	4628      	mov	r0, r5
 800772a:	47b0      	blx	r6
 800772c:	1c41      	adds	r1, r0, #1
 800772e:	d1c8      	bne.n	80076c2 <__sflush_r+0x36>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0c5      	beq.n	80076c2 <__sflush_r+0x36>
 8007736:	2b1d      	cmp	r3, #29
 8007738:	d001      	beq.n	800773e <__sflush_r+0xb2>
 800773a:	2b16      	cmp	r3, #22
 800773c:	d101      	bne.n	8007742 <__sflush_r+0xb6>
 800773e:	602f      	str	r7, [r5, #0]
 8007740:	e7b1      	b.n	80076a6 <__sflush_r+0x1a>
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007748:	81a3      	strh	r3, [r4, #12]
 800774a:	e7ad      	b.n	80076a8 <__sflush_r+0x1c>
 800774c:	690f      	ldr	r7, [r1, #16]
 800774e:	2f00      	cmp	r7, #0
 8007750:	d0a9      	beq.n	80076a6 <__sflush_r+0x1a>
 8007752:	0793      	lsls	r3, r2, #30
 8007754:	680e      	ldr	r6, [r1, #0]
 8007756:	bf08      	it	eq
 8007758:	694b      	ldreq	r3, [r1, #20]
 800775a:	600f      	str	r7, [r1, #0]
 800775c:	bf18      	it	ne
 800775e:	2300      	movne	r3, #0
 8007760:	eba6 0807 	sub.w	r8, r6, r7
 8007764:	608b      	str	r3, [r1, #8]
 8007766:	f1b8 0f00 	cmp.w	r8, #0
 800776a:	dd9c      	ble.n	80076a6 <__sflush_r+0x1a>
 800776c:	6a21      	ldr	r1, [r4, #32]
 800776e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007770:	4643      	mov	r3, r8
 8007772:	463a      	mov	r2, r7
 8007774:	4628      	mov	r0, r5
 8007776:	47b0      	blx	r6
 8007778:	2800      	cmp	r0, #0
 800777a:	dc06      	bgt.n	800778a <__sflush_r+0xfe>
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007782:	81a3      	strh	r3, [r4, #12]
 8007784:	f04f 30ff 	mov.w	r0, #4294967295
 8007788:	e78e      	b.n	80076a8 <__sflush_r+0x1c>
 800778a:	4407      	add	r7, r0
 800778c:	eba8 0800 	sub.w	r8, r8, r0
 8007790:	e7e9      	b.n	8007766 <__sflush_r+0xda>
 8007792:	bf00      	nop
 8007794:	dfbffffe 	.word	0xdfbffffe

08007798 <_fflush_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	690b      	ldr	r3, [r1, #16]
 800779c:	4605      	mov	r5, r0
 800779e:	460c      	mov	r4, r1
 80077a0:	b913      	cbnz	r3, 80077a8 <_fflush_r+0x10>
 80077a2:	2500      	movs	r5, #0
 80077a4:	4628      	mov	r0, r5
 80077a6:	bd38      	pop	{r3, r4, r5, pc}
 80077a8:	b118      	cbz	r0, 80077b2 <_fflush_r+0x1a>
 80077aa:	6a03      	ldr	r3, [r0, #32]
 80077ac:	b90b      	cbnz	r3, 80077b2 <_fflush_r+0x1a>
 80077ae:	f7fe f9ed 	bl	8005b8c <__sinit>
 80077b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0f3      	beq.n	80077a2 <_fflush_r+0xa>
 80077ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077bc:	07d0      	lsls	r0, r2, #31
 80077be:	d404      	bmi.n	80077ca <_fflush_r+0x32>
 80077c0:	0599      	lsls	r1, r3, #22
 80077c2:	d402      	bmi.n	80077ca <_fflush_r+0x32>
 80077c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077c6:	f7fe fb0e 	bl	8005de6 <__retarget_lock_acquire_recursive>
 80077ca:	4628      	mov	r0, r5
 80077cc:	4621      	mov	r1, r4
 80077ce:	f7ff ff5d 	bl	800768c <__sflush_r>
 80077d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077d4:	07da      	lsls	r2, r3, #31
 80077d6:	4605      	mov	r5, r0
 80077d8:	d4e4      	bmi.n	80077a4 <_fflush_r+0xc>
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	059b      	lsls	r3, r3, #22
 80077de:	d4e1      	bmi.n	80077a4 <_fflush_r+0xc>
 80077e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077e2:	f7fe fb01 	bl	8005de8 <__retarget_lock_release_recursive>
 80077e6:	e7dd      	b.n	80077a4 <_fflush_r+0xc>

080077e8 <memmove>:
 80077e8:	4288      	cmp	r0, r1
 80077ea:	b510      	push	{r4, lr}
 80077ec:	eb01 0402 	add.w	r4, r1, r2
 80077f0:	d902      	bls.n	80077f8 <memmove+0x10>
 80077f2:	4284      	cmp	r4, r0
 80077f4:	4623      	mov	r3, r4
 80077f6:	d807      	bhi.n	8007808 <memmove+0x20>
 80077f8:	1e43      	subs	r3, r0, #1
 80077fa:	42a1      	cmp	r1, r4
 80077fc:	d008      	beq.n	8007810 <memmove+0x28>
 80077fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007806:	e7f8      	b.n	80077fa <memmove+0x12>
 8007808:	4402      	add	r2, r0
 800780a:	4601      	mov	r1, r0
 800780c:	428a      	cmp	r2, r1
 800780e:	d100      	bne.n	8007812 <memmove+0x2a>
 8007810:	bd10      	pop	{r4, pc}
 8007812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800781a:	e7f7      	b.n	800780c <memmove+0x24>

0800781c <_sbrk_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d06      	ldr	r5, [pc, #24]	; (8007838 <_sbrk_r+0x1c>)
 8007820:	2300      	movs	r3, #0
 8007822:	4604      	mov	r4, r0
 8007824:	4608      	mov	r0, r1
 8007826:	602b      	str	r3, [r5, #0]
 8007828:	f7fa f956 	bl	8001ad8 <_sbrk>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d102      	bne.n	8007836 <_sbrk_r+0x1a>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	b103      	cbz	r3, 8007836 <_sbrk_r+0x1a>
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	bd38      	pop	{r3, r4, r5, pc}
 8007838:	200007f4 	.word	0x200007f4

0800783c <memcpy>:
 800783c:	440a      	add	r2, r1
 800783e:	4291      	cmp	r1, r2
 8007840:	f100 33ff 	add.w	r3, r0, #4294967295
 8007844:	d100      	bne.n	8007848 <memcpy+0xc>
 8007846:	4770      	bx	lr
 8007848:	b510      	push	{r4, lr}
 800784a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800784e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007852:	4291      	cmp	r1, r2
 8007854:	d1f9      	bne.n	800784a <memcpy+0xe>
 8007856:	bd10      	pop	{r4, pc}

08007858 <__assert_func>:
 8007858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800785a:	4614      	mov	r4, r2
 800785c:	461a      	mov	r2, r3
 800785e:	4b09      	ldr	r3, [pc, #36]	; (8007884 <__assert_func+0x2c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4605      	mov	r5, r0
 8007864:	68d8      	ldr	r0, [r3, #12]
 8007866:	b14c      	cbz	r4, 800787c <__assert_func+0x24>
 8007868:	4b07      	ldr	r3, [pc, #28]	; (8007888 <__assert_func+0x30>)
 800786a:	9100      	str	r1, [sp, #0]
 800786c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007870:	4906      	ldr	r1, [pc, #24]	; (800788c <__assert_func+0x34>)
 8007872:	462b      	mov	r3, r5
 8007874:	f000 f872 	bl	800795c <fiprintf>
 8007878:	f000 f882 	bl	8007980 <abort>
 800787c:	4b04      	ldr	r3, [pc, #16]	; (8007890 <__assert_func+0x38>)
 800787e:	461c      	mov	r4, r3
 8007880:	e7f3      	b.n	800786a <__assert_func+0x12>
 8007882:	bf00      	nop
 8007884:	20000064 	.word	0x20000064
 8007888:	08008467 	.word	0x08008467
 800788c:	08008474 	.word	0x08008474
 8007890:	080084a2 	.word	0x080084a2

08007894 <_calloc_r>:
 8007894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007896:	fba1 2402 	umull	r2, r4, r1, r2
 800789a:	b94c      	cbnz	r4, 80078b0 <_calloc_r+0x1c>
 800789c:	4611      	mov	r1, r2
 800789e:	9201      	str	r2, [sp, #4]
 80078a0:	f7ff f994 	bl	8006bcc <_malloc_r>
 80078a4:	9a01      	ldr	r2, [sp, #4]
 80078a6:	4605      	mov	r5, r0
 80078a8:	b930      	cbnz	r0, 80078b8 <_calloc_r+0x24>
 80078aa:	4628      	mov	r0, r5
 80078ac:	b003      	add	sp, #12
 80078ae:	bd30      	pop	{r4, r5, pc}
 80078b0:	220c      	movs	r2, #12
 80078b2:	6002      	str	r2, [r0, #0]
 80078b4:	2500      	movs	r5, #0
 80078b6:	e7f8      	b.n	80078aa <_calloc_r+0x16>
 80078b8:	4621      	mov	r1, r4
 80078ba:	f7fe fa00 	bl	8005cbe <memset>
 80078be:	e7f4      	b.n	80078aa <_calloc_r+0x16>

080078c0 <__ascii_mbtowc>:
 80078c0:	b082      	sub	sp, #8
 80078c2:	b901      	cbnz	r1, 80078c6 <__ascii_mbtowc+0x6>
 80078c4:	a901      	add	r1, sp, #4
 80078c6:	b142      	cbz	r2, 80078da <__ascii_mbtowc+0x1a>
 80078c8:	b14b      	cbz	r3, 80078de <__ascii_mbtowc+0x1e>
 80078ca:	7813      	ldrb	r3, [r2, #0]
 80078cc:	600b      	str	r3, [r1, #0]
 80078ce:	7812      	ldrb	r2, [r2, #0]
 80078d0:	1e10      	subs	r0, r2, #0
 80078d2:	bf18      	it	ne
 80078d4:	2001      	movne	r0, #1
 80078d6:	b002      	add	sp, #8
 80078d8:	4770      	bx	lr
 80078da:	4610      	mov	r0, r2
 80078dc:	e7fb      	b.n	80078d6 <__ascii_mbtowc+0x16>
 80078de:	f06f 0001 	mvn.w	r0, #1
 80078e2:	e7f8      	b.n	80078d6 <__ascii_mbtowc+0x16>

080078e4 <_realloc_r>:
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	4680      	mov	r8, r0
 80078ea:	4614      	mov	r4, r2
 80078ec:	460e      	mov	r6, r1
 80078ee:	b921      	cbnz	r1, 80078fa <_realloc_r+0x16>
 80078f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078f4:	4611      	mov	r1, r2
 80078f6:	f7ff b969 	b.w	8006bcc <_malloc_r>
 80078fa:	b92a      	cbnz	r2, 8007908 <_realloc_r+0x24>
 80078fc:	f7ff f8f2 	bl	8006ae4 <_free_r>
 8007900:	4625      	mov	r5, r4
 8007902:	4628      	mov	r0, r5
 8007904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007908:	f000 f841 	bl	800798e <_malloc_usable_size_r>
 800790c:	4284      	cmp	r4, r0
 800790e:	4607      	mov	r7, r0
 8007910:	d802      	bhi.n	8007918 <_realloc_r+0x34>
 8007912:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007916:	d812      	bhi.n	800793e <_realloc_r+0x5a>
 8007918:	4621      	mov	r1, r4
 800791a:	4640      	mov	r0, r8
 800791c:	f7ff f956 	bl	8006bcc <_malloc_r>
 8007920:	4605      	mov	r5, r0
 8007922:	2800      	cmp	r0, #0
 8007924:	d0ed      	beq.n	8007902 <_realloc_r+0x1e>
 8007926:	42bc      	cmp	r4, r7
 8007928:	4622      	mov	r2, r4
 800792a:	4631      	mov	r1, r6
 800792c:	bf28      	it	cs
 800792e:	463a      	movcs	r2, r7
 8007930:	f7ff ff84 	bl	800783c <memcpy>
 8007934:	4631      	mov	r1, r6
 8007936:	4640      	mov	r0, r8
 8007938:	f7ff f8d4 	bl	8006ae4 <_free_r>
 800793c:	e7e1      	b.n	8007902 <_realloc_r+0x1e>
 800793e:	4635      	mov	r5, r6
 8007940:	e7df      	b.n	8007902 <_realloc_r+0x1e>

08007942 <__ascii_wctomb>:
 8007942:	b149      	cbz	r1, 8007958 <__ascii_wctomb+0x16>
 8007944:	2aff      	cmp	r2, #255	; 0xff
 8007946:	bf85      	ittet	hi
 8007948:	238a      	movhi	r3, #138	; 0x8a
 800794a:	6003      	strhi	r3, [r0, #0]
 800794c:	700a      	strbls	r2, [r1, #0]
 800794e:	f04f 30ff 	movhi.w	r0, #4294967295
 8007952:	bf98      	it	ls
 8007954:	2001      	movls	r0, #1
 8007956:	4770      	bx	lr
 8007958:	4608      	mov	r0, r1
 800795a:	4770      	bx	lr

0800795c <fiprintf>:
 800795c:	b40e      	push	{r1, r2, r3}
 800795e:	b503      	push	{r0, r1, lr}
 8007960:	4601      	mov	r1, r0
 8007962:	ab03      	add	r3, sp, #12
 8007964:	4805      	ldr	r0, [pc, #20]	; (800797c <fiprintf+0x20>)
 8007966:	f853 2b04 	ldr.w	r2, [r3], #4
 800796a:	6800      	ldr	r0, [r0, #0]
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	f000 f83f 	bl	80079f0 <_vfiprintf_r>
 8007972:	b002      	add	sp, #8
 8007974:	f85d eb04 	ldr.w	lr, [sp], #4
 8007978:	b003      	add	sp, #12
 800797a:	4770      	bx	lr
 800797c:	20000064 	.word	0x20000064

08007980 <abort>:
 8007980:	b508      	push	{r3, lr}
 8007982:	2006      	movs	r0, #6
 8007984:	f000 fa0c 	bl	8007da0 <raise>
 8007988:	2001      	movs	r0, #1
 800798a:	f7fa f82d 	bl	80019e8 <_exit>

0800798e <_malloc_usable_size_r>:
 800798e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007992:	1f18      	subs	r0, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	bfbc      	itt	lt
 8007998:	580b      	ldrlt	r3, [r1, r0]
 800799a:	18c0      	addlt	r0, r0, r3
 800799c:	4770      	bx	lr

0800799e <__sfputc_r>:
 800799e:	6893      	ldr	r3, [r2, #8]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	b410      	push	{r4}
 80079a6:	6093      	str	r3, [r2, #8]
 80079a8:	da08      	bge.n	80079bc <__sfputc_r+0x1e>
 80079aa:	6994      	ldr	r4, [r2, #24]
 80079ac:	42a3      	cmp	r3, r4
 80079ae:	db01      	blt.n	80079b4 <__sfputc_r+0x16>
 80079b0:	290a      	cmp	r1, #10
 80079b2:	d103      	bne.n	80079bc <__sfputc_r+0x1e>
 80079b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079b8:	f000 b934 	b.w	8007c24 <__swbuf_r>
 80079bc:	6813      	ldr	r3, [r2, #0]
 80079be:	1c58      	adds	r0, r3, #1
 80079c0:	6010      	str	r0, [r2, #0]
 80079c2:	7019      	strb	r1, [r3, #0]
 80079c4:	4608      	mov	r0, r1
 80079c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <__sfputs_r>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	4606      	mov	r6, r0
 80079d0:	460f      	mov	r7, r1
 80079d2:	4614      	mov	r4, r2
 80079d4:	18d5      	adds	r5, r2, r3
 80079d6:	42ac      	cmp	r4, r5
 80079d8:	d101      	bne.n	80079de <__sfputs_r+0x12>
 80079da:	2000      	movs	r0, #0
 80079dc:	e007      	b.n	80079ee <__sfputs_r+0x22>
 80079de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e2:	463a      	mov	r2, r7
 80079e4:	4630      	mov	r0, r6
 80079e6:	f7ff ffda 	bl	800799e <__sfputc_r>
 80079ea:	1c43      	adds	r3, r0, #1
 80079ec:	d1f3      	bne.n	80079d6 <__sfputs_r+0xa>
 80079ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080079f0 <_vfiprintf_r>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	460d      	mov	r5, r1
 80079f6:	b09d      	sub	sp, #116	; 0x74
 80079f8:	4614      	mov	r4, r2
 80079fa:	4698      	mov	r8, r3
 80079fc:	4606      	mov	r6, r0
 80079fe:	b118      	cbz	r0, 8007a08 <_vfiprintf_r+0x18>
 8007a00:	6a03      	ldr	r3, [r0, #32]
 8007a02:	b90b      	cbnz	r3, 8007a08 <_vfiprintf_r+0x18>
 8007a04:	f7fe f8c2 	bl	8005b8c <__sinit>
 8007a08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a0a:	07d9      	lsls	r1, r3, #31
 8007a0c:	d405      	bmi.n	8007a1a <_vfiprintf_r+0x2a>
 8007a0e:	89ab      	ldrh	r3, [r5, #12]
 8007a10:	059a      	lsls	r2, r3, #22
 8007a12:	d402      	bmi.n	8007a1a <_vfiprintf_r+0x2a>
 8007a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a16:	f7fe f9e6 	bl	8005de6 <__retarget_lock_acquire_recursive>
 8007a1a:	89ab      	ldrh	r3, [r5, #12]
 8007a1c:	071b      	lsls	r3, r3, #28
 8007a1e:	d501      	bpl.n	8007a24 <_vfiprintf_r+0x34>
 8007a20:	692b      	ldr	r3, [r5, #16]
 8007a22:	b99b      	cbnz	r3, 8007a4c <_vfiprintf_r+0x5c>
 8007a24:	4629      	mov	r1, r5
 8007a26:	4630      	mov	r0, r6
 8007a28:	f000 f93a 	bl	8007ca0 <__swsetup_r>
 8007a2c:	b170      	cbz	r0, 8007a4c <_vfiprintf_r+0x5c>
 8007a2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a30:	07dc      	lsls	r4, r3, #31
 8007a32:	d504      	bpl.n	8007a3e <_vfiprintf_r+0x4e>
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	b01d      	add	sp, #116	; 0x74
 8007a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3e:	89ab      	ldrh	r3, [r5, #12]
 8007a40:	0598      	lsls	r0, r3, #22
 8007a42:	d4f7      	bmi.n	8007a34 <_vfiprintf_r+0x44>
 8007a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a46:	f7fe f9cf 	bl	8005de8 <__retarget_lock_release_recursive>
 8007a4a:	e7f3      	b.n	8007a34 <_vfiprintf_r+0x44>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a50:	2320      	movs	r3, #32
 8007a52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a56:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a5a:	2330      	movs	r3, #48	; 0x30
 8007a5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007c10 <_vfiprintf_r+0x220>
 8007a60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a64:	f04f 0901 	mov.w	r9, #1
 8007a68:	4623      	mov	r3, r4
 8007a6a:	469a      	mov	sl, r3
 8007a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a70:	b10a      	cbz	r2, 8007a76 <_vfiprintf_r+0x86>
 8007a72:	2a25      	cmp	r2, #37	; 0x25
 8007a74:	d1f9      	bne.n	8007a6a <_vfiprintf_r+0x7a>
 8007a76:	ebba 0b04 	subs.w	fp, sl, r4
 8007a7a:	d00b      	beq.n	8007a94 <_vfiprintf_r+0xa4>
 8007a7c:	465b      	mov	r3, fp
 8007a7e:	4622      	mov	r2, r4
 8007a80:	4629      	mov	r1, r5
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7ff ffa2 	bl	80079cc <__sfputs_r>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	f000 80a9 	beq.w	8007be0 <_vfiprintf_r+0x1f0>
 8007a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a90:	445a      	add	r2, fp
 8007a92:	9209      	str	r2, [sp, #36]	; 0x24
 8007a94:	f89a 3000 	ldrb.w	r3, [sl]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 80a1 	beq.w	8007be0 <_vfiprintf_r+0x1f0>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aa8:	f10a 0a01 	add.w	sl, sl, #1
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	9307      	str	r3, [sp, #28]
 8007ab0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ab4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ab6:	4654      	mov	r4, sl
 8007ab8:	2205      	movs	r2, #5
 8007aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007abe:	4854      	ldr	r0, [pc, #336]	; (8007c10 <_vfiprintf_r+0x220>)
 8007ac0:	f7f8 fb86 	bl	80001d0 <memchr>
 8007ac4:	9a04      	ldr	r2, [sp, #16]
 8007ac6:	b9d8      	cbnz	r0, 8007b00 <_vfiprintf_r+0x110>
 8007ac8:	06d1      	lsls	r1, r2, #27
 8007aca:	bf44      	itt	mi
 8007acc:	2320      	movmi	r3, #32
 8007ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ad2:	0713      	lsls	r3, r2, #28
 8007ad4:	bf44      	itt	mi
 8007ad6:	232b      	movmi	r3, #43	; 0x2b
 8007ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007adc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ae2:	d015      	beq.n	8007b10 <_vfiprintf_r+0x120>
 8007ae4:	9a07      	ldr	r2, [sp, #28]
 8007ae6:	4654      	mov	r4, sl
 8007ae8:	2000      	movs	r0, #0
 8007aea:	f04f 0c0a 	mov.w	ip, #10
 8007aee:	4621      	mov	r1, r4
 8007af0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007af4:	3b30      	subs	r3, #48	; 0x30
 8007af6:	2b09      	cmp	r3, #9
 8007af8:	d94d      	bls.n	8007b96 <_vfiprintf_r+0x1a6>
 8007afa:	b1b0      	cbz	r0, 8007b2a <_vfiprintf_r+0x13a>
 8007afc:	9207      	str	r2, [sp, #28]
 8007afe:	e014      	b.n	8007b2a <_vfiprintf_r+0x13a>
 8007b00:	eba0 0308 	sub.w	r3, r0, r8
 8007b04:	fa09 f303 	lsl.w	r3, r9, r3
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	9304      	str	r3, [sp, #16]
 8007b0c:	46a2      	mov	sl, r4
 8007b0e:	e7d2      	b.n	8007ab6 <_vfiprintf_r+0xc6>
 8007b10:	9b03      	ldr	r3, [sp, #12]
 8007b12:	1d19      	adds	r1, r3, #4
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	9103      	str	r1, [sp, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bfbb      	ittet	lt
 8007b1c:	425b      	neglt	r3, r3
 8007b1e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b22:	9307      	strge	r3, [sp, #28]
 8007b24:	9307      	strlt	r3, [sp, #28]
 8007b26:	bfb8      	it	lt
 8007b28:	9204      	strlt	r2, [sp, #16]
 8007b2a:	7823      	ldrb	r3, [r4, #0]
 8007b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b2e:	d10c      	bne.n	8007b4a <_vfiprintf_r+0x15a>
 8007b30:	7863      	ldrb	r3, [r4, #1]
 8007b32:	2b2a      	cmp	r3, #42	; 0x2a
 8007b34:	d134      	bne.n	8007ba0 <_vfiprintf_r+0x1b0>
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	1d1a      	adds	r2, r3, #4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	9203      	str	r2, [sp, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bfb8      	it	lt
 8007b42:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b46:	3402      	adds	r4, #2
 8007b48:	9305      	str	r3, [sp, #20]
 8007b4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007c20 <_vfiprintf_r+0x230>
 8007b4e:	7821      	ldrb	r1, [r4, #0]
 8007b50:	2203      	movs	r2, #3
 8007b52:	4650      	mov	r0, sl
 8007b54:	f7f8 fb3c 	bl	80001d0 <memchr>
 8007b58:	b138      	cbz	r0, 8007b6a <_vfiprintf_r+0x17a>
 8007b5a:	9b04      	ldr	r3, [sp, #16]
 8007b5c:	eba0 000a 	sub.w	r0, r0, sl
 8007b60:	2240      	movs	r2, #64	; 0x40
 8007b62:	4082      	lsls	r2, r0
 8007b64:	4313      	orrs	r3, r2
 8007b66:	3401      	adds	r4, #1
 8007b68:	9304      	str	r3, [sp, #16]
 8007b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b6e:	4829      	ldr	r0, [pc, #164]	; (8007c14 <_vfiprintf_r+0x224>)
 8007b70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b74:	2206      	movs	r2, #6
 8007b76:	f7f8 fb2b 	bl	80001d0 <memchr>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d03f      	beq.n	8007bfe <_vfiprintf_r+0x20e>
 8007b7e:	4b26      	ldr	r3, [pc, #152]	; (8007c18 <_vfiprintf_r+0x228>)
 8007b80:	bb1b      	cbnz	r3, 8007bca <_vfiprintf_r+0x1da>
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	3307      	adds	r3, #7
 8007b86:	f023 0307 	bic.w	r3, r3, #7
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	9303      	str	r3, [sp, #12]
 8007b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b90:	443b      	add	r3, r7
 8007b92:	9309      	str	r3, [sp, #36]	; 0x24
 8007b94:	e768      	b.n	8007a68 <_vfiprintf_r+0x78>
 8007b96:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	2001      	movs	r0, #1
 8007b9e:	e7a6      	b.n	8007aee <_vfiprintf_r+0xfe>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	3401      	adds	r4, #1
 8007ba4:	9305      	str	r3, [sp, #20]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	f04f 0c0a 	mov.w	ip, #10
 8007bac:	4620      	mov	r0, r4
 8007bae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bb2:	3a30      	subs	r2, #48	; 0x30
 8007bb4:	2a09      	cmp	r2, #9
 8007bb6:	d903      	bls.n	8007bc0 <_vfiprintf_r+0x1d0>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0c6      	beq.n	8007b4a <_vfiprintf_r+0x15a>
 8007bbc:	9105      	str	r1, [sp, #20]
 8007bbe:	e7c4      	b.n	8007b4a <_vfiprintf_r+0x15a>
 8007bc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e7f0      	b.n	8007bac <_vfiprintf_r+0x1bc>
 8007bca:	ab03      	add	r3, sp, #12
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	462a      	mov	r2, r5
 8007bd0:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <_vfiprintf_r+0x22c>)
 8007bd2:	a904      	add	r1, sp, #16
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f7fd fb87 	bl	80052e8 <_printf_float>
 8007bda:	4607      	mov	r7, r0
 8007bdc:	1c78      	adds	r0, r7, #1
 8007bde:	d1d6      	bne.n	8007b8e <_vfiprintf_r+0x19e>
 8007be0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007be2:	07d9      	lsls	r1, r3, #31
 8007be4:	d405      	bmi.n	8007bf2 <_vfiprintf_r+0x202>
 8007be6:	89ab      	ldrh	r3, [r5, #12]
 8007be8:	059a      	lsls	r2, r3, #22
 8007bea:	d402      	bmi.n	8007bf2 <_vfiprintf_r+0x202>
 8007bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bee:	f7fe f8fb 	bl	8005de8 <__retarget_lock_release_recursive>
 8007bf2:	89ab      	ldrh	r3, [r5, #12]
 8007bf4:	065b      	lsls	r3, r3, #25
 8007bf6:	f53f af1d 	bmi.w	8007a34 <_vfiprintf_r+0x44>
 8007bfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bfc:	e71c      	b.n	8007a38 <_vfiprintf_r+0x48>
 8007bfe:	ab03      	add	r3, sp, #12
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	462a      	mov	r2, r5
 8007c04:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <_vfiprintf_r+0x22c>)
 8007c06:	a904      	add	r1, sp, #16
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f7fd fe11 	bl	8005830 <_printf_i>
 8007c0e:	e7e4      	b.n	8007bda <_vfiprintf_r+0x1ea>
 8007c10:	0800844c 	.word	0x0800844c
 8007c14:	08008456 	.word	0x08008456
 8007c18:	080052e9 	.word	0x080052e9
 8007c1c:	080079cd 	.word	0x080079cd
 8007c20:	08008452 	.word	0x08008452

08007c24 <__swbuf_r>:
 8007c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c26:	460e      	mov	r6, r1
 8007c28:	4614      	mov	r4, r2
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	b118      	cbz	r0, 8007c36 <__swbuf_r+0x12>
 8007c2e:	6a03      	ldr	r3, [r0, #32]
 8007c30:	b90b      	cbnz	r3, 8007c36 <__swbuf_r+0x12>
 8007c32:	f7fd ffab 	bl	8005b8c <__sinit>
 8007c36:	69a3      	ldr	r3, [r4, #24]
 8007c38:	60a3      	str	r3, [r4, #8]
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	071a      	lsls	r2, r3, #28
 8007c3e:	d525      	bpl.n	8007c8c <__swbuf_r+0x68>
 8007c40:	6923      	ldr	r3, [r4, #16]
 8007c42:	b31b      	cbz	r3, 8007c8c <__swbuf_r+0x68>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	6922      	ldr	r2, [r4, #16]
 8007c48:	1a98      	subs	r0, r3, r2
 8007c4a:	6963      	ldr	r3, [r4, #20]
 8007c4c:	b2f6      	uxtb	r6, r6
 8007c4e:	4283      	cmp	r3, r0
 8007c50:	4637      	mov	r7, r6
 8007c52:	dc04      	bgt.n	8007c5e <__swbuf_r+0x3a>
 8007c54:	4621      	mov	r1, r4
 8007c56:	4628      	mov	r0, r5
 8007c58:	f7ff fd9e 	bl	8007798 <_fflush_r>
 8007c5c:	b9e0      	cbnz	r0, 8007c98 <__swbuf_r+0x74>
 8007c5e:	68a3      	ldr	r3, [r4, #8]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	60a3      	str	r3, [r4, #8]
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	6022      	str	r2, [r4, #0]
 8007c6a:	701e      	strb	r6, [r3, #0]
 8007c6c:	6962      	ldr	r2, [r4, #20]
 8007c6e:	1c43      	adds	r3, r0, #1
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d004      	beq.n	8007c7e <__swbuf_r+0x5a>
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	07db      	lsls	r3, r3, #31
 8007c78:	d506      	bpl.n	8007c88 <__swbuf_r+0x64>
 8007c7a:	2e0a      	cmp	r6, #10
 8007c7c:	d104      	bne.n	8007c88 <__swbuf_r+0x64>
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4628      	mov	r0, r5
 8007c82:	f7ff fd89 	bl	8007798 <_fflush_r>
 8007c86:	b938      	cbnz	r0, 8007c98 <__swbuf_r+0x74>
 8007c88:	4638      	mov	r0, r7
 8007c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f000 f806 	bl	8007ca0 <__swsetup_r>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d0d5      	beq.n	8007c44 <__swbuf_r+0x20>
 8007c98:	f04f 37ff 	mov.w	r7, #4294967295
 8007c9c:	e7f4      	b.n	8007c88 <__swbuf_r+0x64>
	...

08007ca0 <__swsetup_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4b2a      	ldr	r3, [pc, #168]	; (8007d4c <__swsetup_r+0xac>)
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	6818      	ldr	r0, [r3, #0]
 8007ca8:	460c      	mov	r4, r1
 8007caa:	b118      	cbz	r0, 8007cb4 <__swsetup_r+0x14>
 8007cac:	6a03      	ldr	r3, [r0, #32]
 8007cae:	b90b      	cbnz	r3, 8007cb4 <__swsetup_r+0x14>
 8007cb0:	f7fd ff6c 	bl	8005b8c <__sinit>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cba:	0718      	lsls	r0, r3, #28
 8007cbc:	d422      	bmi.n	8007d04 <__swsetup_r+0x64>
 8007cbe:	06d9      	lsls	r1, r3, #27
 8007cc0:	d407      	bmi.n	8007cd2 <__swsetup_r+0x32>
 8007cc2:	2309      	movs	r3, #9
 8007cc4:	602b      	str	r3, [r5, #0]
 8007cc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cca:	81a3      	strh	r3, [r4, #12]
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd0:	e034      	b.n	8007d3c <__swsetup_r+0x9c>
 8007cd2:	0758      	lsls	r0, r3, #29
 8007cd4:	d512      	bpl.n	8007cfc <__swsetup_r+0x5c>
 8007cd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cd8:	b141      	cbz	r1, 8007cec <__swsetup_r+0x4c>
 8007cda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	d002      	beq.n	8007ce8 <__swsetup_r+0x48>
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f7fe fefe 	bl	8006ae4 <_free_r>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	6363      	str	r3, [r4, #52]	; 0x34
 8007cec:	89a3      	ldrh	r3, [r4, #12]
 8007cee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cf2:	81a3      	strh	r3, [r4, #12]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	6063      	str	r3, [r4, #4]
 8007cf8:	6923      	ldr	r3, [r4, #16]
 8007cfa:	6023      	str	r3, [r4, #0]
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	f043 0308 	orr.w	r3, r3, #8
 8007d02:	81a3      	strh	r3, [r4, #12]
 8007d04:	6923      	ldr	r3, [r4, #16]
 8007d06:	b94b      	cbnz	r3, 8007d1c <__swsetup_r+0x7c>
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d12:	d003      	beq.n	8007d1c <__swsetup_r+0x7c>
 8007d14:	4621      	mov	r1, r4
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 f884 	bl	8007e24 <__smakebuf_r>
 8007d1c:	89a0      	ldrh	r0, [r4, #12]
 8007d1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d22:	f010 0301 	ands.w	r3, r0, #1
 8007d26:	d00a      	beq.n	8007d3e <__swsetup_r+0x9e>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	60a3      	str	r3, [r4, #8]
 8007d2c:	6963      	ldr	r3, [r4, #20]
 8007d2e:	425b      	negs	r3, r3
 8007d30:	61a3      	str	r3, [r4, #24]
 8007d32:	6923      	ldr	r3, [r4, #16]
 8007d34:	b943      	cbnz	r3, 8007d48 <__swsetup_r+0xa8>
 8007d36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d3a:	d1c4      	bne.n	8007cc6 <__swsetup_r+0x26>
 8007d3c:	bd38      	pop	{r3, r4, r5, pc}
 8007d3e:	0781      	lsls	r1, r0, #30
 8007d40:	bf58      	it	pl
 8007d42:	6963      	ldrpl	r3, [r4, #20]
 8007d44:	60a3      	str	r3, [r4, #8]
 8007d46:	e7f4      	b.n	8007d32 <__swsetup_r+0x92>
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e7f7      	b.n	8007d3c <__swsetup_r+0x9c>
 8007d4c:	20000064 	.word	0x20000064

08007d50 <_raise_r>:
 8007d50:	291f      	cmp	r1, #31
 8007d52:	b538      	push	{r3, r4, r5, lr}
 8007d54:	4604      	mov	r4, r0
 8007d56:	460d      	mov	r5, r1
 8007d58:	d904      	bls.n	8007d64 <_raise_r+0x14>
 8007d5a:	2316      	movs	r3, #22
 8007d5c:	6003      	str	r3, [r0, #0]
 8007d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d62:	bd38      	pop	{r3, r4, r5, pc}
 8007d64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007d66:	b112      	cbz	r2, 8007d6e <_raise_r+0x1e>
 8007d68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d6c:	b94b      	cbnz	r3, 8007d82 <_raise_r+0x32>
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f000 f830 	bl	8007dd4 <_getpid_r>
 8007d74:	462a      	mov	r2, r5
 8007d76:	4601      	mov	r1, r0
 8007d78:	4620      	mov	r0, r4
 8007d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d7e:	f000 b817 	b.w	8007db0 <_kill_r>
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d00a      	beq.n	8007d9c <_raise_r+0x4c>
 8007d86:	1c59      	adds	r1, r3, #1
 8007d88:	d103      	bne.n	8007d92 <_raise_r+0x42>
 8007d8a:	2316      	movs	r3, #22
 8007d8c:	6003      	str	r3, [r0, #0]
 8007d8e:	2001      	movs	r0, #1
 8007d90:	e7e7      	b.n	8007d62 <_raise_r+0x12>
 8007d92:	2400      	movs	r4, #0
 8007d94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d98:	4628      	mov	r0, r5
 8007d9a:	4798      	blx	r3
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	e7e0      	b.n	8007d62 <_raise_r+0x12>

08007da0 <raise>:
 8007da0:	4b02      	ldr	r3, [pc, #8]	; (8007dac <raise+0xc>)
 8007da2:	4601      	mov	r1, r0
 8007da4:	6818      	ldr	r0, [r3, #0]
 8007da6:	f7ff bfd3 	b.w	8007d50 <_raise_r>
 8007daa:	bf00      	nop
 8007dac:	20000064 	.word	0x20000064

08007db0 <_kill_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d07      	ldr	r5, [pc, #28]	; (8007dd0 <_kill_r+0x20>)
 8007db4:	2300      	movs	r3, #0
 8007db6:	4604      	mov	r4, r0
 8007db8:	4608      	mov	r0, r1
 8007dba:	4611      	mov	r1, r2
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	f7f9 fe03 	bl	80019c8 <_kill>
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	d102      	bne.n	8007dcc <_kill_r+0x1c>
 8007dc6:	682b      	ldr	r3, [r5, #0]
 8007dc8:	b103      	cbz	r3, 8007dcc <_kill_r+0x1c>
 8007dca:	6023      	str	r3, [r4, #0]
 8007dcc:	bd38      	pop	{r3, r4, r5, pc}
 8007dce:	bf00      	nop
 8007dd0:	200007f4 	.word	0x200007f4

08007dd4 <_getpid_r>:
 8007dd4:	f7f9 bdf0 	b.w	80019b8 <_getpid>

08007dd8 <__swhatbuf_r>:
 8007dd8:	b570      	push	{r4, r5, r6, lr}
 8007dda:	460c      	mov	r4, r1
 8007ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de0:	2900      	cmp	r1, #0
 8007de2:	b096      	sub	sp, #88	; 0x58
 8007de4:	4615      	mov	r5, r2
 8007de6:	461e      	mov	r6, r3
 8007de8:	da0d      	bge.n	8007e06 <__swhatbuf_r+0x2e>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007df0:	f04f 0100 	mov.w	r1, #0
 8007df4:	bf0c      	ite	eq
 8007df6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007dfa:	2340      	movne	r3, #64	; 0x40
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	6031      	str	r1, [r6, #0]
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	b016      	add	sp, #88	; 0x58
 8007e04:	bd70      	pop	{r4, r5, r6, pc}
 8007e06:	466a      	mov	r2, sp
 8007e08:	f000 f848 	bl	8007e9c <_fstat_r>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	dbec      	blt.n	8007dea <__swhatbuf_r+0x12>
 8007e10:	9901      	ldr	r1, [sp, #4]
 8007e12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007e16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007e1a:	4259      	negs	r1, r3
 8007e1c:	4159      	adcs	r1, r3
 8007e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e22:	e7eb      	b.n	8007dfc <__swhatbuf_r+0x24>

08007e24 <__smakebuf_r>:
 8007e24:	898b      	ldrh	r3, [r1, #12]
 8007e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e28:	079d      	lsls	r5, r3, #30
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	d507      	bpl.n	8007e40 <__smakebuf_r+0x1c>
 8007e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	6123      	str	r3, [r4, #16]
 8007e38:	2301      	movs	r3, #1
 8007e3a:	6163      	str	r3, [r4, #20]
 8007e3c:	b002      	add	sp, #8
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	ab01      	add	r3, sp, #4
 8007e42:	466a      	mov	r2, sp
 8007e44:	f7ff ffc8 	bl	8007dd8 <__swhatbuf_r>
 8007e48:	9900      	ldr	r1, [sp, #0]
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f7fe febd 	bl	8006bcc <_malloc_r>
 8007e52:	b948      	cbnz	r0, 8007e68 <__smakebuf_r+0x44>
 8007e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e58:	059a      	lsls	r2, r3, #22
 8007e5a:	d4ef      	bmi.n	8007e3c <__smakebuf_r+0x18>
 8007e5c:	f023 0303 	bic.w	r3, r3, #3
 8007e60:	f043 0302 	orr.w	r3, r3, #2
 8007e64:	81a3      	strh	r3, [r4, #12]
 8007e66:	e7e3      	b.n	8007e30 <__smakebuf_r+0xc>
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	6020      	str	r0, [r4, #0]
 8007e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e70:	81a3      	strh	r3, [r4, #12]
 8007e72:	9b00      	ldr	r3, [sp, #0]
 8007e74:	6163      	str	r3, [r4, #20]
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	6120      	str	r0, [r4, #16]
 8007e7a:	b15b      	cbz	r3, 8007e94 <__smakebuf_r+0x70>
 8007e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 f81d 	bl	8007ec0 <_isatty_r>
 8007e86:	b128      	cbz	r0, 8007e94 <__smakebuf_r+0x70>
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	f023 0303 	bic.w	r3, r3, #3
 8007e8e:	f043 0301 	orr.w	r3, r3, #1
 8007e92:	81a3      	strh	r3, [r4, #12]
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	431d      	orrs	r5, r3
 8007e98:	81a5      	strh	r5, [r4, #12]
 8007e9a:	e7cf      	b.n	8007e3c <__smakebuf_r+0x18>

08007e9c <_fstat_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4d07      	ldr	r5, [pc, #28]	; (8007ebc <_fstat_r+0x20>)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	602b      	str	r3, [r5, #0]
 8007eaa:	f7f9 fdec 	bl	8001a86 <_fstat>
 8007eae:	1c43      	adds	r3, r0, #1
 8007eb0:	d102      	bne.n	8007eb8 <_fstat_r+0x1c>
 8007eb2:	682b      	ldr	r3, [r5, #0]
 8007eb4:	b103      	cbz	r3, 8007eb8 <_fstat_r+0x1c>
 8007eb6:	6023      	str	r3, [r4, #0]
 8007eb8:	bd38      	pop	{r3, r4, r5, pc}
 8007eba:	bf00      	nop
 8007ebc:	200007f4 	.word	0x200007f4

08007ec0 <_isatty_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d06      	ldr	r5, [pc, #24]	; (8007edc <_isatty_r+0x1c>)
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	602b      	str	r3, [r5, #0]
 8007ecc:	f7f9 fdeb 	bl	8001aa6 <_isatty>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_isatty_r+0x1a>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_isatty_r+0x1a>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	200007f4 	.word	0x200007f4

08007ee0 <_init>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr

08007eec <_fini>:
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	bf00      	nop
 8007ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef2:	bc08      	pop	{r3}
 8007ef4:	469e      	mov	lr, r3
 8007ef6:	4770      	bx	lr

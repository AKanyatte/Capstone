
4glte.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004064  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080041f4  080041f4  000141f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004280  08004280  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004280  08004280  00014280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004288  08004288  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004288  08004288  00014288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800428c  0800428c  0001428c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000005c  080042ec  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  080042ec  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca68  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002073  00000000  00000000  0002cb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e9  00000000  00000000  0002f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff9c  00000000  00000000  0002fe01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d13b  00000000  00000000  0004fd9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf390  00000000  00000000  0005ced8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e18  00000000  00000000  0011c268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0011f080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041dc 	.word	0x080041dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080041dc 	.word	0x080041dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <boardled_on>:
	//set PB_3 to output mode
	GPIOB->MODER |= (1U << 6);
}

void boardled_on(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
		GPIOB->ODR |= (1U << 3);
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <boardled_on+0x1c>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <boardled_on+0x1c>)
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	6153      	str	r3, [r2, #20]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	48000400 	.word	0x48000400

0800059c <boardled_off>:

void boardled_off(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
		GPIOB->ODR &= ~(1U << 3);
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <boardled_off+0x1c>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <boardled_off+0x1c>)
 80005a6:	f023 0308 	bic.w	r3, r3, #8
 80005aa:	6153      	str	r3, [r2, #20]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	48000400 	.word	0x48000400

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 facb 	bl	8000b5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f848 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f8fc 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f8ca 	bl	8000764 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005d0:	f000 f898 	bl	8000704 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  boardled_on();
 80005d4:	f7ff ffd2 	bl	800057c <boardled_on>

  while(!ATisOK)
 80005d8:	e02d      	b.n	8000636 <main+0x7a>
    {
      sprintf(ATcommand,"AT\r\n");
 80005da:	4919      	ldr	r1, [pc, #100]	; (8000640 <main+0x84>)
 80005dc:	4819      	ldr	r0, [pc, #100]	; (8000644 <main+0x88>)
 80005de:	f003 f943 	bl	8003868 <siprintf>
      HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80005e2:	4818      	ldr	r0, [pc, #96]	; (8000644 <main+0x88>)
 80005e4:	f7ff fdf4 	bl	80001d0 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f0:	4914      	ldr	r1, [pc, #80]	; (8000644 <main+0x88>)
 80005f2:	4815      	ldr	r0, [pc, #84]	; (8000648 <main+0x8c>)
 80005f4:	f002 f84e 	bl	8002694 <HAL_UART_Transmit>
      HAL_UART_Receive (&huart1, rx_buffer, 100, 100);
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	2264      	movs	r2, #100	; 0x64
 80005fc:	4913      	ldr	r1, [pc, #76]	; (800064c <main+0x90>)
 80005fe:	4812      	ldr	r0, [pc, #72]	; (8000648 <main+0x8c>)
 8000600:	f002 f8d2 	bl	80027a8 <HAL_UART_Receive>
      HAL_Delay(1000);
 8000604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000608:	f000 fb1c 	bl	8000c44 <HAL_Delay>
      if(strstr((char *)rx_buffer,"\r\nOK\r\n"))
 800060c:	4910      	ldr	r1, [pc, #64]	; (8000650 <main+0x94>)
 800060e:	480f      	ldr	r0, [pc, #60]	; (800064c <main+0x90>)
 8000610:	f003 f952 	bl	80038b8 <strstr>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d004      	beq.n	8000624 <main+0x68>
      {
    	boardled_off();
 800061a:	f7ff ffbf 	bl	800059c <boardled_off>
        ATisOK = 1;
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <main+0x98>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(1000);
 8000624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000628:	f000 fb0c 	bl	8000c44 <HAL_Delay>
      memset(rx_buffer,0,sizeof(rx_buffer));
 800062c:	2264      	movs	r2, #100	; 0x64
 800062e:	2100      	movs	r1, #0
 8000630:	4806      	ldr	r0, [pc, #24]	; (800064c <main+0x90>)
 8000632:	f003 f939 	bl	80038a8 <memset>
  while(!ATisOK)
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <main+0x98>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0cd      	beq.n	80005da <main+0x1e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	e7fe      	b.n	800063e <main+0x82>
 8000640:	080041f4 	.word	0x080041f4
 8000644:	20000188 	.word	0x20000188
 8000648:	20000078 	.word	0x20000078
 800064c:	200001dc 	.word	0x200001dc
 8000650:	080041fc 	.word	0x080041fc
 8000654:	200001d8 	.word	0x200001d8

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b096      	sub	sp, #88	; 0x58
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2244      	movs	r2, #68	; 0x44
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 f91e 	bl	80038a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800067a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067e:	f000 fe35 	bl	80012ec <HAL_PWREx_ControlVoltageScaling>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000688:	f000 f8e6 	bl	8000858 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068c:	f000 fe10 	bl	80012b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <SystemClock_Config+0xa8>)
 8000692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000696:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <SystemClock_Config+0xa8>)
 8000698:	f023 0318 	bic.w	r3, r3, #24
 800069c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006a0:	2314      	movs	r3, #20
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b0:	2360      	movs	r3, #96	; 0x60
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fe6b 	bl	8001398 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006c8:	f000 f8c6 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fa6b 	bl	8001bc0 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006f0:	f000 f8b2 	bl	8000858 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006f4:	f001 fe7e 	bl	80023f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006f8:	bf00      	nop
 80006fa:	3758      	adds	r7, #88	; 0x58
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000

08000704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USART1_UART_Init+0x58>)
 800070a:	4a15      	ldr	r2, [pc, #84]	; (8000760 <MX_USART1_UART_Init+0x5c>)
 800070c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_USART1_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART1_UART_Init+0x58>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000748:	f001 ff56 	bl	80025f8 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f881 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000078 	.word	0x20000078
 8000760:	40013800 	.word	0x40013800

08000764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <MX_USART2_UART_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART2_UART_Init+0x58>)
 80007a8:	f001 ff26 	bl	80025f8 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 f851 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000100 	.word	0x20000100
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a16      	ldr	r2, [pc, #88]	; (8000850 <MX_GPIO_Init+0x8c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_GPIO_Init+0x8c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_GPIO_Init+0x8c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <MX_GPIO_Init+0x8c>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_GPIO_Init+0x8c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2108      	movs	r1, #8
 8000826:	480b      	ldr	r0, [pc, #44]	; (8000854 <MX_GPIO_Init+0x90>)
 8000828:	f000 fd2a 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800082c:	2308      	movs	r3, #8
 800082e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_GPIO_Init+0x90>)
 8000844:	f000 fbb2 	bl	8000fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	48000400 	.word	0x48000400

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x44>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <HAL_MspInit+0x44>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6613      	str	r3, [r2, #96]	; 0x60
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_MspInit+0x44>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_MspInit+0x44>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <HAL_MspInit+0x44>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	6593      	str	r3, [r2, #88]	; 0x58
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_MspInit+0x44>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0a0      	sub	sp, #128	; 0x80
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	f107 0318 	add.w	r3, r7, #24
 80008c8:	2254      	movs	r2, #84	; 0x54
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 ffeb 	bl	80038a8 <memset>
  if(huart->Instance==USART1)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a4b      	ldr	r2, [pc, #300]	; (8000a04 <HAL_UART_MspInit+0x158>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d140      	bne.n	800095e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008dc:	2301      	movs	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fb8d 	bl	8002008 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008f4:	f7ff ffb0 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008f8:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <HAL_UART_MspInit+0x15c>)
 80008fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fc:	4a42      	ldr	r2, [pc, #264]	; (8000a08 <HAL_UART_MspInit+0x15c>)
 80008fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000902:	6613      	str	r3, [r2, #96]	; 0x60
 8000904:	4b40      	ldr	r3, [pc, #256]	; (8000a08 <HAL_UART_MspInit+0x15c>)
 8000906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <HAL_UART_MspInit+0x15c>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000914:	4a3c      	ldr	r2, [pc, #240]	; (8000a08 <HAL_UART_MspInit+0x15c>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091c:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <HAL_UART_MspInit+0x15c>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000928:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800092c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800093a:	2307      	movs	r3, #7
 800093c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fb30 	bl	8000fac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	2025      	movs	r0, #37	; 0x25
 8000952:	f000 fa76 	bl	8000e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000956:	2025      	movs	r0, #37	; 0x25
 8000958:	f000 fa8f 	bl	8000e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095c:	e04d      	b.n	80009fa <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a2a      	ldr	r2, [pc, #168]	; (8000a0c <HAL_UART_MspInit+0x160>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d148      	bne.n	80009fa <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000968:	2302      	movs	r3, #2
 800096a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800096c:	2300      	movs	r3, #0
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fb47 	bl	8002008 <HAL_RCCEx_PeriphCLKConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000980:	f7ff ff6a 	bl	8000858 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <HAL_UART_MspInit+0x15c>)
 8000986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000988:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <HAL_UART_MspInit+0x15c>)
 800098a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098e:	6593      	str	r3, [r2, #88]	; 0x58
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <HAL_UART_MspInit+0x15c>)
 8000992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <HAL_UART_MspInit+0x15c>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a0:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <HAL_UART_MspInit+0x15c>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_UART_MspInit+0x15c>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009b4:	2304      	movs	r3, #4
 80009b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c4:	2307      	movs	r3, #7
 80009c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009cc:	4619      	mov	r1, r3
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d2:	f000 faeb 	bl	8000fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80009e8:	2303      	movs	r3, #3
 80009ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009f0:	4619      	mov	r1, r3
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f000 fad9 	bl	8000fac <HAL_GPIO_Init>
}
 80009fa:	bf00      	nop
 80009fc:	3780      	adds	r7, #128	; 0x80
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40013800 	.word	0x40013800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40004400 	.word	0x40004400

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f8d2 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <USART1_IRQHandler+0x10>)
 8000a6a:	f001 ff67 	bl	800293c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000078 	.word	0x20000078

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f002 ff1c 	bl	80038e4 <__errno>
 8000aac:	4603      	mov	r3, r0
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20010000 	.word	0x20010000
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	20000240 	.word	0x20000240
 8000ae0:	20000390 	.word	0x20000390

08000ae4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b0c:	f7ff ffea 	bl	8000ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	; (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	; (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b36:	f002 fedb 	bl	80038f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3a:	f7ff fd3f 	bl	80005bc <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b40:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b4c:	08004290 	.word	0x08004290
  ldr r2, =_sbss
 8000b50:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b54:	20000390 	.word	0x20000390

08000b58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_IRQHandler>

08000b5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f961 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f80e 	bl	8000b8c <HAL_InitTick>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	e001      	b.n	8000b80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b7c:	f7ff fe72 	bl	8000864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_InitTick+0x6c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d023      	beq.n	8000be8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_InitTick+0x70>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_InitTick+0x6c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f96d 	bl	8000e96 <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d10f      	bne.n	8000be2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d809      	bhi.n	8000bdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f000 f937 	bl	8000e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_InitTick+0x74>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	e007      	b.n	8000bec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e004      	b.n	8000bec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
 8000be6:	e001      	b.n	8000bec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000244 	.word	0x20000244

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000244 	.word	0x20000244

08000c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff ffee 	bl	8000c2c <HAL_GetTick>
 8000c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5c:	d005      	beq.n	8000c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_Delay+0x44>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6a:	bf00      	nop
 8000c6c:	f7ff ffde 	bl	8000c2c <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f7      	bhi.n	8000c6c <HAL_Delay+0x28>
  {
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db0b      	blt.n	8000d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	4907      	ldr	r1, [pc, #28]	; (8000d28 <__NVIC_EnableIRQ+0x38>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	fa00 f202 	lsl.w	r2, r0, r2
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f7ff ff8e 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff29 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff3e 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff8e 	bl	8000d80 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5d 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff31 	bl	8000cf0 <__NVIC_EnableIRQ>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ffa2 	bl	8000de8 <SysTick_Config>
 8000ea4:	4603      	mov	r3, r0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b085      	sub	sp, #20
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d008      	beq.n	8000ed8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2204      	movs	r2, #4
 8000eca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e022      	b.n	8000f1e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 020e 	bic.w	r2, r2, #14
 8000ee6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0201 	bic.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efc:	f003 021c 	and.w	r2, r3, #28
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	2101      	movs	r1, #1
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d005      	beq.n	8000f4e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2204      	movs	r2, #4
 8000f46:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e029      	b.n	8000fa2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 020e 	bic.w	r2, r2, #14
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0201 	bic.w	r2, r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f003 021c 	and.w	r2, r3, #28
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f80:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	4798      	blx	r3
    }
  }
  return status;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	e148      	b.n	800124e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 813a 	beq.w	8001248 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d005      	beq.n	8000fec <HAL_GPIO_Init+0x40>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d130      	bne.n	800104e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001022:	2201      	movs	r2, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	f003 0201 	and.w	r2, r3, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b03      	cmp	r3, #3
 8001058:	d017      	beq.n	800108a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d123      	bne.n	80010de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	691a      	ldr	r2, [r3, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	6939      	ldr	r1, [r7, #16]
 80010da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0203 	and.w	r2, r3, #3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8094 	beq.w	8001248 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001120:	4b52      	ldr	r3, [pc, #328]	; (800126c <HAL_GPIO_Init+0x2c0>)
 8001122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001124:	4a51      	ldr	r2, [pc, #324]	; (800126c <HAL_GPIO_Init+0x2c0>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6613      	str	r3, [r2, #96]	; 0x60
 800112c:	4b4f      	ldr	r3, [pc, #316]	; (800126c <HAL_GPIO_Init+0x2c0>)
 800112e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001138:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <HAL_GPIO_Init+0x2c4>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001162:	d00d      	beq.n	8001180 <HAL_GPIO_Init+0x1d4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a43      	ldr	r2, [pc, #268]	; (8001274 <HAL_GPIO_Init+0x2c8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d007      	beq.n	800117c <HAL_GPIO_Init+0x1d0>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a42      	ldr	r2, [pc, #264]	; (8001278 <HAL_GPIO_Init+0x2cc>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d101      	bne.n	8001178 <HAL_GPIO_Init+0x1cc>
 8001174:	2302      	movs	r3, #2
 8001176:	e004      	b.n	8001182 <HAL_GPIO_Init+0x1d6>
 8001178:	2307      	movs	r3, #7
 800117a:	e002      	b.n	8001182 <HAL_GPIO_Init+0x1d6>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <HAL_GPIO_Init+0x1d6>
 8001180:	2300      	movs	r3, #0
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	f002 0203 	and.w	r2, r2, #3
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	4093      	lsls	r3, r2
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001192:	4937      	ldr	r1, [pc, #220]	; (8001270 <HAL_GPIO_Init+0x2c4>)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011c4:	4a2d      	ldr	r2, [pc, #180]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ee:	4a23      	ldr	r2, [pc, #140]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <HAL_GPIO_Init+0x2d0>)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_GPIO_Init+0x2d0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_GPIO_Init+0x2d0>)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	f47f aeaf 	bne.w	8000fbc <HAL_GPIO_Init+0x10>
  }
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000
 8001274:	48000400 	.word	0x48000400
 8001278:	48000800 	.word	0x48000800
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40007000 	.word	0x40007000

080012d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40007000 	.word	0x40007000

080012ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012fa:	d130      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012fc:	4b23      	ldr	r3, [pc, #140]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001308:	d038      	beq.n	800137c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001312:	4a1e      	ldr	r2, [pc, #120]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001318:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2232      	movs	r2, #50	; 0x32
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9b      	lsrs	r3, r3, #18
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001330:	e002      	b.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3b01      	subs	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001344:	d102      	bne.n	800134c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f2      	bne.n	8001332 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001358:	d110      	bne.n	800137c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e00f      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136a:	d007      	beq.n	800137c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001374:	4a05      	ldr	r2, [pc, #20]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40007000 	.word	0x40007000
 8001390:	20000000 	.word	0x20000000
 8001394:	431bde83 	.word	0x431bde83

08001398 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	f000 bc02 	b.w	8001bb0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ac:	4b96      	ldr	r3, [pc, #600]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013b6:	4b94      	ldr	r3, [pc, #592]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80e4 	beq.w	8001596 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d007      	beq.n	80013e4 <HAL_RCC_OscConfig+0x4c>
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b0c      	cmp	r3, #12
 80013d8:	f040 808b 	bne.w	80014f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	f040 8087 	bne.w	80014f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013e4:	4b88      	ldr	r3, [pc, #544]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_OscConfig+0x64>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e3d9      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1a      	ldr	r2, [r3, #32]
 8001400:	4b81      	ldr	r3, [pc, #516]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <HAL_RCC_OscConfig+0x7e>
 800140c:	4b7e      	ldr	r3, [pc, #504]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001414:	e005      	b.n	8001422 <HAL_RCC_OscConfig+0x8a>
 8001416:	4b7c      	ldr	r3, [pc, #496]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001422:	4293      	cmp	r3, r2
 8001424:	d223      	bcs.n	800146e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 fd8c 	bl	8001f48 <RCC_SetFlashLatencyFromMSIRange>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e3ba      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800143a:	4b73      	ldr	r3, [pc, #460]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a72      	ldr	r2, [pc, #456]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b70      	ldr	r3, [pc, #448]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	496d      	ldr	r1, [pc, #436]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001458:	4b6b      	ldr	r3, [pc, #428]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	4968      	ldr	r1, [pc, #416]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 800146c:	e025      	b.n	80014ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800146e:	4b66      	ldr	r3, [pc, #408]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a65      	ldr	r2, [pc, #404]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b63      	ldr	r3, [pc, #396]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4960      	ldr	r1, [pc, #384]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001488:	4313      	orrs	r3, r2
 800148a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800148c:	4b5e      	ldr	r3, [pc, #376]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	495b      	ldr	r1, [pc, #364]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fd4c 	bl	8001f48 <RCC_SetFlashLatencyFromMSIRange>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e37a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014ba:	f000 fc81 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 80014be:	4602      	mov	r2, r0
 80014c0:	4b51      	ldr	r3, [pc, #324]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	4950      	ldr	r1, [pc, #320]	; (800160c <HAL_RCC_OscConfig+0x274>)
 80014cc:	5ccb      	ldrb	r3, [r1, r3]
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	fa22 f303 	lsr.w	r3, r2, r3
 80014d6:	4a4e      	ldr	r2, [pc, #312]	; (8001610 <HAL_RCC_OscConfig+0x278>)
 80014d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014da:	4b4e      	ldr	r3, [pc, #312]	; (8001614 <HAL_RCC_OscConfig+0x27c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fb54 	bl	8000b8c <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d052      	beq.n	8001594 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	e35e      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d032      	beq.n	8001560 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014fa:	4b43      	ldr	r3, [pc, #268]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a42      	ldr	r2, [pc, #264]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001506:	f7ff fb91 	bl	8000c2c <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800150e:	f7ff fb8d 	bl	8000c2c <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e347      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001520:	4b39      	ldr	r3, [pc, #228]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a35      	ldr	r2, [pc, #212]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4930      	ldr	r1, [pc, #192]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	492b      	ldr	r1, [pc, #172]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
 800155e:	e01a      	b.n	8001596 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a28      	ldr	r2, [pc, #160]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800156c:	f7ff fb5e 	bl	8000c2c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001574:	f7ff fb5a 	bl	8000c2c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e314      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x1dc>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d073      	beq.n	800168a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_OscConfig+0x21c>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d10e      	bne.n	80015cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d10b      	bne.n	80015cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d063      	beq.n	8001688 <HAL_RCC_OscConfig+0x2f0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d15f      	bne.n	8001688 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e2f1      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d106      	bne.n	80015e4 <HAL_RCC_OscConfig+0x24c>
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e025      	b.n	8001630 <HAL_RCC_OscConfig+0x298>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ec:	d114      	bne.n	8001618 <HAL_RCC_OscConfig+0x280>
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a02      	ldr	r2, [pc, #8]	; (8001608 <HAL_RCC_OscConfig+0x270>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e013      	b.n	8001630 <HAL_RCC_OscConfig+0x298>
 8001608:	40021000 	.word	0x40021000
 800160c:	08004204 	.word	0x08004204
 8001610:	20000000 	.word	0x20000000
 8001614:	20000004 	.word	0x20000004
 8001618:	4ba0      	ldr	r3, [pc, #640]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a9f      	ldr	r2, [pc, #636]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800161e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b9d      	ldr	r3, [pc, #628]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a9c      	ldr	r2, [pc, #624]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d013      	beq.n	8001660 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff faf8 	bl	8000c2c <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff faf4 	bl	8000c2c <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	; 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e2ae      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001652:	4b92      	ldr	r3, [pc, #584]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x2a8>
 800165e:	e014      	b.n	800168a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fae4 	bl	8000c2c <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fae0 	bl	8000c2c <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e29a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167a:	4b88      	ldr	r3, [pc, #544]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x2d0>
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d060      	beq.n	8001758 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x310>
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d119      	bne.n	80016d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d116      	bne.n	80016d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a8:	4b7c      	ldr	r3, [pc, #496]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_OscConfig+0x328>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e277      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b76      	ldr	r3, [pc, #472]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	4973      	ldr	r1, [pc, #460]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d4:	e040      	b.n	8001758 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d023      	beq.n	8001726 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016de:	4b6f      	ldr	r3, [pc, #444]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a6e      	ldr	r2, [pc, #440]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7ff fa9f 	bl	8000c2c <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f2:	f7ff fa9b 	bl	8000c2c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e255      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001704:	4b65      	ldr	r3, [pc, #404]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b62      	ldr	r3, [pc, #392]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	061b      	lsls	r3, r3, #24
 800171e:	495f      	ldr	r1, [pc, #380]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
 8001724:	e018      	b.n	8001758 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001726:	4b5d      	ldr	r3, [pc, #372]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a5c      	ldr	r2, [pc, #368]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800172c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001732:	f7ff fa7b 	bl	8000c2c <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff fa77 	bl	8000c2c <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e231      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800174c:	4b53      	ldr	r3, [pc, #332]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f0      	bne.n	800173a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d03c      	beq.n	80017de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01c      	beq.n	80017a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176c:	4b4b      	ldr	r3, [pc, #300]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800176e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001772:	4a4a      	ldr	r2, [pc, #296]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff fa56 	bl	8000c2c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fa52 	bl	8000c2c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e20c      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ef      	beq.n	8001784 <HAL_RCC_OscConfig+0x3ec>
 80017a4:	e01b      	b.n	80017de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a6:	4b3d      	ldr	r3, [pc, #244]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80017a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ac:	4a3b      	ldr	r2, [pc, #236]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fa39 	bl	8000c2c <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff fa35 	bl	8000c2c <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1ef      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d0:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80017d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1ef      	bne.n	80017be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80a6 	beq.w	8001938 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10d      	bne.n	8001818 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x504>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	4a26      	ldr	r2, [pc, #152]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001806:	6593      	str	r3, [r2, #88]	; 0x58
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001814:	2301      	movs	r3, #1
 8001816:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <HAL_RCC_OscConfig+0x508>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_RCC_OscConfig+0x508>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <HAL_RCC_OscConfig+0x508>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001830:	f7ff f9fc 	bl	8000c2c <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001838:	f7ff f9f8 	bl	8000c2c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e1b2      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_RCC_OscConfig+0x508>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d108      	bne.n	8001870 <HAL_RCC_OscConfig+0x4d8>
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800186e:	e029      	b.n	80018c4 <HAL_RCC_OscConfig+0x52c>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d115      	bne.n	80018a4 <HAL_RCC_OscConfig+0x50c>
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800187a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187e:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <HAL_RCC_OscConfig+0x504>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	4a03      	ldr	r2, [pc, #12]	; (800189c <HAL_RCC_OscConfig+0x504>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001898:	e014      	b.n	80018c4 <HAL_RCC_OscConfig+0x52c>
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
 80018a0:	40007000 	.word	0x40007000
 80018a4:	4b9a      	ldr	r3, [pc, #616]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018aa:	4a99      	ldr	r2, [pc, #612]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b4:	4b96      	ldr	r3, [pc, #600]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 80018b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ba:	4a95      	ldr	r2, [pc, #596]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 80018bc:	f023 0304 	bic.w	r3, r3, #4
 80018c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d016      	beq.n	80018fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff f9ae 	bl	8000c2c <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d4:	f7ff f9aa 	bl	8000c2c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e162      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ea:	4b89      	ldr	r3, [pc, #548]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 80018ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0ed      	beq.n	80018d4 <HAL_RCC_OscConfig+0x53c>
 80018f8:	e015      	b.n	8001926 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff f997 	bl	8000c2c <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff f993 	bl	8000c2c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e14b      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001918:	4b7d      	ldr	r3, [pc, #500]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ed      	bne.n	8001902 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001926:	7ffb      	ldrb	r3, [r7, #31]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192c:	4b78      	ldr	r3, [pc, #480]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	4a77      	ldr	r2, [pc, #476]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001936:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b00      	cmp	r3, #0
 8001942:	d03c      	beq.n	80019be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	2b00      	cmp	r3, #0
 800194a:	d01c      	beq.n	8001986 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800194c:	4b70      	ldr	r3, [pc, #448]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 800194e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001952:	4a6f      	ldr	r2, [pc, #444]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff f966 	bl	8000c2c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001964:	f7ff f962 	bl	8000c2c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e11c      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001976:	4b66      	ldr	r3, [pc, #408]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001978:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ef      	beq.n	8001964 <HAL_RCC_OscConfig+0x5cc>
 8001984:	e01b      	b.n	80019be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001986:	4b62      	ldr	r3, [pc, #392]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001988:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800198c:	4a60      	ldr	r2, [pc, #384]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001996:	f7ff f949 	bl	8000c2c <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800199e:	f7ff f945 	bl	8000c2c <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0ff      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019b0:	4b57      	ldr	r3, [pc, #348]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 80019b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1ef      	bne.n	800199e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80f3 	beq.w	8001bae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	f040 80c9 	bne.w	8001b64 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019d2:	4b4f      	ldr	r3, [pc, #316]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 0203 	and.w	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d12c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	3b01      	subs	r3, #1
 80019f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d123      	bne.n	8001a40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d11b      	bne.n	8001a40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d113      	bne.n	8001a40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	3b01      	subs	r3, #1
 8001a26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d109      	bne.n	8001a40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d06b      	beq.n	8001b18 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d062      	beq.n	8001b0c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0ac      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a2d      	ldr	r2, [pc, #180]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001a5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a62:	f7ff f8e3 	bl	8000c2c <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7ff f8df 	bl	8000c2c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e099      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f0      	bne.n	8001a6a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <HAL_RCC_OscConfig+0x77c>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a98:	3a01      	subs	r2, #1
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aa2:	0212      	lsls	r2, r2, #8
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001aaa:	0852      	lsrs	r2, r2, #1
 8001aac:	3a01      	subs	r2, #1
 8001aae:	0552      	lsls	r2, r2, #21
 8001ab0:	4311      	orrs	r1, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ab6:	0852      	lsrs	r2, r2, #1
 8001ab8:	3a01      	subs	r2, #1
 8001aba:	0652      	lsls	r2, r2, #25
 8001abc:	4311      	orrs	r1, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ac2:	06d2      	lsls	r2, r2, #27
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	4912      	ldr	r1, [pc, #72]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ae4:	f7ff f8a2 	bl	8000c2c <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff f89e 	bl	8000c2c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e058      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <HAL_RCC_OscConfig+0x778>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b0a:	e050      	b.n	8001bae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e04f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
 8001b10:	40021000 	.word	0x40021000
 8001b14:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <HAL_RCC_OscConfig+0x820>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d144      	bne.n	8001bae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_RCC_OscConfig+0x820>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a23      	ldr	r2, [pc, #140]	; (8001bb8 <HAL_RCC_OscConfig+0x820>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <HAL_RCC_OscConfig+0x820>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4a20      	ldr	r2, [pc, #128]	; (8001bb8 <HAL_RCC_OscConfig+0x820>)
 8001b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b3c:	f7ff f876 	bl	8000c2c <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff f872 	bl	8000c2c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e02c      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_RCC_OscConfig+0x820>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x7ac>
 8001b62:	e024      	b.n	8001bae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	d01f      	beq.n	8001baa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_RCC_OscConfig+0x820>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <HAL_RCC_OscConfig+0x820>)
 8001b70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff f859 	bl	8000c2c <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff f855 	bl	8000c2c <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e00f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_RCC_OscConfig+0x820>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_OscConfig+0x820>)
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	4905      	ldr	r1, [pc, #20]	; (8001bb8 <HAL_RCC_OscConfig+0x820>)
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_OscConfig+0x824>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60cb      	str	r3, [r1, #12]
 8001ba8:	e001      	b.n	8001bae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	feeefffc 	.word	0xfeeefffc

08001bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0e7      	b.n	8001da4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b75      	ldr	r3, [pc, #468]	; (8001dac <HAL_RCC_ClockConfig+0x1ec>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d910      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b72      	ldr	r3, [pc, #456]	; (8001dac <HAL_RCC_ClockConfig+0x1ec>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0207 	bic.w	r2, r3, #7
 8001bea:	4970      	ldr	r1, [pc, #448]	; (8001dac <HAL_RCC_ClockConfig+0x1ec>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b6e      	ldr	r3, [pc, #440]	; (8001dac <HAL_RCC_ClockConfig+0x1ec>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0cf      	b.n	8001da4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d010      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	4b66      	ldr	r3, [pc, #408]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d908      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c20:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4960      	ldr	r1, [pc, #384]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d04c      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c46:	4b5a      	ldr	r3, [pc, #360]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d121      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0a6      	b.n	8001da4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5e:	4b54      	ldr	r3, [pc, #336]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d115      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e09a      	b.n	8001da4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c76:	4b4e      	ldr	r3, [pc, #312]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e08e      	b.n	8001da4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c86:	4b4a      	ldr	r3, [pc, #296]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e086      	b.n	8001da4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c96:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f023 0203 	bic.w	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4943      	ldr	r1, [pc, #268]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca8:	f7fe ffc0 	bl	8000c2c <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7fe ffbc 	bl	8000c2c <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e06e      	b.n	8001da4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	4b3a      	ldr	r3, [pc, #232]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 020c 	and.w	r2, r3, #12
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1eb      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d010      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d208      	bcs.n	8001d06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf4:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	492b      	ldr	r1, [pc, #172]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d06:	4b29      	ldr	r3, [pc, #164]	; (8001dac <HAL_RCC_ClockConfig+0x1ec>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d210      	bcs.n	8001d36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <HAL_RCC_ClockConfig+0x1ec>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 0207 	bic.w	r2, r3, #7
 8001d1c:	4923      	ldr	r1, [pc, #140]	; (8001dac <HAL_RCC_ClockConfig+0x1ec>)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <HAL_RCC_ClockConfig+0x1ec>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e036      	b.n	8001da4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d008      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	4918      	ldr	r1, [pc, #96]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d009      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4910      	ldr	r1, [pc, #64]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d74:	f000 f824 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	490b      	ldr	r1, [pc, #44]	; (8001db4 <HAL_RCC_ClockConfig+0x1f4>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1fc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fef7 	bl	8000b8c <HAL_InitTick>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001da2:	7afb      	ldrb	r3, [r7, #11]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40022000 	.word	0x40022000
 8001db0:	40021000 	.word	0x40021000
 8001db4:	08004204 	.word	0x08004204
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000004 	.word	0x20000004

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd8:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x34>
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	d121      	bne.n	8001e32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d11e      	bne.n	8001e32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001df4:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e00:	4b31      	ldr	r3, [pc, #196]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	e005      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e10:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e1c:	4a2b      	ldr	r2, [pc, #172]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10d      	bne.n	8001e48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d102      	bne.n	8001e3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e38:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	e004      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d134      	bne.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d003      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0xac>
 8001e64:	e005      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e66:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e68:	617b      	str	r3, [r7, #20]
      break;
 8001e6a:	e005      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e6e:	617b      	str	r3, [r7, #20]
      break;
 8001e70:	e002      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	617b      	str	r3, [r7, #20]
      break;
 8001e76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	3301      	adds	r3, #1
 8001e84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	fb03 f202 	mul.w	r2, r3, r2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	0e5b      	lsrs	r3, r3, #25
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001eb8:	69bb      	ldr	r3, [r7, #24]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	0800421c 	.word	0x0800421c
 8001ed0:	00f42400 	.word	0x00f42400
 8001ed4:	007a1200 	.word	0x007a1200

08001ed8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_RCC_GetHCLKFreq+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000000 	.word	0x20000000

08001ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ef4:	f7ff fff0 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	4904      	ldr	r1, [pc, #16]	; (8001f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08004214 	.word	0x08004214

08001f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f20:	f7ff ffda 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	0adb      	lsrs	r3, r3, #11
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4904      	ldr	r1, [pc, #16]	; (8001f44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08004214 	.word	0x08004214

08001f48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f54:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f60:	f7ff f9b6 	bl	80012d0 <HAL_PWREx_GetVoltageRange>
 8001f64:	6178      	str	r0, [r7, #20]
 8001f66:	e014      	b.n	8001f92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	4a24      	ldr	r2, [pc, #144]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f72:	6593      	str	r3, [r2, #88]	; 0x58
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f80:	f7ff f9a6 	bl	80012d0 <HAL_PWREx_GetVoltageRange>
 8001f84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f98:	d10b      	bne.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b80      	cmp	r3, #128	; 0x80
 8001f9e:	d919      	bls.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2ba0      	cmp	r3, #160	; 0xa0
 8001fa4:	d902      	bls.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	e013      	b.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fac:	2301      	movs	r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	e010      	b.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b80      	cmp	r3, #128	; 0x80
 8001fb6:	d902      	bls.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fb8:	2303      	movs	r3, #3
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	e00a      	b.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b80      	cmp	r3, #128	; 0x80
 8001fc2:	d102      	bne.n	8001fca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	e004      	b.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b70      	cmp	r3, #112	; 0x70
 8001fce:	d101      	bne.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 0207 	bic.w	r2, r3, #7
 8001fdc:	4909      	ldr	r1, [pc, #36]	; (8002004 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d001      	beq.n	8001ff6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	40022000 	.word	0x40022000

08002008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002010:	2300      	movs	r3, #0
 8002012:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002014:	2300      	movs	r3, #0
 8002016:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002020:	2b00      	cmp	r3, #0
 8002022:	d031      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002028:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800202c:	d01a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800202e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002032:	d814      	bhi.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002034:	2b00      	cmp	r3, #0
 8002036:	d009      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002038:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800203c:	d10f      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800203e:	4b5d      	ldr	r3, [pc, #372]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4a5c      	ldr	r2, [pc, #368]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800204a:	e00c      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3304      	adds	r3, #4
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f9de 	bl	8002414 <RCCEx_PLLSAI1_Config>
 8002058:	4603      	mov	r3, r0
 800205a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800205c:	e003      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	74fb      	strb	r3, [r7, #19]
      break;
 8002062:	e000      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002066:	7cfb      	ldrb	r3, [r7, #19]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10b      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800206c:	4b51      	ldr	r3, [pc, #324]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002072:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	494e      	ldr	r1, [pc, #312]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002082:	e001      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 809e 	beq.w	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002096:	2300      	movs	r3, #0
 8002098:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800209a:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80020aa:	2300      	movs	r3, #0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00d      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	4b40      	ldr	r3, [pc, #256]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	4a3f      	ldr	r2, [pc, #252]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ba:	6593      	str	r3, [r2, #88]	; 0x58
 80020bc:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c8:	2301      	movs	r3, #1
 80020ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020cc:	4b3a      	ldr	r3, [pc, #232]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a39      	ldr	r2, [pc, #228]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020d8:	f7fe fda8 	bl	8000c2c <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020de:	e009      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e0:	f7fe fda4 	bl	8000c2c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d902      	bls.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	74fb      	strb	r3, [r7, #19]
        break;
 80020f2:	e005      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020f4:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0ef      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d15a      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002106:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002110:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01e      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	429a      	cmp	r2, r3
 8002120:	d019      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800212c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002144:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800214e:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d016      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe fd64 	bl	8000c2c <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002166:	e00b      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002168:	f7fe fd60 	bl	8000c2c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	; 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d902      	bls.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	74fb      	strb	r3, [r7, #19]
            break;
 800217e:	e006      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0ec      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800218e:	7cfb      	ldrb	r3, [r7, #19]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10b      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a2:	4904      	ldr	r1, [pc, #16]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021aa:	e009      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021ac:	7cfb      	ldrb	r3, [r7, #19]
 80021ae:	74bb      	strb	r3, [r7, #18]
 80021b0:	e006      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c0:	7c7b      	ldrb	r3, [r7, #17]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b8a      	ldr	r3, [pc, #552]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	4a89      	ldr	r2, [pc, #548]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021de:	4b84      	ldr	r3, [pc, #528]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e4:	f023 0203 	bic.w	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4980      	ldr	r1, [pc, #512]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002200:	4b7b      	ldr	r3, [pc, #492]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	f023 020c 	bic.w	r2, r3, #12
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	4978      	ldr	r1, [pc, #480]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002222:	4b73      	ldr	r3, [pc, #460]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002228:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	496f      	ldr	r1, [pc, #444]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002244:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002252:	4967      	ldr	r1, [pc, #412]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002266:	4b62      	ldr	r3, [pc, #392]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	495e      	ldr	r1, [pc, #376]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002288:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	4956      	ldr	r1, [pc, #344]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022aa:	4b51      	ldr	r3, [pc, #324]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	494d      	ldr	r1, [pc, #308]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d028      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022cc:	4b48      	ldr	r3, [pc, #288]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	4945      	ldr	r1, [pc, #276]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ea:	d106      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ec:	4b40      	ldr	r3, [pc, #256]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a3f      	ldr	r2, [pc, #252]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f6:	60d3      	str	r3, [r2, #12]
 80022f8:	e011      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002302:	d10c      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3304      	adds	r3, #4
 8002308:	2101      	movs	r1, #1
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f882 	bl	8002414 <RCCEx_PLLSAI1_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800231a:	7cfb      	ldrb	r3, [r7, #19]
 800231c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d028      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800232c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002330:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	492d      	ldr	r1, [pc, #180]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002348:	d106      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234a:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	4a28      	ldr	r2, [pc, #160]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002354:	60d3      	str	r3, [r2, #12]
 8002356:	e011      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002360:	d10c      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	2101      	movs	r1, #1
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f853 	bl	8002414 <RCCEx_PLLSAI1_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01c      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002396:	4916      	ldr	r1, [pc, #88]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023a6:	d10c      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	2102      	movs	r1, #2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f830 	bl	8002414 <RCCEx_PLLSAI1_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023dc:	4904      	ldr	r1, [pc, #16]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000

080023f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000

08002414 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002422:	4b74      	ldr	r3, [pc, #464]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d018      	beq.n	8002460 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800242e:	4b71      	ldr	r3, [pc, #452]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0203 	and.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d10d      	bne.n	800245a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
       ||
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002446:	4b6b      	ldr	r3, [pc, #428]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
       ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d047      	beq.n	80024ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e044      	b.n	80024ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d018      	beq.n	800249a <RCCEx_PLLSAI1_Config+0x86>
 8002468:	2b03      	cmp	r3, #3
 800246a:	d825      	bhi.n	80024b8 <RCCEx_PLLSAI1_Config+0xa4>
 800246c:	2b01      	cmp	r3, #1
 800246e:	d002      	beq.n	8002476 <RCCEx_PLLSAI1_Config+0x62>
 8002470:	2b02      	cmp	r3, #2
 8002472:	d009      	beq.n	8002488 <RCCEx_PLLSAI1_Config+0x74>
 8002474:	e020      	b.n	80024b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002476:	4b5f      	ldr	r3, [pc, #380]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d11d      	bne.n	80024be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002486:	e01a      	b.n	80024be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002488:	4b5a      	ldr	r3, [pc, #360]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002490:	2b00      	cmp	r3, #0
 8002492:	d116      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002498:	e013      	b.n	80024c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800249a:	4b56      	ldr	r3, [pc, #344]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024a6:	4b53      	ldr	r3, [pc, #332]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024b6:	e006      	b.n	80024c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
      break;
 80024bc:	e004      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024be:	bf00      	nop
 80024c0:	e002      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024c2:	bf00      	nop
 80024c4:	e000      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10d      	bne.n	80024ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ce:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	430b      	orrs	r3, r1
 80024e4:	4943      	ldr	r1, [pc, #268]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d17c      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024f0:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3f      	ldr	r2, [pc, #252]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024fc:	f7fe fb96 	bl	8000c2c <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002502:	e009      	b.n	8002518 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002504:	f7fe fb92 	bl	8000c2c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d902      	bls.n	8002518 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	73fb      	strb	r3, [r7, #15]
        break;
 8002516:	e005      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002518:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ef      	bne.n	8002504 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d15f      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d110      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002530:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6892      	ldr	r2, [r2, #8]
 8002540:	0211      	lsls	r1, r2, #8
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68d2      	ldr	r2, [r2, #12]
 8002546:	06d2      	lsls	r2, r2, #27
 8002548:	430a      	orrs	r2, r1
 800254a:	492a      	ldr	r1, [pc, #168]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800254c:	4313      	orrs	r3, r2
 800254e:	610b      	str	r3, [r1, #16]
 8002550:	e027      	b.n	80025a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d112      	bne.n	800257e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002558:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002560:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6892      	ldr	r2, [r2, #8]
 8002568:	0211      	lsls	r1, r2, #8
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6912      	ldr	r2, [r2, #16]
 800256e:	0852      	lsrs	r2, r2, #1
 8002570:	3a01      	subs	r2, #1
 8002572:	0552      	lsls	r2, r2, #21
 8002574:	430a      	orrs	r2, r1
 8002576:	491f      	ldr	r1, [pc, #124]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002578:	4313      	orrs	r3, r2
 800257a:	610b      	str	r3, [r1, #16]
 800257c:	e011      	b.n	80025a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800257e:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002586:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6892      	ldr	r2, [r2, #8]
 800258e:	0211      	lsls	r1, r2, #8
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6952      	ldr	r2, [r2, #20]
 8002594:	0852      	lsrs	r2, r2, #1
 8002596:	3a01      	subs	r2, #1
 8002598:	0652      	lsls	r2, r2, #25
 800259a:	430a      	orrs	r2, r1
 800259c:	4915      	ldr	r1, [pc, #84]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a13      	ldr	r2, [pc, #76]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7fe fb3d 	bl	8000c2c <HAL_GetTick>
 80025b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b4:	e009      	b.n	80025ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025b6:	f7fe fb39 	bl	8000c2c <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d902      	bls.n	80025ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	73fb      	strb	r3, [r7, #15]
          break;
 80025c8:	e005      	b.n	80025d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0ef      	beq.n	80025b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d106      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4903      	ldr	r1, [pc, #12]	; (80025f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e040      	b.n	800268c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe f946 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2224      	movs	r2, #36	; 0x24
 8002624:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 feb2 	bl	80033a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fc83 	bl	8002f50 <UART_SetConfig>
 800264a:	4603      	mov	r3, r0
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e01b      	b.n	800268c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 ff31 	bl	80034ec <UART_CheckIdleState>
 800268a:	4603      	mov	r3, r0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d178      	bne.n	800279e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_UART_Transmit+0x24>
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e071      	b.n	80027a0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2221      	movs	r2, #33	; 0x21
 80026c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ca:	f7fe faaf 	bl	8000c2c <HAL_GetTick>
 80026ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	88fa      	ldrh	r2, [r7, #6]
 80026d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	88fa      	ldrh	r2, [r7, #6]
 80026dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e8:	d108      	bne.n	80026fc <HAL_UART_Transmit+0x68>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d104      	bne.n	80026fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	e003      	b.n	8002704 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002704:	e030      	b.n	8002768 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 ff93 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e03c      	b.n	80027a0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10b      	bne.n	8002744 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	881a      	ldrh	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002738:	b292      	uxth	r2, r2
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	3302      	adds	r3, #2
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	e008      	b.n	8002756 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	b292      	uxth	r2, r2
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3301      	adds	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1c8      	bne.n	8002706 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2200      	movs	r2, #0
 800277c:	2140      	movs	r1, #64	; 0x40
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 ff5c 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d004      	beq.n	8002794 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e005      	b.n	80027a0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	e000      	b.n	80027a0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800279e:	2302      	movs	r3, #2
  }
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	; 0x28
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	4613      	mov	r3, r2
 80027b6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027be:	2b20      	cmp	r3, #32
 80027c0:	f040 80b6 	bne.w	8002930 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_UART_Receive+0x28>
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0ae      	b.n	8002932 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2222      	movs	r2, #34	; 0x22
 80027e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ea:	f7fe fa1f 	bl	8000c2c <HAL_GetTick>
 80027ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002808:	d10e      	bne.n	8002828 <HAL_UART_Receive+0x80>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d105      	bne.n	800281e <HAL_UART_Receive+0x76>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800281c:	e02d      	b.n	800287a <HAL_UART_Receive+0xd2>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	22ff      	movs	r2, #255	; 0xff
 8002822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002826:	e028      	b.n	800287a <HAL_UART_Receive+0xd2>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10d      	bne.n	800284c <HAL_UART_Receive+0xa4>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <HAL_UART_Receive+0x9a>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	22ff      	movs	r2, #255	; 0xff
 800283c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002840:	e01b      	b.n	800287a <HAL_UART_Receive+0xd2>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	227f      	movs	r2, #127	; 0x7f
 8002846:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800284a:	e016      	b.n	800287a <HAL_UART_Receive+0xd2>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002854:	d10d      	bne.n	8002872 <HAL_UART_Receive+0xca>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d104      	bne.n	8002868 <HAL_UART_Receive+0xc0>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	227f      	movs	r2, #127	; 0x7f
 8002862:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002866:	e008      	b.n	800287a <HAL_UART_Receive+0xd2>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	223f      	movs	r2, #63	; 0x3f
 800286c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002870:	e003      	b.n	800287a <HAL_UART_Receive+0xd2>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002880:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288a:	d108      	bne.n	800289e <HAL_UART_Receive+0xf6>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d104      	bne.n	800289e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	e003      	b.n	80028a6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80028a6:	e037      	b.n	8002918 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2200      	movs	r2, #0
 80028b0:	2120      	movs	r1, #32
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fec2 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e033      	b.n	8002932 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10c      	bne.n	80028ea <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	8a7b      	ldrh	r3, [r7, #18]
 80028da:	4013      	ands	r3, r2
 80028dc:	b29a      	uxth	r2, r3
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	3302      	adds	r3, #2
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	e00d      	b.n	8002906 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	8a7b      	ldrh	r3, [r7, #18]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4013      	ands	r3, r2
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	3301      	adds	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800291e:	b29b      	uxth	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1c1      	bne.n	80028a8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e000      	b.n	8002932 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002930:	2302      	movs	r3, #2
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b0ba      	sub	sp, #232	; 0xe8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002962:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002966:	f640 030f 	movw	r3, #2063	; 0x80f
 800296a:	4013      	ands	r3, r2
 800296c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002970:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d115      	bne.n	80029a4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00f      	beq.n	80029a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 82ae 	beq.w	8002ef6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	4798      	blx	r3
      }
      return;
 80029a2:	e2a8      	b.n	8002ef6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80029a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8117 	beq.w	8002bdc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80029be:	4b85      	ldr	r3, [pc, #532]	; (8002bd4 <HAL_UART_IRQHandler+0x298>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 810a 	beq.w	8002bdc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d011      	beq.n	80029f8 <HAL_UART_IRQHandler+0xbc>
 80029d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00b      	beq.n	80029f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2201      	movs	r2, #1
 80029e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d011      	beq.n	8002a28 <HAL_UART_IRQHandler+0xec>
 8002a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2202      	movs	r2, #2
 8002a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1e:	f043 0204 	orr.w	r2, r3, #4
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d011      	beq.n	8002a58 <HAL_UART_IRQHandler+0x11c>
 8002a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00b      	beq.n	8002a58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2204      	movs	r2, #4
 8002a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4e:	f043 0202 	orr.w	r2, r3, #2
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d017      	beq.n	8002a94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00b      	beq.n	8002a94 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2208      	movs	r2, #8
 8002a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8a:	f043 0208 	orr.w	r2, r3, #8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d012      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x18a>
 8002aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00c      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8214 	beq.w	8002efa <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	d005      	beq.n	8002b1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d04f      	beq.n	8002bbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fdf3 	bl	800370a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b40      	cmp	r3, #64	; 0x40
 8002b30:	d141      	bne.n	8002bb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3308      	adds	r3, #8
 8002b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b40:	e853 3f00 	ldrex	r3, [r3]
 8002b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3308      	adds	r3, #8
 8002b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b6e:	e841 2300 	strex	r3, r2, [r1]
 8002b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1d9      	bne.n	8002b32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d013      	beq.n	8002bae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8a:	4a13      	ldr	r2, [pc, #76]	; (8002bd8 <HAL_UART_IRQHandler+0x29c>)
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe f9c9 	bl	8000f2a <HAL_DMA_Abort_IT>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d017      	beq.n	8002bce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bac:	e00f      	b.n	8002bce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f9b8 	bl	8002f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb4:	e00b      	b.n	8002bce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f9b4 	bl	8002f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bbc:	e007      	b.n	8002bce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f9b0 	bl	8002f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002bcc:	e195      	b.n	8002efa <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bce:	bf00      	nop
    return;
 8002bd0:	e193      	b.n	8002efa <HAL_UART_IRQHandler+0x5be>
 8002bd2:	bf00      	nop
 8002bd4:	04000120 	.word	0x04000120
 8002bd8:	080037d3 	.word	0x080037d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 814e 	bne.w	8002e82 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8147 	beq.w	8002e82 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8140 	beq.w	8002e82 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2210      	movs	r2, #16
 8002c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	f040 80b8 	bne.w	8002d8a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8167 	beq.w	8002efe <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	f080 815f 	bcs.w	8002efe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 8086 	bne.w	8002d68 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c68:	e853 3f00 	ldrex	r3, [r3]
 8002c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1da      	bne.n	8002c5c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3308      	adds	r3, #8
 8002cac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cd6:	e841 2300 	strex	r3, r2, [r1]
 8002cda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e1      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cec:	e853 3f00 	ldrex	r3, [r3]
 8002cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3308      	adds	r3, #8
 8002d02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d0e:	e841 2300 	strex	r3, r2, [r1]
 8002d12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1e3      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d30:	e853 3f00 	ldrex	r3, [r3]
 8002d34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d38:	f023 0310 	bic.w	r3, r3, #16
 8002d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e4      	bne.n	8002d28 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe f8a3 	bl	8000eae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f8d8 	bl	8002f38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d88:	e0b9      	b.n	8002efe <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80ab 	beq.w	8002f02 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80a6 	beq.w	8002f02 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	e853 3f00 	ldrex	r3, [r3]
 8002dc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8002dda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ddc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002de0:	e841 2300 	strex	r3, r2, [r1]
 8002de4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e4      	bne.n	8002db6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3308      	adds	r3, #8
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	e853 3f00 	ldrex	r3, [r3]
 8002dfa:	623b      	str	r3, [r7, #32]
   return(result);
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e10:	633a      	str	r2, [r7, #48]	; 0x30
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e3      	bne.n	8002dec <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	e853 3f00 	ldrex	r3, [r3]
 8002e44:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f023 0310 	bic.w	r3, r3, #16
 8002e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5e:	69b9      	ldr	r1, [r7, #24]
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	e841 2300 	strex	r3, r2, [r1]
 8002e66:	617b      	str	r3, [r7, #20]
   return(result);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1e4      	bne.n	8002e38 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f85c 	bl	8002f38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e80:	e03f      	b.n	8002f02 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00e      	beq.n	8002eac <HAL_UART_IRQHandler+0x570>
 8002e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ea2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fcd4 	bl	8003852 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002eaa:	e02d      	b.n	8002f08 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01c      	beq.n	8002f06 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
    }
    return;
 8002ed4:	e017      	b.n	8002f06 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d012      	beq.n	8002f08 <HAL_UART_IRQHandler+0x5cc>
 8002ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00c      	beq.n	8002f08 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fc85 	bl	80037fe <UART_EndTransmit_IT>
    return;
 8002ef4:	e008      	b.n	8002f08 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002ef6:	bf00      	nop
 8002ef8:	e006      	b.n	8002f08 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002efa:	bf00      	nop
 8002efc:	e004      	b.n	8002f08 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002efe:	bf00      	nop
 8002f00:	e002      	b.n	8002f08 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002f02:	bf00      	nop
 8002f04:	e000      	b.n	8002f08 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002f06:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002f08:	37e8      	adds	r7, #232	; 0xe8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop

08002f10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f54:	b08a      	sub	sp, #40	; 0x28
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4bb4      	ldr	r3, [pc, #720]	; (8003250 <UART_SetConfig+0x300>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4aa9      	ldr	r2, [pc, #676]	; (8003254 <UART_SetConfig+0x304>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4aa0      	ldr	r2, [pc, #640]	; (8003258 <UART_SetConfig+0x308>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d126      	bne.n	8003028 <UART_SetConfig+0xd8>
 8002fda:	4ba0      	ldr	r3, [pc, #640]	; (800325c <UART_SetConfig+0x30c>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d81b      	bhi.n	8003020 <UART_SetConfig+0xd0>
 8002fe8:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <UART_SetConfig+0xa0>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003001 	.word	0x08003001
 8002ff4:	08003011 	.word	0x08003011
 8002ff8:	08003009 	.word	0x08003009
 8002ffc:	08003019 	.word	0x08003019
 8003000:	2301      	movs	r3, #1
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003006:	e080      	b.n	800310a <UART_SetConfig+0x1ba>
 8003008:	2302      	movs	r3, #2
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300e:	e07c      	b.n	800310a <UART_SetConfig+0x1ba>
 8003010:	2304      	movs	r3, #4
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003016:	e078      	b.n	800310a <UART_SetConfig+0x1ba>
 8003018:	2308      	movs	r3, #8
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301e:	e074      	b.n	800310a <UART_SetConfig+0x1ba>
 8003020:	2310      	movs	r3, #16
 8003022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003026:	e070      	b.n	800310a <UART_SetConfig+0x1ba>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a8c      	ldr	r2, [pc, #560]	; (8003260 <UART_SetConfig+0x310>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d138      	bne.n	80030a4 <UART_SetConfig+0x154>
 8003032:	4b8a      	ldr	r3, [pc, #552]	; (800325c <UART_SetConfig+0x30c>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d82d      	bhi.n	800309c <UART_SetConfig+0x14c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0xf8>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800307d 	.word	0x0800307d
 800304c:	0800309d 	.word	0x0800309d
 8003050:	0800309d 	.word	0x0800309d
 8003054:	0800309d 	.word	0x0800309d
 8003058:	0800308d 	.word	0x0800308d
 800305c:	0800309d 	.word	0x0800309d
 8003060:	0800309d 	.word	0x0800309d
 8003064:	0800309d 	.word	0x0800309d
 8003068:	08003085 	.word	0x08003085
 800306c:	0800309d 	.word	0x0800309d
 8003070:	0800309d 	.word	0x0800309d
 8003074:	0800309d 	.word	0x0800309d
 8003078:	08003095 	.word	0x08003095
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003082:	e042      	b.n	800310a <UART_SetConfig+0x1ba>
 8003084:	2302      	movs	r3, #2
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800308a:	e03e      	b.n	800310a <UART_SetConfig+0x1ba>
 800308c:	2304      	movs	r3, #4
 800308e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003092:	e03a      	b.n	800310a <UART_SetConfig+0x1ba>
 8003094:	2308      	movs	r3, #8
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800309a:	e036      	b.n	800310a <UART_SetConfig+0x1ba>
 800309c:	2310      	movs	r3, #16
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a2:	e032      	b.n	800310a <UART_SetConfig+0x1ba>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a6a      	ldr	r2, [pc, #424]	; (8003254 <UART_SetConfig+0x304>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d12a      	bne.n	8003104 <UART_SetConfig+0x1b4>
 80030ae:	4b6b      	ldr	r3, [pc, #428]	; (800325c <UART_SetConfig+0x30c>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030bc:	d01a      	beq.n	80030f4 <UART_SetConfig+0x1a4>
 80030be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030c2:	d81b      	bhi.n	80030fc <UART_SetConfig+0x1ac>
 80030c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c8:	d00c      	beq.n	80030e4 <UART_SetConfig+0x194>
 80030ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ce:	d815      	bhi.n	80030fc <UART_SetConfig+0x1ac>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <UART_SetConfig+0x18c>
 80030d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d8:	d008      	beq.n	80030ec <UART_SetConfig+0x19c>
 80030da:	e00f      	b.n	80030fc <UART_SetConfig+0x1ac>
 80030dc:	2300      	movs	r3, #0
 80030de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e2:	e012      	b.n	800310a <UART_SetConfig+0x1ba>
 80030e4:	2302      	movs	r3, #2
 80030e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ea:	e00e      	b.n	800310a <UART_SetConfig+0x1ba>
 80030ec:	2304      	movs	r3, #4
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f2:	e00a      	b.n	800310a <UART_SetConfig+0x1ba>
 80030f4:	2308      	movs	r3, #8
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fa:	e006      	b.n	800310a <UART_SetConfig+0x1ba>
 80030fc:	2310      	movs	r3, #16
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003102:	e002      	b.n	800310a <UART_SetConfig+0x1ba>
 8003104:	2310      	movs	r3, #16
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a51      	ldr	r2, [pc, #324]	; (8003254 <UART_SetConfig+0x304>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d17a      	bne.n	800320a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003118:	2b08      	cmp	r3, #8
 800311a:	d824      	bhi.n	8003166 <UART_SetConfig+0x216>
 800311c:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <UART_SetConfig+0x1d4>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003149 	.word	0x08003149
 8003128:	08003167 	.word	0x08003167
 800312c:	08003151 	.word	0x08003151
 8003130:	08003167 	.word	0x08003167
 8003134:	08003157 	.word	0x08003157
 8003138:	08003167 	.word	0x08003167
 800313c:	08003167 	.word	0x08003167
 8003140:	08003167 	.word	0x08003167
 8003144:	0800315f 	.word	0x0800315f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003148:	f7fe fed2 	bl	8001ef0 <HAL_RCC_GetPCLK1Freq>
 800314c:	61f8      	str	r0, [r7, #28]
        break;
 800314e:	e010      	b.n	8003172 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003150:	4b44      	ldr	r3, [pc, #272]	; (8003264 <UART_SetConfig+0x314>)
 8003152:	61fb      	str	r3, [r7, #28]
        break;
 8003154:	e00d      	b.n	8003172 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003156:	f7fe fe33 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 800315a:	61f8      	str	r0, [r7, #28]
        break;
 800315c:	e009      	b.n	8003172 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800315e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003162:	61fb      	str	r3, [r7, #28]
        break;
 8003164:	e005      	b.n	8003172 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003170:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8107 	beq.w	8003388 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	429a      	cmp	r2, r3
 8003188:	d305      	bcc.n	8003196 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	429a      	cmp	r2, r3
 8003194:	d903      	bls.n	800319e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800319c:	e0f4      	b.n	8003388 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2200      	movs	r2, #0
 80031a2:	461c      	mov	r4, r3
 80031a4:	4615      	mov	r5, r2
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	022b      	lsls	r3, r5, #8
 80031b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031b4:	0222      	lsls	r2, r4, #8
 80031b6:	68f9      	ldr	r1, [r7, #12]
 80031b8:	6849      	ldr	r1, [r1, #4]
 80031ba:	0849      	lsrs	r1, r1, #1
 80031bc:	2000      	movs	r0, #0
 80031be:	4688      	mov	r8, r1
 80031c0:	4681      	mov	r9, r0
 80031c2:	eb12 0a08 	adds.w	sl, r2, r8
 80031c6:	eb43 0b09 	adc.w	fp, r3, r9
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031d8:	4650      	mov	r0, sl
 80031da:	4659      	mov	r1, fp
 80031dc:	f7fd f850 	bl	8000280 <__aeabi_uldivmod>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4613      	mov	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031ee:	d308      	bcc.n	8003202 <UART_SetConfig+0x2b2>
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031f6:	d204      	bcs.n	8003202 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	60da      	str	r2, [r3, #12]
 8003200:	e0c2      	b.n	8003388 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003208:	e0be      	b.n	8003388 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003212:	d16a      	bne.n	80032ea <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003218:	2b08      	cmp	r3, #8
 800321a:	d834      	bhi.n	8003286 <UART_SetConfig+0x336>
 800321c:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <UART_SetConfig+0x2d4>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	08003249 	.word	0x08003249
 8003228:	08003269 	.word	0x08003269
 800322c:	08003271 	.word	0x08003271
 8003230:	08003287 	.word	0x08003287
 8003234:	08003277 	.word	0x08003277
 8003238:	08003287 	.word	0x08003287
 800323c:	08003287 	.word	0x08003287
 8003240:	08003287 	.word	0x08003287
 8003244:	0800327f 	.word	0x0800327f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003248:	f7fe fe52 	bl	8001ef0 <HAL_RCC_GetPCLK1Freq>
 800324c:	61f8      	str	r0, [r7, #28]
        break;
 800324e:	e020      	b.n	8003292 <UART_SetConfig+0x342>
 8003250:	efff69f3 	.word	0xefff69f3
 8003254:	40008000 	.word	0x40008000
 8003258:	40013800 	.word	0x40013800
 800325c:	40021000 	.word	0x40021000
 8003260:	40004400 	.word	0x40004400
 8003264:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003268:	f7fe fe58 	bl	8001f1c <HAL_RCC_GetPCLK2Freq>
 800326c:	61f8      	str	r0, [r7, #28]
        break;
 800326e:	e010      	b.n	8003292 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003270:	4b4c      	ldr	r3, [pc, #304]	; (80033a4 <UART_SetConfig+0x454>)
 8003272:	61fb      	str	r3, [r7, #28]
        break;
 8003274:	e00d      	b.n	8003292 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003276:	f7fe fda3 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 800327a:	61f8      	str	r0, [r7, #28]
        break;
 800327c:	e009      	b.n	8003292 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800327e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003282:	61fb      	str	r3, [r7, #28]
        break;
 8003284:	e005      	b.n	8003292 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003290:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d077      	beq.n	8003388 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005a      	lsls	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	441a      	add	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b0f      	cmp	r3, #15
 80032b2:	d916      	bls.n	80032e2 <UART_SetConfig+0x392>
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ba:	d212      	bcs.n	80032e2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	f023 030f 	bic.w	r3, r3, #15
 80032c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	8afb      	ldrh	r3, [r7, #22]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	8afa      	ldrh	r2, [r7, #22]
 80032de:	60da      	str	r2, [r3, #12]
 80032e0:	e052      	b.n	8003388 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032e8:	e04e      	b.n	8003388 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d827      	bhi.n	8003342 <UART_SetConfig+0x3f2>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <UART_SetConfig+0x3a8>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	0800331d 	.word	0x0800331d
 80032fc:	08003325 	.word	0x08003325
 8003300:	0800332d 	.word	0x0800332d
 8003304:	08003343 	.word	0x08003343
 8003308:	08003333 	.word	0x08003333
 800330c:	08003343 	.word	0x08003343
 8003310:	08003343 	.word	0x08003343
 8003314:	08003343 	.word	0x08003343
 8003318:	0800333b 	.word	0x0800333b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800331c:	f7fe fde8 	bl	8001ef0 <HAL_RCC_GetPCLK1Freq>
 8003320:	61f8      	str	r0, [r7, #28]
        break;
 8003322:	e014      	b.n	800334e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003324:	f7fe fdfa 	bl	8001f1c <HAL_RCC_GetPCLK2Freq>
 8003328:	61f8      	str	r0, [r7, #28]
        break;
 800332a:	e010      	b.n	800334e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800332c:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <UART_SetConfig+0x454>)
 800332e:	61fb      	str	r3, [r7, #28]
        break;
 8003330:	e00d      	b.n	800334e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003332:	f7fe fd45 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8003336:	61f8      	str	r0, [r7, #28]
        break;
 8003338:	e009      	b.n	800334e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800333a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333e:	61fb      	str	r3, [r7, #28]
        break;
 8003340:	e005      	b.n	800334e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800334c:	bf00      	nop
    }

    if (pclk != 0U)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d019      	beq.n	8003388 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	085a      	lsrs	r2, r3, #1
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	441a      	add	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	fbb2 f3f3 	udiv	r3, r2, r3
 8003366:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b0f      	cmp	r3, #15
 800336c:	d909      	bls.n	8003382 <UART_SetConfig+0x432>
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d205      	bcs.n	8003382 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60da      	str	r2, [r3, #12]
 8003380:	e002      	b.n	8003388 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003394:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003398:	4618      	mov	r0, r3
 800339a:	3728      	adds	r7, #40	; 0x28
 800339c:	46bd      	mov	sp, r7
 800339e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033a2:	bf00      	nop
 80033a4:	00f42400 	.word	0x00f42400

080033a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01a      	beq.n	80034be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034a6:	d10a      	bne.n	80034be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	605a      	str	r2, [r3, #4]
  }
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b098      	sub	sp, #96	; 0x60
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034fc:	f7fd fb96 	bl	8000c2c <HAL_GetTick>
 8003500:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b08      	cmp	r3, #8
 800350e:	d12e      	bne.n	800356e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003518:	2200      	movs	r2, #0
 800351a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f88c 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d021      	beq.n	800356e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800353e:	653b      	str	r3, [r7, #80]	; 0x50
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003548:	647b      	str	r3, [r7, #68]	; 0x44
 800354a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800354e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e6      	bne.n	800352a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e062      	b.n	8003634 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b04      	cmp	r3, #4
 800357a:	d149      	bne.n	8003610 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800357c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003584:	2200      	movs	r2, #0
 8003586:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f856 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d03c      	beq.n	8003610 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	623b      	str	r3, [r7, #32]
   return(result);
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b4:	633b      	str	r3, [r7, #48]	; 0x30
 80035b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e6      	bne.n	8003596 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3308      	adds	r3, #8
 80035ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	64bb      	str	r3, [r7, #72]	; 0x48
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3308      	adds	r3, #8
 80035e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035e8:	61fa      	str	r2, [r7, #28]
 80035ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	69b9      	ldr	r1, [r7, #24]
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	e841 2300 	strex	r3, r2, [r1]
 80035f4:	617b      	str	r3, [r7, #20]
   return(result);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e5      	bne.n	80035c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e011      	b.n	8003634 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3758      	adds	r7, #88	; 0x58
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364c:	e049      	b.n	80036e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d045      	beq.n	80036e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7fd fae9 	bl	8000c2c <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <UART_WaitOnFlagUntilTimeout+0x30>
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e048      	b.n	8003702 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	d031      	beq.n	80036e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b08      	cmp	r3, #8
 800368a:	d110      	bne.n	80036ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2208      	movs	r2, #8
 8003692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f838 	bl	800370a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2208      	movs	r2, #8
 800369e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e029      	b.n	8003702 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036bc:	d111      	bne.n	80036e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f81e 	bl	800370a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e00f      	b.n	8003702 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4013      	ands	r3, r2
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d0a6      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800370a:	b480      	push	{r7}
 800370c:	b095      	sub	sp, #84	; 0x54
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371a:	e853 3f00 	ldrex	r3, [r3]
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003730:	643b      	str	r3, [r7, #64]	; 0x40
 8003732:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e6      	bne.n	8003712 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3308      	adds	r3, #8
 800374a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	61fb      	str	r3, [r7, #28]
   return(result);
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	64bb      	str	r3, [r7, #72]	; 0x48
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3308      	adds	r3, #8
 8003762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003764:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800376a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376c:	e841 2300 	strex	r3, r2, [r1]
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e5      	bne.n	8003744 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377c:	2b01      	cmp	r3, #1
 800377e:	d118      	bne.n	80037b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	60bb      	str	r3, [r7, #8]
   return(result);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f023 0310 	bic.w	r3, r3, #16
 8003794:	647b      	str	r3, [r7, #68]	; 0x44
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379e:	61bb      	str	r3, [r7, #24]
 80037a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	6979      	ldr	r1, [r7, #20]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	613b      	str	r3, [r7, #16]
   return(result);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e6      	bne.n	8003780 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80037c6:	bf00      	nop
 80037c8:	3754      	adds	r7, #84	; 0x54
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f7ff fb97 	bl	8002f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b088      	sub	sp, #32
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	60bb      	str	r3, [r7, #8]
   return(result);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003828:	6979      	ldr	r1, [r7, #20]
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	e841 2300 	strex	r3, r2, [r1]
 8003830:	613b      	str	r3, [r7, #16]
   return(result);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1e6      	bne.n	8003806 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fb63 	bl	8002f10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800384a:	bf00      	nop
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <siprintf>:
 8003868:	b40e      	push	{r1, r2, r3}
 800386a:	b500      	push	{lr}
 800386c:	b09c      	sub	sp, #112	; 0x70
 800386e:	ab1d      	add	r3, sp, #116	; 0x74
 8003870:	9002      	str	r0, [sp, #8]
 8003872:	9006      	str	r0, [sp, #24]
 8003874:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003878:	4809      	ldr	r0, [pc, #36]	; (80038a0 <siprintf+0x38>)
 800387a:	9107      	str	r1, [sp, #28]
 800387c:	9104      	str	r1, [sp, #16]
 800387e:	4909      	ldr	r1, [pc, #36]	; (80038a4 <siprintf+0x3c>)
 8003880:	f853 2b04 	ldr.w	r2, [r3], #4
 8003884:	9105      	str	r1, [sp, #20]
 8003886:	6800      	ldr	r0, [r0, #0]
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	a902      	add	r1, sp, #8
 800388c:	f000 f9a8 	bl	8003be0 <_svfiprintf_r>
 8003890:	9b02      	ldr	r3, [sp, #8]
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	b01c      	add	sp, #112	; 0x70
 8003898:	f85d eb04 	ldr.w	lr, [sp], #4
 800389c:	b003      	add	sp, #12
 800389e:	4770      	bx	lr
 80038a0:	20000058 	.word	0x20000058
 80038a4:	ffff0208 	.word	0xffff0208

080038a8 <memset>:
 80038a8:	4402      	add	r2, r0
 80038aa:	4603      	mov	r3, r0
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d100      	bne.n	80038b2 <memset+0xa>
 80038b0:	4770      	bx	lr
 80038b2:	f803 1b01 	strb.w	r1, [r3], #1
 80038b6:	e7f9      	b.n	80038ac <memset+0x4>

080038b8 <strstr>:
 80038b8:	780a      	ldrb	r2, [r1, #0]
 80038ba:	b570      	push	{r4, r5, r6, lr}
 80038bc:	b96a      	cbnz	r2, 80038da <strstr+0x22>
 80038be:	bd70      	pop	{r4, r5, r6, pc}
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d109      	bne.n	80038d8 <strstr+0x20>
 80038c4:	460c      	mov	r4, r1
 80038c6:	4605      	mov	r5, r0
 80038c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f6      	beq.n	80038be <strstr+0x6>
 80038d0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80038d4:	429e      	cmp	r6, r3
 80038d6:	d0f7      	beq.n	80038c8 <strstr+0x10>
 80038d8:	3001      	adds	r0, #1
 80038da:	7803      	ldrb	r3, [r0, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ef      	bne.n	80038c0 <strstr+0x8>
 80038e0:	4618      	mov	r0, r3
 80038e2:	e7ec      	b.n	80038be <strstr+0x6>

080038e4 <__errno>:
 80038e4:	4b01      	ldr	r3, [pc, #4]	; (80038ec <__errno+0x8>)
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000058 	.word	0x20000058

080038f0 <__libc_init_array>:
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	4d0d      	ldr	r5, [pc, #52]	; (8003928 <__libc_init_array+0x38>)
 80038f4:	4c0d      	ldr	r4, [pc, #52]	; (800392c <__libc_init_array+0x3c>)
 80038f6:	1b64      	subs	r4, r4, r5
 80038f8:	10a4      	asrs	r4, r4, #2
 80038fa:	2600      	movs	r6, #0
 80038fc:	42a6      	cmp	r6, r4
 80038fe:	d109      	bne.n	8003914 <__libc_init_array+0x24>
 8003900:	4d0b      	ldr	r5, [pc, #44]	; (8003930 <__libc_init_array+0x40>)
 8003902:	4c0c      	ldr	r4, [pc, #48]	; (8003934 <__libc_init_array+0x44>)
 8003904:	f000 fc6a 	bl	80041dc <_init>
 8003908:	1b64      	subs	r4, r4, r5
 800390a:	10a4      	asrs	r4, r4, #2
 800390c:	2600      	movs	r6, #0
 800390e:	42a6      	cmp	r6, r4
 8003910:	d105      	bne.n	800391e <__libc_init_array+0x2e>
 8003912:	bd70      	pop	{r4, r5, r6, pc}
 8003914:	f855 3b04 	ldr.w	r3, [r5], #4
 8003918:	4798      	blx	r3
 800391a:	3601      	adds	r6, #1
 800391c:	e7ee      	b.n	80038fc <__libc_init_array+0xc>
 800391e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003922:	4798      	blx	r3
 8003924:	3601      	adds	r6, #1
 8003926:	e7f2      	b.n	800390e <__libc_init_array+0x1e>
 8003928:	08004288 	.word	0x08004288
 800392c:	08004288 	.word	0x08004288
 8003930:	08004288 	.word	0x08004288
 8003934:	0800428c 	.word	0x0800428c

08003938 <__retarget_lock_acquire_recursive>:
 8003938:	4770      	bx	lr

0800393a <__retarget_lock_release_recursive>:
 800393a:	4770      	bx	lr

0800393c <_free_r>:
 800393c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800393e:	2900      	cmp	r1, #0
 8003940:	d044      	beq.n	80039cc <_free_r+0x90>
 8003942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003946:	9001      	str	r0, [sp, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f1a1 0404 	sub.w	r4, r1, #4
 800394e:	bfb8      	it	lt
 8003950:	18e4      	addlt	r4, r4, r3
 8003952:	f000 f8df 	bl	8003b14 <__malloc_lock>
 8003956:	4a1e      	ldr	r2, [pc, #120]	; (80039d0 <_free_r+0x94>)
 8003958:	9801      	ldr	r0, [sp, #4]
 800395a:	6813      	ldr	r3, [r2, #0]
 800395c:	b933      	cbnz	r3, 800396c <_free_r+0x30>
 800395e:	6063      	str	r3, [r4, #4]
 8003960:	6014      	str	r4, [r2, #0]
 8003962:	b003      	add	sp, #12
 8003964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003968:	f000 b8da 	b.w	8003b20 <__malloc_unlock>
 800396c:	42a3      	cmp	r3, r4
 800396e:	d908      	bls.n	8003982 <_free_r+0x46>
 8003970:	6825      	ldr	r5, [r4, #0]
 8003972:	1961      	adds	r1, r4, r5
 8003974:	428b      	cmp	r3, r1
 8003976:	bf01      	itttt	eq
 8003978:	6819      	ldreq	r1, [r3, #0]
 800397a:	685b      	ldreq	r3, [r3, #4]
 800397c:	1949      	addeq	r1, r1, r5
 800397e:	6021      	streq	r1, [r4, #0]
 8003980:	e7ed      	b.n	800395e <_free_r+0x22>
 8003982:	461a      	mov	r2, r3
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	b10b      	cbz	r3, 800398c <_free_r+0x50>
 8003988:	42a3      	cmp	r3, r4
 800398a:	d9fa      	bls.n	8003982 <_free_r+0x46>
 800398c:	6811      	ldr	r1, [r2, #0]
 800398e:	1855      	adds	r5, r2, r1
 8003990:	42a5      	cmp	r5, r4
 8003992:	d10b      	bne.n	80039ac <_free_r+0x70>
 8003994:	6824      	ldr	r4, [r4, #0]
 8003996:	4421      	add	r1, r4
 8003998:	1854      	adds	r4, r2, r1
 800399a:	42a3      	cmp	r3, r4
 800399c:	6011      	str	r1, [r2, #0]
 800399e:	d1e0      	bne.n	8003962 <_free_r+0x26>
 80039a0:	681c      	ldr	r4, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	6053      	str	r3, [r2, #4]
 80039a6:	440c      	add	r4, r1
 80039a8:	6014      	str	r4, [r2, #0]
 80039aa:	e7da      	b.n	8003962 <_free_r+0x26>
 80039ac:	d902      	bls.n	80039b4 <_free_r+0x78>
 80039ae:	230c      	movs	r3, #12
 80039b0:	6003      	str	r3, [r0, #0]
 80039b2:	e7d6      	b.n	8003962 <_free_r+0x26>
 80039b4:	6825      	ldr	r5, [r4, #0]
 80039b6:	1961      	adds	r1, r4, r5
 80039b8:	428b      	cmp	r3, r1
 80039ba:	bf04      	itt	eq
 80039bc:	6819      	ldreq	r1, [r3, #0]
 80039be:	685b      	ldreq	r3, [r3, #4]
 80039c0:	6063      	str	r3, [r4, #4]
 80039c2:	bf04      	itt	eq
 80039c4:	1949      	addeq	r1, r1, r5
 80039c6:	6021      	streq	r1, [r4, #0]
 80039c8:	6054      	str	r4, [r2, #4]
 80039ca:	e7ca      	b.n	8003962 <_free_r+0x26>
 80039cc:	b003      	add	sp, #12
 80039ce:	bd30      	pop	{r4, r5, pc}
 80039d0:	20000388 	.word	0x20000388

080039d4 <sbrk_aligned>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	4e0e      	ldr	r6, [pc, #56]	; (8003a10 <sbrk_aligned+0x3c>)
 80039d8:	460c      	mov	r4, r1
 80039da:	6831      	ldr	r1, [r6, #0]
 80039dc:	4605      	mov	r5, r0
 80039de:	b911      	cbnz	r1, 80039e6 <sbrk_aligned+0x12>
 80039e0:	f000 fba6 	bl	8004130 <_sbrk_r>
 80039e4:	6030      	str	r0, [r6, #0]
 80039e6:	4621      	mov	r1, r4
 80039e8:	4628      	mov	r0, r5
 80039ea:	f000 fba1 	bl	8004130 <_sbrk_r>
 80039ee:	1c43      	adds	r3, r0, #1
 80039f0:	d00a      	beq.n	8003a08 <sbrk_aligned+0x34>
 80039f2:	1cc4      	adds	r4, r0, #3
 80039f4:	f024 0403 	bic.w	r4, r4, #3
 80039f8:	42a0      	cmp	r0, r4
 80039fa:	d007      	beq.n	8003a0c <sbrk_aligned+0x38>
 80039fc:	1a21      	subs	r1, r4, r0
 80039fe:	4628      	mov	r0, r5
 8003a00:	f000 fb96 	bl	8004130 <_sbrk_r>
 8003a04:	3001      	adds	r0, #1
 8003a06:	d101      	bne.n	8003a0c <sbrk_aligned+0x38>
 8003a08:	f04f 34ff 	mov.w	r4, #4294967295
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	2000038c 	.word	0x2000038c

08003a14 <_malloc_r>:
 8003a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a18:	1ccd      	adds	r5, r1, #3
 8003a1a:	f025 0503 	bic.w	r5, r5, #3
 8003a1e:	3508      	adds	r5, #8
 8003a20:	2d0c      	cmp	r5, #12
 8003a22:	bf38      	it	cc
 8003a24:	250c      	movcc	r5, #12
 8003a26:	2d00      	cmp	r5, #0
 8003a28:	4607      	mov	r7, r0
 8003a2a:	db01      	blt.n	8003a30 <_malloc_r+0x1c>
 8003a2c:	42a9      	cmp	r1, r5
 8003a2e:	d905      	bls.n	8003a3c <_malloc_r+0x28>
 8003a30:	230c      	movs	r3, #12
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	2600      	movs	r6, #0
 8003a36:	4630      	mov	r0, r6
 8003a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b10 <_malloc_r+0xfc>
 8003a40:	f000 f868 	bl	8003b14 <__malloc_lock>
 8003a44:	f8d8 3000 	ldr.w	r3, [r8]
 8003a48:	461c      	mov	r4, r3
 8003a4a:	bb5c      	cbnz	r4, 8003aa4 <_malloc_r+0x90>
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	4638      	mov	r0, r7
 8003a50:	f7ff ffc0 	bl	80039d4 <sbrk_aligned>
 8003a54:	1c43      	adds	r3, r0, #1
 8003a56:	4604      	mov	r4, r0
 8003a58:	d155      	bne.n	8003b06 <_malloc_r+0xf2>
 8003a5a:	f8d8 4000 	ldr.w	r4, [r8]
 8003a5e:	4626      	mov	r6, r4
 8003a60:	2e00      	cmp	r6, #0
 8003a62:	d145      	bne.n	8003af0 <_malloc_r+0xdc>
 8003a64:	2c00      	cmp	r4, #0
 8003a66:	d048      	beq.n	8003afa <_malloc_r+0xe6>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	4631      	mov	r1, r6
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	eb04 0903 	add.w	r9, r4, r3
 8003a72:	f000 fb5d 	bl	8004130 <_sbrk_r>
 8003a76:	4581      	cmp	r9, r0
 8003a78:	d13f      	bne.n	8003afa <_malloc_r+0xe6>
 8003a7a:	6821      	ldr	r1, [r4, #0]
 8003a7c:	1a6d      	subs	r5, r5, r1
 8003a7e:	4629      	mov	r1, r5
 8003a80:	4638      	mov	r0, r7
 8003a82:	f7ff ffa7 	bl	80039d4 <sbrk_aligned>
 8003a86:	3001      	adds	r0, #1
 8003a88:	d037      	beq.n	8003afa <_malloc_r+0xe6>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	442b      	add	r3, r5
 8003a8e:	6023      	str	r3, [r4, #0]
 8003a90:	f8d8 3000 	ldr.w	r3, [r8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d038      	beq.n	8003b0a <_malloc_r+0xf6>
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	42a2      	cmp	r2, r4
 8003a9c:	d12b      	bne.n	8003af6 <_malloc_r+0xe2>
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	e00f      	b.n	8003ac4 <_malloc_r+0xb0>
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	1b52      	subs	r2, r2, r5
 8003aa8:	d41f      	bmi.n	8003aea <_malloc_r+0xd6>
 8003aaa:	2a0b      	cmp	r2, #11
 8003aac:	d917      	bls.n	8003ade <_malloc_r+0xca>
 8003aae:	1961      	adds	r1, r4, r5
 8003ab0:	42a3      	cmp	r3, r4
 8003ab2:	6025      	str	r5, [r4, #0]
 8003ab4:	bf18      	it	ne
 8003ab6:	6059      	strne	r1, [r3, #4]
 8003ab8:	6863      	ldr	r3, [r4, #4]
 8003aba:	bf08      	it	eq
 8003abc:	f8c8 1000 	streq.w	r1, [r8]
 8003ac0:	5162      	str	r2, [r4, r5]
 8003ac2:	604b      	str	r3, [r1, #4]
 8003ac4:	4638      	mov	r0, r7
 8003ac6:	f104 060b 	add.w	r6, r4, #11
 8003aca:	f000 f829 	bl	8003b20 <__malloc_unlock>
 8003ace:	f026 0607 	bic.w	r6, r6, #7
 8003ad2:	1d23      	adds	r3, r4, #4
 8003ad4:	1af2      	subs	r2, r6, r3
 8003ad6:	d0ae      	beq.n	8003a36 <_malloc_r+0x22>
 8003ad8:	1b9b      	subs	r3, r3, r6
 8003ada:	50a3      	str	r3, [r4, r2]
 8003adc:	e7ab      	b.n	8003a36 <_malloc_r+0x22>
 8003ade:	42a3      	cmp	r3, r4
 8003ae0:	6862      	ldr	r2, [r4, #4]
 8003ae2:	d1dd      	bne.n	8003aa0 <_malloc_r+0x8c>
 8003ae4:	f8c8 2000 	str.w	r2, [r8]
 8003ae8:	e7ec      	b.n	8003ac4 <_malloc_r+0xb0>
 8003aea:	4623      	mov	r3, r4
 8003aec:	6864      	ldr	r4, [r4, #4]
 8003aee:	e7ac      	b.n	8003a4a <_malloc_r+0x36>
 8003af0:	4634      	mov	r4, r6
 8003af2:	6876      	ldr	r6, [r6, #4]
 8003af4:	e7b4      	b.n	8003a60 <_malloc_r+0x4c>
 8003af6:	4613      	mov	r3, r2
 8003af8:	e7cc      	b.n	8003a94 <_malloc_r+0x80>
 8003afa:	230c      	movs	r3, #12
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	4638      	mov	r0, r7
 8003b00:	f000 f80e 	bl	8003b20 <__malloc_unlock>
 8003b04:	e797      	b.n	8003a36 <_malloc_r+0x22>
 8003b06:	6025      	str	r5, [r4, #0]
 8003b08:	e7dc      	b.n	8003ac4 <_malloc_r+0xb0>
 8003b0a:	605b      	str	r3, [r3, #4]
 8003b0c:	deff      	udf	#255	; 0xff
 8003b0e:	bf00      	nop
 8003b10:	20000388 	.word	0x20000388

08003b14 <__malloc_lock>:
 8003b14:	4801      	ldr	r0, [pc, #4]	; (8003b1c <__malloc_lock+0x8>)
 8003b16:	f7ff bf0f 	b.w	8003938 <__retarget_lock_acquire_recursive>
 8003b1a:	bf00      	nop
 8003b1c:	20000384 	.word	0x20000384

08003b20 <__malloc_unlock>:
 8003b20:	4801      	ldr	r0, [pc, #4]	; (8003b28 <__malloc_unlock+0x8>)
 8003b22:	f7ff bf0a 	b.w	800393a <__retarget_lock_release_recursive>
 8003b26:	bf00      	nop
 8003b28:	20000384 	.word	0x20000384

08003b2c <__ssputs_r>:
 8003b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	688e      	ldr	r6, [r1, #8]
 8003b32:	461f      	mov	r7, r3
 8003b34:	42be      	cmp	r6, r7
 8003b36:	680b      	ldr	r3, [r1, #0]
 8003b38:	4682      	mov	sl, r0
 8003b3a:	460c      	mov	r4, r1
 8003b3c:	4690      	mov	r8, r2
 8003b3e:	d82c      	bhi.n	8003b9a <__ssputs_r+0x6e>
 8003b40:	898a      	ldrh	r2, [r1, #12]
 8003b42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b46:	d026      	beq.n	8003b96 <__ssputs_r+0x6a>
 8003b48:	6965      	ldr	r5, [r4, #20]
 8003b4a:	6909      	ldr	r1, [r1, #16]
 8003b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b50:	eba3 0901 	sub.w	r9, r3, r1
 8003b54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b58:	1c7b      	adds	r3, r7, #1
 8003b5a:	444b      	add	r3, r9
 8003b5c:	106d      	asrs	r5, r5, #1
 8003b5e:	429d      	cmp	r5, r3
 8003b60:	bf38      	it	cc
 8003b62:	461d      	movcc	r5, r3
 8003b64:	0553      	lsls	r3, r2, #21
 8003b66:	d527      	bpl.n	8003bb8 <__ssputs_r+0x8c>
 8003b68:	4629      	mov	r1, r5
 8003b6a:	f7ff ff53 	bl	8003a14 <_malloc_r>
 8003b6e:	4606      	mov	r6, r0
 8003b70:	b360      	cbz	r0, 8003bcc <__ssputs_r+0xa0>
 8003b72:	6921      	ldr	r1, [r4, #16]
 8003b74:	464a      	mov	r2, r9
 8003b76:	f000 faeb 	bl	8004150 <memcpy>
 8003b7a:	89a3      	ldrh	r3, [r4, #12]
 8003b7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b84:	81a3      	strh	r3, [r4, #12]
 8003b86:	6126      	str	r6, [r4, #16]
 8003b88:	6165      	str	r5, [r4, #20]
 8003b8a:	444e      	add	r6, r9
 8003b8c:	eba5 0509 	sub.w	r5, r5, r9
 8003b90:	6026      	str	r6, [r4, #0]
 8003b92:	60a5      	str	r5, [r4, #8]
 8003b94:	463e      	mov	r6, r7
 8003b96:	42be      	cmp	r6, r7
 8003b98:	d900      	bls.n	8003b9c <__ssputs_r+0x70>
 8003b9a:	463e      	mov	r6, r7
 8003b9c:	6820      	ldr	r0, [r4, #0]
 8003b9e:	4632      	mov	r2, r6
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	f000 faab 	bl	80040fc <memmove>
 8003ba6:	68a3      	ldr	r3, [r4, #8]
 8003ba8:	1b9b      	subs	r3, r3, r6
 8003baa:	60a3      	str	r3, [r4, #8]
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	4433      	add	r3, r6
 8003bb0:	6023      	str	r3, [r4, #0]
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb8:	462a      	mov	r2, r5
 8003bba:	f000 fad7 	bl	800416c <_realloc_r>
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	d1e0      	bne.n	8003b86 <__ssputs_r+0x5a>
 8003bc4:	6921      	ldr	r1, [r4, #16]
 8003bc6:	4650      	mov	r0, sl
 8003bc8:	f7ff feb8 	bl	800393c <_free_r>
 8003bcc:	230c      	movs	r3, #12
 8003bce:	f8ca 3000 	str.w	r3, [sl]
 8003bd2:	89a3      	ldrh	r3, [r4, #12]
 8003bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd8:	81a3      	strh	r3, [r4, #12]
 8003bda:	f04f 30ff 	mov.w	r0, #4294967295
 8003bde:	e7e9      	b.n	8003bb4 <__ssputs_r+0x88>

08003be0 <_svfiprintf_r>:
 8003be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be4:	4698      	mov	r8, r3
 8003be6:	898b      	ldrh	r3, [r1, #12]
 8003be8:	061b      	lsls	r3, r3, #24
 8003bea:	b09d      	sub	sp, #116	; 0x74
 8003bec:	4607      	mov	r7, r0
 8003bee:	460d      	mov	r5, r1
 8003bf0:	4614      	mov	r4, r2
 8003bf2:	d50e      	bpl.n	8003c12 <_svfiprintf_r+0x32>
 8003bf4:	690b      	ldr	r3, [r1, #16]
 8003bf6:	b963      	cbnz	r3, 8003c12 <_svfiprintf_r+0x32>
 8003bf8:	2140      	movs	r1, #64	; 0x40
 8003bfa:	f7ff ff0b 	bl	8003a14 <_malloc_r>
 8003bfe:	6028      	str	r0, [r5, #0]
 8003c00:	6128      	str	r0, [r5, #16]
 8003c02:	b920      	cbnz	r0, 8003c0e <_svfiprintf_r+0x2e>
 8003c04:	230c      	movs	r3, #12
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	e0d0      	b.n	8003db0 <_svfiprintf_r+0x1d0>
 8003c0e:	2340      	movs	r3, #64	; 0x40
 8003c10:	616b      	str	r3, [r5, #20]
 8003c12:	2300      	movs	r3, #0
 8003c14:	9309      	str	r3, [sp, #36]	; 0x24
 8003c16:	2320      	movs	r3, #32
 8003c18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c20:	2330      	movs	r3, #48	; 0x30
 8003c22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003dc8 <_svfiprintf_r+0x1e8>
 8003c26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c2a:	f04f 0901 	mov.w	r9, #1
 8003c2e:	4623      	mov	r3, r4
 8003c30:	469a      	mov	sl, r3
 8003c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c36:	b10a      	cbz	r2, 8003c3c <_svfiprintf_r+0x5c>
 8003c38:	2a25      	cmp	r2, #37	; 0x25
 8003c3a:	d1f9      	bne.n	8003c30 <_svfiprintf_r+0x50>
 8003c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8003c40:	d00b      	beq.n	8003c5a <_svfiprintf_r+0x7a>
 8003c42:	465b      	mov	r3, fp
 8003c44:	4622      	mov	r2, r4
 8003c46:	4629      	mov	r1, r5
 8003c48:	4638      	mov	r0, r7
 8003c4a:	f7ff ff6f 	bl	8003b2c <__ssputs_r>
 8003c4e:	3001      	adds	r0, #1
 8003c50:	f000 80a9 	beq.w	8003da6 <_svfiprintf_r+0x1c6>
 8003c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c56:	445a      	add	r2, fp
 8003c58:	9209      	str	r2, [sp, #36]	; 0x24
 8003c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80a1 	beq.w	8003da6 <_svfiprintf_r+0x1c6>
 8003c64:	2300      	movs	r3, #0
 8003c66:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c6e:	f10a 0a01 	add.w	sl, sl, #1
 8003c72:	9304      	str	r3, [sp, #16]
 8003c74:	9307      	str	r3, [sp, #28]
 8003c76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c7a:	931a      	str	r3, [sp, #104]	; 0x68
 8003c7c:	4654      	mov	r4, sl
 8003c7e:	2205      	movs	r2, #5
 8003c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c84:	4850      	ldr	r0, [pc, #320]	; (8003dc8 <_svfiprintf_r+0x1e8>)
 8003c86:	f7fc faab 	bl	80001e0 <memchr>
 8003c8a:	9a04      	ldr	r2, [sp, #16]
 8003c8c:	b9d8      	cbnz	r0, 8003cc6 <_svfiprintf_r+0xe6>
 8003c8e:	06d0      	lsls	r0, r2, #27
 8003c90:	bf44      	itt	mi
 8003c92:	2320      	movmi	r3, #32
 8003c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c98:	0711      	lsls	r1, r2, #28
 8003c9a:	bf44      	itt	mi
 8003c9c:	232b      	movmi	r3, #43	; 0x2b
 8003c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ca8:	d015      	beq.n	8003cd6 <_svfiprintf_r+0xf6>
 8003caa:	9a07      	ldr	r2, [sp, #28]
 8003cac:	4654      	mov	r4, sl
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f04f 0c0a 	mov.w	ip, #10
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cba:	3b30      	subs	r3, #48	; 0x30
 8003cbc:	2b09      	cmp	r3, #9
 8003cbe:	d94d      	bls.n	8003d5c <_svfiprintf_r+0x17c>
 8003cc0:	b1b0      	cbz	r0, 8003cf0 <_svfiprintf_r+0x110>
 8003cc2:	9207      	str	r2, [sp, #28]
 8003cc4:	e014      	b.n	8003cf0 <_svfiprintf_r+0x110>
 8003cc6:	eba0 0308 	sub.w	r3, r0, r8
 8003cca:	fa09 f303 	lsl.w	r3, r9, r3
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	9304      	str	r3, [sp, #16]
 8003cd2:	46a2      	mov	sl, r4
 8003cd4:	e7d2      	b.n	8003c7c <_svfiprintf_r+0x9c>
 8003cd6:	9b03      	ldr	r3, [sp, #12]
 8003cd8:	1d19      	adds	r1, r3, #4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	9103      	str	r1, [sp, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bfbb      	ittet	lt
 8003ce2:	425b      	neglt	r3, r3
 8003ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ce8:	9307      	strge	r3, [sp, #28]
 8003cea:	9307      	strlt	r3, [sp, #28]
 8003cec:	bfb8      	it	lt
 8003cee:	9204      	strlt	r2, [sp, #16]
 8003cf0:	7823      	ldrb	r3, [r4, #0]
 8003cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8003cf4:	d10c      	bne.n	8003d10 <_svfiprintf_r+0x130>
 8003cf6:	7863      	ldrb	r3, [r4, #1]
 8003cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8003cfa:	d134      	bne.n	8003d66 <_svfiprintf_r+0x186>
 8003cfc:	9b03      	ldr	r3, [sp, #12]
 8003cfe:	1d1a      	adds	r2, r3, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	9203      	str	r2, [sp, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bfb8      	it	lt
 8003d08:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d0c:	3402      	adds	r4, #2
 8003d0e:	9305      	str	r3, [sp, #20]
 8003d10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003dd8 <_svfiprintf_r+0x1f8>
 8003d14:	7821      	ldrb	r1, [r4, #0]
 8003d16:	2203      	movs	r2, #3
 8003d18:	4650      	mov	r0, sl
 8003d1a:	f7fc fa61 	bl	80001e0 <memchr>
 8003d1e:	b138      	cbz	r0, 8003d30 <_svfiprintf_r+0x150>
 8003d20:	9b04      	ldr	r3, [sp, #16]
 8003d22:	eba0 000a 	sub.w	r0, r0, sl
 8003d26:	2240      	movs	r2, #64	; 0x40
 8003d28:	4082      	lsls	r2, r0
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	3401      	adds	r4, #1
 8003d2e:	9304      	str	r3, [sp, #16]
 8003d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d34:	4825      	ldr	r0, [pc, #148]	; (8003dcc <_svfiprintf_r+0x1ec>)
 8003d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d3a:	2206      	movs	r2, #6
 8003d3c:	f7fc fa50 	bl	80001e0 <memchr>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d038      	beq.n	8003db6 <_svfiprintf_r+0x1d6>
 8003d44:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <_svfiprintf_r+0x1f0>)
 8003d46:	bb1b      	cbnz	r3, 8003d90 <_svfiprintf_r+0x1b0>
 8003d48:	9b03      	ldr	r3, [sp, #12]
 8003d4a:	3307      	adds	r3, #7
 8003d4c:	f023 0307 	bic.w	r3, r3, #7
 8003d50:	3308      	adds	r3, #8
 8003d52:	9303      	str	r3, [sp, #12]
 8003d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d56:	4433      	add	r3, r6
 8003d58:	9309      	str	r3, [sp, #36]	; 0x24
 8003d5a:	e768      	b.n	8003c2e <_svfiprintf_r+0x4e>
 8003d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d60:	460c      	mov	r4, r1
 8003d62:	2001      	movs	r0, #1
 8003d64:	e7a6      	b.n	8003cb4 <_svfiprintf_r+0xd4>
 8003d66:	2300      	movs	r3, #0
 8003d68:	3401      	adds	r4, #1
 8003d6a:	9305      	str	r3, [sp, #20]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f04f 0c0a 	mov.w	ip, #10
 8003d72:	4620      	mov	r0, r4
 8003d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d78:	3a30      	subs	r2, #48	; 0x30
 8003d7a:	2a09      	cmp	r2, #9
 8003d7c:	d903      	bls.n	8003d86 <_svfiprintf_r+0x1a6>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0c6      	beq.n	8003d10 <_svfiprintf_r+0x130>
 8003d82:	9105      	str	r1, [sp, #20]
 8003d84:	e7c4      	b.n	8003d10 <_svfiprintf_r+0x130>
 8003d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e7f0      	b.n	8003d72 <_svfiprintf_r+0x192>
 8003d90:	ab03      	add	r3, sp, #12
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	462a      	mov	r2, r5
 8003d96:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <_svfiprintf_r+0x1f4>)
 8003d98:	a904      	add	r1, sp, #16
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	f3af 8000 	nop.w
 8003da0:	1c42      	adds	r2, r0, #1
 8003da2:	4606      	mov	r6, r0
 8003da4:	d1d6      	bne.n	8003d54 <_svfiprintf_r+0x174>
 8003da6:	89ab      	ldrh	r3, [r5, #12]
 8003da8:	065b      	lsls	r3, r3, #25
 8003daa:	f53f af2d 	bmi.w	8003c08 <_svfiprintf_r+0x28>
 8003dae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003db0:	b01d      	add	sp, #116	; 0x74
 8003db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003db6:	ab03      	add	r3, sp, #12
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	462a      	mov	r2, r5
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <_svfiprintf_r+0x1f4>)
 8003dbe:	a904      	add	r1, sp, #16
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	f000 f879 	bl	8003eb8 <_printf_i>
 8003dc6:	e7eb      	b.n	8003da0 <_svfiprintf_r+0x1c0>
 8003dc8:	0800424c 	.word	0x0800424c
 8003dcc:	08004256 	.word	0x08004256
 8003dd0:	00000000 	.word	0x00000000
 8003dd4:	08003b2d 	.word	0x08003b2d
 8003dd8:	08004252 	.word	0x08004252

08003ddc <_printf_common>:
 8003ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de0:	4616      	mov	r6, r2
 8003de2:	4699      	mov	r9, r3
 8003de4:	688a      	ldr	r2, [r1, #8]
 8003de6:	690b      	ldr	r3, [r1, #16]
 8003de8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dec:	4293      	cmp	r3, r2
 8003dee:	bfb8      	it	lt
 8003df0:	4613      	movlt	r3, r2
 8003df2:	6033      	str	r3, [r6, #0]
 8003df4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003df8:	4607      	mov	r7, r0
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	b10a      	cbz	r2, 8003e02 <_printf_common+0x26>
 8003dfe:	3301      	adds	r3, #1
 8003e00:	6033      	str	r3, [r6, #0]
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	0699      	lsls	r1, r3, #26
 8003e06:	bf42      	ittt	mi
 8003e08:	6833      	ldrmi	r3, [r6, #0]
 8003e0a:	3302      	addmi	r3, #2
 8003e0c:	6033      	strmi	r3, [r6, #0]
 8003e0e:	6825      	ldr	r5, [r4, #0]
 8003e10:	f015 0506 	ands.w	r5, r5, #6
 8003e14:	d106      	bne.n	8003e24 <_printf_common+0x48>
 8003e16:	f104 0a19 	add.w	sl, r4, #25
 8003e1a:	68e3      	ldr	r3, [r4, #12]
 8003e1c:	6832      	ldr	r2, [r6, #0]
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	42ab      	cmp	r3, r5
 8003e22:	dc26      	bgt.n	8003e72 <_printf_common+0x96>
 8003e24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e28:	1e13      	subs	r3, r2, #0
 8003e2a:	6822      	ldr	r2, [r4, #0]
 8003e2c:	bf18      	it	ne
 8003e2e:	2301      	movne	r3, #1
 8003e30:	0692      	lsls	r2, r2, #26
 8003e32:	d42b      	bmi.n	8003e8c <_printf_common+0xb0>
 8003e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e38:	4649      	mov	r1, r9
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	47c0      	blx	r8
 8003e3e:	3001      	adds	r0, #1
 8003e40:	d01e      	beq.n	8003e80 <_printf_common+0xa4>
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	6922      	ldr	r2, [r4, #16]
 8003e46:	f003 0306 	and.w	r3, r3, #6
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	bf02      	ittt	eq
 8003e4e:	68e5      	ldreq	r5, [r4, #12]
 8003e50:	6833      	ldreq	r3, [r6, #0]
 8003e52:	1aed      	subeq	r5, r5, r3
 8003e54:	68a3      	ldr	r3, [r4, #8]
 8003e56:	bf0c      	ite	eq
 8003e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e5c:	2500      	movne	r5, #0
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	bfc4      	itt	gt
 8003e62:	1a9b      	subgt	r3, r3, r2
 8003e64:	18ed      	addgt	r5, r5, r3
 8003e66:	2600      	movs	r6, #0
 8003e68:	341a      	adds	r4, #26
 8003e6a:	42b5      	cmp	r5, r6
 8003e6c:	d11a      	bne.n	8003ea4 <_printf_common+0xc8>
 8003e6e:	2000      	movs	r0, #0
 8003e70:	e008      	b.n	8003e84 <_printf_common+0xa8>
 8003e72:	2301      	movs	r3, #1
 8003e74:	4652      	mov	r2, sl
 8003e76:	4649      	mov	r1, r9
 8003e78:	4638      	mov	r0, r7
 8003e7a:	47c0      	blx	r8
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d103      	bne.n	8003e88 <_printf_common+0xac>
 8003e80:	f04f 30ff 	mov.w	r0, #4294967295
 8003e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e88:	3501      	adds	r5, #1
 8003e8a:	e7c6      	b.n	8003e1a <_printf_common+0x3e>
 8003e8c:	18e1      	adds	r1, r4, r3
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	2030      	movs	r0, #48	; 0x30
 8003e92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e96:	4422      	add	r2, r4
 8003e98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	e7c7      	b.n	8003e34 <_printf_common+0x58>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	4638      	mov	r0, r7
 8003eac:	47c0      	blx	r8
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d0e6      	beq.n	8003e80 <_printf_common+0xa4>
 8003eb2:	3601      	adds	r6, #1
 8003eb4:	e7d9      	b.n	8003e6a <_printf_common+0x8e>
	...

08003eb8 <_printf_i>:
 8003eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ebc:	7e0f      	ldrb	r7, [r1, #24]
 8003ebe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ec0:	2f78      	cmp	r7, #120	; 0x78
 8003ec2:	4691      	mov	r9, r2
 8003ec4:	4680      	mov	r8, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	469a      	mov	sl, r3
 8003eca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ece:	d807      	bhi.n	8003ee0 <_printf_i+0x28>
 8003ed0:	2f62      	cmp	r7, #98	; 0x62
 8003ed2:	d80a      	bhi.n	8003eea <_printf_i+0x32>
 8003ed4:	2f00      	cmp	r7, #0
 8003ed6:	f000 80d4 	beq.w	8004082 <_printf_i+0x1ca>
 8003eda:	2f58      	cmp	r7, #88	; 0x58
 8003edc:	f000 80c0 	beq.w	8004060 <_printf_i+0x1a8>
 8003ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ee8:	e03a      	b.n	8003f60 <_printf_i+0xa8>
 8003eea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eee:	2b15      	cmp	r3, #21
 8003ef0:	d8f6      	bhi.n	8003ee0 <_printf_i+0x28>
 8003ef2:	a101      	add	r1, pc, #4	; (adr r1, 8003ef8 <_printf_i+0x40>)
 8003ef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ef8:	08003f51 	.word	0x08003f51
 8003efc:	08003f65 	.word	0x08003f65
 8003f00:	08003ee1 	.word	0x08003ee1
 8003f04:	08003ee1 	.word	0x08003ee1
 8003f08:	08003ee1 	.word	0x08003ee1
 8003f0c:	08003ee1 	.word	0x08003ee1
 8003f10:	08003f65 	.word	0x08003f65
 8003f14:	08003ee1 	.word	0x08003ee1
 8003f18:	08003ee1 	.word	0x08003ee1
 8003f1c:	08003ee1 	.word	0x08003ee1
 8003f20:	08003ee1 	.word	0x08003ee1
 8003f24:	08004069 	.word	0x08004069
 8003f28:	08003f91 	.word	0x08003f91
 8003f2c:	08004023 	.word	0x08004023
 8003f30:	08003ee1 	.word	0x08003ee1
 8003f34:	08003ee1 	.word	0x08003ee1
 8003f38:	0800408b 	.word	0x0800408b
 8003f3c:	08003ee1 	.word	0x08003ee1
 8003f40:	08003f91 	.word	0x08003f91
 8003f44:	08003ee1 	.word	0x08003ee1
 8003f48:	08003ee1 	.word	0x08003ee1
 8003f4c:	0800402b 	.word	0x0800402b
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	1d1a      	adds	r2, r3, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	602a      	str	r2, [r5, #0]
 8003f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f60:	2301      	movs	r3, #1
 8003f62:	e09f      	b.n	80040a4 <_printf_i+0x1ec>
 8003f64:	6820      	ldr	r0, [r4, #0]
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	0607      	lsls	r7, r0, #24
 8003f6a:	f103 0104 	add.w	r1, r3, #4
 8003f6e:	6029      	str	r1, [r5, #0]
 8003f70:	d501      	bpl.n	8003f76 <_printf_i+0xbe>
 8003f72:	681e      	ldr	r6, [r3, #0]
 8003f74:	e003      	b.n	8003f7e <_printf_i+0xc6>
 8003f76:	0646      	lsls	r6, r0, #25
 8003f78:	d5fb      	bpl.n	8003f72 <_printf_i+0xba>
 8003f7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f7e:	2e00      	cmp	r6, #0
 8003f80:	da03      	bge.n	8003f8a <_printf_i+0xd2>
 8003f82:	232d      	movs	r3, #45	; 0x2d
 8003f84:	4276      	negs	r6, r6
 8003f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f8a:	485a      	ldr	r0, [pc, #360]	; (80040f4 <_printf_i+0x23c>)
 8003f8c:	230a      	movs	r3, #10
 8003f8e:	e012      	b.n	8003fb6 <_printf_i+0xfe>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	6820      	ldr	r0, [r4, #0]
 8003f94:	1d19      	adds	r1, r3, #4
 8003f96:	6029      	str	r1, [r5, #0]
 8003f98:	0605      	lsls	r5, r0, #24
 8003f9a:	d501      	bpl.n	8003fa0 <_printf_i+0xe8>
 8003f9c:	681e      	ldr	r6, [r3, #0]
 8003f9e:	e002      	b.n	8003fa6 <_printf_i+0xee>
 8003fa0:	0641      	lsls	r1, r0, #25
 8003fa2:	d5fb      	bpl.n	8003f9c <_printf_i+0xe4>
 8003fa4:	881e      	ldrh	r6, [r3, #0]
 8003fa6:	4853      	ldr	r0, [pc, #332]	; (80040f4 <_printf_i+0x23c>)
 8003fa8:	2f6f      	cmp	r7, #111	; 0x6f
 8003faa:	bf0c      	ite	eq
 8003fac:	2308      	moveq	r3, #8
 8003fae:	230a      	movne	r3, #10
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fb6:	6865      	ldr	r5, [r4, #4]
 8003fb8:	60a5      	str	r5, [r4, #8]
 8003fba:	2d00      	cmp	r5, #0
 8003fbc:	bfa2      	ittt	ge
 8003fbe:	6821      	ldrge	r1, [r4, #0]
 8003fc0:	f021 0104 	bicge.w	r1, r1, #4
 8003fc4:	6021      	strge	r1, [r4, #0]
 8003fc6:	b90e      	cbnz	r6, 8003fcc <_printf_i+0x114>
 8003fc8:	2d00      	cmp	r5, #0
 8003fca:	d04b      	beq.n	8004064 <_printf_i+0x1ac>
 8003fcc:	4615      	mov	r5, r2
 8003fce:	fbb6 f1f3 	udiv	r1, r6, r3
 8003fd2:	fb03 6711 	mls	r7, r3, r1, r6
 8003fd6:	5dc7      	ldrb	r7, [r0, r7]
 8003fd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fdc:	4637      	mov	r7, r6
 8003fde:	42bb      	cmp	r3, r7
 8003fe0:	460e      	mov	r6, r1
 8003fe2:	d9f4      	bls.n	8003fce <_printf_i+0x116>
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d10b      	bne.n	8004000 <_printf_i+0x148>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	07de      	lsls	r6, r3, #31
 8003fec:	d508      	bpl.n	8004000 <_printf_i+0x148>
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	6861      	ldr	r1, [r4, #4]
 8003ff2:	4299      	cmp	r1, r3
 8003ff4:	bfde      	ittt	le
 8003ff6:	2330      	movle	r3, #48	; 0x30
 8003ff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004000:	1b52      	subs	r2, r2, r5
 8004002:	6122      	str	r2, [r4, #16]
 8004004:	f8cd a000 	str.w	sl, [sp]
 8004008:	464b      	mov	r3, r9
 800400a:	aa03      	add	r2, sp, #12
 800400c:	4621      	mov	r1, r4
 800400e:	4640      	mov	r0, r8
 8004010:	f7ff fee4 	bl	8003ddc <_printf_common>
 8004014:	3001      	adds	r0, #1
 8004016:	d14a      	bne.n	80040ae <_printf_i+0x1f6>
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	b004      	add	sp, #16
 800401e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	f043 0320 	orr.w	r3, r3, #32
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	4833      	ldr	r0, [pc, #204]	; (80040f8 <_printf_i+0x240>)
 800402c:	2778      	movs	r7, #120	; 0x78
 800402e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	6829      	ldr	r1, [r5, #0]
 8004036:	061f      	lsls	r7, r3, #24
 8004038:	f851 6b04 	ldr.w	r6, [r1], #4
 800403c:	d402      	bmi.n	8004044 <_printf_i+0x18c>
 800403e:	065f      	lsls	r7, r3, #25
 8004040:	bf48      	it	mi
 8004042:	b2b6      	uxthmi	r6, r6
 8004044:	07df      	lsls	r7, r3, #31
 8004046:	bf48      	it	mi
 8004048:	f043 0320 	orrmi.w	r3, r3, #32
 800404c:	6029      	str	r1, [r5, #0]
 800404e:	bf48      	it	mi
 8004050:	6023      	strmi	r3, [r4, #0]
 8004052:	b91e      	cbnz	r6, 800405c <_printf_i+0x1a4>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	f023 0320 	bic.w	r3, r3, #32
 800405a:	6023      	str	r3, [r4, #0]
 800405c:	2310      	movs	r3, #16
 800405e:	e7a7      	b.n	8003fb0 <_printf_i+0xf8>
 8004060:	4824      	ldr	r0, [pc, #144]	; (80040f4 <_printf_i+0x23c>)
 8004062:	e7e4      	b.n	800402e <_printf_i+0x176>
 8004064:	4615      	mov	r5, r2
 8004066:	e7bd      	b.n	8003fe4 <_printf_i+0x12c>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	6826      	ldr	r6, [r4, #0]
 800406c:	6961      	ldr	r1, [r4, #20]
 800406e:	1d18      	adds	r0, r3, #4
 8004070:	6028      	str	r0, [r5, #0]
 8004072:	0635      	lsls	r5, r6, #24
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	d501      	bpl.n	800407c <_printf_i+0x1c4>
 8004078:	6019      	str	r1, [r3, #0]
 800407a:	e002      	b.n	8004082 <_printf_i+0x1ca>
 800407c:	0670      	lsls	r0, r6, #25
 800407e:	d5fb      	bpl.n	8004078 <_printf_i+0x1c0>
 8004080:	8019      	strh	r1, [r3, #0]
 8004082:	2300      	movs	r3, #0
 8004084:	6123      	str	r3, [r4, #16]
 8004086:	4615      	mov	r5, r2
 8004088:	e7bc      	b.n	8004004 <_printf_i+0x14c>
 800408a:	682b      	ldr	r3, [r5, #0]
 800408c:	1d1a      	adds	r2, r3, #4
 800408e:	602a      	str	r2, [r5, #0]
 8004090:	681d      	ldr	r5, [r3, #0]
 8004092:	6862      	ldr	r2, [r4, #4]
 8004094:	2100      	movs	r1, #0
 8004096:	4628      	mov	r0, r5
 8004098:	f7fc f8a2 	bl	80001e0 <memchr>
 800409c:	b108      	cbz	r0, 80040a2 <_printf_i+0x1ea>
 800409e:	1b40      	subs	r0, r0, r5
 80040a0:	6060      	str	r0, [r4, #4]
 80040a2:	6863      	ldr	r3, [r4, #4]
 80040a4:	6123      	str	r3, [r4, #16]
 80040a6:	2300      	movs	r3, #0
 80040a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ac:	e7aa      	b.n	8004004 <_printf_i+0x14c>
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	462a      	mov	r2, r5
 80040b2:	4649      	mov	r1, r9
 80040b4:	4640      	mov	r0, r8
 80040b6:	47d0      	blx	sl
 80040b8:	3001      	adds	r0, #1
 80040ba:	d0ad      	beq.n	8004018 <_printf_i+0x160>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	079b      	lsls	r3, r3, #30
 80040c0:	d413      	bmi.n	80040ea <_printf_i+0x232>
 80040c2:	68e0      	ldr	r0, [r4, #12]
 80040c4:	9b03      	ldr	r3, [sp, #12]
 80040c6:	4298      	cmp	r0, r3
 80040c8:	bfb8      	it	lt
 80040ca:	4618      	movlt	r0, r3
 80040cc:	e7a6      	b.n	800401c <_printf_i+0x164>
 80040ce:	2301      	movs	r3, #1
 80040d0:	4632      	mov	r2, r6
 80040d2:	4649      	mov	r1, r9
 80040d4:	4640      	mov	r0, r8
 80040d6:	47d0      	blx	sl
 80040d8:	3001      	adds	r0, #1
 80040da:	d09d      	beq.n	8004018 <_printf_i+0x160>
 80040dc:	3501      	adds	r5, #1
 80040de:	68e3      	ldr	r3, [r4, #12]
 80040e0:	9903      	ldr	r1, [sp, #12]
 80040e2:	1a5b      	subs	r3, r3, r1
 80040e4:	42ab      	cmp	r3, r5
 80040e6:	dcf2      	bgt.n	80040ce <_printf_i+0x216>
 80040e8:	e7eb      	b.n	80040c2 <_printf_i+0x20a>
 80040ea:	2500      	movs	r5, #0
 80040ec:	f104 0619 	add.w	r6, r4, #25
 80040f0:	e7f5      	b.n	80040de <_printf_i+0x226>
 80040f2:	bf00      	nop
 80040f4:	0800425d 	.word	0x0800425d
 80040f8:	0800426e 	.word	0x0800426e

080040fc <memmove>:
 80040fc:	4288      	cmp	r0, r1
 80040fe:	b510      	push	{r4, lr}
 8004100:	eb01 0402 	add.w	r4, r1, r2
 8004104:	d902      	bls.n	800410c <memmove+0x10>
 8004106:	4284      	cmp	r4, r0
 8004108:	4623      	mov	r3, r4
 800410a:	d807      	bhi.n	800411c <memmove+0x20>
 800410c:	1e43      	subs	r3, r0, #1
 800410e:	42a1      	cmp	r1, r4
 8004110:	d008      	beq.n	8004124 <memmove+0x28>
 8004112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800411a:	e7f8      	b.n	800410e <memmove+0x12>
 800411c:	4402      	add	r2, r0
 800411e:	4601      	mov	r1, r0
 8004120:	428a      	cmp	r2, r1
 8004122:	d100      	bne.n	8004126 <memmove+0x2a>
 8004124:	bd10      	pop	{r4, pc}
 8004126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800412a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800412e:	e7f7      	b.n	8004120 <memmove+0x24>

08004130 <_sbrk_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	4d06      	ldr	r5, [pc, #24]	; (800414c <_sbrk_r+0x1c>)
 8004134:	2300      	movs	r3, #0
 8004136:	4604      	mov	r4, r0
 8004138:	4608      	mov	r0, r1
 800413a:	602b      	str	r3, [r5, #0]
 800413c:	f7fc fc9c 	bl	8000a78 <_sbrk>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d102      	bne.n	800414a <_sbrk_r+0x1a>
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	b103      	cbz	r3, 800414a <_sbrk_r+0x1a>
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	20000380 	.word	0x20000380

08004150 <memcpy>:
 8004150:	440a      	add	r2, r1
 8004152:	4291      	cmp	r1, r2
 8004154:	f100 33ff 	add.w	r3, r0, #4294967295
 8004158:	d100      	bne.n	800415c <memcpy+0xc>
 800415a:	4770      	bx	lr
 800415c:	b510      	push	{r4, lr}
 800415e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004166:	4291      	cmp	r1, r2
 8004168:	d1f9      	bne.n	800415e <memcpy+0xe>
 800416a:	bd10      	pop	{r4, pc}

0800416c <_realloc_r>:
 800416c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004170:	4680      	mov	r8, r0
 8004172:	4614      	mov	r4, r2
 8004174:	460e      	mov	r6, r1
 8004176:	b921      	cbnz	r1, 8004182 <_realloc_r+0x16>
 8004178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800417c:	4611      	mov	r1, r2
 800417e:	f7ff bc49 	b.w	8003a14 <_malloc_r>
 8004182:	b92a      	cbnz	r2, 8004190 <_realloc_r+0x24>
 8004184:	f7ff fbda 	bl	800393c <_free_r>
 8004188:	4625      	mov	r5, r4
 800418a:	4628      	mov	r0, r5
 800418c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004190:	f000 f81b 	bl	80041ca <_malloc_usable_size_r>
 8004194:	4284      	cmp	r4, r0
 8004196:	4607      	mov	r7, r0
 8004198:	d802      	bhi.n	80041a0 <_realloc_r+0x34>
 800419a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800419e:	d812      	bhi.n	80041c6 <_realloc_r+0x5a>
 80041a0:	4621      	mov	r1, r4
 80041a2:	4640      	mov	r0, r8
 80041a4:	f7ff fc36 	bl	8003a14 <_malloc_r>
 80041a8:	4605      	mov	r5, r0
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d0ed      	beq.n	800418a <_realloc_r+0x1e>
 80041ae:	42bc      	cmp	r4, r7
 80041b0:	4622      	mov	r2, r4
 80041b2:	4631      	mov	r1, r6
 80041b4:	bf28      	it	cs
 80041b6:	463a      	movcs	r2, r7
 80041b8:	f7ff ffca 	bl	8004150 <memcpy>
 80041bc:	4631      	mov	r1, r6
 80041be:	4640      	mov	r0, r8
 80041c0:	f7ff fbbc 	bl	800393c <_free_r>
 80041c4:	e7e1      	b.n	800418a <_realloc_r+0x1e>
 80041c6:	4635      	mov	r5, r6
 80041c8:	e7df      	b.n	800418a <_realloc_r+0x1e>

080041ca <_malloc_usable_size_r>:
 80041ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041ce:	1f18      	subs	r0, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	bfbc      	itt	lt
 80041d4:	580b      	ldrlt	r3, [r1, r0]
 80041d6:	18c0      	addlt	r0, r0, r3
 80041d8:	4770      	bx	lr
	...

080041dc <_init>:
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	bf00      	nop
 80041e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e2:	bc08      	pop	{r3}
 80041e4:	469e      	mov	lr, r3
 80041e6:	4770      	bx	lr

080041e8 <_fini>:
 80041e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ea:	bf00      	nop
 80041ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ee:	bc08      	pop	{r3}
 80041f0:	469e      	mov	lr, r3
 80041f2:	4770      	bx	lr


stm32LORA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a80  08007a80  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  08007a80  08007a80  00017a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a88  08007a88  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a8c  08007a8c  00017a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08007a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000168  08007bf8  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08007bf8  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3f9  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026d0  00000000  00000000  0002d5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  0002fca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b9  00000000  00000000  00030990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000210bb  00000000  00000000  00031349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f40f  00000000  00000000  00052404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1bde  00000000  00000000  00061813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e60  00000000  00000000  001233f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00127254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007660 	.word	0x08007660

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	08007660 	.word	0x08007660

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9bb 	b.w	8000618 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b970 	b.w	8000618 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	460d      	mov	r5, r1
 8000358:	4604      	mov	r4, r0
 800035a:	460f      	mov	r7, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4694      	mov	ip, r2
 8000364:	d965      	bls.n	8000432 <__udivmoddi4+0xe2>
 8000366:	fab2 f382 	clz	r3, r2
 800036a:	b143      	cbz	r3, 800037e <__udivmoddi4+0x2e>
 800036c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000370:	f1c3 0220 	rsb	r2, r3, #32
 8000374:	409f      	lsls	r7, r3
 8000376:	fa20 f202 	lsr.w	r2, r0, r2
 800037a:	4317      	orrs	r7, r2
 800037c:	409c      	lsls	r4, r3
 800037e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000382:	fa1f f58c 	uxth.w	r5, ip
 8000386:	fbb7 f1fe 	udiv	r1, r7, lr
 800038a:	0c22      	lsrs	r2, r4, #16
 800038c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000390:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000394:	fb01 f005 	mul.w	r0, r1, r5
 8000398:	4290      	cmp	r0, r2
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x62>
 800039c:	eb1c 0202 	adds.w	r2, ip, r2
 80003a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a4:	f080 811c 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003a8:	4290      	cmp	r0, r2
 80003aa:	f240 8119 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003ae:	3902      	subs	r1, #2
 80003b0:	4462      	add	r2, ip
 80003b2:	1a12      	subs	r2, r2, r0
 80003b4:	b2a4      	uxth	r4, r4
 80003b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80003be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c2:	fb00 f505 	mul.w	r5, r0, r5
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	d90a      	bls.n	80003e0 <__udivmoddi4+0x90>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d2:	f080 8107 	bcs.w	80005e4 <__udivmoddi4+0x294>
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	f240 8104 	bls.w	80005e4 <__udivmoddi4+0x294>
 80003dc:	4464      	add	r4, ip
 80003de:	3802      	subs	r0, #2
 80003e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11e      	cbz	r6, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40dc      	lsrs	r4, r3
 80003ec:	2300      	movs	r3, #0
 80003ee:	e9c6 4300 	strd	r4, r3, [r6]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0xbc>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80ed 	beq.w	80005da <__udivmoddi4+0x28a>
 8000400:	2100      	movs	r1, #0
 8000402:	e9c6 0500 	strd	r0, r5, [r6]
 8000406:	4608      	mov	r0, r1
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	fab3 f183 	clz	r1, r3
 8000410:	2900      	cmp	r1, #0
 8000412:	d149      	bne.n	80004a8 <__udivmoddi4+0x158>
 8000414:	42ab      	cmp	r3, r5
 8000416:	d302      	bcc.n	800041e <__udivmoddi4+0xce>
 8000418:	4282      	cmp	r2, r0
 800041a:	f200 80f8 	bhi.w	800060e <__udivmoddi4+0x2be>
 800041e:	1a84      	subs	r4, r0, r2
 8000420:	eb65 0203 	sbc.w	r2, r5, r3
 8000424:	2001      	movs	r0, #1
 8000426:	4617      	mov	r7, r2
 8000428:	2e00      	cmp	r6, #0
 800042a:	d0e2      	beq.n	80003f2 <__udivmoddi4+0xa2>
 800042c:	e9c6 4700 	strd	r4, r7, [r6]
 8000430:	e7df      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000432:	b902      	cbnz	r2, 8000436 <__udivmoddi4+0xe6>
 8000434:	deff      	udf	#255	; 0xff
 8000436:	fab2 f382 	clz	r3, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	f040 8090 	bne.w	8000560 <__udivmoddi4+0x210>
 8000440:	1a8a      	subs	r2, r1, r2
 8000442:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000446:	fa1f fe8c 	uxth.w	lr, ip
 800044a:	2101      	movs	r1, #1
 800044c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000450:	fb07 2015 	mls	r0, r7, r5, r2
 8000454:	0c22      	lsrs	r2, r4, #16
 8000456:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800045a:	fb0e f005 	mul.w	r0, lr, r5
 800045e:	4290      	cmp	r0, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x124>
 8000462:	eb1c 0202 	adds.w	r2, ip, r2
 8000466:	f105 38ff 	add.w	r8, r5, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4290      	cmp	r0, r2
 800046e:	f200 80cb 	bhi.w	8000608 <__udivmoddi4+0x2b8>
 8000472:	4645      	mov	r5, r8
 8000474:	1a12      	subs	r2, r2, r0
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb2 f0f7 	udiv	r0, r2, r7
 800047c:	fb07 2210 	mls	r2, r7, r0, r2
 8000480:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000484:	fb0e fe00 	mul.w	lr, lr, r0
 8000488:	45a6      	cmp	lr, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x14e>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 32ff 	add.w	r2, r0, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x14c>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f200 80bb 	bhi.w	8000612 <__udivmoddi4+0x2c2>
 800049c:	4610      	mov	r0, r2
 800049e:	eba4 040e 	sub.w	r4, r4, lr
 80004a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a6:	e79f      	b.n	80003e8 <__udivmoddi4+0x98>
 80004a8:	f1c1 0720 	rsb	r7, r1, #32
 80004ac:	408b      	lsls	r3, r1
 80004ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80004b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ba:	fa20 f307 	lsr.w	r3, r0, r7
 80004be:	40fd      	lsrs	r5, r7
 80004c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c4:	4323      	orrs	r3, r4
 80004c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ca:	fa1f fe8c 	uxth.w	lr, ip
 80004ce:	fb09 5518 	mls	r5, r9, r8, r5
 80004d2:	0c1c      	lsrs	r4, r3, #16
 80004d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d8:	fb08 f50e 	mul.w	r5, r8, lr
 80004dc:	42a5      	cmp	r5, r4
 80004de:	fa02 f201 	lsl.w	r2, r2, r1
 80004e2:	fa00 f001 	lsl.w	r0, r0, r1
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f0:	f080 8088 	bcs.w	8000604 <__udivmoddi4+0x2b4>
 80004f4:	42a5      	cmp	r5, r4
 80004f6:	f240 8085 	bls.w	8000604 <__udivmoddi4+0x2b4>
 80004fa:	f1a8 0802 	sub.w	r8, r8, #2
 80004fe:	4464      	add	r4, ip
 8000500:	1b64      	subs	r4, r4, r5
 8000502:	b29d      	uxth	r5, r3
 8000504:	fbb4 f3f9 	udiv	r3, r4, r9
 8000508:	fb09 4413 	mls	r4, r9, r3, r4
 800050c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000510:	fb03 fe0e 	mul.w	lr, r3, lr
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000520:	d26c      	bcs.n	80005fc <__udivmoddi4+0x2ac>
 8000522:	45a6      	cmp	lr, r4
 8000524:	d96a      	bls.n	80005fc <__udivmoddi4+0x2ac>
 8000526:	3b02      	subs	r3, #2
 8000528:	4464      	add	r4, ip
 800052a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052e:	fba3 9502 	umull	r9, r5, r3, r2
 8000532:	eba4 040e 	sub.w	r4, r4, lr
 8000536:	42ac      	cmp	r4, r5
 8000538:	46c8      	mov	r8, r9
 800053a:	46ae      	mov	lr, r5
 800053c:	d356      	bcc.n	80005ec <__udivmoddi4+0x29c>
 800053e:	d053      	beq.n	80005e8 <__udivmoddi4+0x298>
 8000540:	b156      	cbz	r6, 8000558 <__udivmoddi4+0x208>
 8000542:	ebb0 0208 	subs.w	r2, r0, r8
 8000546:	eb64 040e 	sbc.w	r4, r4, lr
 800054a:	fa04 f707 	lsl.w	r7, r4, r7
 800054e:	40ca      	lsrs	r2, r1
 8000550:	40cc      	lsrs	r4, r1
 8000552:	4317      	orrs	r7, r2
 8000554:	e9c6 7400 	strd	r7, r4, [r6]
 8000558:	4618      	mov	r0, r3
 800055a:	2100      	movs	r1, #0
 800055c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000560:	f1c3 0120 	rsb	r1, r3, #32
 8000564:	fa02 fc03 	lsl.w	ip, r2, r3
 8000568:	fa20 f201 	lsr.w	r2, r0, r1
 800056c:	fa25 f101 	lsr.w	r1, r5, r1
 8000570:	409d      	lsls	r5, r3
 8000572:	432a      	orrs	r2, r5
 8000574:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000580:	fb07 1510 	mls	r5, r7, r0, r1
 8000584:	0c11      	lsrs	r1, r2, #16
 8000586:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800058a:	fb00 f50e 	mul.w	r5, r0, lr
 800058e:	428d      	cmp	r5, r1
 8000590:	fa04 f403 	lsl.w	r4, r4, r3
 8000594:	d908      	bls.n	80005a8 <__udivmoddi4+0x258>
 8000596:	eb1c 0101 	adds.w	r1, ip, r1
 800059a:	f100 38ff 	add.w	r8, r0, #4294967295
 800059e:	d22f      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005a0:	428d      	cmp	r5, r1
 80005a2:	d92d      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005a4:	3802      	subs	r0, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1b49      	subs	r1, r1, r5
 80005aa:	b292      	uxth	r2, r2
 80005ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80005b0:	fb07 1115 	mls	r1, r7, r5, r1
 80005b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b8:	fb05 f10e 	mul.w	r1, r5, lr
 80005bc:	4291      	cmp	r1, r2
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x282>
 80005c0:	eb1c 0202 	adds.w	r2, ip, r2
 80005c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c8:	d216      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 80005ca:	4291      	cmp	r1, r2
 80005cc:	d914      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 80005ce:	3d02      	subs	r5, #2
 80005d0:	4462      	add	r2, ip
 80005d2:	1a52      	subs	r2, r2, r1
 80005d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d8:	e738      	b.n	800044c <__udivmoddi4+0xfc>
 80005da:	4631      	mov	r1, r6
 80005dc:	4630      	mov	r0, r6
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xa2>
 80005e0:	4639      	mov	r1, r7
 80005e2:	e6e6      	b.n	80003b2 <__udivmoddi4+0x62>
 80005e4:	4610      	mov	r0, r2
 80005e6:	e6fb      	b.n	80003e0 <__udivmoddi4+0x90>
 80005e8:	4548      	cmp	r0, r9
 80005ea:	d2a9      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005ec:	ebb9 0802 	subs.w	r8, r9, r2
 80005f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f4:	3b01      	subs	r3, #1
 80005f6:	e7a3      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f8:	4645      	mov	r5, r8
 80005fa:	e7ea      	b.n	80005d2 <__udivmoddi4+0x282>
 80005fc:	462b      	mov	r3, r5
 80005fe:	e794      	b.n	800052a <__udivmoddi4+0x1da>
 8000600:	4640      	mov	r0, r8
 8000602:	e7d1      	b.n	80005a8 <__udivmoddi4+0x258>
 8000604:	46d0      	mov	r8, sl
 8000606:	e77b      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000608:	3d02      	subs	r5, #2
 800060a:	4462      	add	r2, ip
 800060c:	e732      	b.n	8000474 <__udivmoddi4+0x124>
 800060e:	4608      	mov	r0, r1
 8000610:	e70a      	b.n	8000428 <__udivmoddi4+0xd8>
 8000612:	4464      	add	r4, ip
 8000614:	3802      	subs	r0, #2
 8000616:	e742      	b.n	800049e <__udivmoddi4+0x14e>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <main>:
  * @retval int
  */


int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b0b0      	sub	sp, #192	; 0xc0
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f002 fcd2 	bl	8002fca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f873 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f93b 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_Init();
 800062e:	f000 f90d 	bl	800084c <MX_USART2_Init>
  //MX_USART2_UART_Init();
  MX_SPI1_Init();
 8000632:	f000 f8cf 	bl	80007d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  rfm95_handle_t rfm95_handle = {
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	22b8      	movs	r2, #184	; 0xb8
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f005 ffeb 	bl	800661a <memset>
 8000644:	4b29      	ldr	r3, [pc, #164]	; (80006ec <main+0xd0>)
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <main+0xd4>)
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	2301      	movs	r3, #1
 800064e:	823b      	strh	r3, [r7, #16]
    	            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    	        },
    			.receive_mode = RFM95_RECEIVE_MODE_NONE
    	    };

  sprintf(buffer,"Hello World\r\n");
 8000650:	4928      	ldr	r1, [pc, #160]	; (80006f4 <main+0xd8>)
 8000652:	4829      	ldr	r0, [pc, #164]	; (80006f8 <main+0xdc>)
 8000654:	f005 ff6e 	bl	8006534 <siprintf>
  HAL_USART_Transmit(&husart2, buffer, strlen(buffer), 1000);
 8000658:	4827      	ldr	r0, [pc, #156]	; (80006f8 <main+0xdc>)
 800065a:	f7ff fdb9 	bl	80001d0 <strlen>
 800065e:	4603      	mov	r3, r0
 8000660:	b29a      	uxth	r2, r3
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	4924      	ldr	r1, [pc, #144]	; (80006f8 <main+0xdc>)
 8000668:	4824      	ldr	r0, [pc, #144]	; (80006fc <main+0xe0>)
 800066a:	f005 fa4b 	bl	8005b04 <HAL_USART_Transmit>

  	    // Initialise RFM95 module.
  	    if (!rfm95_init(&rfm95_handle)) {
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fb8a 	bl	8001d8c <rfm95_init>
 8000678:	4603      	mov	r3, r0
 800067a:	f083 0301 	eor.w	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00e      	beq.n	80006a2 <main+0x86>
  	    	sprintf(buffer,"Initialized\r\n");
 8000684:	491e      	ldr	r1, [pc, #120]	; (8000700 <main+0xe4>)
 8000686:	481c      	ldr	r0, [pc, #112]	; (80006f8 <main+0xdc>)
 8000688:	f005 ff54 	bl	8006534 <siprintf>
  	    	HAL_USART_Transmit(&husart2, buffer, strlen(buffer), 1000);
 800068c:	481a      	ldr	r0, [pc, #104]	; (80006f8 <main+0xdc>)
 800068e:	f7ff fd9f 	bl	80001d0 <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	b29a      	uxth	r2, r3
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	4917      	ldr	r1, [pc, #92]	; (80006f8 <main+0xdc>)
 800069c:	4817      	ldr	r0, [pc, #92]	; (80006fc <main+0xe0>)
 800069e:	f005 fa31 	bl	8005b04 <HAL_USART_Transmit>
  	       // printf("RFM95 init failed\n\r");
  	    }
  	    uint8_t data_packet[] = {0x01, 0x02, 0x03, 0x04};
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <main+0xe8>)
 80006a4:	607b      	str	r3, [r7, #4]

  	    if (!rfm95_send_receive_cycle(&rfm95_handle, data_packet, sizeof(data_packet))) {
 80006a6:	1d39      	adds	r1, r7, #4
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2204      	movs	r2, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fb9e 	bl	8002df0 <rfm95_send_receive_cycle>
 80006b4:	4603      	mov	r3, r0
 80006b6:	f083 0301 	eor.w	r3, r3, #1
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00a      	beq.n	80006d6 <main+0xba>
  	    	sprintf(buffer,"RFM95 send failed\r\n");
 80006c0:	4911      	ldr	r1, [pc, #68]	; (8000708 <main+0xec>)
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <main+0xdc>)
 80006c4:	f005 ff36 	bl	8006534 <siprintf>
  	    	HAL_USART_Transmit(&husart2, buffer, 100, 10);
 80006c8:	230a      	movs	r3, #10
 80006ca:	2264      	movs	r2, #100	; 0x64
 80006cc:	490a      	ldr	r1, [pc, #40]	; (80006f8 <main+0xdc>)
 80006ce:	480b      	ldr	r0, [pc, #44]	; (80006fc <main+0xe0>)
 80006d0:	f005 fa18 	bl	8005b04 <HAL_USART_Transmit>
 80006d4:	e009      	b.n	80006ea <main+0xce>
  	        //printf("RFM95 send failed\n\r");
  	    } else {
  	       //printf("RFM95 send success\n\r");
  	      sprintf(buffer,"RFM95 send success\r\n");
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <main+0xf0>)
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <main+0xdc>)
 80006da:	f005 ff2b 	bl	8006534 <siprintf>
  	      HAL_USART_Transmit(&husart2, buffer, 100, 10);
 80006de:	230a      	movs	r3, #10
 80006e0:	2264      	movs	r2, #100	; 0x64
 80006e2:	4905      	ldr	r1, [pc, #20]	; (80006f8 <main+0xdc>)
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <main+0xe0>)
 80006e6:	f005 fa0d 	bl	8005b04 <HAL_USART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <main+0xce>
 80006ec:	20000184 	.word	0x20000184
 80006f0:	48000400 	.word	0x48000400
 80006f4:	08007678 	.word	0x08007678
 80006f8:	20000238 	.word	0x20000238
 80006fc:	200001e8 	.word	0x200001e8
 8000700:	08007688 	.word	0x08007688
 8000704:	04030201 	.word	0x04030201
 8000708:	08007698 	.word	0x08007698
 800070c:	080076ac 	.word	0x080076ac

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	; 0x58
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2244      	movs	r2, #68	; 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f005 ff7b 	bl	800661a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000732:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000736:	f002 ffd3 	bl	80036e0 <HAL_PWREx_ControlVoltageScaling>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000740:	f000 f90a 	bl	8000958 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000744:	f002 ffae 	bl	80036a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000748:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <SystemClock_Config+0xc0>)
 800074a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800074e:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <SystemClock_Config+0xc0>)
 8000750:	f023 0318 	bic.w	r3, r3, #24
 8000754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000758:	2314      	movs	r3, #20
 800075a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000768:	2360      	movs	r3, #96	; 0x60
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000770:	2301      	movs	r3, #1
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000778:	2310      	movs	r3, #16
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800077c:	2307      	movs	r3, #7
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fffd 	bl	800378c <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000798:	f000 f8de 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2303      	movs	r3, #3
 80007a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	2101      	movs	r1, #1
 80007b4:	4618      	mov	r0, r3
 80007b6:	f003 fbfd 	bl	8003fb4 <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007c0:	f000 f8ca 	bl	8000958 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007c4:	f004 f810 	bl	80047e8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007c8:	bf00      	nop
 80007ca:	3758      	adds	r7, #88	; 0x58
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000

080007d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_SPI1_Init+0x70>)
 80007da:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_SPI1_Init+0x74>)
 80007dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_SPI1_Init+0x70>)
 80007e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_SPI1_Init+0x70>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_SPI1_Init+0x70>)
 80007ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_SPI1_Init+0x70>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_SPI1_Init+0x70>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_SPI1_Init+0x70>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_SPI1_Init+0x70>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_SPI1_Init+0x70>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_SPI1_Init+0x70>)
 8000814:	2200      	movs	r2, #0
 8000816:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_SPI1_Init+0x70>)
 800081a:	2200      	movs	r2, #0
 800081c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_SPI1_Init+0x70>)
 8000820:	2207      	movs	r2, #7
 8000822:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_SPI1_Init+0x70>)
 8000826:	2200      	movs	r2, #0
 8000828:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_SPI1_Init+0x70>)
 800082c:	2208      	movs	r2, #8
 800082e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_SPI1_Init+0x70>)
 8000832:	f004 f8db 	bl	80049ec <HAL_SPI_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 800083c:	f000 f88c 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000184 	.word	0x20000184
 8000848:	40013000 	.word	0x40013000

0800084c <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_USART2_Init+0x50>)
 8000852:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <MX_USART2_Init+0x54>)
 8000854:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART2_Init+0x50>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_USART2_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_USART2_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART2_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_USART2_Init+0x50>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART2_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_USART2_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART2_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_USART2_Init+0x50>)
 800088a:	f005 f8f1 	bl	8005a70 <HAL_USART_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000894:	f000 f860 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200001e8 	.word	0x200001e8
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_GPIO_Init+0xac>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a24      	ldr	r2, [pc, #144]	; (8000950 <MX_GPIO_Init+0xac>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_GPIO_Init+0xac>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_GPIO_Init+0xac>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a1e      	ldr	r2, [pc, #120]	; (8000950 <MX_GPIO_Init+0xac>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_GPIO_Init+0xac>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_GPIO_Init+0xac>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a18      	ldr	r2, [pc, #96]	; (8000950 <MX_GPIO_Init+0xac>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_GPIO_Init+0xac>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2108      	movs	r1, #8
 8000906:	4813      	ldr	r0, [pc, #76]	; (8000954 <MX_GPIO_Init+0xb0>)
 8000908:	f002 feb4 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800090c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000912:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4619      	mov	r1, r3
 8000922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000926:	f002 fd3b 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800092a:	2308      	movs	r3, #8
 800092c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_GPIO_Init+0xb0>)
 8000942:	f002 fd2d 	bl	80033a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000946:	bf00      	nop
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	48000400 	.word	0x48000400

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x44>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_MspInit+0x44>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6613      	str	r3, [r2, #96]	; 0x60
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x44>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_MspInit+0x44>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6593      	str	r3, [r2, #88]	; 0x58
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a29      	ldr	r2, [pc, #164]	; (8000a70 <HAL_SPI_MspInit+0xc4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d14c      	bne.n	8000a68 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ce:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <HAL_SPI_MspInit+0xc8>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <HAL_SPI_MspInit+0xc8>)
 80009d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d8:	6613      	str	r3, [r2, #96]	; 0x60
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <HAL_SPI_MspInit+0xc8>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <HAL_SPI_MspInit+0xc8>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <HAL_SPI_MspInit+0xc8>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_SPI_MspInit+0xc8>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <HAL_SPI_MspInit+0xc8>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <HAL_SPI_MspInit+0xc8>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <HAL_SPI_MspInit+0xc8>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a16:	23e0      	movs	r3, #224	; 0xe0
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a26:	2305      	movs	r3, #5
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a34:	f002 fcb4 	bl	80033a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a48:	2305      	movs	r3, #5
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4809      	ldr	r0, [pc, #36]	; (8000a78 <HAL_SPI_MspInit+0xcc>)
 8000a54:	f002 fca4 	bl	80033a0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2023      	movs	r0, #35	; 0x23
 8000a5e:	f002 fc28 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a62:	2023      	movs	r0, #35	; 0x23
 8000a64:	f002 fc41 	bl	80032ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40013000 	.word	0x40013000
 8000a74:	40021000 	.word	0x40021000
 8000a78:	48000400 	.word	0x48000400

08000a7c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09e      	sub	sp, #120	; 0x78
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	2254      	movs	r2, #84	; 0x54
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f005 fdbc 	bl	800661a <memset>
  if(husart->Instance==USART2)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a2c      	ldr	r2, [pc, #176]	; (8000b58 <HAL_USART_MspInit+0xdc>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d150      	bne.n	8000b4e <HAL_USART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fc9f 	bl	80043fc <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8000ac4:	f7ff ff48 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_USART_MspInit+0xe0>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000acc:	4a23      	ldr	r2, [pc, #140]	; (8000b5c <HAL_USART_MspInit+0xe0>)
 8000ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <HAL_USART_MspInit+0xe0>)
 8000ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <HAL_USART_MspInit+0xe0>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <HAL_USART_MspInit+0xe0>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_USART_MspInit+0xe0>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_4;
 8000af8:	2314      	movs	r3, #20
 8000afa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b10:	4619      	mov	r1, r3
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f002 fc43 	bl	80033a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b1e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b34:	4619      	mov	r1, r3
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f002 fc31 	bl	80033a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2026      	movs	r0, #38	; 0x26
 8000b44:	f002 fbb5 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b48:	2026      	movs	r0, #38	; 0x26
 8000b4a:	f002 fbce 	bl	80032ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3778      	adds	r7, #120	; 0x78
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40021000 	.word	0x40021000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f002 fa62 	bl	8003074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <SPI1_IRQHandler+0x10>)
 8000bba:	f004 fc89 	bl	80054d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000184 	.word	0x20000184

08000bc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <USART2_IRQHandler+0x10>)
 8000bce:	f005 f847 	bl	8005c60 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200001e8 	.word	0x200001e8

08000bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return 1;
 8000be0:	2301      	movs	r3, #1
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_kill>:

int _kill(int pid, int sig)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bf6:	f005 fd5f 	bl	80066b8 <__errno>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2216      	movs	r2, #22
 8000bfe:	601a      	str	r2, [r3, #0]
  return -1;
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_exit>:

void _exit (int status)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ffe7 	bl	8000bec <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c1e:	e7fe      	b.n	8000c1e <_exit+0x12>

08000c20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	e00a      	b.n	8000c48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c32:	f3af 8000 	nop.w
 8000c36:	4601      	mov	r1, r0
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	60ba      	str	r2, [r7, #8]
 8000c3e:	b2ca      	uxtb	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3301      	adds	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dbf0      	blt.n	8000c32 <_read+0x12>
  }

  return len;
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	e009      	b.n	8000c80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbf1      	blt.n	8000c6c <_write+0x12>
  }
  return len;
 8000c88:	687b      	ldr	r3, [r7, #4]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_close>:

int _close(int file)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cba:	605a      	str	r2, [r3, #4]
  return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <_isatty>:

int _isatty(int file)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f005 fcc4 	bl	80066b8 <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20010000 	.word	0x20010000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	2000029c 	.word	0x2000029c
 8000d64:	20000400 	.word	0x20000400

08000d68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d90:	f7ff ffea 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <LoopForever+0xe>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <LoopForever+0x16>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dba:	f005 fc83 	bl	80066c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dbe:	f7ff fc2d 	bl	800061c <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8000dd0:	08007a90 	.word	0x08007a90
  ldr r2, =_sbss
 8000dd4:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8000dd8:	20000400 	.word	0x20000400

08000ddc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_IRQHandler>
	...

08000de0 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 8000dea:	2300      	movs	r3, #0
 8000dec:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	777b      	strb	r3, [r7, #29]
 8000df2:	e01b      	b.n	8000e2c <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	77bb      	strb	r3, [r7, #30]
 8000df8:	e012      	b.n	8000e20 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 8000dfa:	7fba      	ldrb	r2, [r7, #30]
 8000dfc:	7f7b      	ldrb	r3, [r7, #29]
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	461a      	mov	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	1899      	adds	r1, r3, r2
 8000e08:	7fba      	ldrb	r2, [r7, #30]
 8000e0a:	7f7b      	ldrb	r3, [r7, #29]
 8000e0c:	7808      	ldrb	r0, [r1, #0]
 8000e0e:	4961      	ldr	r1, [pc, #388]	; (8000f94 <AES_Encrypt+0x1b4>)
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	440a      	add	r2, r1
 8000e14:	4413      	add	r3, r2
 8000e16:	4602      	mov	r2, r0
 8000e18:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000e1a:	7fbb      	ldrb	r3, [r7, #30]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	77bb      	strb	r3, [r7, #30]
 8000e20:	7fbb      	ldrb	r3, [r7, #30]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d9e9      	bls.n	8000dfa <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 8000e26:	7f7b      	ldrb	r3, [r7, #29]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	777b      	strb	r3, [r7, #29]
 8000e2c:	7f7b      	ldrb	r3, [r7, #29]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d9e0      	bls.n	8000df4 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	77fb      	strb	r3, [r7, #31]
 8000e36:	e00b      	b.n	8000e50 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 8000e38:	7ffb      	ldrb	r3, [r7, #31]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	441a      	add	r2, r3
 8000e3e:	7ffb      	ldrb	r3, [r7, #31]
 8000e40:	7812      	ldrb	r2, [r2, #0]
 8000e42:	3320      	adds	r3, #32
 8000e44:	443b      	add	r3, r7
 8000e46:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 8000e4a:	7ffb      	ldrb	r3, [r7, #31]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	77fb      	strb	r3, [r7, #31]
 8000e50:	7ffb      	ldrb	r3, [r7, #31]
 8000e52:	2b0f      	cmp	r3, #15
 8000e54:	d9f0      	bls.n	8000e38 <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f89c 	bl	8000f98 <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 8000e60:	2301      	movs	r3, #1
 8000e62:	773b      	strb	r3, [r7, #28]
 8000e64:	e038      	b.n	8000ed8 <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	777b      	strb	r3, [r7, #29]
 8000e6a:	e01f      	b.n	8000eac <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	77bb      	strb	r3, [r7, #30]
 8000e70:	e016      	b.n	8000ea0 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000e72:	7fba      	ldrb	r2, [r7, #30]
 8000e74:	7f7b      	ldrb	r3, [r7, #29]
 8000e76:	4947      	ldr	r1, [pc, #284]	; (8000f94 <AES_Encrypt+0x1b4>)
 8000e78:	0092      	lsls	r2, r2, #2
 8000e7a:	440a      	add	r2, r1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	7fbd      	ldrb	r5, [r7, #30]
 8000e82:	7f7c      	ldrb	r4, [r7, #29]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f8bf 	bl	8001008 <AES_Sub_Byte>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4a41      	ldr	r2, [pc, #260]	; (8000f94 <AES_Encrypt+0x1b4>)
 8000e90:	00ab      	lsls	r3, r5, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	4423      	add	r3, r4
 8000e96:	460a      	mov	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 8000e9a:	7fbb      	ldrb	r3, [r7, #30]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	77bb      	strb	r3, [r7, #30]
 8000ea0:	7fbb      	ldrb	r3, [r7, #30]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d9e5      	bls.n	8000e72 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 8000ea6:	7f7b      	ldrb	r3, [r7, #29]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	777b      	strb	r3, [r7, #29]
 8000eac:	7f7b      	ldrb	r3, [r7, #29]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d9dc      	bls.n	8000e6c <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 8000eb2:	f000 f8c7 	bl	8001044 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 8000eb6:	f000 f909 	bl	80010cc <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 8000eba:	f107 020c 	add.w	r2, r7, #12
 8000ebe:	7f3b      	ldrb	r3, [r7, #28]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f998 	bl	80011f8 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 f863 	bl	8000f98 <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 8000ed2:	7f3b      	ldrb	r3, [r7, #28]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	773b      	strb	r3, [r7, #28]
 8000ed8:	7f3b      	ldrb	r3, [r7, #28]
 8000eda:	2b09      	cmp	r3, #9
 8000edc:	d9c3      	bls.n	8000e66 <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	777b      	strb	r3, [r7, #29]
 8000ee2:	e01f      	b.n	8000f24 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	77bb      	strb	r3, [r7, #30]
 8000ee8:	e016      	b.n	8000f18 <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000eea:	7fba      	ldrb	r2, [r7, #30]
 8000eec:	7f7b      	ldrb	r3, [r7, #29]
 8000eee:	4929      	ldr	r1, [pc, #164]	; (8000f94 <AES_Encrypt+0x1b4>)
 8000ef0:	0092      	lsls	r2, r2, #2
 8000ef2:	440a      	add	r2, r1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	7fbd      	ldrb	r5, [r7, #30]
 8000efa:	7f7c      	ldrb	r4, [r7, #29]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f883 	bl	8001008 <AES_Sub_Byte>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4619      	mov	r1, r3
 8000f06:	4a23      	ldr	r2, [pc, #140]	; (8000f94 <AES_Encrypt+0x1b4>)
 8000f08:	00ab      	lsls	r3, r5, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4423      	add	r3, r4
 8000f0e:	460a      	mov	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000f12:	7fbb      	ldrb	r3, [r7, #30]
 8000f14:	3301      	adds	r3, #1
 8000f16:	77bb      	strb	r3, [r7, #30]
 8000f18:	7fbb      	ldrb	r3, [r7, #30]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d9e5      	bls.n	8000eea <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 8000f1e:	7f7b      	ldrb	r3, [r7, #29]
 8000f20:	3301      	adds	r3, #1
 8000f22:	777b      	strb	r3, [r7, #29]
 8000f24:	7f7b      	ldrb	r3, [r7, #29]
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d9dc      	bls.n	8000ee4 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 8000f2a:	f000 f88b 	bl	8001044 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 8000f2e:	f107 020c 	add.w	r2, r7, #12
 8000f32:	7f3b      	ldrb	r3, [r7, #28]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f95e 	bl	80011f8 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f829 	bl	8000f98 <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	777b      	strb	r3, [r7, #29]
 8000f4a:	e01a      	b.n	8000f82 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	77bb      	strb	r3, [r7, #30]
 8000f50:	e011      	b.n	8000f76 <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 8000f52:	7fb9      	ldrb	r1, [r7, #30]
 8000f54:	7f7a      	ldrb	r2, [r7, #29]
 8000f56:	7fb8      	ldrb	r0, [r7, #30]
 8000f58:	7f7b      	ldrb	r3, [r7, #29]
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4403      	add	r3, r0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4403      	add	r3, r0
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <AES_Encrypt+0x1b4>)
 8000f66:	0089      	lsls	r1, r1, #2
 8000f68:	4401      	add	r1, r0
 8000f6a:	440a      	add	r2, r1
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000f70:	7fbb      	ldrb	r3, [r7, #30]
 8000f72:	3301      	adds	r3, #1
 8000f74:	77bb      	strb	r3, [r7, #30]
 8000f76:	7fbb      	ldrb	r3, [r7, #30]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d9ea      	bls.n	8000f52 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 8000f7c:	7f7b      	ldrb	r3, [r7, #29]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	777b      	strb	r3, [r7, #29]
 8000f82:	7f7b      	ldrb	r3, [r7, #29]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d9e1      	bls.n	8000f4c <AES_Encrypt+0x16c>
		}
	}

}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3720      	adds	r7, #32
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bdb0      	pop	{r4, r5, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200002a0 	.word	0x200002a0

08000f98 <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73bb      	strb	r3, [r7, #14]
 8000fa4:	e024      	b.n	8000ff0 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e01b      	b.n	8000fe4 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	4914      	ldr	r1, [pc, #80]	; (8001004 <AES_Add_Round_Key+0x6c>)
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	440a      	add	r2, r1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	7818      	ldrb	r0, [r3, #0]
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	7819      	ldrb	r1, [r3, #0]
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
 8000fce:	4041      	eors	r1, r0
 8000fd0:	b2c8      	uxtb	r0, r1
 8000fd2:	490c      	ldr	r1, [pc, #48]	; (8001004 <AES_Add_Round_Key+0x6c>)
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	440a      	add	r2, r1
 8000fd8:	4413      	add	r3, r2
 8000fda:	4602      	mov	r2, r0
 8000fdc:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d9e0      	bls.n	8000fac <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	3301      	adds	r3, #1
 8000fee:	73bb      	strb	r3, [r7, #14]
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d9d7      	bls.n	8000fa6 <AES_Add_Round_Key+0xe>
		}
	}
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	200002a0 	.word	0x200002a0

08001008 <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	4906      	ldr	r1, [pc, #24]	; (8001040 <AES_Sub_Byte+0x38>)
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	440a      	add	r2, r1
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 8001030:	7b7b      	ldrb	r3, [r7, #13]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000004 	.word	0x20000004

08001044 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <AES_Shift_Rows+0x84>)
 800104c:	791b      	ldrb	r3, [r3, #4]
 800104e:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <AES_Shift_Rows+0x84>)
 8001052:	795a      	ldrb	r2, [r3, #5]
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <AES_Shift_Rows+0x84>)
 8001056:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <AES_Shift_Rows+0x84>)
 800105a:	799a      	ldrb	r2, [r3, #6]
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <AES_Shift_Rows+0x84>)
 800105e:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <AES_Shift_Rows+0x84>)
 8001062:	79da      	ldrb	r2, [r3, #7]
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <AES_Shift_Rows+0x84>)
 8001066:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 8001068:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <AES_Shift_Rows+0x84>)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <AES_Shift_Rows+0x84>)
 8001070:	7a1b      	ldrb	r3, [r3, #8]
 8001072:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <AES_Shift_Rows+0x84>)
 8001076:	7a9a      	ldrb	r2, [r3, #10]
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <AES_Shift_Rows+0x84>)
 800107a:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 800107c:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <AES_Shift_Rows+0x84>)
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <AES_Shift_Rows+0x84>)
 8001084:	7a5b      	ldrb	r3, [r3, #9]
 8001086:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <AES_Shift_Rows+0x84>)
 800108a:	7ada      	ldrb	r2, [r3, #11]
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <AES_Shift_Rows+0x84>)
 800108e:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <AES_Shift_Rows+0x84>)
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <AES_Shift_Rows+0x84>)
 8001098:	7bdb      	ldrb	r3, [r3, #15]
 800109a:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <AES_Shift_Rows+0x84>)
 800109e:	7b9a      	ldrb	r2, [r3, #14]
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <AES_Shift_Rows+0x84>)
 80010a2:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <AES_Shift_Rows+0x84>)
 80010a6:	7b5a      	ldrb	r2, [r3, #13]
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <AES_Shift_Rows+0x84>)
 80010aa:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <AES_Shift_Rows+0x84>)
 80010ae:	7b1a      	ldrb	r2, [r3, #12]
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <AES_Shift_Rows+0x84>)
 80010b2:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <AES_Shift_Rows+0x84>)
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	7313      	strb	r3, [r2, #12]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200002a0 	.word	0x200002a0

080010cc <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	73bb      	strb	r3, [r7, #14]
 80010d6:	e082      	b.n	80011de <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e033      	b.n	8001146 <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 80010de:	7bf9      	ldrb	r1, [r7, #15]
 80010e0:	7bba      	ldrb	r2, [r7, #14]
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	4843      	ldr	r0, [pc, #268]	; (80011f4 <AES_Mix_Collums+0x128>)
 80010e6:	0089      	lsls	r1, r1, #2
 80010e8:	4401      	add	r1, r0
 80010ea:	440a      	add	r2, r1
 80010ec:	7812      	ldrb	r2, [r2, #0]
 80010ee:	3310      	adds	r3, #16
 80010f0:	443b      	add	r3, r7
 80010f2:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	7bbb      	ldrb	r3, [r7, #14]
 80010fa:	493e      	ldr	r1, [pc, #248]	; (80011f4 <AES_Mix_Collums+0x128>)
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	440a      	add	r2, r1
 8001100:	4413      	add	r3, r2
 8001102:	781a      	ldrb	r2, [r3, #0]
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	0052      	lsls	r2, r2, #1
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	3310      	adds	r3, #16
 800110c:	443b      	add	r3, r7
 800110e:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	7bbb      	ldrb	r3, [r7, #14]
 8001116:	4937      	ldr	r1, [pc, #220]	; (80011f4 <AES_Mix_Collums+0x128>)
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	440a      	add	r2, r1
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b25b      	sxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	da0c      	bge.n	8001140 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	3310      	adds	r3, #16
 800112a:	443b      	add	r3, r7
 800112c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	f082 021b 	eor.w	r2, r2, #27
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	3310      	adds	r3, #16
 800113a:	443b      	add	r3, r7
 800113c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	3301      	adds	r3, #1
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d9c8      	bls.n	80010de <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 800114c:	793a      	ldrb	r2, [r7, #4]
 800114e:	7a7b      	ldrb	r3, [r7, #9]
 8001150:	4053      	eors	r3, r2
 8001152:	b2da      	uxtb	r2, r3
 8001154:	797b      	ldrb	r3, [r7, #5]
 8001156:	4053      	eors	r3, r2
 8001158:	b2da      	uxtb	r2, r3
 800115a:	7abb      	ldrb	r3, [r7, #10]
 800115c:	4053      	eors	r3, r2
 800115e:	b2d9      	uxtb	r1, r3
 8001160:	7afa      	ldrb	r2, [r7, #11]
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	404a      	eors	r2, r1
 8001166:	b2d1      	uxtb	r1, r2
 8001168:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <AES_Mix_Collums+0x128>)
 800116a:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 800116c:	7a3a      	ldrb	r2, [r7, #8]
 800116e:	797b      	ldrb	r3, [r7, #5]
 8001170:	4053      	eors	r3, r2
 8001172:	b2da      	uxtb	r2, r3
 8001174:	7abb      	ldrb	r3, [r7, #10]
 8001176:	4053      	eors	r3, r2
 8001178:	b2da      	uxtb	r2, r3
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	4053      	eors	r3, r2
 800117e:	b2d9      	uxtb	r1, r3
 8001180:	7afa      	ldrb	r2, [r7, #11]
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	404a      	eors	r2, r1
 8001186:	b2d1      	uxtb	r1, r2
 8001188:	4a1a      	ldr	r2, [pc, #104]	; (80011f4 <AES_Mix_Collums+0x128>)
 800118a:	4413      	add	r3, r2
 800118c:	460a      	mov	r2, r1
 800118e:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 8001190:	7a3a      	ldrb	r2, [r7, #8]
 8001192:	7a7b      	ldrb	r3, [r7, #9]
 8001194:	4053      	eors	r3, r2
 8001196:	b2da      	uxtb	r2, r3
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	4053      	eors	r3, r2
 800119c:	b2da      	uxtb	r2, r3
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	4053      	eors	r3, r2
 80011a2:	b2d9      	uxtb	r1, r3
 80011a4:	79fa      	ldrb	r2, [r7, #7]
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	404a      	eors	r2, r1
 80011aa:	b2d1      	uxtb	r1, r2
 80011ac:	4a11      	ldr	r2, [pc, #68]	; (80011f4 <AES_Mix_Collums+0x128>)
 80011ae:	4413      	add	r3, r2
 80011b0:	460a      	mov	r2, r1
 80011b2:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 80011b4:	7a3a      	ldrb	r2, [r7, #8]
 80011b6:	793b      	ldrb	r3, [r7, #4]
 80011b8:	4053      	eors	r3, r2
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7a7b      	ldrb	r3, [r7, #9]
 80011be:	4053      	eors	r3, r2
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	7abb      	ldrb	r3, [r7, #10]
 80011c4:	4053      	eors	r3, r2
 80011c6:	b2d9      	uxtb	r1, r3
 80011c8:	79fa      	ldrb	r2, [r7, #7]
 80011ca:	7bbb      	ldrb	r3, [r7, #14]
 80011cc:	404a      	eors	r2, r1
 80011ce:	b2d1      	uxtb	r1, r2
 80011d0:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <AES_Mix_Collums+0x128>)
 80011d2:	4413      	add	r3, r2
 80011d4:	460a      	mov	r2, r1
 80011d6:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	3301      	adds	r3, #1
 80011dc:	73bb      	strb	r3, [r7, #14]
 80011de:	7bbb      	ldrb	r3, [r7, #14]
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	f67f af79 	bls.w	80010d8 <AES_Mix_Collums+0xc>
	}
}
 80011e6:	bf00      	nop
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	200002a0 	.word	0x200002a0

080011f8 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 8001204:	2300      	movs	r3, #0
 8001206:	75fb      	strb	r3, [r7, #23]
 8001208:	e00c      	b.n	8001224 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	330c      	adds	r3, #12
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	441a      	add	r2, r3
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	3318      	adds	r3, #24
 8001218:	443b      	add	r3, r7
 800121a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	3301      	adds	r3, #1
 8001222:	75fb      	strb	r3, [r7, #23]
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	2b03      	cmp	r3, #3
 8001228:	d9ef      	bls.n	800120a <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 800122a:	7b3b      	ldrb	r3, [r7, #12]
 800122c:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 800122e:	7b7b      	ldrb	r3, [r7, #13]
 8001230:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 800123a:	7d3b      	ldrb	r3, [r7, #20]
 800123c:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	75fb      	strb	r3, [r7, #23]
 8001242:	e012      	b.n	800126a <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	3318      	adds	r3, #24
 8001248:	443b      	add	r3, r7
 800124a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800124e:	7dfc      	ldrb	r4, [r7, #23]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fed9 	bl	8001008 <AES_Sub_Byte>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	f104 0318 	add.w	r3, r4, #24
 800125e:	443b      	add	r3, r7
 8001260:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	3301      	adds	r3, #1
 8001268:	75fb      	strb	r3, [r7, #23]
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	2b03      	cmp	r3, #3
 800126e:	d9e9      	bls.n	8001244 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 8001270:	2301      	movs	r3, #1
 8001272:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 8001274:	e010      	b.n	8001298 <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 8001276:	7d7b      	ldrb	r3, [r7, #21]
 8001278:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800127c:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 800127e:	7d7b      	ldrb	r3, [r7, #21]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 8001284:	7cfb      	ldrb	r3, [r7, #19]
 8001286:	2b80      	cmp	r3, #128	; 0x80
 8001288:	d103      	bne.n	8001292 <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 800128a:	7d7b      	ldrb	r3, [r7, #21]
 800128c:	f083 031b 	eor.w	r3, r3, #27
 8001290:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	3b01      	subs	r3, #1
 8001296:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d1eb      	bne.n	8001276 <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 800129e:	7b3a      	ldrb	r2, [r7, #12]
 80012a0:	7d7b      	ldrb	r3, [r7, #21]
 80012a2:	4053      	eors	r3, r2
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	75fb      	strb	r3, [r7, #23]
 80012ac:	e02f      	b.n	800130e <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	75bb      	strb	r3, [r7, #22]
 80012b2:	e026      	b.n	8001302 <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 80012b4:	7dba      	ldrb	r2, [r7, #22]
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	461a      	mov	r2, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	7819      	ldrb	r1, [r3, #0]
 80012c4:	7dbb      	ldrb	r3, [r7, #22]
 80012c6:	3318      	adds	r3, #24
 80012c8:	443b      	add	r3, r7
 80012ca:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80012ce:	7db8      	ldrb	r0, [r7, #22]
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4403      	add	r3, r0
 80012d6:	4618      	mov	r0, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	4403      	add	r3, r0
 80012dc:	404a      	eors	r2, r1
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 80012e2:	7dba      	ldrb	r2, [r7, #22]
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	461a      	mov	r2, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	441a      	add	r2, r3
 80012f0:	7dbb      	ldrb	r3, [r7, #22]
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	3318      	adds	r3, #24
 80012f6:	443b      	add	r3, r7
 80012f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 80012fc:	7dbb      	ldrb	r3, [r7, #22]
 80012fe:	3301      	adds	r3, #1
 8001300:	75bb      	strb	r3, [r7, #22]
 8001302:	7dbb      	ldrb	r3, [r7, #22]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d9d5      	bls.n	80012b4 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	3301      	adds	r3, #1
 800130c:	75fb      	strb	r3, [r7, #23]
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d9cc      	bls.n	80012ae <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}

0800131e <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b08a      	sub	sp, #40	; 0x28
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	461a      	mov	r2, r3
 800132a:	460b      	mov	r3, r1
 800132c:	72fb      	strb	r3, [r7, #11]
 800132e:	4613      	mov	r3, r2
 8001330:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 8001338:	2300      	movs	r3, #0
 800133a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 800133e:	2300      	movs	r3, #0
 8001340:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 8001344:	7afb      	ldrb	r3, [r7, #11]
 8001346:	091b      	lsrs	r3, r3, #4
 8001348:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 8001356:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 800135e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001362:	3301      	adds	r3, #1
 8001364:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 8001368:	2301      	movs	r3, #1
 800136a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800136e:	e07e      	b.n	800146e <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 8001370:	2301      	movs	r3, #1
 8001372:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 8001374:	2300      	movs	r3, #0
 8001376:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 8001378:	2300      	movs	r3, #0
 800137a:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 800137c:	2300      	movs	r3, #0
 800137e:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 8001380:	2300      	movs	r3, #0
 8001382:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 8001384:	7abb      	ldrb	r3, [r7, #10]
 8001386:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 8001388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138a:	78db      	ldrb	r3, [r3, #3]
 800138c:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 800138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001390:	789b      	ldrb	r3, [r3, #2]
 8001392:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 8001394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001396:	785b      	ldrb	r3, [r3, #1]
 8001398:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 800139a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 80013ae:	2300      	movs	r3, #0
 80013b0:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 80013c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fd06 	bl	8000de0 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 80013d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80013d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013dc:	429a      	cmp	r2, r3
 80013de:	d01c      	beq.n	800141a <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013e6:	e013      	b.n	8001410 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	781a      	ldrb	r2, [r3, #0]
 80013ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013f0:	3328      	adds	r3, #40	; 0x28
 80013f2:	443b      	add	r3, r7
 80013f4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80013f8:	4053      	eors	r3, r2
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	701a      	strb	r2, [r3, #0]
				Data++;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3301      	adds	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 8001406:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800140a:	3301      	adds	r3, #1
 800140c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001410:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d9e7      	bls.n	80013e8 <Encrypt_Payload+0xca>
 8001418:	e024      	b.n	8001464 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 800141a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 8001422:	2310      	movs	r3, #16
 8001424:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 8001428:	2300      	movs	r3, #0
 800142a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800142e:	e013      	b.n	8001458 <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001438:	3328      	adds	r3, #40	; 0x28
 800143a:	443b      	add	r3, r7
 800143c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001440:	4053      	eors	r3, r2
 8001442:	b2da      	uxtb	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	701a      	strb	r2, [r3, #0]
				Data++;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3301      	adds	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 800144e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001452:	3301      	adds	r3, #1
 8001454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001458:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800145c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001460:	429a      	cmp	r2, r3
 8001462:	d3e5      	bcc.n	8001430 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 8001464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001468:	3301      	adds	r3, #1
 800146a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800146e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001472:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001476:	429a      	cmp	r2, r3
 8001478:	f67f af7a 	bls.w	8001370 <Encrypt_Payload+0x52>
			}
		}
	}
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b09b      	sub	sp, #108	; 0x6c
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 8001498:	4bba      	ldr	r3, [pc, #744]	; (8001784 <Calculate_MIC+0x2fc>)
 800149a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800149e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 80014a4:	4bb7      	ldr	r3, [pc, #732]	; (8001784 <Calculate_MIC+0x2fc>)
 80014a6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80014aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 80014b0:	4bb4      	ldr	r3, [pc, #720]	; (8001784 <Calculate_MIC+0x2fc>)
 80014b2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80014b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 80014bc:	4bb1      	ldr	r3, [pc, #708]	; (8001784 <Calculate_MIC+0x2fc>)
 80014be:	f107 0414 	add.w	r4, r7, #20
 80014c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 80014d4:	2301      	movs	r3, #1
 80014d6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 80014da:	2349      	movs	r3, #73	; 0x49
 80014dc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 80014f8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80014fc:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 8001500:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001504:	78db      	ldrb	r3, [r3, #3]
 8001506:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 800150a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 8001514:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001518:	785b      	ldrb	r3, [r3, #1]
 800151a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 800151e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 800153a:	2300      	movs	r3, #0
 800153c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 8001546:	2300      	movs	r3, #0
 8001548:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 8001564:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001568:	2b00      	cmp	r3, #0
 800156a:	d004      	beq.n	8001576 <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 800156c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001570:	3301      	adds	r3, #1
 8001572:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 8001576:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800157a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800157e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001580:	4618      	mov	r0, r3
 8001582:	f000 f901 	bl	8001788 <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 8001586:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800158a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fc27 	bl	8000de0 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 8001592:	2300      	movs	r3, #0
 8001594:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001598:	e010      	b.n	80015bc <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 800159a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800159e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015a2:	3268      	adds	r2, #104	; 0x68
 80015a4:	443a      	add	r2, r7
 80015a6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80015aa:	3368      	adds	r3, #104	; 0x68
 80015ac:	443b      	add	r3, r7
 80015ae:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 80015b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015b6:	3301      	adds	r3, #1
 80015b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d9ea      	bls.n	800159a <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 80015c4:	e043      	b.n	800164e <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015cc:	e00f      	b.n	80015ee <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 80015ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	3368      	adds	r3, #104	; 0x68
 80015d8:	443b      	add	r3, r7
 80015da:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3301      	adds	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 80015e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015e8:	3301      	adds	r3, #1
 80015ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015f2:	2b0f      	cmp	r3, #15
 80015f4:	d9eb      	bls.n	80015ce <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 80015f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f000 f94a 	bl	800189a <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fbe7 	bl	8000de0 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 8001612:	2300      	movs	r3, #0
 8001614:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001618:	e010      	b.n	800163c <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 800161a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800161e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001622:	3268      	adds	r2, #104	; 0x68
 8001624:	443a      	add	r2, r7
 8001626:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 800162a:	3368      	adds	r3, #104	; 0x68
 800162c:	443b      	add	r3, r7
 800162e:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 8001632:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001636:	3301      	adds	r3, #1
 8001638:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800163c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d9ea      	bls.n	800161a <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 8001644:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001648:	3301      	adds	r3, #1
 800164a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 800164e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8001652:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001656:	429a      	cmp	r2, r3
 8001658:	d3b5      	bcc.n	80015c6 <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 800165a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800165e:	2b00      	cmp	r3, #0
 8001660:	d12e      	bne.n	80016c0 <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 8001662:	2300      	movs	r3, #0
 8001664:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001668:	e00f      	b.n	800168a <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 800166a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	3368      	adds	r3, #104	; 0x68
 8001674:	443b      	add	r3, r7
 8001676:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3301      	adds	r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8001680:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001684:	3301      	adds	r3, #1
 8001686:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800168a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800168e:	2b0f      	cmp	r3, #15
 8001690:	d9eb      	bls.n	800166a <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 8001692:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f8fc 	bl	800189a <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 80016a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f8f4 	bl	800189a <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fb91 	bl	8000de0 <AES_Encrypt>
 80016be:	e04d      	b.n	800175c <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016c6:	e02f      	b.n	8001728 <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 80016c8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80016cc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d20a      	bcs.n	80016ea <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 80016d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	7812      	ldrb	r2, [r2, #0]
 80016dc:	3368      	adds	r3, #104	; 0x68
 80016de:	443b      	add	r3, r7
 80016e0:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 80016ea:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80016ee:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d106      	bne.n	8001704 <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 80016f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016fa:	3368      	adds	r3, #104	; 0x68
 80016fc:	443b      	add	r3, r7
 80016fe:	2280      	movs	r2, #128	; 0x80
 8001700:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 8001704:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001708:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800170c:	429a      	cmp	r2, r3
 800170e:	d906      	bls.n	800171e <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 8001710:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001714:	3368      	adds	r3, #104	; 0x68
 8001716:	443b      	add	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 800171e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001722:	3301      	adds	r3, #1
 8001724:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001728:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d9cb      	bls.n	80016c8 <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 8001730:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f8ad 	bl	800189a <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 8001740:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f8a5 	bl	800189a <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fb42 	bl	8000de0 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 800175c:	7d3a      	ldrb	r2, [r7, #20]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3301      	adds	r3, #1
 8001766:	7d7a      	ldrb	r2, [r7, #21]
 8001768:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	3302      	adds	r3, #2
 800176e:	7dba      	ldrb	r2, [r7, #22]
 8001770:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3303      	adds	r3, #3
 8001776:	7dfa      	ldrb	r2, [r7, #23]
 8001778:	701a      	strb	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	376c      	adds	r7, #108	; 0x6c
 800177e:	46bd      	mov	sp, r7
 8001780:	bd90      	pop	{r4, r7, pc}
 8001782:	bf00      	nop
 8001784:	080076c4 	.word	0x080076c4

08001788 <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff fb22 	bl	8000de0 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da02      	bge.n	80017ac <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 80017a6:	2301      	movs	r3, #1
 80017a8:	75bb      	strb	r3, [r7, #22]
 80017aa:	e001      	b.n	80017b0 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f83c 	bl	800182e <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 80017b6:	7dbb      	ldrb	r3, [r7, #22]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d109      	bne.n	80017d0 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	330f      	adds	r3, #15
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	320f      	adds	r2, #15
 80017c6:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 80017ca:	43db      	mvns	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	75fb      	strb	r3, [r7, #23]
 80017d4:	e00a      	b.n	80017ec <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	441a      	add	r2, r3
 80017dc:	7dfb      	ldrb	r3, [r7, #23]
 80017de:	68b9      	ldr	r1, [r7, #8]
 80017e0:	440b      	add	r3, r1
 80017e2:	7812      	ldrb	r2, [r2, #0]
 80017e4:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	3301      	adds	r3, #1
 80017ea:	75fb      	strb	r3, [r7, #23]
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2b0f      	cmp	r3, #15
 80017f0:	d9f1      	bls.n	80017d6 <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da02      	bge.n	8001802 <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	75bb      	strb	r3, [r7, #22]
 8001800:	e001      	b.n	8001806 <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 8001806:	68b8      	ldr	r0, [r7, #8]
 8001808:	f000 f811 	bl	800182e <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 800180c:	7dbb      	ldrb	r3, [r7, #22]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d109      	bne.n	8001826 <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	330f      	adds	r3, #15
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	320f      	adds	r2, #15
 800181c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8001820:	43db      	mvns	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	7013      	strb	r3, [r2, #0]
	}
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 800182e:	b480      	push	{r7}
 8001830:	b085      	sub	sp, #20
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	e022      	b.n	8001886 <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	2b0e      	cmp	r3, #14
 8001844:	d80d      	bhi.n	8001862 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	3301      	adds	r3, #1
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b25b      	sxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	da02      	bge.n	800185c <Shift_Left+0x2e>
			{
				Overflow = 1;
 8001856:	2301      	movs	r3, #1
 8001858:	73bb      	strb	r3, [r7, #14]
 800185a:	e004      	b.n	8001866 <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	73bb      	strb	r3, [r7, #14]
 8001860:	e001      	b.n	8001866 <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	b2d9      	uxtb	r1, r3
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	7bba      	ldrb	r2, [r7, #14]
 800187a:	440a      	add	r2, r1
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	3301      	adds	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d9d9      	bls.n	8001840 <Shift_Left+0x12>
	}
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 800189a:	b480      	push	{r7}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e010      	b.n	80018cc <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	7819      	ldrb	r1, [r3, #0]
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	781a      	ldrb	r2, [r3, #0]
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4403      	add	r3, r0
 80018c0:	404a      	eors	r2, r1
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	3301      	adds	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	d9eb      	bls.n	80018aa <XOR+0x10>
	}
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	460b      	mov	r3, r1
 80018ee:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6858      	ldr	r0, [r3, #4]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	891b      	ldrh	r3, [r3, #8]
 80018f8:	2200      	movs	r2, #0
 80018fa:	4619      	mov	r1, r3
 80018fc:	f001 feba 	bl	8003674 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001906:	b2db      	uxtb	r3, r3
 8001908:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	f107 0117 	add.w	r1, r7, #23
 8001912:	230a      	movs	r3, #10
 8001914:	2201      	movs	r2, #1
 8001916:	f003 f90c 	bl	8004b32 <HAL_SPI_Transmit>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <read_register+0x44>
		return false;
 8001920:	2300      	movs	r3, #0
 8001922:	e015      	b.n	8001950 <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b29a      	uxth	r2, r3
 800192c:	230a      	movs	r3, #10
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f003 fa74 	bl	8004e1c <HAL_SPI_Receive>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <read_register+0x5e>
		return false;
 800193a:	2300      	movs	r3, #0
 800193c:	e008      	b.n	8001950 <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6858      	ldr	r0, [r3, #4]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	891b      	ldrh	r3, [r3, #8]
 8001946:	2201      	movs	r2, #1
 8001948:	4619      	mov	r1, r3
 800194a:	f001 fe93 	bl	8003674 <HAL_GPIO_WritePin>

	return true;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
 8001964:	4613      	mov	r3, r2
 8001966:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6858      	ldr	r0, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	891b      	ldrh	r3, [r3, #8]
 8001970:	2200      	movs	r2, #0
 8001972:	4619      	mov	r1, r3
 8001974:	f001 fe7e 	bl	8003674 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800197e:	b2db      	uxtb	r3, r3
 8001980:	733b      	strb	r3, [r7, #12]
 8001982:	78bb      	ldrb	r3, [r7, #2]
 8001984:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	f107 010c 	add.w	r1, r7, #12
 800198e:	230a      	movs	r3, #10
 8001990:	2202      	movs	r2, #2
 8001992:	f003 f8ce 	bl	8004b32 <HAL_SPI_Transmit>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <write_register+0x48>
		return false;
 800199c:	2300      	movs	r3, #0
 800199e:	e008      	b.n	80019b2 <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6858      	ldr	r0, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	891b      	ldrh	r3, [r3, #8]
 80019a8:	2201      	movs	r2, #1
 80019aa:	4619      	mov	r1, r3
 80019ac:	f001 fe62 	bl	8003674 <HAL_GPIO_WritePin>

	return true;
 80019b0:	2301      	movs	r3, #1
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <config_set_channel>:

static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	460b      	mov	r3, r1
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 80019ca:	7afb      	ldrb	r3, [r7, #11]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d905      	bls.n	80019dc <config_set_channel+0x20>
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <config_set_channel+0x54>)
 80019d2:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <config_set_channel+0x58>)
 80019d4:	2170      	movs	r1, #112	; 0x70
 80019d6:	4810      	ldr	r0, [pc, #64]	; (8001a18 <config_set_channel+0x5c>)
 80019d8:	f004 fcba 	bl	8006350 <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 80019dc:	7afa      	ldrb	r2, [r7, #11]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	321a      	adds	r2, #26
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	7afb      	ldrb	r3, [r7, #11]
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	080076d4 	.word	0x080076d4
 8001a14:	080079a8 	.word	0x080079a8
 8001a18:	080076e8 	.word	0x080076e8

08001a1c <config_load_default>:

static void config_load_default(rfm95_handle_t *handle)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f64a 3267 	movw	r2, #43879	; 0xab67
 8001a2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	handle->config.tx_frame_count = 0;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	handle->config.rx_frame_count = 0;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	handle->config.rx1_delay = 1;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	handle->config.channel_mask = 0;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	config_set_channel(handle, 0, 868100000);
 8001a4e:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <config_load_default+0x58>)
 8001a50:	2100      	movs	r1, #0
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffb2 	bl	80019bc <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <config_load_default+0x5c>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffad 	bl	80019bc <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 8001a62:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <config_load_default+0x60>)
 8001a64:	2102      	movs	r1, #2
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa8 	bl	80019bc <config_set_channel>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	33be27a0 	.word	0x33be27a0
 8001a78:	33c134e0 	.word	0x33c134e0
 8001a7c:	33c44220 	.word	0x33c44220

08001a80 <reset>:

static void reset(rfm95_handle_t *handle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68d8      	ldr	r0, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	8a1b      	ldrh	r3, [r3, #16]
 8001a90:	2200      	movs	r2, #0
 8001a92:	4619      	mov	r1, r3
 8001a94:	f001 fdee 	bl	8003674 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f001 fb0b 	bl	80030b4 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68d8      	ldr	r0, [r3, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	8a1b      	ldrh	r3, [r3, #16]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f001 fde3 	bl	8003674 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001aae:	2005      	movs	r0, #5
 8001ab0:	f001 fb00 	bl	80030b4 <HAL_Delay>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <configure_frequency>:

static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001ac6:	6839      	ldr	r1, [r7, #0]
 8001ac8:	2000      	movs	r0, #0
 8001aca:	460a      	mov	r2, r1
 8001acc:	4603      	mov	r3, r0
 8001ace:	0b55      	lsrs	r5, r2, #13
 8001ad0:	04d4      	lsls	r4, r2, #19
 8001ad2:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <configure_frequency+0xb4>)
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	4620      	mov	r0, r4
 8001ada:	4629      	mov	r1, r5
 8001adc:	f7fe fc20 	bl	8000320 <__aeabi_uldivmod>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 8001ae8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	0c02      	lsrs	r2, r0, #16
 8001af6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001afa:	0c0b      	lsrs	r3, r1, #16
 8001afc:	b2d3      	uxtb	r3, r2
 8001afe:	461a      	mov	r2, r3
 8001b00:	2106      	movs	r1, #6
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ff28 	bl	8001958 <write_register>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f083 0301 	eor.w	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <configure_frequency+0x5c>
 8001b14:	2300      	movs	r3, #0
 8001b16:	e026      	b.n	8001b66 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 8001b18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	0a02      	lsrs	r2, r0, #8
 8001b26:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001b2a:	0a0b      	lsrs	r3, r1, #8
 8001b2c:	b2d3      	uxtb	r3, r2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2107      	movs	r1, #7
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff10 	bl	8001958 <write_register>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f083 0301 	eor.w	r3, r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <configure_frequency+0x8c>
 8001b44:	2300      	movs	r3, #0
 8001b46:	e00e      	b.n	8001b66 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 8001b48:	7a3b      	ldrb	r3, [r7, #8]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	2108      	movs	r1, #8
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ff02 	bl	8001958 <write_register>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f083 0301 	eor.w	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <configure_frequency+0xa8>
 8001b60:	2300      	movs	r3, #0
 8001b62:	e000      	b.n	8001b66 <configure_frequency+0xaa>

	return true;
 8001b64:	2301      	movs	r3, #1
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	01e84800 	.word	0x01e84800

08001b74 <configure_channel>:

static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8001b84:	461a      	mov	r2, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	fa42 f303 	asr.w	r3, r2, r3
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <configure_channel+0x2c>
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <configure_channel+0x48>)
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <configure_channel+0x4c>)
 8001b98:	2197      	movs	r1, #151	; 0x97
 8001b9a:	480a      	ldr	r0, [pc, #40]	; (8001bc4 <configure_channel+0x50>)
 8001b9c:	f004 fbd8 	bl	8006350 <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	321a      	adds	r2, #26
 8001ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001baa:	4619      	mov	r1, r3
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff85 	bl	8001abc <configure_frequency>
 8001bb2:	4603      	mov	r3, r0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	08007710 	.word	0x08007710
 8001bc0:	080079bc 	.word	0x080079bc
 8001bc4:	080076e8 	.word	0x080076e8

08001bc8 <wait_for_irq>:

static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	72fb      	strb	r3, [r7, #11]
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4798      	blx	r3
 8001bdc:	4601      	mov	r1, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	fb02 f303 	mul.w	r3, r2, r3
 8001be8:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <wait_for_irq+0x5c>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	099b      	lsrs	r3, r3, #6
 8001bf0:	440b      	add	r3, r1
 8001bf2:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 8001bf4:	e008      	b.n	8001c08 <wait_for_irq+0x40>
		if (handle->get_precision_tick() >= timeout_tick) {
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4798      	blx	r3
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d801      	bhi.n	8001c08 <wait_for_irq+0x40>
			return false;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e008      	b.n	8001c1a <wait_for_irq+0x52>
	while (handle->interrupt_times[interrupt] == 0) {
 8001c08:	7afb      	ldrb	r3, [r7, #11]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	332a      	adds	r3, #42	; 0x2a
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0ee      	beq.n	8001bf6 <wait_for_irq+0x2e>
		}
	}

	return true;
 8001c18:	2301      	movs	r3, #1
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	10624dd3 	.word	0x10624dd3

08001c28 <wait_for_rx_irqs>:

static bool wait_for_rx_irqs(rfm95_handle_t *handle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	uint32_t timeout_tick = handle->get_precision_tick() +
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	4798      	blx	r3
 8001c36:	4602      	mov	r2, r0
	                        RFM95_RECEIVE_TIMEOUT * handle->precision_tick_frequency / 1000;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	4912      	ldr	r1, [pc, #72]	; (8001c90 <wait_for_rx_irqs+0x68>)
 8001c46:	fba1 1303 	umull	r1, r3, r1, r3
 8001c4a:	099b      	lsrs	r3, r3, #6
	uint32_t timeout_tick = handle->get_precision_tick() +
 8001c4c:	4413      	add	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 8001c50:	e008      	b.n	8001c64 <wait_for_rx_irqs+0x3c>
		if (handle->get_precision_tick() >= timeout_tick) {
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4798      	blx	r3
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d801      	bhi.n	8001c64 <wait_for_rx_irqs+0x3c>
			return false;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e011      	b.n	8001c88 <wait_for_rx_irqs+0x60>
	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d104      	bne.n	8001c78 <wait_for_rx_irqs+0x50>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ec      	beq.n	8001c52 <wait_for_rx_irqs+0x2a>
		}
	}

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf14      	ite	ne
 8001c82:	2301      	movne	r3, #1
 8001c84:	2300      	moveq	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	10624dd3 	.word	0x10624dd3

08001c94 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 8001ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	dd03      	ble.n	8001cb0 <rfm95_set_power+0x1c>
 8001ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cac:	2b11      	cmp	r3, #17
 8001cae:	dd09      	ble.n	8001cc4 <rfm95_set_power+0x30>
 8001cb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb4:	2b14      	cmp	r3, #20
 8001cb6:	d005      	beq.n	8001cc4 <rfm95_set_power+0x30>
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <rfm95_set_power+0xec>)
 8001cba:	4a32      	ldr	r2, [pc, #200]	; (8001d84 <rfm95_set_power+0xf0>)
 8001cbc:	21b8      	movs	r1, #184	; 0xb8
 8001cbe:	4832      	ldr	r0, [pc, #200]	; (8001d88 <rfm95_set_power+0xf4>)
 8001cc0:	f004 fb46 	bl	8006350 <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2223      	movs	r2, #35	; 0x23
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f004 fca4 	bl	800661a <memset>
	uint8_t pa_dac_config = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (power >= 2 && power <= 17) {
 8001cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	dd19      	ble.n	8001d14 <rfm95_set_power+0x80>
 8001ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce4:	2b11      	cmp	r3, #17
 8001ce6:	dc15      	bgt.n	8001d14 <rfm95_set_power+0x80>
		pa_config.max_power = 7;
 8001ce8:	7b3b      	ldrb	r3, [r7, #12]
 8001cea:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001cee:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001cf0:	7b3b      	ldrb	r3, [r7, #12]
 8001cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf6:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	3b02      	subs	r3, #2
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	7b3b      	ldrb	r3, [r7, #12]
 8001d06:	f362 0303 	bfi	r3, r2, #0, #4
 8001d0a:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001d0c:	2384      	movs	r3, #132	; 0x84
 8001d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d12:	e012      	b.n	8001d3a <rfm95_set_power+0xa6>

	} else if (power == 20) {
 8001d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d18:	2b14      	cmp	r3, #20
 8001d1a:	d10e      	bne.n	8001d3a <rfm95_set_power+0xa6>
		pa_config.max_power = 7;
 8001d1c:	7b3b      	ldrb	r3, [r7, #12]
 8001d1e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001d22:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001d24:	7b3b      	ldrb	r3, [r7, #12]
 8001d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2a:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8001d2c:	7b3b      	ldrb	r3, [r7, #12]
 8001d2e:	f043 030f 	orr.w	r3, r3, #15
 8001d32:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8001d34:	2387      	movs	r3, #135	; 0x87
 8001d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8001d3a:	7b3b      	ldrb	r3, [r7, #12]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2109      	movs	r1, #9
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fe09 	bl	8001958 <write_register>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f083 0301 	eor.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <rfm95_set_power+0xc2>
 8001d52:	2300      	movs	r3, #0
 8001d54:	e00f      	b.n	8001d76 <rfm95_set_power+0xe2>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8001d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	214d      	movs	r1, #77	; 0x4d
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fdfa 	bl	8001958 <write_register>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f083 0301 	eor.w	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <rfm95_set_power+0xe0>
 8001d70:	2300      	movs	r3, #0
 8001d72:	e000      	b.n	8001d76 <rfm95_set_power+0xe2>

	return true;
 8001d74:	2301      	movs	r3, #1
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3730      	adds	r7, #48	; 0x30
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	08007744 	.word	0x08007744
 8001d84:	080079d0 	.word	0x080079d0
 8001d88:	080076e8 	.word	0x080076e8

08001d8c <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d9e:	d005      	beq.n	8001dac <rfm95_init+0x20>
 8001da0:	4b9a      	ldr	r3, [pc, #616]	; (800200c <rfm95_init+0x280>)
 8001da2:	4a9b      	ldr	r2, [pc, #620]	; (8002010 <rfm95_init+0x284>)
 8001da4:	21d2      	movs	r1, #210	; 0xd2
 8001da6:	489b      	ldr	r0, [pc, #620]	; (8002014 <rfm95_init+0x288>)
 8001da8:	f004 fad2 	bl	8006350 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d005      	beq.n	8001dc2 <rfm95_init+0x36>
 8001db6:	4b98      	ldr	r3, [pc, #608]	; (8002018 <rfm95_init+0x28c>)
 8001db8:	4a95      	ldr	r2, [pc, #596]	; (8002010 <rfm95_init+0x284>)
 8001dba:	21d3      	movs	r1, #211	; 0xd3
 8001dbc:	4895      	ldr	r0, [pc, #596]	; (8002014 <rfm95_init+0x288>)
 8001dbe:	f004 fac7 	bl	8006350 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001dcc:	d005      	beq.n	8001dda <rfm95_init+0x4e>
 8001dce:	4b93      	ldr	r3, [pc, #588]	; (800201c <rfm95_init+0x290>)
 8001dd0:	4a8f      	ldr	r2, [pc, #572]	; (8002010 <rfm95_init+0x284>)
 8001dd2:	21d4      	movs	r1, #212	; 0xd4
 8001dd4:	488f      	ldr	r0, [pc, #572]	; (8002014 <rfm95_init+0x288>)
 8001dd6:	f004 fabb 	bl	8006350 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <rfm95_init+0x64>
 8001de4:	4b8e      	ldr	r3, [pc, #568]	; (8002020 <rfm95_init+0x294>)
 8001de6:	4a8a      	ldr	r2, [pc, #552]	; (8002010 <rfm95_init+0x284>)
 8001de8:	21d5      	movs	r1, #213	; 0xd5
 8001dea:	488a      	ldr	r0, [pc, #552]	; (8002014 <rfm95_init+0x288>)
 8001dec:	f004 fab0 	bl	8006350 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <rfm95_init+0x7a>
 8001dfa:	4b8a      	ldr	r3, [pc, #552]	; (8002024 <rfm95_init+0x298>)
 8001dfc:	4a84      	ldr	r2, [pc, #528]	; (8002010 <rfm95_init+0x284>)
 8001dfe:	21d6      	movs	r1, #214	; 0xd6
 8001e00:	4884      	ldr	r0, [pc, #528]	; (8002014 <rfm95_init+0x288>)
 8001e02:	f004 faa5 	bl	8006350 <__assert_func>
	assert(handle->get_precision_tick != NULL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d105      	bne.n	8001e1a <rfm95_init+0x8e>
 8001e0e:	4b86      	ldr	r3, [pc, #536]	; (8002028 <rfm95_init+0x29c>)
 8001e10:	4a7f      	ldr	r2, [pc, #508]	; (8002010 <rfm95_init+0x284>)
 8001e12:	21d7      	movs	r1, #215	; 0xd7
 8001e14:	487f      	ldr	r0, [pc, #508]	; (8002014 <rfm95_init+0x288>)
 8001e16:	f004 fa9b 	bl	8006350 <__assert_func>
	assert(handle->random_int != NULL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d105      	bne.n	8001e2e <rfm95_init+0xa2>
 8001e22:	4b82      	ldr	r3, [pc, #520]	; (800202c <rfm95_init+0x2a0>)
 8001e24:	4a7a      	ldr	r2, [pc, #488]	; (8002010 <rfm95_init+0x284>)
 8001e26:	21d8      	movs	r1, #216	; 0xd8
 8001e28:	487a      	ldr	r0, [pc, #488]	; (8002014 <rfm95_init+0x288>)
 8001e2a:	f004 fa91 	bl	8006350 <__assert_func>
	assert(handle->precision_sleep_until != NULL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <rfm95_init+0xb6>
 8001e36:	4b7e      	ldr	r3, [pc, #504]	; (8002030 <rfm95_init+0x2a4>)
 8001e38:	4a75      	ldr	r2, [pc, #468]	; (8002010 <rfm95_init+0x284>)
 8001e3a:	21d9      	movs	r1, #217	; 0xd9
 8001e3c:	4875      	ldr	r0, [pc, #468]	; (8002014 <rfm95_init+0x288>)
 8001e3e:	f004 fa87 	bl	8006350 <__assert_func>
	assert(handle->precision_tick_frequency > 10000);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e46:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d805      	bhi.n	8001e5a <rfm95_init+0xce>
 8001e4e:	4b79      	ldr	r3, [pc, #484]	; (8002034 <rfm95_init+0x2a8>)
 8001e50:	4a6f      	ldr	r2, [pc, #444]	; (8002010 <rfm95_init+0x284>)
 8001e52:	21da      	movs	r1, #218	; 0xda
 8001e54:	486f      	ldr	r0, [pc, #444]	; (8002014 <rfm95_init+0x288>)
 8001e56:	f004 fa7b 	bl	8006350 <__assert_func>

	reset(handle);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff fe10 	bl	8001a80 <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d012      	beq.n	8001e8e <rfm95_init+0x102>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	3260      	adds	r2, #96	; 0x60
 8001e70:	4610      	mov	r0, r2
 8001e72:	4798      	blx	r3
 8001e74:	4603      	mov	r3, r0
 8001e76:	f083 0301 	eor.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d106      	bne.n	8001e8e <rfm95_init+0x102>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001e86:	f64a 3267 	movw	r2, #43879	; 0xab67
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d002      	beq.n	8001e94 <rfm95_init+0x108>
		config_load_default(handle);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fdc4 	bl	8001a1c <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8001e94:	f107 020f 	add.w	r2, r7, #15
 8001e98:	2301      	movs	r3, #1
 8001e9a:	2142      	movs	r1, #66	; 0x42
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff fd1f 	bl	80018e0 <read_register>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f083 0301 	eor.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <rfm95_init+0x126>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e0a7      	b.n	8002002 <rfm95_init+0x276>
	if (version != RFM9x_VER) return false;
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b12      	cmp	r3, #18
 8001eb6:	d001      	beq.n	8001ebc <rfm95_init+0x130>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e0a2      	b.n	8002002 <rfm95_init+0x276>

	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff fd49 	bl	8001958 <write_register>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f083 0301 	eor.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <rfm95_init+0x14a>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e095      	b.n	8002002 <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	2101      	movs	r1, #1
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff fd3c 	bl	8001958 <write_register>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f083 0301 	eor.w	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <rfm95_init+0x164>
 8001eec:	2300      	movs	r3, #0
 8001eee:	e088      	b.n	8002002 <rfm95_init+0x276>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2140      	movs	r1, #64	; 0x40
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff fd2f 	bl	8001958 <write_register>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f083 0301 	eor.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <rfm95_init+0x17e>
 8001f06:	2300      	movs	r3, #0
 8001f08:	e07b      	b.n	8002002 <rfm95_init+0x276>

	if (handle->on_after_interrupts_configured != NULL) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <rfm95_init+0x18c>
		handle->on_after_interrupts_configured();
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17)) return false;
 8001f18:	2111      	movs	r1, #17
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff feba 	bl	8001c94 <rfm95_set_power>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f083 0301 	eor.w	r3, r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <rfm95_init+0x1a4>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e068      	b.n	8002002 <rfm95_init+0x276>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8001f30:	2223      	movs	r2, #35	; 0x23
 8001f32:	210c      	movs	r1, #12
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fd0f 	bl	8001958 <write_register>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f083 0301 	eor.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <rfm95_init+0x1be>
 8001f46:	2300      	movs	r3, #0
 8001f48:	e05b      	b.n	8002002 <rfm95_init+0x276>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff fd02 	bl	8001958 <write_register>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f083 0301 	eor.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <rfm95_init+0x1d8>
 8001f60:	2300      	movs	r3, #0
 8001f62:	e04e      	b.n	8002002 <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 8001f64:	2208      	movs	r2, #8
 8001f66:	2121      	movs	r1, #33	; 0x21
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff fcf5 	bl	8001958 <write_register>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f083 0301 	eor.w	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <rfm95_init+0x1f2>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e041      	b.n	8002002 <rfm95_init+0x276>

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 8001f7e:	2234      	movs	r2, #52	; 0x34
 8001f80:	2139      	movs	r1, #57	; 0x39
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fce8 	bl	8001958 <write_register>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f083 0301 	eor.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <rfm95_init+0x20c>
 8001f94:	2300      	movs	r3, #0
 8001f96:	e034      	b.n	8002002 <rfm95_init+0x276>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	210e      	movs	r1, #14
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fcdb 	bl	8001958 <write_register>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f083 0301 	eor.w	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <rfm95_init+0x226>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e027      	b.n	8002002 <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	210f      	movs	r1, #15
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff fcce 	bl	8001958 <write_register>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f083 0301 	eor.w	r3, r3, #1
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <rfm95_init+0x240>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e01a      	b.n	8002002 <rfm95_init+0x276>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 8001fcc:	2240      	movs	r2, #64	; 0x40
 8001fce:	2123      	movs	r1, #35	; 0x23
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fcc1 	bl	8001958 <write_register>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <rfm95_init+0x25a>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e00d      	b.n	8002002 <rfm95_init+0x276>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	2101      	movs	r1, #1
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fcb4 	bl	8001958 <write_register>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f083 0301 	eor.w	r3, r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <rfm95_init+0x274>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e000      	b.n	8002002 <rfm95_init+0x276>

	return true;
 8002000:	2301      	movs	r3, #1
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	08007770 	.word	0x08007770
 8002010:	080079e0 	.word	0x080079e0
 8002014:	080076e8 	.word	0x080076e8
 8002018:	080077a4 	.word	0x080077a4
 800201c:	080077e0 	.word	0x080077e0
 8002020:	08007818 	.word	0x08007818
 8002024:	08007854 	.word	0x08007854
 8002028:	0800788c 	.word	0x0800788c
 800202c:	080078b0 	.word	0x080078b0
 8002030:	080078cc 	.word	0x080078cc
 8002034:	080078f4 	.word	0x080078f4

08002038 <process_mac_commands>:

static bool process_mac_commands(rfm95_handle_t *handle, const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t answer_buffer[51], uint8_t *answer_buffer_length,
                                 int8_t snr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	; 0x30
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t answer_index = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	while (index < frame_payload_length) {
 8002052:	bf00      	nop
 8002054:	e1d8      	b.n	8002408 <process_mac_commands+0x3d0>
		switch (frame_payload[index++])
 8002056:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4413      	add	r3, r2
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	3b01      	subs	r3, #1
 800206a:	2b0c      	cmp	r3, #12
 800206c:	f200 81cc 	bhi.w	8002408 <process_mac_commands+0x3d0>
 8002070:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <process_mac_commands+0x40>)
 8002072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002076:	bf00      	nop
 8002078:	080020ad 	.word	0x080020ad
 800207c:	080020c7 	.word	0x080020c7
 8002080:	080020e5 	.word	0x080020e5
 8002084:	08002103 	.word	0x08002103
 8002088:	0800211d 	.word	0x0800211d
 800208c:	080021cb 	.word	0x080021cb
 8002090:	08002239 	.word	0x08002239
 8002094:	0800236b 	.word	0x0800236b
 8002098:	080023cb 	.word	0x080023cb
 800209c:	080023d9 	.word	0x080023d9
 80020a0:	080023eb 	.word	0x080023eb
 80020a4:	080023f9 	.word	0x080023f9
 80020a8:	08002407 	.word	0x08002407
		{
			case 0x01: // ResetConf
			{
				if (index >= frame_payload_length) return false;
 80020ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d801      	bhi.n	80020ba <process_mac_commands+0x82>
 80020b6:	2300      	movs	r3, #0
 80020b8:	e1b1      	b.n	800241e <process_mac_commands+0x3e6>

				index += 1;
 80020ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020be:	3301      	adds	r3, #1
 80020c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80020c4:	e1a0      	b.n	8002408 <process_mac_commands+0x3d0>
			}
			case 0x02: // LinkCheckReq
			{
				if ((index + 1) >= frame_payload_length) return false;
 80020c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020ca:	3301      	adds	r3, #1
 80020cc:	461a      	mov	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d801      	bhi.n	80020d8 <process_mac_commands+0xa0>
 80020d4:	2300      	movs	r3, #0
 80020d6:	e1a2      	b.n	800241e <process_mac_commands+0x3e6>

				index += 2;
 80020d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020dc:	3302      	adds	r3, #2
 80020de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80020e2:	e191      	b.n	8002408 <process_mac_commands+0x3d0>
			}
			case 0x03: // LinkADRReq
			{
				if ((index + 3) >= frame_payload_length) return false;
 80020e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020e8:	3303      	adds	r3, #3
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d801      	bhi.n	80020f6 <process_mac_commands+0xbe>
 80020f2:	2300      	movs	r3, #0
 80020f4:	e193      	b.n	800241e <process_mac_commands+0x3e6>

				index += 4;
 80020f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020fa:	3304      	adds	r3, #4
 80020fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8002100:	e182      	b.n	8002408 <process_mac_commands+0x3d0>
			}
			case 0x04: // DutyCycleReq
			{
				if (index >= frame_payload_length) return false;
 8002102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	d801      	bhi.n	8002110 <process_mac_commands+0xd8>
 800210c:	2300      	movs	r3, #0
 800210e:	e186      	b.n	800241e <process_mac_commands+0x3e6>

				index += 1;
 8002110:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002114:	3301      	adds	r3, #1
 8002116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800211a:	e175      	b.n	8002408 <process_mac_commands+0x3d0>
			}
			case 0x05: // RXParamSetupReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 800211c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002120:	3304      	adds	r3, #4
 8002122:	461a      	mov	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4293      	cmp	r3, r2
 8002128:	d801      	bhi.n	800212e <process_mac_commands+0xf6>
 800212a:	2300      	movs	r3, #0
 800212c:	e177      	b.n	800241e <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 800212e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002132:	2b30      	cmp	r3, #48	; 0x30
 8002134:	d901      	bls.n	800213a <process_mac_commands+0x102>
 8002136:	2300      	movs	r3, #0
 8002138:	e171      	b.n	800241e <process_mac_commands+0x3e6>

				uint8_t dl_settings = frame_payload[index++];
 800213a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4413      	add	r3, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	77bb      	strb	r3, [r7, #30]
				uint8_t frequency_lsb = frame_payload[index++];
 800214e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4413      	add	r3, r2
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	777b      	strb	r3, [r7, #29]
				uint8_t frequency_msb = frame_payload[index++];
 8002162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800216c:	461a      	mov	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	4413      	add	r3, r2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	773b      	strb	r3, [r7, #28]
				uint8_t frequency_hsb = frame_payload[index++];
 8002176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002180:	461a      	mov	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4413      	add	r3, r2
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	76fb      	strb	r3, [r7, #27]
				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 800218a:	7f7a      	ldrb	r2, [r7, #29]
 800218c:	7f3b      	ldrb	r3, [r7, #28]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	431a      	orrs	r2, r3
 8002192:	7efb      	ldrb	r3, [r7, #27]
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	4313      	orrs	r3, r2
 8002198:	2264      	movs	r2, #100	; 0x64
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	617b      	str	r3, [r7, #20]

				answer_buffer[answer_index++] = 0x05;
 80021a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80021aa:	461a      	mov	r2, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	2205      	movs	r2, #5
 80021b2:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0b0000111;
 80021b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80021be:	461a      	mov	r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	2207      	movs	r2, #7
 80021c6:	701a      	strb	r2, [r3, #0]
				break;
 80021c8:	e11e      	b.n	8002408 <process_mac_commands+0x3d0>
			}
			case 0x06: // DevStatusReq
			{
				if ((answer_index + 3) >= 51) return false;
 80021ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021ce:	2b2f      	cmp	r3, #47	; 0x2f
 80021d0:	d901      	bls.n	80021d6 <process_mac_commands+0x19e>
 80021d2:	2300      	movs	r3, #0
 80021d4:	e123      	b.n	800241e <process_mac_commands+0x3e6>

				uint8_t margin = (uint8_t)(snr & 0x1f);
 80021d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	f887 3020 	strb.w	r3, [r7, #32]
				uint8_t battery_level = handle->get_battery_level == NULL ? 0xff : handle->get_battery_level();
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d004      	beq.n	80021f4 <process_mac_commands+0x1bc>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ee:	4798      	blx	r3
 80021f0:	4603      	mov	r3, r0
 80021f2:	e000      	b.n	80021f6 <process_mac_commands+0x1be>
 80021f4:	23ff      	movs	r3, #255	; 0xff
 80021f6:	77fb      	strb	r3, [r7, #31]

				answer_buffer[answer_index++] = 0x06;
 80021f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002202:	461a      	mov	r2, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4413      	add	r3, r2
 8002208:	2206      	movs	r2, #6
 800220a:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = battery_level;
 800220c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002216:	461a      	mov	r2, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4413      	add	r3, r2
 800221c:	7ffa      	ldrb	r2, [r7, #31]
 800221e:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = margin;
 8002220:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800222a:	461a      	mov	r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4413      	add	r3, r2
 8002230:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002234:	701a      	strb	r2, [r3, #0]
				break;
 8002236:	e0e7      	b.n	8002408 <process_mac_commands+0x3d0>
			}
			case 0x07: // NewChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8002238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800223c:	3304      	adds	r3, #4
 800223e:	461a      	mov	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4293      	cmp	r3, r2
 8002244:	d801      	bhi.n	800224a <process_mac_commands+0x212>
 8002246:	2300      	movs	r3, #0
 8002248:	e0e9      	b.n	800241e <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 800224a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800224e:	2b30      	cmp	r3, #48	; 0x30
 8002250:	d901      	bls.n	8002256 <process_mac_commands+0x21e>
 8002252:	2300      	movs	r3, #0
 8002254:	e0e3      	b.n	800241e <process_mac_commands+0x3e6>

				uint8_t channel_index = frame_payload[index++];
 8002256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002260:	461a      	mov	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	4413      	add	r3, r2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				uint8_t frequency_lsb = frame_payload[index++];
 800226c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002276:	461a      	mov	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4413      	add	r3, r2
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				uint8_t frequency_msb = frame_payload[index++];
 8002282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	4413      	add	r3, r2
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				uint8_t frequency_hsb = frame_payload[index++];
 8002298:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80022a2:	461a      	mov	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4413      	add	r3, r2
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				uint8_t min_max_dr = frame_payload[index++];
 80022ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80022b8:	461a      	mov	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4413      	add	r3, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 80022c4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80022c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	431a      	orrs	r2, r3
 80022d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	4313      	orrs	r3, r2
 80022d8:	2264      	movs	r2, #100	; 0x64
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
				uint8_t min_dr = min_max_dr & 0x0f;
 80022e0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				uint8_t max_dr = (min_max_dr >> 4) & 0x0f;
 80022ec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

				if (channel_index >= 3) {
 80022f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d906      	bls.n	800230c <process_mac_commands+0x2d4>
					config_set_channel(handle, channel_index, frequency);
 80022fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002304:	4619      	mov	r1, r3
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff fb58 	bl	80019bc <config_set_channel>
				}

				bool dr_supports_125kHz_SF7 = min_dr <= 5 || max_dr >= 5;
 800230c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002310:	2b05      	cmp	r3, #5
 8002312:	d903      	bls.n	800231c <process_mac_commands+0x2e4>
 8002314:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002318:	2b04      	cmp	r3, #4
 800231a:	d901      	bls.n	8002320 <process_mac_commands+0x2e8>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <process_mac_commands+0x2ea>
 8002320:	2300      	movs	r3, #0
 8002322:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002326:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

				answer_buffer[answer_index++] = 0x07;
 8002332:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800233c:	461a      	mov	r2, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	4413      	add	r3, r2
 8002342:	2207      	movs	r2, #7
 8002344:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0x01 | (dr_supports_125kHz_SF7 << 1);
 8002346:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	b25b      	sxtb	r3, r3
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	b25a      	sxtb	r2, r3
 8002354:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002358:	1c59      	adds	r1, r3, #1
 800235a:	f887 102e 	strb.w	r1, [r7, #46]	; 0x2e
 800235e:	4619      	mov	r1, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	440b      	add	r3, r1
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]
				break;
 8002368:	e04e      	b.n	8002408 <process_mac_commands+0x3d0>
			}
			case 0x08: // RXTimingSetupReq
			{
				if (index >= frame_payload_length) return false;
 800236a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	d801      	bhi.n	8002378 <process_mac_commands+0x340>
 8002374:	2300      	movs	r3, #0
 8002376:	e052      	b.n	800241e <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 8002378:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800237c:	2b30      	cmp	r3, #48	; 0x30
 800237e:	d901      	bls.n	8002384 <process_mac_commands+0x34c>
 8002380:	2300      	movs	r3, #0
 8002382:	e04c      	b.n	800241e <process_mac_commands+0x3e6>

				handle->config.rx1_delay = frame_payload[index++] & 0xf;
 8002384:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4413      	add	r3, r2
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	b2da      	uxtb	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				if (handle->config.rx1_delay == 0) {
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d103      	bne.n	80023b4 <process_mac_commands+0x37c>
					handle->config.rx1_delay = 1;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				}

				answer_buffer[answer_index++] = 0x08;
 80023b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80023be:	461a      	mov	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	2208      	movs	r2, #8
 80023c6:	701a      	strb	r2, [r3, #0]
				break;
 80023c8:	e01e      	b.n	8002408 <process_mac_commands+0x3d0>
			}
			case 0x09: // TxParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 80023ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d819      	bhi.n	8002408 <process_mac_commands+0x3d0>
 80023d4:	2300      	movs	r3, #0
 80023d6:	e022      	b.n	800241e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0a: // DlChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 80023d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023dc:	3304      	adds	r3, #4
 80023de:	461a      	mov	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d810      	bhi.n	8002408 <process_mac_commands+0x3d0>
 80023e6:	2300      	movs	r3, #0
 80023e8:	e019      	b.n	800241e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0b: // RekeyConf
			{
				if (index >= frame_payload_length) return false;
 80023ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d809      	bhi.n	8002408 <process_mac_commands+0x3d0>
 80023f4:	2300      	movs	r3, #0
 80023f6:	e012      	b.n	800241e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0c: // ADRParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 80023f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d802      	bhi.n	8002408 <process_mac_commands+0x3d0>
 8002402:	2300      	movs	r3, #0
 8002404:	e00b      	b.n	800241e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0d: // DeviceTimeReq
			{
				break;
 8002406:	bf00      	nop
	while (index < frame_payload_length) {
 8002408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	f63f ae21 	bhi.w	8002056 <process_mac_commands+0x1e>
			}
		}
	}

	*answer_buffer_length = answer_index;
 8002414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002416:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800241a:	701a      	strb	r2, [r3, #0]
	return true;
 800241c:	2301      	movs	r3, #1
}
 800241e:	4618      	mov	r0, r3
 8002420:	3730      	adds	r7, #48	; 0x30
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop

08002428 <receive_at_scheduled_time>:

static bool receive_at_scheduled_time(rfm95_handle_t *handle, uint32_t scheduled_time)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
	// Sleep until 1ms before the scheduled time.
	handle->precision_sleep_until(scheduled_time - handle->precision_tick_frequency / 1000);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800243a:	492b      	ldr	r1, [pc, #172]	; (80024e8 <receive_at_scheduled_time+0xc0>)
 800243c:	fba1 1202 	umull	r1, r2, r1, r2
 8002440:	0992      	lsrs	r2, r2, #6
 8002442:	6839      	ldr	r1, [r7, #0]
 8002444:	1a8a      	subs	r2, r1, r2
 8002446:	4610      	mov	r0, r2
 8002448:	4798      	blx	r3

	// Clear flags and previous interrupt time, configure mapping for RX done.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 800244a:	2200      	movs	r2, #0
 800244c:	2140      	movs	r1, #64	; 0x40
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff fa82 	bl	8001958 <write_register>
 8002454:	4603      	mov	r3, r0
 8002456:	f083 0301 	eor.w	r3, r3, #1
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <receive_at_scheduled_time+0x3c>
 8002460:	2300      	movs	r3, #0
 8002462:	e03c      	b.n	80024de <receive_at_scheduled_time+0xb6>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8002464:	22ff      	movs	r2, #255	; 0xff
 8002466:	2112      	movs	r1, #18
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff fa75 	bl	8001958 <write_register>
 800246e:	4603      	mov	r3, r0
 8002470:	f083 0301 	eor.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <receive_at_scheduled_time+0x56>
 800247a:	2300      	movs	r3, #0
 800247c:	e02f      	b.n	80024de <receive_at_scheduled_time+0xb6>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8002496:	2281      	movs	r2, #129	; 0x81
 8002498:	2101      	movs	r1, #1
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff fa5c 	bl	8001958 <write_register>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f083 0301 	eor.w	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <receive_at_scheduled_time+0x88>
 80024ac:	2300      	movs	r3, #0
 80024ae:	e016      	b.n	80024de <receive_at_scheduled_time+0xb6>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 80024b0:	220a      	movs	r2, #10
 80024b2:	2102      	movs	r1, #2
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff fb87 	bl	8001bc8 <wait_for_irq>

	// Now sleep until the real scheduled time.
	handle->precision_sleep_until(scheduled_time);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024be:	6838      	ldr	r0, [r7, #0]
 80024c0:	4798      	blx	r3

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 80024c2:	2286      	movs	r2, #134	; 0x86
 80024c4:	2101      	movs	r1, #1
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff fa46 	bl	8001958 <write_register>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f083 0301 	eor.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <receive_at_scheduled_time+0xb4>
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <receive_at_scheduled_time+0xb6>

	return true;
 80024dc:	2301      	movs	r3, #1
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	10624dd3 	.word	0x10624dd3

080024ec <calculate_rx_timings>:

static void calculate_rx_timings(rfm95_handle_t *handle, uint32_t bw, uint8_t sf, uint32_t tx_ticks,
                                 uint32_t *rx_target, uint32_t *rx_window_symbols)
{
 80024ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f0:	b08a      	sub	sp, #40	; 0x28
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	4613      	mov	r3, r2
 80024fc:	71fb      	strb	r3, [r7, #7]
	volatile int32_t symbol_rate_ns = (int32_t)(((2 << (sf - 1)) * 1000000) / bw);
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	3b01      	subs	r3, #1
 8002502:	2202      	movs	r2, #2
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <calculate_rx_timings+0xc4>)
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	461a      	mov	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	627b      	str	r3, [r7, #36]	; 0x24

	volatile int32_t rx_timing_error_ns = (int32_t)(handle->precision_tick_drift_ns_per_s * handle->config.rx1_delay);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	623b      	str	r3, [r7, #32]
	volatile int32_t rx_window_ns = 2 * symbol_rate_ns + 2 * rx_timing_error_ns;
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	4413      	add	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	61fb      	str	r3, [r7, #28]
	volatile int32_t rx_offset_ns = 4 * symbol_rate_ns - (rx_timing_error_ns / 2);
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	009a      	lsls	r2, r3, #2
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	0fd9      	lsrs	r1, r3, #31
 800253a:	440b      	add	r3, r1
 800253c:	105b      	asrs	r3, r3, #1
 800253e:	425b      	negs	r3, r3
 8002540:	4413      	add	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	17da      	asrs	r2, r3, #31
 8002548:	469a      	mov	sl, r3
 800254a:	4693      	mov	fp, r2
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	2200      	movs	r2, #0
 8002552:	4698      	mov	r8, r3
 8002554:	4691      	mov	r9, r2
 8002556:	fb08 f20b 	mul.w	r2, r8, fp
 800255a:	fb0a f309 	mul.w	r3, sl, r9
 800255e:	4413      	add	r3, r2
 8002560:	fbaa 4508 	umull	r4, r5, sl, r8
 8002564:	442b      	add	r3, r5
 8002566:	461d      	mov	r5, r3
 8002568:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <calculate_rx_timings+0xc4>)
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	4620      	mov	r0, r4
 8002570:	4629      	mov	r1, r5
 8002572:	f7fd fe85 	bl	8000280 <__aeabi_ldivmod>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4613      	mov	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8002588:	fb03 f202 	mul.w	r2, r3, r2
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	441a      	add	r2, r3
 8002594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002596:	601a      	str	r2, [r3, #0]
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	fb92 f3f3 	sdiv	r3, r2, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a4:	601a      	str	r2, [r3, #0]
}
 80025a6:	bf00      	nop
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b0:	000f4240 	.word	0x000f4240

080025b4 <receive_package>:

static bool receive_package(rfm95_handle_t *handle, uint32_t tx_ticks, uint8_t *payload_buf, size_t *payload_len,
                            int8_t *snr)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	; 0x30
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);
 80025c8:	f107 0320 	add.w	r3, r7, #32
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2207      	movs	r2, #7
 80025d8:	49ab      	ldr	r1, [pc, #684]	; (8002888 <receive_package+0x2d4>)
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff ff86 	bl	80024ec <calculate_rx_timings>

	assert(rx1_window_symbols <= 0x3ff);
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e6:	d306      	bcc.n	80025f6 <receive_package+0x42>
 80025e8:	4ba8      	ldr	r3, [pc, #672]	; (800288c <receive_package+0x2d8>)
 80025ea:	4aa9      	ldr	r2, [pc, #676]	; (8002890 <receive_package+0x2dc>)
 80025ec:	f240 11c7 	movw	r1, #455	; 0x1c7
 80025f0:	48a8      	ldr	r0, [pc, #672]	; (8002894 <receive_package+0x2e0>)
 80025f2:	f003 fead 	bl	8006350 <__assert_func>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 80025f6:	2272      	movs	r2, #114	; 0x72
 80025f8:	211d      	movs	r1, #29
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff f9ac 	bl	8001958 <write_register>
 8002600:	4603      	mov	r3, r0
 8002602:	f083 0301 	eor.w	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <receive_package+0x5c>
 800260c:	2300      	movs	r3, #0
 800260e:	e136      	b.n	800287e <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx1_window_symbols >> 8) & 0x3))) return false;
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	211e      	movs	r1, #30
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f7ff f996 	bl	8001958 <write_register>
 800262c:	4603      	mov	r3, r0
 800262e:	f083 0301 	eor.w	r3, r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <receive_package+0x88>
 8002638:	2300      	movs	r3, #0
 800263a:	e120      	b.n	800287e <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 800263c:	2204      	movs	r2, #4
 800263e:	2126      	movs	r1, #38	; 0x26
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff f989 	bl	8001958 <write_register>
 8002646:	4603      	mov	r3, r0
 8002648:	f083 0301 	eor.w	r3, r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <receive_package+0xa2>
 8002652:	2300      	movs	r3, #0
 8002654:	e113      	b.n	800287e <receive_package+0x2ca>

	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	211f      	movs	r1, #31
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7ff f97a 	bl	8001958 <write_register>
 8002664:	4603      	mov	r3, r0
 8002666:	f083 0301 	eor.w	r3, r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <receive_package+0xc0>
 8002670:	2300      	movs	r3, #0
 8002672:	e104      	b.n	800287e <receive_package+0x2ca>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_RX)) return false;
 8002674:	2267      	movs	r2, #103	; 0x67
 8002676:	2133      	movs	r1, #51	; 0x33
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff f96d 	bl	8001958 <write_register>
 800267e:	4603      	mov	r3, r0
 8002680:	f083 0301 	eor.w	r3, r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <receive_package+0xda>
 800268a:	2300      	movs	r3, #0
 800268c:	e0f7      	b.n	800287e <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_RX)) return false;
 800268e:	2219      	movs	r2, #25
 8002690:	213b      	movs	r1, #59	; 0x3b
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f7ff f960 	bl	8001958 <write_register>
 8002698:	4603      	mov	r3, r0
 800269a:	f083 0301 	eor.w	r3, r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <receive_package+0xf4>
 80026a4:	2300      	movs	r3, #0
 80026a6:	e0ea      	b.n	800287e <receive_package+0x2ca>

	receive_at_scheduled_time(handle, rx1_target);
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	4619      	mov	r1, r3
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7ff febb 	bl	8002428 <receive_at_scheduled_time>

	// If there was nothing received during RX1, try RX2.
	if (!wait_for_rx_irqs(handle)) {
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff fab8 	bl	8001c28 <wait_for_rx_irqs>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f083 0301 	eor.w	r3, r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d07a      	beq.n	80027ba <receive_package+0x206>

		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	2101      	movs	r1, #1
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f7ff f945 	bl	8001958 <write_register>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f083 0301 	eor.w	r3, r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <receive_package+0x12a>
 80026da:	2300      	movs	r3, #0
 80026dc:	e0cf      	b.n	800287e <receive_package+0x2ca>

		if (handle->receive_mode == RFM95_RECEIVE_MODE_RX12) {
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d166      	bne.n	80027b6 <receive_package+0x202>

			uint32_t rx2_target, rx2_window_symbols;
			calculate_rx_timings(handle, 125000, 12, tx_ticks, &rx2_target, &rx2_window_symbols);
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	f107 0318 	add.w	r3, r7, #24
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	220c      	movs	r2, #12
 80026f8:	4963      	ldr	r1, [pc, #396]	; (8002888 <receive_package+0x2d4>)
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff fef6 	bl	80024ec <calculate_rx_timings>

			// Configure 869.525 MHz
			if (!configure_frequency(handle, 869525000)) return false;
 8002700:	4965      	ldr	r1, [pc, #404]	; (8002898 <receive_package+0x2e4>)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f7ff f9da 	bl	8001abc <configure_frequency>
 8002708:	4603      	mov	r3, r0
 800270a:	f083 0301 	eor.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <receive_package+0x164>
 8002714:	2300      	movs	r3, #0
 8002716:	e0b2      	b.n	800287e <receive_package+0x2ca>

			// Configure modem SF12
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0xc2)) return false;
 8002718:	22c2      	movs	r2, #194	; 0xc2
 800271a:	211d      	movs	r1, #29
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7ff f91b 	bl	8001958 <write_register>
 8002722:	4603      	mov	r3, r0
 8002724:	f083 0301 	eor.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <receive_package+0x17e>
 800272e:	2300      	movs	r3, #0
 8002730:	e0a5      	b.n	800287e <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx2_window_symbols >> 8) & 0x3))) return false;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	211e      	movs	r1, #30
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff f905 	bl	8001958 <write_register>
 800274e:	4603      	mov	r3, r0
 8002750:	f083 0301 	eor.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <receive_package+0x1aa>
 800275a:	2300      	movs	r3, #0
 800275c:	e08f      	b.n	800287e <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 800275e:	2204      	movs	r2, #4
 8002760:	2126      	movs	r1, #38	; 0x26
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f7ff f8f8 	bl	8001958 <write_register>
 8002768:	4603      	mov	r3, r0
 800276a:	f083 0301 	eor.w	r3, r3, #1
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <receive_package+0x1c4>
 8002774:	2300      	movs	r3, #0
 8002776:	e082      	b.n	800287e <receive_package+0x2ca>

			// Set maximum symbol timeout.
			if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx2_window_symbols)) return false;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	211f      	movs	r1, #31
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f7ff f8e9 	bl	8001958 <write_register>
 8002786:	4603      	mov	r3, r0
 8002788:	f083 0301 	eor.w	r3, r3, #1
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <receive_package+0x1e2>
 8002792:	2300      	movs	r3, #0
 8002794:	e073      	b.n	800287e <receive_package+0x2ca>

			receive_at_scheduled_time(handle, rx2_target);
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4619      	mov	r1, r3
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff fe44 	bl	8002428 <receive_at_scheduled_time>

			if (!wait_for_rx_irqs(handle)) {
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f7ff fa41 	bl	8001c28 <wait_for_rx_irqs>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f083 0301 	eor.w	r3, r3, #1
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <receive_package+0x202>
				// No payload during in RX1 and RX2
				return true;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e063      	b.n	800287e <receive_package+0x2ca>
			}
		}

		return true;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e061      	b.n	800287e <receive_package+0x2ca>
	}

	uint8_t irq_flags;
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 80027ba:	f107 021f 	add.w	r2, r7, #31
 80027be:	2301      	movs	r3, #1
 80027c0:	2112      	movs	r1, #18
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f7ff f88c 	bl	80018e0 <read_register>

	// Check if there was a CRC error.
	if (irq_flags & 0x20) {
 80027c8:	7ffb      	ldrb	r3, [r7, #31]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <receive_package+0x222>
		return true;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e053      	b.n	800287e <receive_package+0x2ca>
	}

	int8_t packet_snr;
	if (!read_register(handle, RFM95_REGISTER_PACKET_SNR, (uint8_t *)&packet_snr, 1)) return false;
 80027d6:	f107 021e 	add.w	r2, r7, #30
 80027da:	2301      	movs	r3, #1
 80027dc:	2119      	movs	r1, #25
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff f87e 	bl	80018e0 <read_register>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f083 0301 	eor.w	r3, r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <receive_package+0x240>
 80027f0:	2300      	movs	r3, #0
 80027f2:	e044      	b.n	800287e <receive_package+0x2ca>
	*snr = (int8_t)(packet_snr / 4);
 80027f4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	da00      	bge.n	80027fe <receive_package+0x24a>
 80027fc:	3303      	adds	r3, #3
 80027fe:	109b      	asrs	r3, r3, #2
 8002800:	b25a      	sxtb	r2, r3
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	701a      	strb	r2, [r3, #0]

	// Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 8002806:	f107 021d 	add.w	r2, r7, #29
 800280a:	2301      	movs	r3, #1
 800280c:	2113      	movs	r1, #19
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f7ff f866 	bl	80018e0 <read_register>
 8002814:	4603      	mov	r3, r0
 8002816:	f083 0301 	eor.w	r3, r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <receive_package+0x270>
 8002820:	2300      	movs	r3, #0
 8002822:	e02c      	b.n	800287e <receive_package+0x2ca>

	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 8002824:	2200      	movs	r2, #0
 8002826:	210d      	movs	r1, #13
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f7ff f895 	bl	8001958 <write_register>
 800282e:	4603      	mov	r3, r0
 8002830:	f083 0301 	eor.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <receive_package+0x28a>
 800283a:	2300      	movs	r3, #0
 800283c:	e01f      	b.n	800287e <receive_package+0x2ca>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, payload_len_internal)) return false;
 800283e:	7f7b      	ldrb	r3, [r7, #29]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	2100      	movs	r1, #0
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7ff f84b 	bl	80018e0 <read_register>
 800284a:	4603      	mov	r3, r0
 800284c:	f083 0301 	eor.w	r3, r3, #1
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <receive_package+0x2a6>
 8002856:	2300      	movs	r3, #0
 8002858:	e011      	b.n	800287e <receive_package+0x2ca>

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	2101      	movs	r1, #1
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff f87a 	bl	8001958 <write_register>
 8002864:	4603      	mov	r3, r0
 8002866:	f083 0301 	eor.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <receive_package+0x2c0>
 8002870:	2300      	movs	r3, #0
 8002872:	e004      	b.n	800287e <receive_package+0x2ca>

	// Successful payload receive, set payload length to tell caller.
	*payload_len = payload_len_internal;
 8002874:	7f7b      	ldrb	r3, [r7, #29]
 8002876:	461a      	mov	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	601a      	str	r2, [r3, #0]
	return true;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	3728      	adds	r7, #40	; 0x28
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	0001e848 	.word	0x0001e848
 800288c:	08007920 	.word	0x08007920
 8002890:	080079ec 	.word	0x080079ec
 8002894:	080076e8 	.word	0x080076e8
 8002898:	33d3e608 	.word	0x33d3e608

0800289c <send_package>:

static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel,
                         uint32_t *tx_ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	70fb      	strb	r3, [r7, #3]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel)) return false;
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	4619      	mov	r1, r3
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f7ff f960 	bl	8001b74 <configure_channel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f083 0301 	eor.w	r3, r3, #1
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <send_package+0x28>
 80028c0:	2300      	movs	r3, #0
 80028c2:	e0d8      	b.n	8002a76 <send_package+0x1da>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 80028c4:	2272      	movs	r2, #114	; 0x72
 80028c6:	211d      	movs	r1, #29
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f7ff f845 	bl	8001958 <write_register>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f083 0301 	eor.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <send_package+0x42>
 80028da:	2300      	movs	r3, #0
 80028dc:	e0cb      	b.n	8002a76 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false;
 80028de:	2274      	movs	r2, #116	; 0x74
 80028e0:	211e      	movs	r1, #30
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f7ff f838 	bl	8001958 <write_register>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f083 0301 	eor.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <send_package+0x5c>
 80028f4:	2300      	movs	r3, #0
 80028f6:	e0be      	b.n	8002a76 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 80028f8:	2204      	movs	r2, #4
 80028fa:	2126      	movs	r1, #38	; 0x26
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff f82b 	bl	8001958 <write_register>
 8002902:	4603      	mov	r3, r0
 8002904:	f083 0301 	eor.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <send_package+0x76>
 800290e:	2300      	movs	r3, #0
 8002910:	e0b1      	b.n	8002a76 <send_package+0x1da>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8002912:	2227      	movs	r2, #39	; 0x27
 8002914:	2133      	movs	r1, #51	; 0x33
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff f81e 	bl	8001958 <write_register>
 800291c:	4603      	mov	r3, r0
 800291e:	f083 0301 	eor.w	r3, r3, #1
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <send_package+0x90>
 8002928:	2300      	movs	r3, #0
 800292a:	e0a4      	b.n	8002a76 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 800292c:	221d      	movs	r2, #29
 800292e:	213b      	movs	r1, #59	; 0x3b
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff f811 	bl	8001958 <write_register>
 8002936:	4603      	mov	r3, r0
 8002938:	f083 0301 	eor.w	r3, r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <send_package+0xaa>
 8002942:	2300      	movs	r3, #0
 8002944:	e097      	b.n	8002a76 <send_package+0x1da>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len)) return false;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	2122      	movs	r1, #34	; 0x22
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff f802 	bl	8001958 <write_register>
 8002954:	4603      	mov	r3, r0
 8002956:	f083 0301 	eor.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <send_package+0xc8>
 8002960:	2300      	movs	r3, #0
 8002962:	e088      	b.n	8002a76 <send_package+0x1da>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8002964:	2240      	movs	r2, #64	; 0x40
 8002966:	2140      	movs	r1, #64	; 0x40
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7fe fff5 	bl	8001958 <write_register>
 800296e:	4603      	mov	r3, r0
 8002970:	f083 0301 	eor.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <send_package+0xe2>
 800297a:	2300      	movs	r3, #0
 800297c:	e07b      	b.n	8002a76 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 800297e:	22ff      	movs	r2, #255	; 0xff
 8002980:	2112      	movs	r1, #18
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f7fe ffe8 	bl	8001958 <write_register>
 8002988:	4603      	mov	r3, r0
 800298a:	f083 0301 	eor.w	r3, r3, #1
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <send_package+0xfc>
 8002994:	2300      	movs	r3, #0
 8002996:	e06e      	b.n	8002a76 <send_package+0x1da>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 80029a8:	2281      	movs	r2, #129	; 0x81
 80029aa:	2101      	movs	r1, #1
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7fe ffd3 	bl	8001958 <write_register>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f083 0301 	eor.w	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <send_package+0x126>
 80029be:	2300      	movs	r3, #0
 80029c0:	e059      	b.n	8002a76 <send_package+0x1da>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 80029c2:	220a      	movs	r2, #10
 80029c4:	2102      	movs	r1, #2
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff f8fe 	bl	8001bc8 <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	210d      	movs	r1, #13
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7fe ffc1 	bl	8001958 <write_register>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f083 0301 	eor.w	r3, r3, #1
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <send_package+0x14a>
 80029e2:	2300      	movs	r3, #0
 80029e4:	e047      	b.n	8002a76 <send_package+0x1da>

	// Write payload to FIFO.
	for (size_t i = 0; i < payload_len; i++) {
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	e00b      	b.n	8002a04 <send_package+0x168>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	4413      	add	r3, r2
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	2100      	movs	r1, #0
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7fe ffad 	bl	8001958 <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3301      	adds	r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d3ef      	bcc.n	80029ec <send_package+0x150>
	}

	// Set modem to tx mode.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 8002a0c:	2283      	movs	r2, #131	; 0x83
 8002a0e:	2101      	movs	r1, #1
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7fe ffa1 	bl	8001958 <write_register>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f083 0301 	eor.w	r3, r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <send_package+0x18a>
 8002a22:	2300      	movs	r3, #0
 8002a24:	e027      	b.n	8002a76 <send_package+0x1da>

	// Wait for the transfer complete interrupt.
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 8002a26:	2264      	movs	r2, #100	; 0x64
 8002a28:	2100      	movs	r1, #0
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff f8cc 	bl	8001bc8 <wait_for_irq>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f083 0301 	eor.w	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <send_package+0x1a4>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e01a      	b.n	8002a76 <send_package+0x1da>

	// Set real tx time in ticks.
	*tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	601a      	str	r2, [r3, #0]

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f7fe ff82 	bl	8001958 <write_register>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f083 0301 	eor.w	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <send_package+0x1c8>
 8002a60:	2300      	movs	r3, #0
 8002a62:	e008      	b.n	8002a76 <send_package+0x1da>

	// Increment tx frame counter.
	handle->config.tx_frame_count++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	return true;
 8002a74:	2301      	movs	r3, #1
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <encode_phy_payload>:

static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t port)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b08d      	sub	sp, #52	; 0x34
 8002a84:	af04      	add	r7, sp, #16
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	330d      	adds	r3, #13
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d906      	bls.n	8002aa8 <encode_phy_payload+0x28>
 8002a9a:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <encode_phy_payload+0x160>)
 8002a9c:	4a51      	ldr	r2, [pc, #324]	; (8002be4 <encode_phy_payload+0x164>)
 8002a9e:	f240 2152 	movw	r1, #594	; 0x252
 8002aa2:	4851      	ldr	r0, [pc, #324]	; (8002be8 <encode_phy_payload+0x168>)
 8002aa4:	f003 fc54 	bl	8006350 <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2240      	movs	r2, #64	; 0x40
 8002aac:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	7d52      	ldrb	r2, [r2, #21]
 8002ab6:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	3302      	adds	r3, #2
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	7d12      	ldrb	r2, [r2, #20]
 8002ac0:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	3303      	adds	r3, #3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	7cd2      	ldrb	r2, [r2, #19]
 8002aca:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	7c92      	ldrb	r2, [r2, #18]
 8002ad4:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3305      	adds	r3, #5
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	3306      	adds	r3, #6
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	3307      	adds	r3, #7
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3308      	adds	r3, #8
 8002b02:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002b06:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	3309      	adds	r3, #9
 8002b0c:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	4413      	add	r3, r2
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fdfa 	bl	8006712 <memcpy>
	if (port == 0) {
 8002b1e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d113      	bne.n	8002b4e <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	18d0      	adds	r0, r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	b2d9      	uxtb	r1, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002b36:	461c      	mov	r4, r3
		                0, handle->network_session_key, handle->device_address);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3316      	adds	r3, #22
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002b40:	9201      	str	r2, [sp, #4]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2300      	movs	r3, #0
 8002b46:	4622      	mov	r2, r4
 8002b48:	f7fe fbe9 	bl	800131e <Encrypt_Payload>
 8002b4c:	e012      	b.n	8002b74 <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	18d0      	adds	r0, r2, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b2d9      	uxtb	r1, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002b5e:	461c      	mov	r4, r3
		                0, handle->application_session_key, handle->device_address);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3326      	adds	r3, #38	; 0x26
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002b68:	9201      	str	r2, [sp, #4]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	4622      	mov	r2, r4
 8002b70:	f7fe fbd5 	bl	800131e <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	4413      	add	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	b2d8      	uxtb	r0, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002b86:	461c      	mov	r4, r3
	              handle->network_session_key, handle->device_address);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3316      	adds	r3, #22
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 8002b90:	f107 0114 	add.w	r1, r7, #20
 8002b94:	9202      	str	r2, [sp, #8]
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	4623      	mov	r3, r4
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	68b8      	ldr	r0, [r7, #8]
 8002ba2:	f7fe fc71 	bl	8001488 <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	77fb      	strb	r3, [r7, #31]
 8002baa:	e00d      	b.n	8002bc8 <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 8002bac:	7ffa      	ldrb	r2, [r7, #31]
 8002bae:	7ff9      	ldrb	r1, [r7, #31]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	440b      	add	r3, r1
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3220      	adds	r2, #32
 8002bba:	443a      	add	r2, r7
 8002bbc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8002bc0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8002bc2:	7ffb      	ldrb	r3, [r7, #31]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	7ffb      	ldrb	r3, [r7, #31]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d9ee      	bls.n	8002bac <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	61bb      	str	r3, [r7, #24]

	return payload_len;
 8002bd4:	69bb      	ldr	r3, [r7, #24]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}
 8002bde:	bf00      	nop
 8002be0:	0800793c 	.word	0x0800793c
 8002be4:	080079fc 	.word	0x080079fc
 8002be8:	080076e8 	.word	0x080076e8

08002bec <decode_phy_payload>:

static bool decode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], uint8_t payload_length,
                               uint8_t **decoded_frame_payload_ptr, uint8_t *decoded_frame_payload_length, uint8_t *frame_port)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b08d      	sub	sp, #52	; 0x34
 8002bf0:	af04      	add	r7, sp, #16
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	71fb      	strb	r3, [r7, #7]
	// Only unconfirmed down-links are supported for now.
	if (payload_buf[0] != 0x60) {
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b60      	cmp	r3, #96	; 0x60
 8002c02:	d001      	beq.n	8002c08 <decode_phy_payload+0x1c>
		return false;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e0aa      	b.n	8002d5e <decode_phy_payload+0x172>
	}

	// Does the device address match?
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	7d5b      	ldrb	r3, [r3, #21]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d114      	bne.n	8002c40 <decode_phy_payload+0x54>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	3302      	adds	r3, #2
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	7d1b      	ldrb	r3, [r3, #20]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d10d      	bne.n	8002c40 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	3303      	adds	r3, #3
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	7cdb      	ldrb	r3, [r3, #19]
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d106      	bne.n	8002c40 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	3304      	adds	r3, #4
 8002c36:	781a      	ldrb	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	7c9b      	ldrb	r3, [r3, #18]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <decode_phy_payload+0x58>
		return false;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e08c      	b.n	8002d5e <decode_phy_payload+0x172>
	}

	uint8_t frame_control = payload_buf[5];
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	795b      	ldrb	r3, [r3, #5]
 8002c48:	77fb      	strb	r3, [r7, #31]
	uint8_t frame_opts_length = frame_control & 0x0f;
 8002c4a:	7ffb      	ldrb	r3, [r7, #31]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	77bb      	strb	r3, [r7, #30]
	uint16_t rx_frame_count = (payload_buf[7] << 8) | payload_buf[6];
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3307      	adds	r3, #7
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	b21a      	sxth	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	3306      	adds	r3, #6
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b21b      	sxth	r3, r3
 8002c64:	4313      	orrs	r3, r2
 8002c66:	b21b      	sxth	r3, r3
 8002c68:	83bb      	strh	r3, [r7, #28]

	// Check if rx frame count is valid and if so, update accordingly.
	if (rx_frame_count < handle->config.rx_frame_count) {
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002c70:	8bba      	ldrh	r2, [r7, #28]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d201      	bcs.n	8002c7a <decode_phy_payload+0x8e>
		return false;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e071      	b.n	8002d5e <decode_phy_payload+0x172>
	}
	handle->config.rx_frame_count = rx_frame_count;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8bba      	ldrh	r2, [r7, #28]
 8002c7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	uint8_t check_mic[4];
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	3b04      	subs	r3, #4
 8002c86:	b2d8      	uxtb	r0, r3
 8002c88:	8bbc      	ldrh	r4, [r7, #28]
	              handle->network_session_key, handle->device_address);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3316      	adds	r3, #22
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 8002c92:	f107 0114 	add.w	r1, r7, #20
 8002c96:	9202      	str	r2, [sp, #8]
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	4623      	mov	r3, r4
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68b8      	ldr	r0, [r7, #8]
 8002ca4:	f7fe fbf0 	bl	8001488 <Calculate_MIC>
	if (memcmp(check_mic, &payload_buf[payload_length - 4], 4) != 0) {
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	3b04      	subs	r3, #4
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	18d1      	adds	r1, r2, r3
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 fc9f 	bl	80065fa <memcmp>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <decode_phy_payload+0xda>
		return false;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e04b      	b.n	8002d5e <decode_phy_payload+0x172>
	}

	if (payload_length - 12 - frame_opts_length == 0) {
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	f1a3 020c 	sub.w	r2, r3, #12
 8002ccc:	7fbb      	ldrb	r3, [r7, #30]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d10b      	bne.n	8002cea <decode_phy_payload+0xfe>
		*frame_port = 0;
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
		*decoded_frame_payload_ptr = &payload_buf[8];
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f103 0208 	add.w	r2, r3, #8
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_opts_length;
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	7fba      	ldrb	r2, [r7, #30]
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e038      	b.n	8002d5c <decode_phy_payload+0x170>

	} else {
		*frame_port = payload_buf[8];
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	7a1a      	ldrb	r2, [r3, #8]
 8002cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf0:	701a      	strb	r2, [r3, #0]

		uint8_t frame_payload_start = 9 + frame_opts_length;
 8002cf2:	7fbb      	ldrb	r3, [r7, #30]
 8002cf4:	3309      	adds	r3, #9
 8002cf6:	76fb      	strb	r3, [r7, #27]
		uint8_t frame_payload_end = payload_length - 4;
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	76bb      	strb	r3, [r7, #26]
		uint8_t frame_payload_length = frame_payload_end - frame_payload_start;
 8002cfe:	7eba      	ldrb	r2, [r7, #26]
 8002d00:	7efb      	ldrb	r3, [r7, #27]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	767b      	strb	r3, [r7, #25]

		if (*frame_port == 0) {
 8002d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <decode_phy_payload+0x142>
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002d0e:	7efb      	ldrb	r3, [r7, #27]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	18d0      	adds	r0, r2, r3
 8002d14:	8bbc      	ldrh	r4, [r7, #28]
			                1, handle->network_session_key, handle->device_address);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3316      	adds	r3, #22
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002d1e:	7e79      	ldrb	r1, [r7, #25]
 8002d20:	9201      	str	r2, [sp, #4]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	2301      	movs	r3, #1
 8002d26:	4622      	mov	r2, r4
 8002d28:	f7fe faf9 	bl	800131e <Encrypt_Payload>
 8002d2c:	e00e      	b.n	8002d4c <decode_phy_payload+0x160>
		} else {
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002d2e:	7efb      	ldrb	r3, [r7, #27]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	18d0      	adds	r0, r2, r3
 8002d34:	8bbc      	ldrh	r4, [r7, #28]
			                1, handle->application_session_key, handle->device_address);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3326      	adds	r3, #38	; 0x26
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002d3e:	7e79      	ldrb	r1, [r7, #25]
 8002d40:	9201      	str	r2, [sp, #4]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2301      	movs	r3, #1
 8002d46:	4622      	mov	r2, r4
 8002d48:	f7fe fae9 	bl	800131e <Encrypt_Payload>
		}

		*decoded_frame_payload_ptr = &payload_buf[frame_payload_start];
 8002d4c:	7efb      	ldrb	r3, [r7, #27]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	441a      	add	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_payload_length;
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	7e7a      	ldrb	r2, [r7, #25]
 8002d5a:	701a      	strb	r2, [r3, #0]
	}

	return true;
 8002d5c:	2301      	movs	r3, #1
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}

08002d66 <select_random_channel>:

static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 8002d72:	2300      	movs	r3, #0
 8002d74:	73bb      	strb	r3, [r7, #14]
 8002d76:	e010      	b.n	8002d9a <select_random_channel+0x34>
		if (handle->config.channel_mask & (1 << i)) {
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002d7e:	461a      	mov	r2, r3
 8002d80:	7bbb      	ldrb	r3, [r7, #14]
 8002d82:	fa42 f303 	asr.w	r3, r2, r3
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <select_random_channel+0x2e>
			channel_count++;
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	3301      	adds	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 16; i++) {
 8002d94:	7bbb      	ldrb	r3, [r7, #14]
 8002d96:	3301      	adds	r3, #1
 8002d98:	73bb      	strb	r3, [r7, #14]
 8002d9a:	7bbb      	ldrb	r3, [r7, #14]
 8002d9c:	2b0f      	cmp	r3, #15
 8002d9e:	d9eb      	bls.n	8002d78 <select_random_channel+0x12>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	4610      	mov	r0, r2
 8002da8:	4798      	blx	r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 16; i++) {
 8002dae:	2300      	movs	r3, #0
 8002db0:	733b      	strb	r3, [r7, #12]
 8002db2:	e015      	b.n	8002de0 <select_random_channel+0x7a>
		if (handle->config.channel_mask & (1 << i)) {
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002dba:	461a      	mov	r2, r3
 8002dbc:	7b3b      	ldrb	r3, [r7, #12]
 8002dbe:	fa42 f303 	asr.w	r3, r2, r3
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <select_random_channel+0x74>
			if (random_channel == 0) {
 8002dca:	7b7b      	ldrb	r3, [r7, #13]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <select_random_channel+0x6e>
				return i;
 8002dd0:	7b3b      	ldrb	r3, [r7, #12]
 8002dd2:	e009      	b.n	8002de8 <select_random_channel+0x82>
			} else {
				random_channel--;
 8002dd4:	7b7b      	ldrb	r3, [r7, #13]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 16; i++) {
 8002dda:	7b3b      	ldrb	r3, [r7, #12]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	733b      	strb	r3, [r7, #12]
 8002de0:	7b3b      	ldrb	r3, [r7, #12]
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	d9e6      	bls.n	8002db4 <select_random_channel+0x4e>
			}
		}
	}

	return 0;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <rfm95_send_receive_cycle>:

bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b0aa      	sub	sp, #168	; 0xa8
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002e04:	223c      	movs	r2, #60	; 0x3c
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f003 fc06 	bl	800661a <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 8002e0e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002e12:	2301      	movs	r3, #1
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff fe30 	bl	8002a80 <encode_phy_payload>
 8002e20:	4603      	mov	r3, r0
 8002e22:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t random_channel = select_random_channel(handle);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff ff9e 	bl	8002d66 <select_random_channel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 8002e30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e32:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8002e36:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002e3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4603      	mov	r3, r0
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff fd2a 	bl	800289c <send_package>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f083 0301 	eor.w	r3, r3, #1
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d006      	beq.n	8002e62 <rfm95_send_receive_cycle+0x72>
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002e54:	2280      	movs	r2, #128	; 0x80
 8002e56:	2101      	movs	r1, #1
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7fe fd7d 	bl	8001958 <write_register>
		return false;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e0af      	b.n	8002fc2 <rfm95_send_receive_cycle+0x1d2>
	}

	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 8002e62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e66:	2240      	movs	r2, #64	; 0x40
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 fbd5 	bl	800661a <memset>
	phy_payload_len = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	65bb      	str	r3, [r7, #88]	; 0x58

	// Only receive if configured to do so.
	if (handle->receive_mode != RFM95_RECEIVE_MODE_NONE) {
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8096 	beq.w	8002fac <rfm95_send_receive_cycle+0x1bc>

		int8_t snr;

		// Try receiving a down-link.
		if (!receive_package(handle, tx_ticks, phy_payload_buf, &phy_payload_len, &snr)) {
 8002e80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e82:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002e86:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002e8a:	f107 0353 	add.w	r3, r7, #83	; 0x53
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	4603      	mov	r3, r0
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff fb8e 	bl	80025b4 <receive_package>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f083 0301 	eor.w	r3, r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d010      	beq.n	8002ec6 <rfm95_send_receive_cycle+0xd6>
			write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7fe fd55 	bl	8001958 <write_register>
			if (handle->save_config) {
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <rfm95_send_receive_cycle+0xd2>
				handle->save_config(&(handle->config));
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	3260      	adds	r2, #96	; 0x60
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4798      	blx	r3
			}
			return false;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e07d      	b.n	8002fc2 <rfm95_send_receive_cycle+0x1d2>
		}

		// Any RX payload was received.
		if (phy_payload_len != 0) {
 8002ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d06f      	beq.n	8002fac <rfm95_send_receive_cycle+0x1bc>

			uint8_t *frame_payload;
			uint8_t frame_payload_len = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			uint8_t frame_port;

			// Try decoding the frame payload.
			if (decode_phy_payload(handle, phy_payload_buf, phy_payload_len, &frame_payload, &frame_payload_len,
 8002ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002eda:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002ede:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8002ee2:	9301      	str	r3, [sp, #4]
 8002ee4:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	4603      	mov	r3, r0
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7ff fe7d 	bl	8002bec <decode_phy_payload>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d059      	beq.n	8002fac <rfm95_send_receive_cycle+0x1bc>
			                       &frame_port)) {

				// Process Mac Commands
				if (frame_port == 0) {
 8002ef8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d155      	bne.n	8002fac <rfm95_send_receive_cycle+0x1bc>

					uint8_t mac_response_data[51] = {0};
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	f107 0318 	add.w	r3, r7, #24
 8002f08:	222f      	movs	r2, #47	; 0x2f
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 fb84 	bl	800661a <memset>
					uint8_t mac_response_len = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

					if (process_mac_commands(handle, frame_payload, frame_payload_len, mac_response_data,
 8002f18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f1a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002f24:	f107 0214 	add.w	r2, r7, #20
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	f107 0349 	add.w	r3, r7, #73	; 0x49
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	4602      	mov	r2, r0
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f7ff f87f 	bl	8002038 <process_mac_commands>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d035      	beq.n	8002fac <rfm95_send_receive_cycle+0x1bc>
					                         &mac_response_len, snr) && mac_response_len != 0) {
 8002f40:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d031      	beq.n	8002fac <rfm95_send_receive_cycle+0x1bc>

						// Build the up-link phy payload.
						phy_payload_len = encode_phy_payload(handle, phy_payload_buf, mac_response_data,
 8002f48:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f107 0214 	add.w	r2, r7, #20
 8002f52:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002f56:	2300      	movs	r3, #0
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7ff fd8f 	bl	8002a80 <encode_phy_payload>
 8002f62:	4603      	mov	r3, r0
 8002f64:	65bb      	str	r3, [r7, #88]	; 0x58
						                                     mac_response_len, 0);

						if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel,
 8002f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f68:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8002f6c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002f70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	4603      	mov	r3, r0
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7ff fc8f 	bl	800289c <send_package>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f083 0301 	eor.w	r3, r3, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d010      	beq.n	8002fac <rfm95_send_receive_cycle+0x1bc>
						                  &tx_ticks)) {
							write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002f8a:	2280      	movs	r2, #128	; 0x80
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7fe fce2 	bl	8001958 <write_register>
							if (handle->save_config) {
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <rfm95_send_receive_cycle+0x1b8>
								handle->save_config(&(handle->config));
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	3260      	adds	r2, #96	; 0x60
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4798      	blx	r3
							}
							return false;
 8002fa8:	2300      	movs	r3, #0
			return false;
 8002faa:	e00a      	b.n	8002fc2 <rfm95_send_receive_cycle+0x1d2>
				}
			}
		}
	}

	if (handle->save_config) {
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <rfm95_send_receive_cycle+0x1d0>
		handle->save_config(&(handle->config));
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	3260      	adds	r2, #96	; 0x60
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4798      	blx	r3
	}

	return true;
 8002fc0:	2301      	movs	r3, #1
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	37a0      	adds	r7, #160	; 0xa0
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	f000 f961 	bl	800329c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f000 f80e 	bl	8002ffc <HAL_InitTick>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	71fb      	strb	r3, [r7, #7]
 8002fea:	e001      	b.n	8002ff0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fec:	f7fd fcba 	bl	8000964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003008:	4b17      	ldr	r3, [pc, #92]	; (8003068 <HAL_InitTick+0x6c>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d023      	beq.n	8003058 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_InitTick+0x70>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4b14      	ldr	r3, [pc, #80]	; (8003068 <HAL_InitTick+0x6c>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	4619      	mov	r1, r3
 800301a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800301e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f96d 	bl	8003306 <HAL_SYSTICK_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10f      	bne.n	8003052 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b0f      	cmp	r3, #15
 8003036:	d809      	bhi.n	800304c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003038:	2200      	movs	r2, #0
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	f000 f937 	bl	80032b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003044:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <HAL_InitTick+0x74>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e007      	b.n	800305c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
 8003050:	e004      	b.n	800305c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	e001      	b.n	800305c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000108 	.word	0x20000108
 800306c:	20000000 	.word	0x20000000
 8003070:	20000104 	.word	0x20000104

08003074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_IncTick+0x20>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_IncTick+0x24>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4413      	add	r3, r2
 8003084:	4a04      	ldr	r2, [pc, #16]	; (8003098 <HAL_IncTick+0x24>)
 8003086:	6013      	str	r3, [r2, #0]
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000108 	.word	0x20000108
 8003098:	200002b0 	.word	0x200002b0

0800309c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return uwTick;
 80030a0:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <HAL_GetTick+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	200002b0 	.word	0x200002b0

080030b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030bc:	f7ff ffee 	bl	800309c <HAL_GetTick>
 80030c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d005      	beq.n	80030da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <HAL_Delay+0x44>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4413      	add	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030da:	bf00      	nop
 80030dc:	f7ff ffde 	bl	800309c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d8f7      	bhi.n	80030dc <HAL_Delay+0x28>
  {
  }
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000108 	.word	0x20000108

080030fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003118:	4013      	ands	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312e:	4a04      	ldr	r2, [pc, #16]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	60d3      	str	r3, [r2, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <__NVIC_GetPriorityGrouping+0x18>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0307 	and.w	r3, r3, #7
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	2b00      	cmp	r3, #0
 8003170:	db0b      	blt.n	800318a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	4907      	ldr	r1, [pc, #28]	; (8003198 <__NVIC_EnableIRQ+0x38>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2001      	movs	r0, #1
 8003182:	fa00 f202 	lsl.w	r2, r0, r2
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000e100 	.word	0xe000e100

0800319c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	db0a      	blt.n	80031c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	490c      	ldr	r1, [pc, #48]	; (80031e8 <__NVIC_SetPriority+0x4c>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	440b      	add	r3, r1
 80031c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c4:	e00a      	b.n	80031dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4908      	ldr	r1, [pc, #32]	; (80031ec <__NVIC_SetPriority+0x50>)
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	3b04      	subs	r3, #4
 80031d4:	0112      	lsls	r2, r2, #4
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	440b      	add	r3, r1
 80031da:	761a      	strb	r2, [r3, #24]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000e100 	.word	0xe000e100
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f1c3 0307 	rsb	r3, r3, #7
 800320a:	2b04      	cmp	r3, #4
 800320c:	bf28      	it	cs
 800320e:	2304      	movcs	r3, #4
 8003210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3304      	adds	r3, #4
 8003216:	2b06      	cmp	r3, #6
 8003218:	d902      	bls.n	8003220 <NVIC_EncodePriority+0x30>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3b03      	subs	r3, #3
 800321e:	e000      	b.n	8003222 <NVIC_EncodePriority+0x32>
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	401a      	ands	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003238:	f04f 31ff 	mov.w	r1, #4294967295
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	43d9      	mvns	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003248:	4313      	orrs	r3, r2
         );
}
 800324a:	4618      	mov	r0, r3
 800324c:	3724      	adds	r7, #36	; 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003268:	d301      	bcc.n	800326e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800326a:	2301      	movs	r3, #1
 800326c:	e00f      	b.n	800328e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <SysTick_Config+0x40>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003276:	210f      	movs	r1, #15
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f7ff ff8e 	bl	800319c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <SysTick_Config+0x40>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003286:	4b04      	ldr	r3, [pc, #16]	; (8003298 <SysTick_Config+0x40>)
 8003288:	2207      	movs	r2, #7
 800328a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	e000e010 	.word	0xe000e010

0800329c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff29 	bl	80030fc <__NVIC_SetPriorityGrouping>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032c4:	f7ff ff3e 	bl	8003144 <__NVIC_GetPriorityGrouping>
 80032c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ff8e 	bl	80031f0 <NVIC_EncodePriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff5d 	bl	800319c <__NVIC_SetPriority>
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff31 	bl	8003160 <__NVIC_EnableIRQ>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffa2 	bl	8003258 <SysTick_Config>
 8003314:	4603      	mov	r3, r0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d005      	beq.n	8003342 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2204      	movs	r2, #4
 800333a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	e029      	b.n	8003396 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 020e 	bic.w	r2, r2, #14
 8003350:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f003 021c 	and.w	r2, r3, #28
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	2101      	movs	r1, #1
 8003370:	fa01 f202 	lsl.w	r2, r1, r2
 8003374:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
    }
  }
  return status;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ae:	e148      	b.n	8003642 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	4013      	ands	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 813a 	beq.w	800363c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d005      	beq.n	80033e0 <HAL_GPIO_Init+0x40>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d130      	bne.n	8003442 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003416:	2201      	movs	r2, #1
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 0201 	and.w	r2, r3, #1
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b03      	cmp	r3, #3
 800344c:	d017      	beq.n	800347e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	2203      	movs	r2, #3
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d123      	bne.n	80034d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	08da      	lsrs	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3208      	adds	r2, #8
 8003492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003496:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	220f      	movs	r2, #15
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	08da      	lsrs	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3208      	adds	r2, #8
 80034cc:	6939      	ldr	r1, [r7, #16]
 80034ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	2203      	movs	r2, #3
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0203 	and.w	r2, r3, #3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8094 	beq.w	800363c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003514:	4b52      	ldr	r3, [pc, #328]	; (8003660 <HAL_GPIO_Init+0x2c0>)
 8003516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003518:	4a51      	ldr	r2, [pc, #324]	; (8003660 <HAL_GPIO_Init+0x2c0>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6613      	str	r3, [r2, #96]	; 0x60
 8003520:	4b4f      	ldr	r3, [pc, #316]	; (8003660 <HAL_GPIO_Init+0x2c0>)
 8003522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800352c:	4a4d      	ldr	r2, [pc, #308]	; (8003664 <HAL_GPIO_Init+0x2c4>)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	3302      	adds	r3, #2
 8003534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003538:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	220f      	movs	r2, #15
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003556:	d00d      	beq.n	8003574 <HAL_GPIO_Init+0x1d4>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a43      	ldr	r2, [pc, #268]	; (8003668 <HAL_GPIO_Init+0x2c8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <HAL_GPIO_Init+0x1d0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a42      	ldr	r2, [pc, #264]	; (800366c <HAL_GPIO_Init+0x2cc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d101      	bne.n	800356c <HAL_GPIO_Init+0x1cc>
 8003568:	2302      	movs	r3, #2
 800356a:	e004      	b.n	8003576 <HAL_GPIO_Init+0x1d6>
 800356c:	2307      	movs	r3, #7
 800356e:	e002      	b.n	8003576 <HAL_GPIO_Init+0x1d6>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_GPIO_Init+0x1d6>
 8003574:	2300      	movs	r3, #0
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	f002 0203 	and.w	r2, r2, #3
 800357c:	0092      	lsls	r2, r2, #2
 800357e:	4093      	lsls	r3, r2
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003586:	4937      	ldr	r1, [pc, #220]	; (8003664 <HAL_GPIO_Init+0x2c4>)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	089b      	lsrs	r3, r3, #2
 800358c:	3302      	adds	r3, #2
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003594:	4b36      	ldr	r3, [pc, #216]	; (8003670 <HAL_GPIO_Init+0x2d0>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	43db      	mvns	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035b8:	4a2d      	ldr	r2, [pc, #180]	; (8003670 <HAL_GPIO_Init+0x2d0>)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035be:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <HAL_GPIO_Init+0x2d0>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035e2:	4a23      	ldr	r2, [pc, #140]	; (8003670 <HAL_GPIO_Init+0x2d0>)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_GPIO_Init+0x2d0>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800360c:	4a18      	ldr	r2, [pc, #96]	; (8003670 <HAL_GPIO_Init+0x2d0>)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003612:	4b17      	ldr	r3, [pc, #92]	; (8003670 <HAL_GPIO_Init+0x2d0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	43db      	mvns	r3, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4013      	ands	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003636:	4a0e      	ldr	r2, [pc, #56]	; (8003670 <HAL_GPIO_Init+0x2d0>)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	3301      	adds	r3, #1
 8003640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	f47f aeaf 	bne.w	80033b0 <HAL_GPIO_Init+0x10>
  }
}
 8003652:	bf00      	nop
 8003654:	bf00      	nop
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	40021000 	.word	0x40021000
 8003664:	40010000 	.word	0x40010000
 8003668:	48000400 	.word	0x48000400
 800366c:	48000800 	.word	0x48000800
 8003670:	40010400 	.word	0x40010400

08003674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	807b      	strh	r3, [r7, #2]
 8003680:	4613      	mov	r3, r2
 8003682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003684:	787b      	ldrb	r3, [r7, #1]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800368a:	887a      	ldrh	r2, [r7, #2]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003690:	e002      	b.n	8003698 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b2:	6013      	str	r3, [r2, #0]
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40007000 	.word	0x40007000

080036c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_PWREx_GetVoltageRange+0x18>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40007000 	.word	0x40007000

080036e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ee:	d130      	bne.n	8003752 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f0:	4b23      	ldr	r3, [pc, #140]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fc:	d038      	beq.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003706:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800370c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2232      	movs	r2, #50	; 0x32
 8003714:	fb02 f303 	mul.w	r3, r2, r3
 8003718:	4a1b      	ldr	r2, [pc, #108]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	0c9b      	lsrs	r3, r3, #18
 8003720:	3301      	adds	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003724:	e002      	b.n	800372c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3b01      	subs	r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003738:	d102      	bne.n	8003740 <HAL_PWREx_ControlVoltageScaling+0x60>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f2      	bne.n	8003726 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374c:	d110      	bne.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e00f      	b.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375e:	d007      	beq.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003760:	4b07      	ldr	r3, [pc, #28]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003768:	4a05      	ldr	r2, [pc, #20]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800376a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800376e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40007000 	.word	0x40007000
 8003784:	20000000 	.word	0x20000000
 8003788:	431bde83 	.word	0x431bde83

0800378c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f000 bc02 	b.w	8003fa4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037a0:	4b96      	ldr	r3, [pc, #600]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037aa:	4b94      	ldr	r3, [pc, #592]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80e4 	beq.w	800398a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4c>
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b0c      	cmp	r3, #12
 80037cc:	f040 808b 	bne.w	80038e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	f040 8087 	bne.w	80038e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037d8:	4b88      	ldr	r3, [pc, #544]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_OscConfig+0x64>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e3d9      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	4b81      	ldr	r3, [pc, #516]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d004      	beq.n	800380a <HAL_RCC_OscConfig+0x7e>
 8003800:	4b7e      	ldr	r3, [pc, #504]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003808:	e005      	b.n	8003816 <HAL_RCC_OscConfig+0x8a>
 800380a:	4b7c      	ldr	r3, [pc, #496]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800380c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003816:	4293      	cmp	r3, r2
 8003818:	d223      	bcs.n	8003862 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fd8c 	bl	800433c <RCC_SetFlashLatencyFromMSIRange>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e3ba      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800382e:	4b73      	ldr	r3, [pc, #460]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a72      	ldr	r2, [pc, #456]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003834:	f043 0308 	orr.w	r3, r3, #8
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b70      	ldr	r3, [pc, #448]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	496d      	ldr	r1, [pc, #436]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800384c:	4b6b      	ldr	r3, [pc, #428]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	4968      	ldr	r1, [pc, #416]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
 8003860:	e025      	b.n	80038ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003862:	4b66      	ldr	r3, [pc, #408]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a65      	ldr	r2, [pc, #404]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003868:	f043 0308 	orr.w	r3, r3, #8
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b63      	ldr	r3, [pc, #396]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4960      	ldr	r1, [pc, #384]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003880:	4b5e      	ldr	r3, [pc, #376]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	495b      	ldr	r1, [pc, #364]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fd4c 	bl	800433c <RCC_SetFlashLatencyFromMSIRange>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e37a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ae:	f000 fc81 	bl	80041b4 <HAL_RCC_GetSysClockFreq>
 80038b2:	4602      	mov	r2, r0
 80038b4:	4b51      	ldr	r3, [pc, #324]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	4950      	ldr	r1, [pc, #320]	; (8003a00 <HAL_RCC_OscConfig+0x274>)
 80038c0:	5ccb      	ldrb	r3, [r1, r3]
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ca:	4a4e      	ldr	r2, [pc, #312]	; (8003a04 <HAL_RCC_OscConfig+0x278>)
 80038cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038ce:	4b4e      	ldr	r3, [pc, #312]	; (8003a08 <HAL_RCC_OscConfig+0x27c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fb92 	bl	8002ffc <HAL_InitTick>
 80038d8:	4603      	mov	r3, r0
 80038da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d052      	beq.n	8003988 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	e35e      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d032      	beq.n	8003954 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ee:	4b43      	ldr	r3, [pc, #268]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a42      	ldr	r2, [pc, #264]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038fa:	f7ff fbcf 	bl	800309c <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003902:	f7ff fbcb 	bl	800309c <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e347      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003914:	4b39      	ldr	r3, [pc, #228]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003920:	4b36      	ldr	r3, [pc, #216]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a35      	ldr	r2, [pc, #212]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003926:	f043 0308 	orr.w	r3, r3, #8
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b33      	ldr	r3, [pc, #204]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	4930      	ldr	r1, [pc, #192]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800393e:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	492b      	ldr	r1, [pc, #172]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
 8003952:	e01a      	b.n	800398a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003954:	4b29      	ldr	r3, [pc, #164]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a28      	ldr	r2, [pc, #160]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003960:	f7ff fb9c 	bl	800309c <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003968:	f7ff fb98 	bl	800309c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e314      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800397a:	4b20      	ldr	r3, [pc, #128]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x1dc>
 8003986:	e000      	b.n	800398a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003988:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d073      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b08      	cmp	r3, #8
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_OscConfig+0x21c>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d10e      	bne.n	80039c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d10b      	bne.n	80039c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	4b14      	ldr	r3, [pc, #80]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d063      	beq.n	8003a7c <HAL_RCC_OscConfig+0x2f0>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d15f      	bne.n	8003a7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e2f1      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c8:	d106      	bne.n	80039d8 <HAL_RCC_OscConfig+0x24c>
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a0b      	ldr	r2, [pc, #44]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e025      	b.n	8003a24 <HAL_RCC_OscConfig+0x298>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e0:	d114      	bne.n	8003a0c <HAL_RCC_OscConfig+0x280>
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a05      	ldr	r2, [pc, #20]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b03      	ldr	r3, [pc, #12]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a02      	ldr	r2, [pc, #8]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e013      	b.n	8003a24 <HAL_RCC_OscConfig+0x298>
 80039fc:	40021000 	.word	0x40021000
 8003a00:	08007960 	.word	0x08007960
 8003a04:	20000000 	.word	0x20000000
 8003a08:	20000104 	.word	0x20000104
 8003a0c:	4ba0      	ldr	r3, [pc, #640]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a9f      	ldr	r2, [pc, #636]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b9d      	ldr	r3, [pc, #628]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a9c      	ldr	r2, [pc, #624]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7ff fb36 	bl	800309c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7ff fb32 	bl	800309c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e2ae      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a46:	4b92      	ldr	r3, [pc, #584]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x2a8>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7ff fb22 	bl	800309c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7ff fb1e 	bl	800309c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e29a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a6e:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x2d0>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d060      	beq.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_OscConfig+0x310>
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d119      	bne.n	8003aca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d116      	bne.n	8003aca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a9c:	4b7c      	ldr	r3, [pc, #496]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x328>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e277      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b76      	ldr	r3, [pc, #472]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	4973      	ldr	r1, [pc, #460]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac8:	e040      	b.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d023      	beq.n	8003b1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad2:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6e      	ldr	r2, [pc, #440]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7ff fadd 	bl	800309c <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae6:	f7ff fad9 	bl	800309c <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e255      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af8:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b04:	4b62      	ldr	r3, [pc, #392]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	061b      	lsls	r3, r3, #24
 8003b12:	495f      	ldr	r1, [pc, #380]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
 8003b18:	e018      	b.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1a:	4b5d      	ldr	r3, [pc, #372]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a5c      	ldr	r2, [pc, #368]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7ff fab9 	bl	800309c <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7ff fab5 	bl	800309c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e231      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b40:	4b53      	ldr	r3, [pc, #332]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d03c      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01c      	beq.n	8003b9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b60:	4b4b      	ldr	r3, [pc, #300]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b66:	4a4a      	ldr	r2, [pc, #296]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7ff fa94 	bl	800309c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b78:	f7ff fa90 	bl	800309c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e20c      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b8a:	4b41      	ldr	r3, [pc, #260]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ef      	beq.n	8003b78 <HAL_RCC_OscConfig+0x3ec>
 8003b98:	e01b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba0:	4a3b      	ldr	r2, [pc, #236]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
 8003ba6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003baa:	f7ff fa77 	bl	800309c <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb2:	f7ff fa73 	bl	800309c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e1ef      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bc4:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1ef      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80a6 	beq.w	8003d2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be0:	2300      	movs	r3, #0
 8003be2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003be4:	4b2a      	ldr	r3, [pc, #168]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10d      	bne.n	8003c0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf0:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003bfc:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <HAL_RCC_OscConfig+0x508>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d118      	bne.n	8003c4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <HAL_RCC_OscConfig+0x508>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <HAL_RCC_OscConfig+0x508>)
 8003c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c24:	f7ff fa3a 	bl	800309c <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2c:	f7ff fa36 	bl	800309c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e1b2      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_RCC_OscConfig+0x508>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d108      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4d8>
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c62:	e029      	b.n	8003cb8 <HAL_RCC_OscConfig+0x52c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d115      	bne.n	8003c98 <HAL_RCC_OscConfig+0x50c>
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	4a03      	ldr	r2, [pc, #12]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c8c:	e014      	b.n	8003cb8 <HAL_RCC_OscConfig+0x52c>
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40007000 	.word	0x40007000
 8003c98:	4b9a      	ldr	r3, [pc, #616]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	4a99      	ldr	r2, [pc, #612]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca8:	4b96      	ldr	r3, [pc, #600]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	4a95      	ldr	r2, [pc, #596]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d016      	beq.n	8003cee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7ff f9ec 	bl	800309c <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7ff f9e8 	bl	800309c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e162      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cde:	4b89      	ldr	r3, [pc, #548]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ed      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x53c>
 8003cec:	e015      	b.n	8003d1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7ff f9d5 	bl	800309c <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7ff f9d1 	bl	800309c <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e14b      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d0c:	4b7d      	ldr	r3, [pc, #500]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1ed      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d1a:	7ffb      	ldrb	r3, [r7, #31]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d105      	bne.n	8003d2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d20:	4b78      	ldr	r3, [pc, #480]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	4a77      	ldr	r2, [pc, #476]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d03c      	beq.n	8003db2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01c      	beq.n	8003d7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d40:	4b70      	ldr	r3, [pc, #448]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d46:	4a6f      	ldr	r2, [pc, #444]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d50:	f7ff f9a4 	bl	800309c <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d58:	f7ff f9a0 	bl	800309c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e11c      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d6a:	4b66      	ldr	r3, [pc, #408]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ef      	beq.n	8003d58 <HAL_RCC_OscConfig+0x5cc>
 8003d78:	e01b      	b.n	8003db2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d7a:	4b62      	ldr	r3, [pc, #392]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d80:	4a60      	ldr	r2, [pc, #384]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8a:	f7ff f987 	bl	800309c <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d92:	f7ff f983 	bl	800309c <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e0ff      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003da4:	4b57      	ldr	r3, [pc, #348]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1ef      	bne.n	8003d92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80f3 	beq.w	8003fa2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	f040 80c9 	bne.w	8003f58 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003dc6:	4b4f      	ldr	r3, [pc, #316]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f003 0203 	and.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d12c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	3b01      	subs	r3, #1
 8003de6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d123      	bne.n	8003e34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d11b      	bne.n	8003e34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d113      	bne.n	8003e34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d109      	bne.n	8003e34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d06b      	beq.n	8003f0c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d062      	beq.n	8003f00 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e3a:	4b32      	ldr	r3, [pc, #200]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0ac      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e4a:	4b2e      	ldr	r3, [pc, #184]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2d      	ldr	r2, [pc, #180]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003e50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e56:	f7ff f921 	bl	800309c <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7ff f91d 	bl	800309c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e099      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e70:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f0      	bne.n	8003e5e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e7c:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <HAL_RCC_OscConfig+0x77c>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e8c:	3a01      	subs	r2, #1
 8003e8e:	0112      	lsls	r2, r2, #4
 8003e90:	4311      	orrs	r1, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e96:	0212      	lsls	r2, r2, #8
 8003e98:	4311      	orrs	r1, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e9e:	0852      	lsrs	r2, r2, #1
 8003ea0:	3a01      	subs	r2, #1
 8003ea2:	0552      	lsls	r2, r2, #21
 8003ea4:	4311      	orrs	r1, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003eaa:	0852      	lsrs	r2, r2, #1
 8003eac:	3a01      	subs	r2, #1
 8003eae:	0652      	lsls	r2, r2, #25
 8003eb0:	4311      	orrs	r1, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eb6:	06d2      	lsls	r2, r2, #27
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	4912      	ldr	r1, [pc, #72]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ec0:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a0f      	ldr	r2, [pc, #60]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ecc:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ed8:	f7ff f8e0 	bl	800309c <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7ff f8dc 	bl	800309c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e058      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef2:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <HAL_RCC_OscConfig+0x778>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003efe:	e050      	b.n	8003fa2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e04f      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
 8003f04:	40021000 	.word	0x40021000
 8003f08:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0c:	4b27      	ldr	r3, [pc, #156]	; (8003fac <HAL_RCC_OscConfig+0x820>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d144      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f18:	4b24      	ldr	r3, [pc, #144]	; (8003fac <HAL_RCC_OscConfig+0x820>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a23      	ldr	r2, [pc, #140]	; (8003fac <HAL_RCC_OscConfig+0x820>)
 8003f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f24:	4b21      	ldr	r3, [pc, #132]	; (8003fac <HAL_RCC_OscConfig+0x820>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4a20      	ldr	r2, [pc, #128]	; (8003fac <HAL_RCC_OscConfig+0x820>)
 8003f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f30:	f7ff f8b4 	bl	800309c <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f38:	f7ff f8b0 	bl	800309c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e02c      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f4a:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_RCC_OscConfig+0x820>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0x7ac>
 8003f56:	e024      	b.n	8003fa2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b0c      	cmp	r3, #12
 8003f5c:	d01f      	beq.n	8003f9e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5e:	4b13      	ldr	r3, [pc, #76]	; (8003fac <HAL_RCC_OscConfig+0x820>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a12      	ldr	r2, [pc, #72]	; (8003fac <HAL_RCC_OscConfig+0x820>)
 8003f64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6a:	f7ff f897 	bl	800309c <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f72:	f7ff f893 	bl	800309c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e00f      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_OscConfig+0x820>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f0      	bne.n	8003f72 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f90:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_RCC_OscConfig+0x820>)
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	4905      	ldr	r1, [pc, #20]	; (8003fac <HAL_RCC_OscConfig+0x820>)
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_RCC_OscConfig+0x824>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60cb      	str	r3, [r1, #12]
 8003f9c:	e001      	b.n	8003fa2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	feeefffc 	.word	0xfeeefffc

08003fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0e7      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b75      	ldr	r3, [pc, #468]	; (80041a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d910      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b72      	ldr	r3, [pc, #456]	; (80041a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 0207 	bic.w	r2, r3, #7
 8003fde:	4970      	ldr	r1, [pc, #448]	; (80041a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b6e      	ldr	r3, [pc, #440]	; (80041a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0cf      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d010      	beq.n	8004026 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	4b66      	ldr	r3, [pc, #408]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004010:	429a      	cmp	r2, r3
 8004012:	d908      	bls.n	8004026 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004014:	4b63      	ldr	r3, [pc, #396]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4960      	ldr	r1, [pc, #384]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d04c      	beq.n	80040cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b03      	cmp	r3, #3
 8004038:	d107      	bne.n	800404a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403a:	4b5a      	ldr	r3, [pc, #360]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d121      	bne.n	800408a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e0a6      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004052:	4b54      	ldr	r3, [pc, #336]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d115      	bne.n	800408a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e09a      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800406a:	4b4e      	ldr	r3, [pc, #312]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e08e      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800407a:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e086      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800408a:	4b46      	ldr	r3, [pc, #280]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 0203 	bic.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4943      	ldr	r1, [pc, #268]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004098:	4313      	orrs	r3, r2
 800409a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800409c:	f7fe fffe 	bl	800309c <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a4:	f7fe fffa 	bl	800309c <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e06e      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	4b3a      	ldr	r3, [pc, #232]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 020c 	and.w	r2, r3, #12
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d1eb      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d010      	beq.n	80040fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	4b31      	ldr	r3, [pc, #196]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d208      	bcs.n	80040fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e8:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	492b      	ldr	r1, [pc, #172]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040fa:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <HAL_RCC_ClockConfig+0x1ec>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d210      	bcs.n	800412a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004108:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <HAL_RCC_ClockConfig+0x1ec>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f023 0207 	bic.w	r2, r3, #7
 8004110:	4923      	ldr	r1, [pc, #140]	; (80041a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004118:	4b21      	ldr	r3, [pc, #132]	; (80041a0 <HAL_RCC_ClockConfig+0x1ec>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d001      	beq.n	800412a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e036      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004136:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	4918      	ldr	r1, [pc, #96]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004144:	4313      	orrs	r3, r2
 8004146:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d009      	beq.n	8004168 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004154:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4910      	ldr	r1, [pc, #64]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004168:	f000 f824 	bl	80041b4 <HAL_RCC_GetSysClockFreq>
 800416c:	4602      	mov	r2, r0
 800416e:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	091b      	lsrs	r3, r3, #4
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	490b      	ldr	r1, [pc, #44]	; (80041a8 <HAL_RCC_ClockConfig+0x1f4>)
 800417a:	5ccb      	ldrb	r3, [r1, r3]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
 8004184:	4a09      	ldr	r2, [pc, #36]	; (80041ac <HAL_RCC_ClockConfig+0x1f8>)
 8004186:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <HAL_RCC_ClockConfig+0x1fc>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe ff35 	bl	8002ffc <HAL_InitTick>
 8004192:	4603      	mov	r3, r0
 8004194:	72fb      	strb	r3, [r7, #11]

  return status;
 8004196:	7afb      	ldrb	r3, [r7, #11]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40022000 	.word	0x40022000
 80041a4:	40021000 	.word	0x40021000
 80041a8:	08007960 	.word	0x08007960
 80041ac:	20000000 	.word	0x20000000
 80041b0:	20000104 	.word	0x20000104

080041b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b089      	sub	sp, #36	; 0x24
 80041b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	2300      	movs	r3, #0
 80041c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041c2:	4b3e      	ldr	r3, [pc, #248]	; (80042bc <HAL_RCC_GetSysClockFreq+0x108>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041cc:	4b3b      	ldr	r3, [pc, #236]	; (80042bc <HAL_RCC_GetSysClockFreq+0x108>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x34>
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b0c      	cmp	r3, #12
 80041e0:	d121      	bne.n	8004226 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d11e      	bne.n	8004226 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041e8:	4b34      	ldr	r3, [pc, #208]	; (80042bc <HAL_RCC_GetSysClockFreq+0x108>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d107      	bne.n	8004204 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041f4:	4b31      	ldr	r3, [pc, #196]	; (80042bc <HAL_RCC_GetSysClockFreq+0x108>)
 80041f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	e005      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004204:	4b2d      	ldr	r3, [pc, #180]	; (80042bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004210:	4a2b      	ldr	r2, [pc, #172]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004218:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10d      	bne.n	800423c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004224:	e00a      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b04      	cmp	r3, #4
 800422a:	d102      	bne.n	8004232 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800422c:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	e004      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b08      	cmp	r3, #8
 8004236:	d101      	bne.n	800423c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004238:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800423a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b0c      	cmp	r3, #12
 8004240:	d134      	bne.n	80042ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004242:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d003      	beq.n	800425a <HAL_RCC_GetSysClockFreq+0xa6>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d003      	beq.n	8004260 <HAL_RCC_GetSysClockFreq+0xac>
 8004258:	e005      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800425a:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800425c:	617b      	str	r3, [r7, #20]
      break;
 800425e:	e005      	b.n	800426c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004262:	617b      	str	r3, [r7, #20]
      break;
 8004264:	e002      	b.n	800426c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	617b      	str	r3, [r7, #20]
      break;
 800426a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800426c:	4b13      	ldr	r3, [pc, #76]	; (80042bc <HAL_RCC_GetSysClockFreq+0x108>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	3301      	adds	r3, #1
 8004278:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800427a:	4b10      	ldr	r3, [pc, #64]	; (80042bc <HAL_RCC_GetSysClockFreq+0x108>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	0a1b      	lsrs	r3, r3, #8
 8004280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	fb03 f202 	mul.w	r2, r3, r2
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	0e5b      	lsrs	r3, r3, #25
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	3301      	adds	r3, #1
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042ac:	69bb      	ldr	r3, [r7, #24]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3724      	adds	r7, #36	; 0x24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000
 80042c0:	08007978 	.word	0x08007978
 80042c4:	00f42400 	.word	0x00f42400
 80042c8:	007a1200 	.word	0x007a1200

080042cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d0:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042d2:	681b      	ldr	r3, [r3, #0]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000000 	.word	0x20000000

080042e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042e8:	f7ff fff0 	bl	80042cc <HAL_RCC_GetHCLKFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	0a1b      	lsrs	r3, r3, #8
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	4904      	ldr	r1, [pc, #16]	; (800430c <HAL_RCC_GetPCLK1Freq+0x28>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000
 800430c:	08007970 	.word	0x08007970

08004310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004314:	f7ff ffda 	bl	80042cc <HAL_RCC_GetHCLKFreq>
 8004318:	4602      	mov	r2, r0
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <HAL_RCC_GetPCLK2Freq+0x24>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	0adb      	lsrs	r3, r3, #11
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	4904      	ldr	r1, [pc, #16]	; (8004338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004326:	5ccb      	ldrb	r3, [r1, r3]
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40021000 	.word	0x40021000
 8004338:	08007970 	.word	0x08007970

0800433c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004344:	2300      	movs	r3, #0
 8004346:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004348:	4b2a      	ldr	r3, [pc, #168]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004354:	f7ff f9b6 	bl	80036c4 <HAL_PWREx_GetVoltageRange>
 8004358:	6178      	str	r0, [r7, #20]
 800435a:	e014      	b.n	8004386 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800435c:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004360:	4a24      	ldr	r2, [pc, #144]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004366:	6593      	str	r3, [r2, #88]	; 0x58
 8004368:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800436a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004374:	f7ff f9a6 	bl	80036c4 <HAL_PWREx_GetVoltageRange>
 8004378:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800437a:	4b1e      	ldr	r3, [pc, #120]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004384:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800438c:	d10b      	bne.n	80043a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b80      	cmp	r3, #128	; 0x80
 8004392:	d919      	bls.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2ba0      	cmp	r3, #160	; 0xa0
 8004398:	d902      	bls.n	80043a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800439a:	2302      	movs	r3, #2
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	e013      	b.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043a0:	2301      	movs	r3, #1
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	e010      	b.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	d902      	bls.n	80043b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043ac:	2303      	movs	r3, #3
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	e00a      	b.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d102      	bne.n	80043be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043b8:	2302      	movs	r3, #2
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	e004      	b.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b70      	cmp	r3, #112	; 0x70
 80043c2:	d101      	bne.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043c4:	2301      	movs	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f023 0207 	bic.w	r2, r3, #7
 80043d0:	4909      	ldr	r1, [pc, #36]	; (80043f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043d8:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d001      	beq.n	80043ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40022000 	.word	0x40022000

080043fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004404:	2300      	movs	r3, #0
 8004406:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004408:	2300      	movs	r3, #0
 800440a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004414:	2b00      	cmp	r3, #0
 8004416:	d031      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004420:	d01a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004422:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004426:	d814      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800442c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004430:	d10f      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004432:	4b5d      	ldr	r3, [pc, #372]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	4a5c      	ldr	r2, [pc, #368]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800443e:	e00c      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	2100      	movs	r1, #0
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f9de 	bl	8004808 <RCCEx_PLLSAI1_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004450:	e003      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	74fb      	strb	r3, [r7, #19]
      break;
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004460:	4b51      	ldr	r3, [pc, #324]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	494e      	ldr	r1, [pc, #312]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004476:	e001      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 809e 	beq.w	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800448a:	2300      	movs	r3, #0
 800448c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800448e:	4b46      	ldr	r3, [pc, #280]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	4b40      	ldr	r3, [pc, #256]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	4a3f      	ldr	r2, [pc, #252]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ae:	6593      	str	r3, [r2, #88]	; 0x58
 80044b0:	4b3d      	ldr	r3, [pc, #244]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044bc:	2301      	movs	r3, #1
 80044be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044c0:	4b3a      	ldr	r3, [pc, #232]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a39      	ldr	r2, [pc, #228]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044cc:	f7fe fde6 	bl	800309c <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044d2:	e009      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d4:	f7fe fde2 	bl	800309c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d902      	bls.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	74fb      	strb	r3, [r7, #19]
        break;
 80044e6:	e005      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044e8:	4b30      	ldr	r3, [pc, #192]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ef      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80044f4:	7cfb      	ldrb	r3, [r7, #19]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d15a      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044fa:	4b2b      	ldr	r3, [pc, #172]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004504:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01e      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	429a      	cmp	r2, r3
 8004514:	d019      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004516:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004520:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004522:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004528:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800452a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004532:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	4a1b      	ldr	r2, [pc, #108]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800453a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004542:	4a19      	ldr	r2, [pc, #100]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d016      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fe fda2 	bl	800309c <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455a:	e00b      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455c:	f7fe fd9e 	bl	800309c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d902      	bls.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	74fb      	strb	r3, [r7, #19]
            break;
 8004572:	e006      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0ec      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004582:	7cfb      	ldrb	r3, [r7, #19]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10b      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004588:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004596:	4904      	ldr	r1, [pc, #16]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800459e:	e009      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045a0:	7cfb      	ldrb	r3, [r7, #19]
 80045a2:	74bb      	strb	r3, [r7, #18]
 80045a4:	e006      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b0:	7cfb      	ldrb	r3, [r7, #19]
 80045b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b4:	7c7b      	ldrb	r3, [r7, #17]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d105      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ba:	4b8a      	ldr	r3, [pc, #552]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	4a89      	ldr	r2, [pc, #548]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045d2:	4b84      	ldr	r3, [pc, #528]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	f023 0203 	bic.w	r2, r3, #3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	4980      	ldr	r1, [pc, #512]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045f4:	4b7b      	ldr	r3, [pc, #492]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f023 020c 	bic.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	4978      	ldr	r1, [pc, #480]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004616:	4b73      	ldr	r3, [pc, #460]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	496f      	ldr	r1, [pc, #444]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004638:	4b6a      	ldr	r3, [pc, #424]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004646:	4967      	ldr	r1, [pc, #412]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800465a:	4b62      	ldr	r3, [pc, #392]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	495e      	ldr	r1, [pc, #376]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800467c:	4b59      	ldr	r3, [pc, #356]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	4956      	ldr	r1, [pc, #344]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800469e:	4b51      	ldr	r3, [pc, #324]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	494d      	ldr	r1, [pc, #308]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d028      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046c0:	4b48      	ldr	r3, [pc, #288]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	4945      	ldr	r1, [pc, #276]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046de:	d106      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e0:	4b40      	ldr	r3, [pc, #256]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4a3f      	ldr	r2, [pc, #252]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ea:	60d3      	str	r3, [r2, #12]
 80046ec:	e011      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046f6:	d10c      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3304      	adds	r3, #4
 80046fc:	2101      	movs	r1, #1
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 f882 	bl	8004808 <RCCEx_PLLSAI1_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800470e:	7cfb      	ldrb	r3, [r7, #19]
 8004710:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d028      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800471e:	4b31      	ldr	r3, [pc, #196]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	492d      	ldr	r1, [pc, #180]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473c:	d106      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473e:	4b29      	ldr	r3, [pc, #164]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	4a28      	ldr	r2, [pc, #160]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004748:	60d3      	str	r3, [r2, #12]
 800474a:	e011      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004754:	d10c      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3304      	adds	r3, #4
 800475a:	2101      	movs	r1, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f000 f853 	bl	8004808 <RCCEx_PLLSAI1_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004766:	7cfb      	ldrb	r3, [r7, #19]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01c      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478a:	4916      	ldr	r1, [pc, #88]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479a:	d10c      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	2102      	movs	r1, #2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f830 	bl	8004808 <RCCEx_PLLSAI1_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047c2:	4b08      	ldr	r3, [pc, #32]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d0:	4904      	ldr	r1, [pc, #16]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000

080047e8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a04      	ldr	r2, [pc, #16]	; (8004804 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047f2:	f043 0304 	orr.w	r3, r3, #4
 80047f6:	6013      	str	r3, [r2, #0]
}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000

08004808 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004816:	4b74      	ldr	r3, [pc, #464]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d018      	beq.n	8004854 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004822:	4b71      	ldr	r3, [pc, #452]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0203 	and.w	r2, r3, #3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d10d      	bne.n	800484e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
       ||
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800483a:	4b6b      	ldr	r3, [pc, #428]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	091b      	lsrs	r3, r3, #4
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
       ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d047      	beq.n	80048de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	73fb      	strb	r3, [r7, #15]
 8004852:	e044      	b.n	80048de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b03      	cmp	r3, #3
 800485a:	d018      	beq.n	800488e <RCCEx_PLLSAI1_Config+0x86>
 800485c:	2b03      	cmp	r3, #3
 800485e:	d825      	bhi.n	80048ac <RCCEx_PLLSAI1_Config+0xa4>
 8004860:	2b01      	cmp	r3, #1
 8004862:	d002      	beq.n	800486a <RCCEx_PLLSAI1_Config+0x62>
 8004864:	2b02      	cmp	r3, #2
 8004866:	d009      	beq.n	800487c <RCCEx_PLLSAI1_Config+0x74>
 8004868:	e020      	b.n	80048ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800486a:	4b5f      	ldr	r3, [pc, #380]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d11d      	bne.n	80048b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800487a:	e01a      	b.n	80048b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800487c:	4b5a      	ldr	r3, [pc, #360]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004884:	2b00      	cmp	r3, #0
 8004886:	d116      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800488c:	e013      	b.n	80048b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800488e:	4b56      	ldr	r3, [pc, #344]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10f      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800489a:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048aa:	e006      	b.n	80048ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      break;
 80048b0:	e004      	b.n	80048bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048b2:	bf00      	nop
 80048b4:	e002      	b.n	80048bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048b6:	bf00      	nop
 80048b8:	e000      	b.n	80048bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10d      	bne.n	80048de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048c2:	4b49      	ldr	r3, [pc, #292]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6819      	ldr	r1, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	430b      	orrs	r3, r1
 80048d8:	4943      	ldr	r1, [pc, #268]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d17c      	bne.n	80049de <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048e4:	4b40      	ldr	r3, [pc, #256]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a3f      	ldr	r2, [pc, #252]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f0:	f7fe fbd4 	bl	800309c <HAL_GetTick>
 80048f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048f6:	e009      	b.n	800490c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048f8:	f7fe fbd0 	bl	800309c <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d902      	bls.n	800490c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	73fb      	strb	r3, [r7, #15]
        break;
 800490a:	e005      	b.n	8004918 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800490c:	4b36      	ldr	r3, [pc, #216]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1ef      	bne.n	80048f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d15f      	bne.n	80049de <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d110      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004924:	4b30      	ldr	r3, [pc, #192]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800492c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6892      	ldr	r2, [r2, #8]
 8004934:	0211      	lsls	r1, r2, #8
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68d2      	ldr	r2, [r2, #12]
 800493a:	06d2      	lsls	r2, r2, #27
 800493c:	430a      	orrs	r2, r1
 800493e:	492a      	ldr	r1, [pc, #168]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004940:	4313      	orrs	r3, r2
 8004942:	610b      	str	r3, [r1, #16]
 8004944:	e027      	b.n	8004996 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d112      	bne.n	8004972 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800494c:	4b26      	ldr	r3, [pc, #152]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004954:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6892      	ldr	r2, [r2, #8]
 800495c:	0211      	lsls	r1, r2, #8
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6912      	ldr	r2, [r2, #16]
 8004962:	0852      	lsrs	r2, r2, #1
 8004964:	3a01      	subs	r2, #1
 8004966:	0552      	lsls	r2, r2, #21
 8004968:	430a      	orrs	r2, r1
 800496a:	491f      	ldr	r1, [pc, #124]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800496c:	4313      	orrs	r3, r2
 800496e:	610b      	str	r3, [r1, #16]
 8004970:	e011      	b.n	8004996 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004972:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800497a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6892      	ldr	r2, [r2, #8]
 8004982:	0211      	lsls	r1, r2, #8
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6952      	ldr	r2, [r2, #20]
 8004988:	0852      	lsrs	r2, r2, #1
 800498a:	3a01      	subs	r2, #1
 800498c:	0652      	lsls	r2, r2, #25
 800498e:	430a      	orrs	r2, r1
 8004990:	4915      	ldr	r1, [pc, #84]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004992:	4313      	orrs	r3, r2
 8004994:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004996:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a13      	ldr	r2, [pc, #76]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a2:	f7fe fb7b 	bl	800309c <HAL_GetTick>
 80049a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049a8:	e009      	b.n	80049be <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049aa:	f7fe fb77 	bl	800309c <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d902      	bls.n	80049be <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	73fb      	strb	r3, [r7, #15]
          break;
 80049bc:	e005      	b.n	80049ca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0ef      	beq.n	80049aa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	4903      	ldr	r1, [pc, #12]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40021000 	.word	0x40021000

080049ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e095      	b.n	8004b2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d108      	bne.n	8004a18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0e:	d009      	beq.n	8004a24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	61da      	str	r2, [r3, #28]
 8004a16:	e005      	b.n	8004a24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fb ffb4 	bl	80009ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a64:	d902      	bls.n	8004a6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	e002      	b.n	8004a72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a7a:	d007      	beq.n	8004a8c <HAL_SPI_Init+0xa0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a84:	d002      	beq.n	8004a8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ace:	ea42 0103 	orr.w	r1, r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	0c1b      	lsrs	r3, r3, #16
 8004ae8:	f003 0204 	and.w	r2, r3, #4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b08:	ea42 0103 	orr.w	r1, r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b088      	sub	sp, #32
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	603b      	str	r3, [r7, #0]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_SPI_Transmit+0x22>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e15f      	b.n	8004e14 <HAL_SPI_Transmit+0x2e2>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b5c:	f7fe fa9e 	bl	800309c <HAL_GetTick>
 8004b60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b62:	88fb      	ldrh	r3, [r7, #6]
 8004b64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d002      	beq.n	8004b78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
 8004b74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b76:	e148      	b.n	8004e0a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <HAL_SPI_Transmit+0x52>
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d102      	bne.n	8004b8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b88:	e13f      	b.n	8004e0a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	88fa      	ldrh	r2, [r7, #6]
 8004ba2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd4:	d10f      	bne.n	8004bf6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b40      	cmp	r3, #64	; 0x40
 8004c02:	d007      	beq.n	8004c14 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c1c:	d94f      	bls.n	8004cbe <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_SPI_Transmit+0xfa>
 8004c26:	8afb      	ldrh	r3, [r7, #22]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d142      	bne.n	8004cb2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	881a      	ldrh	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	1c9a      	adds	r2, r3, #2
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c50:	e02f      	b.n	8004cb2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d112      	bne.n	8004c86 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	881a      	ldrh	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	1c9a      	adds	r2, r3, #2
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c84:	e015      	b.n	8004cb2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c86:	f7fe fa09 	bl	800309c <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d803      	bhi.n	8004c9e <HAL_SPI_Transmit+0x16c>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9c:	d102      	bne.n	8004ca4 <HAL_SPI_Transmit+0x172>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004cb0:	e0ab      	b.n	8004e0a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1ca      	bne.n	8004c52 <HAL_SPI_Transmit+0x120>
 8004cbc:	e080      	b.n	8004dc0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_SPI_Transmit+0x19a>
 8004cc6:	8afb      	ldrh	r3, [r7, #22]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d174      	bne.n	8004db6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d912      	bls.n	8004cfc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	881a      	ldrh	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b02      	subs	r3, #2
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cfa:	e05c      	b.n	8004db6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d22:	e048      	b.n	8004db6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d12b      	bne.n	8004d8a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d912      	bls.n	8004d62 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	881a      	ldrh	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	1c9a      	adds	r2, r3, #2
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b02      	subs	r3, #2
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d60:	e029      	b.n	8004db6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	7812      	ldrb	r2, [r2, #0]
 8004d6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d88:	e015      	b.n	8004db6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d8a:	f7fe f987 	bl	800309c <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d803      	bhi.n	8004da2 <HAL_SPI_Transmit+0x270>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d102      	bne.n	8004da8 <HAL_SPI_Transmit+0x276>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004db4:	e029      	b.n	8004e0a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1b1      	bne.n	8004d24 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	6839      	ldr	r1, [r7, #0]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 fe0d 	bl	80059e4 <SPI_EndRxTxTransaction>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e003      	b.n	8004e0a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e12:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3720      	adds	r7, #32
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d002      	beq.n	8004e42 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e40:	e11a      	b.n	8005078 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e4a:	d112      	bne.n	8004e72 <HAL_SPI_Receive+0x56>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10e      	bne.n	8004e72 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2204      	movs	r2, #4
 8004e58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e5c:	88fa      	ldrh	r2, [r7, #6]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	4613      	mov	r3, r2
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f90e 	bl	800508a <HAL_SPI_TransmitReceive>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	e107      	b.n	8005082 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_SPI_Receive+0x64>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e100      	b.n	8005082 <HAL_SPI_Receive+0x266>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e88:	f7fe f908 	bl	800309c <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_SPI_Receive+0x7e>
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e9e:	e0eb      	b.n	8005078 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2204      	movs	r2, #4
 8004ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	88fa      	ldrh	r2, [r7, #6]
 8004eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eea:	d908      	bls.n	8004efe <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004efa:	605a      	str	r2, [r3, #4]
 8004efc:	e007      	b.n	8004f0e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f0c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f16:	d10f      	bne.n	8004f38 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	d007      	beq.n	8004f56 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f5e:	d86f      	bhi.n	8005040 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f60:	e034      	b.n	8004fcc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d117      	bne.n	8004fa0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f103 020c 	add.w	r2, r3, #12
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	7812      	ldrb	r2, [r2, #0]
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004f9e:	e015      	b.n	8004fcc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fa0:	f7fe f87c 	bl	800309c <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d803      	bhi.n	8004fb8 <HAL_SPI_Receive+0x19c>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d102      	bne.n	8004fbe <HAL_SPI_Receive+0x1a2>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004fca:	e055      	b.n	8005078 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1c4      	bne.n	8004f62 <HAL_SPI_Receive+0x146>
 8004fd8:	e038      	b.n	800504c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d115      	bne.n	8005014 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	b292      	uxth	r2, r2
 8004ff4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	1c9a      	adds	r2, r3, #2
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005012:	e015      	b.n	8005040 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005014:	f7fe f842 	bl	800309c <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d803      	bhi.n	800502c <HAL_SPI_Receive+0x210>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502a:	d102      	bne.n	8005032 <HAL_SPI_Receive+0x216>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800503e:	e01b      	b.n	8005078 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1c6      	bne.n	8004fda <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 fc6f 	bl	8005934 <SPI_EndRxTransaction>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	75fb      	strb	r3, [r7, #23]
 800506e:	e003      	b.n	8005078 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005080:	7dfb      	ldrb	r3, [r7, #23]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b08a      	sub	sp, #40	; 0x28
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005098:	2301      	movs	r3, #1
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x26>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e20a      	b.n	80054c6 <HAL_SPI_TransmitReceive+0x43c>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050b8:	f7fd fff0 	bl	800309c <HAL_GetTick>
 80050bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80050cc:	887b      	ldrh	r3, [r7, #2]
 80050ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80050d0:	887b      	ldrh	r3, [r7, #2]
 80050d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050d4:	7efb      	ldrb	r3, [r7, #27]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d00e      	beq.n	80050f8 <HAL_SPI_TransmitReceive+0x6e>
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e0:	d106      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x66>
 80050ea:	7efb      	ldrb	r3, [r7, #27]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d003      	beq.n	80050f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80050f0:	2302      	movs	r3, #2
 80050f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80050f6:	e1e0      	b.n	80054ba <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <HAL_SPI_TransmitReceive+0x80>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_SPI_TransmitReceive+0x80>
 8005104:	887b      	ldrh	r3, [r7, #2]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005110:	e1d3      	b.n	80054ba <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b04      	cmp	r3, #4
 800511c:	d003      	beq.n	8005126 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2205      	movs	r2, #5
 8005122:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	887a      	ldrh	r2, [r7, #2]
 8005136:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	887a      	ldrh	r2, [r7, #2]
 800513e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	887a      	ldrh	r2, [r7, #2]
 800514c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	887a      	ldrh	r2, [r7, #2]
 8005152:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005168:	d802      	bhi.n	8005170 <HAL_SPI_TransmitReceive+0xe6>
 800516a:	8a3b      	ldrh	r3, [r7, #16]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d908      	bls.n	8005182 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800517e:	605a      	str	r2, [r3, #4]
 8005180:	e007      	b.n	8005192 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005190:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519c:	2b40      	cmp	r3, #64	; 0x40
 800519e:	d007      	beq.n	80051b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051b8:	f240 8081 	bls.w	80052be <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_SPI_TransmitReceive+0x140>
 80051c4:	8a7b      	ldrh	r3, [r7, #18]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d16d      	bne.n	80052a6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	881a      	ldrh	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	1c9a      	adds	r2, r3, #2
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ee:	e05a      	b.n	80052a6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d11b      	bne.n	8005236 <HAL_SPI_TransmitReceive+0x1ac>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d016      	beq.n	8005236 <HAL_SPI_TransmitReceive+0x1ac>
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	2b01      	cmp	r3, #1
 800520c:	d113      	bne.n	8005236 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	881a      	ldrh	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	1c9a      	adds	r2, r3, #2
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	d11c      	bne.n	800527e <HAL_SPI_TransmitReceive+0x1f4>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d016      	beq.n	800527e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	b292      	uxth	r2, r2
 800525c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	1c9a      	adds	r2, r3, #2
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800527a:	2301      	movs	r3, #1
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800527e:	f7fd ff0d 	bl	800309c <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800528a:	429a      	cmp	r2, r3
 800528c:	d80b      	bhi.n	80052a6 <HAL_SPI_TransmitReceive+0x21c>
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d007      	beq.n	80052a6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80052a4:	e109      	b.n	80054ba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d19f      	bne.n	80051f0 <HAL_SPI_TransmitReceive+0x166>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d199      	bne.n	80051f0 <HAL_SPI_TransmitReceive+0x166>
 80052bc:	e0e3      	b.n	8005486 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_SPI_TransmitReceive+0x244>
 80052c6:	8a7b      	ldrh	r3, [r7, #18]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	f040 80cf 	bne.w	800546c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d912      	bls.n	80052fe <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	881a      	ldrh	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	1c9a      	adds	r2, r3, #2
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b02      	subs	r3, #2
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052fc:	e0b6      	b.n	800546c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	7812      	ldrb	r2, [r2, #0]
 800530a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005324:	e0a2      	b.n	800546c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b02      	cmp	r3, #2
 8005332:	d134      	bne.n	800539e <HAL_SPI_TransmitReceive+0x314>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d02f      	beq.n	800539e <HAL_SPI_TransmitReceive+0x314>
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	2b01      	cmp	r3, #1
 8005342:	d12c      	bne.n	800539e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	d912      	bls.n	8005374 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	881a      	ldrh	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	1c9a      	adds	r2, r3, #2
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b02      	subs	r3, #2
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005372:	e012      	b.n	800539a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	330c      	adds	r3, #12
 800537e:	7812      	ldrb	r2, [r2, #0]
 8005380:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d148      	bne.n	800543e <HAL_SPI_TransmitReceive+0x3b4>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d042      	beq.n	800543e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d923      	bls.n	800540c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	b292      	uxth	r2, r2
 80053d0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	1c9a      	adds	r2, r3, #2
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b02      	subs	r3, #2
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d81f      	bhi.n	800543a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	e016      	b.n	800543a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f103 020c 	add.w	r2, r3, #12
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	7812      	ldrb	r2, [r2, #0]
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800543a:	2301      	movs	r3, #1
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800543e:	f7fd fe2d 	bl	800309c <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544a:	429a      	cmp	r2, r3
 800544c:	d803      	bhi.n	8005456 <HAL_SPI_TransmitReceive+0x3cc>
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d102      	bne.n	800545c <HAL_SPI_TransmitReceive+0x3d2>
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	2b00      	cmp	r3, #0
 800545a:	d107      	bne.n	800546c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800546a:	e026      	b.n	80054ba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	f47f af57 	bne.w	8005326 <HAL_SPI_TransmitReceive+0x29c>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	f47f af50 	bne.w	8005326 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 faaa 	bl	80059e4 <SPI_EndRxTxTransaction>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b0:	e003      	b.n	80054ba <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3728      	adds	r7, #40	; 0x28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10e      	bne.n	8005510 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
    return;
 800550e:	e0ce      	b.n	80056ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <HAL_SPI_IRQHandler+0x5e>
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
    return;
 800552c:	e0bf      	b.n	80056ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <HAL_SPI_IRQHandler+0x7e>
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	d105      	bne.n	800554e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 80b0 	beq.w	80056ae <HAL_SPI_IRQHandler+0x1de>
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 80aa 	beq.w	80056ae <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d023      	beq.n	80055ac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b03      	cmp	r3, #3
 800556e:	d011      	beq.n	8005594 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005574:	f043 0204 	orr.w	r2, r3, #4
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	e00b      	b.n	80055ac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	693b      	ldr	r3, [r7, #16]
        return;
 80055aa:	e080      	b.n	80056ae <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d014      	beq.n	80055e0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ba:	f043 0201 	orr.w	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00c      	beq.n	8005604 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ee:	f043 0208 	orr.w	r2, r3, #8
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005608:	2b00      	cmp	r3, #0
 800560a:	d04f      	beq.n	80056ac <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800561a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <HAL_SPI_IRQHandler+0x168>
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d034      	beq.n	80056a2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0203 	bic.w	r2, r2, #3
 8005646:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564c:	2b00      	cmp	r3, #0
 800564e:	d011      	beq.n	8005674 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005654:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <HAL_SPI_IRQHandler+0x1e4>)
 8005656:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565c:	4618      	mov	r0, r3
 800565e:	f7fd fe5e 	bl	800331e <HAL_DMA_Abort_IT>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005678:	2b00      	cmp	r3, #0
 800567a:	d016      	beq.n	80056aa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005680:	4a0c      	ldr	r2, [pc, #48]	; (80056b4 <HAL_SPI_IRQHandler+0x1e4>)
 8005682:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005688:	4618      	mov	r0, r3
 800568a:	f7fd fe48 	bl	800331e <HAL_DMA_Abort_IT>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005698:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80056a0:	e003      	b.n	80056aa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f808 	bl	80056b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80056a8:	e000      	b.n	80056ac <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80056aa:	bf00      	nop
    return;
 80056ac:	bf00      	nop
  }
}
 80056ae:	3720      	adds	r7, #32
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	080056cd 	.word	0x080056cd

080056b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f7ff ffe5 	bl	80056b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005708:	f7fd fcc8 	bl	800309c <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	4413      	add	r3, r2
 8005716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005718:	f7fd fcc0 	bl	800309c <HAL_GetTick>
 800571c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800571e:	4b39      	ldr	r3, [pc, #228]	; (8005804 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	015b      	lsls	r3, r3, #5
 8005724:	0d1b      	lsrs	r3, r3, #20
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	fb02 f303 	mul.w	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800572e:	e054      	b.n	80057da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d050      	beq.n	80057da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005738:	f7fd fcb0 	bl	800309c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	429a      	cmp	r2, r3
 8005746:	d902      	bls.n	800574e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d13d      	bne.n	80057ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800575c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005766:	d111      	bne.n	800578c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005770:	d004      	beq.n	800577c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577a:	d107      	bne.n	800578c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800578a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005794:	d10f      	bne.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e017      	b.n	80057fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d19b      	bne.n	8005730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000000 	.word	0x20000000

08005808 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	; 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800581a:	f7fd fc3f 	bl	800309c <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	4413      	add	r3, r2
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800582a:	f7fd fc37 	bl	800309c <HAL_GetTick>
 800582e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005838:	4b3d      	ldr	r3, [pc, #244]	; (8005930 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	00da      	lsls	r2, r3, #3
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	0d1b      	lsrs	r3, r3, #20
 8005848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005850:	e060      	b.n	8005914 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005858:	d107      	bne.n	800586a <SPI_WaitFifoStateUntilTimeout+0x62>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005868:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d050      	beq.n	8005914 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005872:	f7fd fc13 	bl	800309c <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587e:	429a      	cmp	r2, r3
 8005880:	d902      	bls.n	8005888 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	d13d      	bne.n	8005904 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005896:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a0:	d111      	bne.n	80058c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058aa:	d004      	beq.n	80058b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b4:	d107      	bne.n	80058c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ce:	d10f      	bne.n	80058f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e010      	b.n	8005926 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3b01      	subs	r3, #1
 8005912:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4013      	ands	r3, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	429a      	cmp	r2, r3
 8005922:	d196      	bne.n	8005852 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3728      	adds	r7, #40	; 0x28
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000000 	.word	0x20000000

08005934 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005948:	d111      	bne.n	800596e <SPI_EndRxTransaction+0x3a>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005952:	d004      	beq.n	800595e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595c:	d107      	bne.n	800596e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800596c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2200      	movs	r2, #0
 8005976:	2180      	movs	r1, #128	; 0x80
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f7ff febd 	bl	80056f8 <SPI_WaitFlagStateUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d007      	beq.n	8005994 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e023      	b.n	80059dc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800599c:	d11d      	bne.n	80059da <SPI_EndRxTransaction+0xa6>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a6:	d004      	beq.n	80059b2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b0:	d113      	bne.n	80059da <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff ff22 	bl	8005808 <SPI_WaitFifoStateUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ce:	f043 0220 	orr.w	r2, r3, #32
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e000      	b.n	80059dc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff ff03 	bl	8005808 <SPI_WaitFifoStateUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0c:	f043 0220 	orr.w	r2, r3, #32
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e027      	b.n	8005a68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2180      	movs	r1, #128	; 0x80
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7ff fe68 	bl	80056f8 <SPI_WaitFlagStateUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a32:	f043 0220 	orr.w	r2, r3, #32
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e014      	b.n	8005a68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff fedc 	bl	8005808 <SPI_WaitFifoStateUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e000      	b.n	8005a68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e03c      	b.n	8005afc <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fa fff0 	bl	8000a7c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fa97 	bl	8005fe8 <USART_SetConfig>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e01b      	b.n	8005afc <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ad2:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ae2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fba5 	bl	8006244 <USART_CheckIdleState>
 8005afa:	4603      	mov	r3, r0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08a      	sub	sp, #40	; 0x28
 8005b08:	af02      	add	r7, sp, #8
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	4613      	mov	r3, r2
 8005b12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	f040 809a 	bne.w	8005c56 <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_USART_Transmit+0x2a>
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e092      	b.n	8005c58 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_USART_Transmit+0x3c>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e08b      	b.n	8005c58 <HAL_USART_Transmit+0x154>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2212      	movs	r2, #18
 8005b52:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b56:	f7fd faa1 	bl	800309c <HAL_GetTick>
 8005b5a:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	88fa      	ldrh	r2, [r7, #6]
 8005b60:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b70:	d108      	bne.n	8005b84 <HAL_USART_Transmit+0x80>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	e003      	b.n	8005b8c <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8005b8c:	e02b      	b.n	8005be6 <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2200      	movs	r2, #0
 8005b96:	2180      	movs	r1, #128	; 0x80
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f9ef 	bl	8005f7c <USART_WaitOnFlagUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e057      	b.n	8005c58 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10b      	bne.n	8005bc6 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	881a      	ldrh	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bba:	b292      	uxth	r2, r2
 8005bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	e008      	b.n	8005bd8 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	781a      	ldrb	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	b292      	uxth	r2, r2
 8005bd0:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1ce      	bne.n	8005b8e <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2140      	movs	r1, #64	; 0x40
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 f9be 	bl	8005f7c <USART_WaitOnFlagUntilTimeout>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e026      	b.n	8005c58 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2240      	movs	r2, #64	; 0x40
 8005c10:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2208      	movs	r2, #8
 8005c18:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	8b1b      	ldrh	r3, [r3, #24]
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0208 	orr.w	r2, r2, #8
 8005c2a:	b292      	uxth	r2, r2
 8005c2c:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	8b1b      	ldrh	r3, [r3, #24]
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0210 	orr.w	r2, r2, #16
 8005c3e:	b292      	uxth	r2, r2
 8005c40:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e000      	b.n	8005c58 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005c56:	2302      	movs	r3, #2
  }
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3720      	adds	r7, #32
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	617b      	str	r3, [r7, #20]
  /* If no error occurs */
#if defined(USART_CR2_SLVEN)
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
                                      USART_ISR_UDR));
#else
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c86:	4013      	ands	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
#endif /* USART_CR2_SLVEN */
  if (errorflags == 0U)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d113      	bne.n	8005cb8 <HAL_USART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00e      	beq.n	8005cb8 <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d009      	beq.n	8005cb8 <HAL_USART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (husart->RxISR != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 810d 	beq.w	8005ec8 <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
      }
      return;
 8005cb6:	e107      	b.n	8005ec8 <HAL_USART_IRQHandler+0x268>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
#else
  if ((errorflags != 0U)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 80e3 	beq.w	8005e86 <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d105      	bne.n	8005cd6 <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 80d8 	beq.w	8005e86 <HAL_USART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00e      	beq.n	8005cfe <HAL_USART_IRQHandler+0x9e>
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf6:	f043 0201 	orr.w	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00e      	beq.n	8005d26 <HAL_USART_IRQHandler+0xc6>
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2202      	movs	r2, #2
 8005d18:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1e:	f043 0204 	orr.w	r2, r3, #4
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00e      	beq.n	8005d4e <HAL_USART_IRQHandler+0xee>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2204      	movs	r2, #4
 8005d40:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d46:	f043 0202 	orr.w	r2, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	64da      	str	r2, [r3, #76]	; 0x4c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d013      	beq.n	8005d80 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d104      	bne.n	8005d6c <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d009      	beq.n	8005d80 <HAL_USART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2208      	movs	r2, #8
 8005d72:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d78:	f043 0208 	orr.w	r2, r3, #8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00f      	beq.n	8005daa <HAL_USART_IRQHandler+0x14a>
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d9c:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
#endif /* USART_CR2_SLVEN */

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 808c 	beq.w	8005ecc <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00c      	beq.n	8005dd8 <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d007      	beq.n	8005dd8 <HAL_USART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (husart->RxISR != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b40      	cmp	r3, #64	; 0x40
 8005dee:	d002      	beq.n	8005df6 <HAL_USART_IRQHandler+0x196>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d03e      	beq.n	8005e74 <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f88e 	bl	8005f18 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b40      	cmp	r3, #64	; 0x40
 8005e08:	d130      	bne.n	8005e6c <HAL_USART_IRQHandler+0x20c>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e18:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d008      	beq.n	8005e34 <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	2200      	movs	r2, #0
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fd fa75 	bl	800331e <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d013      	beq.n	8005e64 <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e40:	4a25      	ldr	r2, [pc, #148]	; (8005ed8 <HAL_USART_IRQHandler+0x278>)
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fd fa68 	bl	800331e <HAL_DMA_Abort_IT>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d016      	beq.n	8005e82 <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e5e:	4610      	mov	r0, r2
 8005e60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005e62:	e00e      	b.n	8005e82 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f84d 	bl	8005f04 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005e6a:	e00a      	b.n	8005e82 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f849 	bl	8005f04 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005e72:	e006      	b.n	8005e82 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f845 	bl	8005f04 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    return;
 8005e80:	e024      	b.n	8005ecc <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005e82:	bf00      	nop
    return;
 8005e84:	e022      	b.n	8005ecc <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00d      	beq.n	8005eac <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d008      	beq.n	8005eac <HAL_USART_IRQHandler+0x24c>
#endif /* USART_CR1_FIFOEN */
  {
    if (husart->TxISR != NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d016      	beq.n	8005ed0 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
    }
    return;
 8005eaa:	e011      	b.n	8005ed0 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00d      	beq.n	8005ed2 <HAL_USART_IRQHandler+0x272>
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fa02 	bl	80062ca <USART_EndTransmit_IT>
    return;
 8005ec6:	e004      	b.n	8005ed2 <HAL_USART_IRQHandler+0x272>
      return;
 8005ec8:	bf00      	nop
 8005eca:	e002      	b.n	8005ed2 <HAL_USART_IRQHandler+0x272>
    return;
 8005ecc:	bf00      	nop
 8005ece:	e000      	b.n	8005ed2 <HAL_USART_IRQHandler+0x272>
    return;
 8005ed0:	bf00      	nop
    HAL_USARTEx_RxFifoFullCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005ed2:	3720      	adds	r7, #32
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	08005f55 	.word	0x08005f55

08005edc <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005f2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0U;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff ffc8 	bl	8005f04 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005f8c:	e018      	b.n	8005fc0 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f94:	d014      	beq.n	8005fc0 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f96:	f7fd f881 	bl	800309c <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d302      	bcc.n	8005fac <USART_WaitOnFlagUntilTimeout+0x30>
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d109      	bne.n	8005fc0 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e00f      	b.n	8005fe0 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69da      	ldr	r2, [r3, #28]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	bf0c      	ite	eq
 8005fd0:	2301      	moveq	r3, #1
 8005fd2:	2300      	movne	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d0d7      	beq.n	8005f8e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	4b87      	ldr	r3, [pc, #540]	; (8006234 <USART_SetConfig+0x24c>)
 8006016:	4013      	ands	r3, r2
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	6979      	ldr	r1, [r7, #20]
 800601e:	430b      	orrs	r3, r1
 8006020:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8006022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006026:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	4313      	orrs	r3, r2
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	430a      	orrs	r2, r1
 800605e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a74      	ldr	r2, [pc, #464]	; (8006238 <USART_SetConfig+0x250>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d121      	bne.n	80060ae <USART_SetConfig+0xc6>
 800606a:	4b74      	ldr	r3, [pc, #464]	; (800623c <USART_SetConfig+0x254>)
 800606c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	2b03      	cmp	r3, #3
 8006076:	d817      	bhi.n	80060a8 <USART_SetConfig+0xc0>
 8006078:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <USART_SetConfig+0x98>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	08006091 	.word	0x08006091
 8006084:	0800609d 	.word	0x0800609d
 8006088:	08006097 	.word	0x08006097
 800608c:	080060a3 	.word	0x080060a3
 8006090:	2301      	movs	r3, #1
 8006092:	77fb      	strb	r3, [r7, #31]
 8006094:	e045      	b.n	8006122 <USART_SetConfig+0x13a>
 8006096:	2302      	movs	r3, #2
 8006098:	77fb      	strb	r3, [r7, #31]
 800609a:	e042      	b.n	8006122 <USART_SetConfig+0x13a>
 800609c:	2304      	movs	r3, #4
 800609e:	77fb      	strb	r3, [r7, #31]
 80060a0:	e03f      	b.n	8006122 <USART_SetConfig+0x13a>
 80060a2:	2308      	movs	r3, #8
 80060a4:	77fb      	strb	r3, [r7, #31]
 80060a6:	e03c      	b.n	8006122 <USART_SetConfig+0x13a>
 80060a8:	2310      	movs	r3, #16
 80060aa:	77fb      	strb	r3, [r7, #31]
 80060ac:	e039      	b.n	8006122 <USART_SetConfig+0x13a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a63      	ldr	r2, [pc, #396]	; (8006240 <USART_SetConfig+0x258>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d132      	bne.n	800611e <USART_SetConfig+0x136>
 80060b8:	4b60      	ldr	r3, [pc, #384]	; (800623c <USART_SetConfig+0x254>)
 80060ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060be:	f003 030c 	and.w	r3, r3, #12
 80060c2:	2b0c      	cmp	r3, #12
 80060c4:	d828      	bhi.n	8006118 <USART_SetConfig+0x130>
 80060c6:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <USART_SetConfig+0xe4>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	08006101 	.word	0x08006101
 80060d0:	08006119 	.word	0x08006119
 80060d4:	08006119 	.word	0x08006119
 80060d8:	08006119 	.word	0x08006119
 80060dc:	0800610d 	.word	0x0800610d
 80060e0:	08006119 	.word	0x08006119
 80060e4:	08006119 	.word	0x08006119
 80060e8:	08006119 	.word	0x08006119
 80060ec:	08006107 	.word	0x08006107
 80060f0:	08006119 	.word	0x08006119
 80060f4:	08006119 	.word	0x08006119
 80060f8:	08006119 	.word	0x08006119
 80060fc:	08006113 	.word	0x08006113
 8006100:	2300      	movs	r3, #0
 8006102:	77fb      	strb	r3, [r7, #31]
 8006104:	e00d      	b.n	8006122 <USART_SetConfig+0x13a>
 8006106:	2302      	movs	r3, #2
 8006108:	77fb      	strb	r3, [r7, #31]
 800610a:	e00a      	b.n	8006122 <USART_SetConfig+0x13a>
 800610c:	2304      	movs	r3, #4
 800610e:	77fb      	strb	r3, [r7, #31]
 8006110:	e007      	b.n	8006122 <USART_SetConfig+0x13a>
 8006112:	2308      	movs	r3, #8
 8006114:	77fb      	strb	r3, [r7, #31]
 8006116:	e004      	b.n	8006122 <USART_SetConfig+0x13a>
 8006118:	2310      	movs	r3, #16
 800611a:	77fb      	strb	r3, [r7, #31]
 800611c:	e001      	b.n	8006122 <USART_SetConfig+0x13a>
 800611e:	2310      	movs	r3, #16
 8006120:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8006122:	7ffb      	ldrb	r3, [r7, #31]
 8006124:	2b08      	cmp	r3, #8
 8006126:	d85a      	bhi.n	80061de <USART_SetConfig+0x1f6>
 8006128:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <USART_SetConfig+0x148>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	08006155 	.word	0x08006155
 8006134:	08006173 	.word	0x08006173
 8006138:	08006191 	.word	0x08006191
 800613c:	080061df 	.word	0x080061df
 8006140:	080061ab 	.word	0x080061ab
 8006144:	080061df 	.word	0x080061df
 8006148:	080061df 	.word	0x080061df
 800614c:	080061df 	.word	0x080061df
 8006150:	080061c9 	.word	0x080061c9
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8006154:	f7fe f8c6 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
 8006158:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	005a      	lsls	r2, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	441a      	add	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	fbb2 f3f3 	udiv	r3, r2, r3
 800616e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8006170:	e038      	b.n	80061e4 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8006172:	f7fe f8cd 	bl	8004310 <HAL_RCC_GetPCLK2Freq>
 8006176:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	005a      	lsls	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	085b      	lsrs	r3, r3, #1
 8006182:	441a      	add	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	fbb2 f3f3 	udiv	r3, r2, r3
 800618c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800618e:	e029      	b.n	80061e4 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	085b      	lsrs	r3, r3, #1
 8006196:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800619a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6852      	ldr	r2, [r2, #4]
 80061a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80061a8:	e01c      	b.n	80061e4 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80061aa:	f7fe f803 	bl	80041b4 <HAL_RCC_GetSysClockFreq>
 80061ae:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	005a      	lsls	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	085b      	lsrs	r3, r3, #1
 80061ba:	441a      	add	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80061c6:	e00d      	b.n	80061e4 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	085b      	lsrs	r3, r3, #1
 80061ce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80061dc:	e002      	b.n	80061e4 <USART_SetConfig+0x1fc>
    default:
      ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	77bb      	strb	r3, [r7, #30]
      break;
 80061e2:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	2b0f      	cmp	r3, #15
 80061e8:	d916      	bls.n	8006218 <USART_SetConfig+0x230>
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f0:	d212      	bcs.n	8006218 <USART_SetConfig+0x230>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f023 030f 	bic.w	r3, r3, #15
 80061fa:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	085b      	lsrs	r3, r3, #1
 8006200:	b29b      	uxth	r3, r3
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	b29a      	uxth	r2, r3
 8006208:	89fb      	ldrh	r3, [r7, #14]
 800620a:	4313      	orrs	r3, r2
 800620c:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	89fa      	ldrh	r2, [r7, #14]
 8006214:	60da      	str	r2, [r3, #12]
 8006216:	e001      	b.n	800621c <USART_SetConfig+0x234>
  }
  else
  {
    ret = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8006228:	7fbb      	ldrb	r3, [r7, #30]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3720      	adds	r7, #32
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	efff69f3 	.word	0xefff69f3
 8006238:	40013800 	.word	0x40013800
 800623c:	40021000 	.word	0x40021000
 8006240:	40004400 	.word	0x40004400

08006244 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af02      	add	r7, sp, #8
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006252:	f7fc ff23 	bl	800309c <HAL_GetTick>
 8006256:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b08      	cmp	r3, #8
 8006264:	d10e      	bne.n	8006284 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8006266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff fe81 	bl	8005f7c <USART_WaitOnFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e01e      	b.n	80062c2 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b04      	cmp	r3, #4
 8006290:	d10e      	bne.n	80062b0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8006292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff fe6b 	bl	8005f7c <USART_WaitOnFlagUntilTimeout>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e008      	b.n	80062c2 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e0:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0201 	bic.w	r2, r2, #1
 80062f0:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	63da      	str	r2, [r3, #60]	; 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b12      	cmp	r3, #18
 8006302:	d115      	bne.n	8006330 <USART_EndTransmit_IT+0x66>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2208      	movs	r2, #8
 800630a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	8b1b      	ldrh	r3, [r3, #24]
 8006312:	b29a      	uxth	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0208 	orr.w	r2, r2, #8
 800631c:	b292      	uxth	r2, r2
 800631e:	831a      	strh	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff fdd7 	bl	8005edc <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800632e:	e00b      	b.n	8006348 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    HAL_USART_TxRxCpltCallback(husart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fdd4 	bl	8005ef0 <HAL_USART_TxRxCpltCallback>
}
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <__assert_func>:
 8006350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006352:	4614      	mov	r4, r2
 8006354:	461a      	mov	r2, r3
 8006356:	4b09      	ldr	r3, [pc, #36]	; (800637c <__assert_func+0x2c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4605      	mov	r5, r0
 800635c:	68d8      	ldr	r0, [r3, #12]
 800635e:	b14c      	cbz	r4, 8006374 <__assert_func+0x24>
 8006360:	4b07      	ldr	r3, [pc, #28]	; (8006380 <__assert_func+0x30>)
 8006362:	9100      	str	r1, [sp, #0]
 8006364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006368:	4906      	ldr	r1, [pc, #24]	; (8006384 <__assert_func+0x34>)
 800636a:	462b      	mov	r3, r5
 800636c:	f000 f8b2 	bl	80064d4 <fiprintf>
 8006370:	f000 f9dd 	bl	800672e <abort>
 8006374:	4b04      	ldr	r3, [pc, #16]	; (8006388 <__assert_func+0x38>)
 8006376:	461c      	mov	r4, r3
 8006378:	e7f3      	b.n	8006362 <__assert_func+0x12>
 800637a:	bf00      	nop
 800637c:	20000164 	.word	0x20000164
 8006380:	08007a0f 	.word	0x08007a0f
 8006384:	08007a1c 	.word	0x08007a1c
 8006388:	08007a4a 	.word	0x08007a4a

0800638c <std>:
 800638c:	2300      	movs	r3, #0
 800638e:	b510      	push	{r4, lr}
 8006390:	4604      	mov	r4, r0
 8006392:	e9c0 3300 	strd	r3, r3, [r0]
 8006396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800639a:	6083      	str	r3, [r0, #8]
 800639c:	8181      	strh	r1, [r0, #12]
 800639e:	6643      	str	r3, [r0, #100]	; 0x64
 80063a0:	81c2      	strh	r2, [r0, #14]
 80063a2:	6183      	str	r3, [r0, #24]
 80063a4:	4619      	mov	r1, r3
 80063a6:	2208      	movs	r2, #8
 80063a8:	305c      	adds	r0, #92	; 0x5c
 80063aa:	f000 f936 	bl	800661a <memset>
 80063ae:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <std+0x58>)
 80063b0:	6263      	str	r3, [r4, #36]	; 0x24
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <std+0x5c>)
 80063b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80063b6:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <std+0x60>)
 80063b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063ba:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <std+0x64>)
 80063bc:	6323      	str	r3, [r4, #48]	; 0x30
 80063be:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <std+0x68>)
 80063c0:	6224      	str	r4, [r4, #32]
 80063c2:	429c      	cmp	r4, r3
 80063c4:	d006      	beq.n	80063d4 <std+0x48>
 80063c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80063ca:	4294      	cmp	r4, r2
 80063cc:	d002      	beq.n	80063d4 <std+0x48>
 80063ce:	33d0      	adds	r3, #208	; 0xd0
 80063d0:	429c      	cmp	r4, r3
 80063d2:	d105      	bne.n	80063e0 <std+0x54>
 80063d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80063d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063dc:	f000 b996 	b.w	800670c <__retarget_lock_init_recursive>
 80063e0:	bd10      	pop	{r4, pc}
 80063e2:	bf00      	nop
 80063e4:	08006575 	.word	0x08006575
 80063e8:	08006597 	.word	0x08006597
 80063ec:	080065cf 	.word	0x080065cf
 80063f0:	080065f3 	.word	0x080065f3
 80063f4:	200002b4 	.word	0x200002b4

080063f8 <stdio_exit_handler>:
 80063f8:	4a02      	ldr	r2, [pc, #8]	; (8006404 <stdio_exit_handler+0xc>)
 80063fa:	4903      	ldr	r1, [pc, #12]	; (8006408 <stdio_exit_handler+0x10>)
 80063fc:	4803      	ldr	r0, [pc, #12]	; (800640c <stdio_exit_handler+0x14>)
 80063fe:	f000 b87b 	b.w	80064f8 <_fwalk_sglue>
 8006402:	bf00      	nop
 8006404:	2000010c 	.word	0x2000010c
 8006408:	08007291 	.word	0x08007291
 800640c:	20000118 	.word	0x20000118

08006410 <cleanup_stdio>:
 8006410:	6841      	ldr	r1, [r0, #4]
 8006412:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <cleanup_stdio+0x34>)
 8006414:	4299      	cmp	r1, r3
 8006416:	b510      	push	{r4, lr}
 8006418:	4604      	mov	r4, r0
 800641a:	d001      	beq.n	8006420 <cleanup_stdio+0x10>
 800641c:	f000 ff38 	bl	8007290 <_fflush_r>
 8006420:	68a1      	ldr	r1, [r4, #8]
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <cleanup_stdio+0x38>)
 8006424:	4299      	cmp	r1, r3
 8006426:	d002      	beq.n	800642e <cleanup_stdio+0x1e>
 8006428:	4620      	mov	r0, r4
 800642a:	f000 ff31 	bl	8007290 <_fflush_r>
 800642e:	68e1      	ldr	r1, [r4, #12]
 8006430:	4b06      	ldr	r3, [pc, #24]	; (800644c <cleanup_stdio+0x3c>)
 8006432:	4299      	cmp	r1, r3
 8006434:	d004      	beq.n	8006440 <cleanup_stdio+0x30>
 8006436:	4620      	mov	r0, r4
 8006438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800643c:	f000 bf28 	b.w	8007290 <_fflush_r>
 8006440:	bd10      	pop	{r4, pc}
 8006442:	bf00      	nop
 8006444:	200002b4 	.word	0x200002b4
 8006448:	2000031c 	.word	0x2000031c
 800644c:	20000384 	.word	0x20000384

08006450 <global_stdio_init.part.0>:
 8006450:	b510      	push	{r4, lr}
 8006452:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <global_stdio_init.part.0+0x30>)
 8006454:	4c0b      	ldr	r4, [pc, #44]	; (8006484 <global_stdio_init.part.0+0x34>)
 8006456:	4a0c      	ldr	r2, [pc, #48]	; (8006488 <global_stdio_init.part.0+0x38>)
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	4620      	mov	r0, r4
 800645c:	2200      	movs	r2, #0
 800645e:	2104      	movs	r1, #4
 8006460:	f7ff ff94 	bl	800638c <std>
 8006464:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006468:	2201      	movs	r2, #1
 800646a:	2109      	movs	r1, #9
 800646c:	f7ff ff8e 	bl	800638c <std>
 8006470:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006474:	2202      	movs	r2, #2
 8006476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800647a:	2112      	movs	r1, #18
 800647c:	f7ff bf86 	b.w	800638c <std>
 8006480:	200003ec 	.word	0x200003ec
 8006484:	200002b4 	.word	0x200002b4
 8006488:	080063f9 	.word	0x080063f9

0800648c <__sfp_lock_acquire>:
 800648c:	4801      	ldr	r0, [pc, #4]	; (8006494 <__sfp_lock_acquire+0x8>)
 800648e:	f000 b93e 	b.w	800670e <__retarget_lock_acquire_recursive>
 8006492:	bf00      	nop
 8006494:	200003f5 	.word	0x200003f5

08006498 <__sfp_lock_release>:
 8006498:	4801      	ldr	r0, [pc, #4]	; (80064a0 <__sfp_lock_release+0x8>)
 800649a:	f000 b939 	b.w	8006710 <__retarget_lock_release_recursive>
 800649e:	bf00      	nop
 80064a0:	200003f5 	.word	0x200003f5

080064a4 <__sinit>:
 80064a4:	b510      	push	{r4, lr}
 80064a6:	4604      	mov	r4, r0
 80064a8:	f7ff fff0 	bl	800648c <__sfp_lock_acquire>
 80064ac:	6a23      	ldr	r3, [r4, #32]
 80064ae:	b11b      	cbz	r3, 80064b8 <__sinit+0x14>
 80064b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b4:	f7ff bff0 	b.w	8006498 <__sfp_lock_release>
 80064b8:	4b04      	ldr	r3, [pc, #16]	; (80064cc <__sinit+0x28>)
 80064ba:	6223      	str	r3, [r4, #32]
 80064bc:	4b04      	ldr	r3, [pc, #16]	; (80064d0 <__sinit+0x2c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1f5      	bne.n	80064b0 <__sinit+0xc>
 80064c4:	f7ff ffc4 	bl	8006450 <global_stdio_init.part.0>
 80064c8:	e7f2      	b.n	80064b0 <__sinit+0xc>
 80064ca:	bf00      	nop
 80064cc:	08006411 	.word	0x08006411
 80064d0:	200003ec 	.word	0x200003ec

080064d4 <fiprintf>:
 80064d4:	b40e      	push	{r1, r2, r3}
 80064d6:	b503      	push	{r0, r1, lr}
 80064d8:	4601      	mov	r1, r0
 80064da:	ab03      	add	r3, sp, #12
 80064dc:	4805      	ldr	r0, [pc, #20]	; (80064f4 <fiprintf+0x20>)
 80064de:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e2:	6800      	ldr	r0, [r0, #0]
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	f000 fba3 	bl	8006c30 <_vfiprintf_r>
 80064ea:	b002      	add	sp, #8
 80064ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80064f0:	b003      	add	sp, #12
 80064f2:	4770      	bx	lr
 80064f4:	20000164 	.word	0x20000164

080064f8 <_fwalk_sglue>:
 80064f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064fc:	4607      	mov	r7, r0
 80064fe:	4688      	mov	r8, r1
 8006500:	4614      	mov	r4, r2
 8006502:	2600      	movs	r6, #0
 8006504:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006508:	f1b9 0901 	subs.w	r9, r9, #1
 800650c:	d505      	bpl.n	800651a <_fwalk_sglue+0x22>
 800650e:	6824      	ldr	r4, [r4, #0]
 8006510:	2c00      	cmp	r4, #0
 8006512:	d1f7      	bne.n	8006504 <_fwalk_sglue+0xc>
 8006514:	4630      	mov	r0, r6
 8006516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800651a:	89ab      	ldrh	r3, [r5, #12]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d907      	bls.n	8006530 <_fwalk_sglue+0x38>
 8006520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006524:	3301      	adds	r3, #1
 8006526:	d003      	beq.n	8006530 <_fwalk_sglue+0x38>
 8006528:	4629      	mov	r1, r5
 800652a:	4638      	mov	r0, r7
 800652c:	47c0      	blx	r8
 800652e:	4306      	orrs	r6, r0
 8006530:	3568      	adds	r5, #104	; 0x68
 8006532:	e7e9      	b.n	8006508 <_fwalk_sglue+0x10>

08006534 <siprintf>:
 8006534:	b40e      	push	{r1, r2, r3}
 8006536:	b500      	push	{lr}
 8006538:	b09c      	sub	sp, #112	; 0x70
 800653a:	ab1d      	add	r3, sp, #116	; 0x74
 800653c:	9002      	str	r0, [sp, #8]
 800653e:	9006      	str	r0, [sp, #24]
 8006540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006544:	4809      	ldr	r0, [pc, #36]	; (800656c <siprintf+0x38>)
 8006546:	9107      	str	r1, [sp, #28]
 8006548:	9104      	str	r1, [sp, #16]
 800654a:	4909      	ldr	r1, [pc, #36]	; (8006570 <siprintf+0x3c>)
 800654c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006550:	9105      	str	r1, [sp, #20]
 8006552:	6800      	ldr	r0, [r0, #0]
 8006554:	9301      	str	r3, [sp, #4]
 8006556:	a902      	add	r1, sp, #8
 8006558:	f000 fa42 	bl	80069e0 <_svfiprintf_r>
 800655c:	9b02      	ldr	r3, [sp, #8]
 800655e:	2200      	movs	r2, #0
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	b01c      	add	sp, #112	; 0x70
 8006564:	f85d eb04 	ldr.w	lr, [sp], #4
 8006568:	b003      	add	sp, #12
 800656a:	4770      	bx	lr
 800656c:	20000164 	.word	0x20000164
 8006570:	ffff0208 	.word	0xffff0208

08006574 <__sread>:
 8006574:	b510      	push	{r4, lr}
 8006576:	460c      	mov	r4, r1
 8006578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800657c:	f000 f878 	bl	8006670 <_read_r>
 8006580:	2800      	cmp	r0, #0
 8006582:	bfab      	itete	ge
 8006584:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006586:	89a3      	ldrhlt	r3, [r4, #12]
 8006588:	181b      	addge	r3, r3, r0
 800658a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800658e:	bfac      	ite	ge
 8006590:	6563      	strge	r3, [r4, #84]	; 0x54
 8006592:	81a3      	strhlt	r3, [r4, #12]
 8006594:	bd10      	pop	{r4, pc}

08006596 <__swrite>:
 8006596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800659a:	461f      	mov	r7, r3
 800659c:	898b      	ldrh	r3, [r1, #12]
 800659e:	05db      	lsls	r3, r3, #23
 80065a0:	4605      	mov	r5, r0
 80065a2:	460c      	mov	r4, r1
 80065a4:	4616      	mov	r6, r2
 80065a6:	d505      	bpl.n	80065b4 <__swrite+0x1e>
 80065a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ac:	2302      	movs	r3, #2
 80065ae:	2200      	movs	r2, #0
 80065b0:	f000 f84c 	bl	800664c <_lseek_r>
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065be:	81a3      	strh	r3, [r4, #12]
 80065c0:	4632      	mov	r2, r6
 80065c2:	463b      	mov	r3, r7
 80065c4:	4628      	mov	r0, r5
 80065c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065ca:	f000 b863 	b.w	8006694 <_write_r>

080065ce <__sseek>:
 80065ce:	b510      	push	{r4, lr}
 80065d0:	460c      	mov	r4, r1
 80065d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d6:	f000 f839 	bl	800664c <_lseek_r>
 80065da:	1c43      	adds	r3, r0, #1
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	bf15      	itete	ne
 80065e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80065e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065ea:	81a3      	strheq	r3, [r4, #12]
 80065ec:	bf18      	it	ne
 80065ee:	81a3      	strhne	r3, [r4, #12]
 80065f0:	bd10      	pop	{r4, pc}

080065f2 <__sclose>:
 80065f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f6:	f000 b819 	b.w	800662c <_close_r>

080065fa <memcmp>:
 80065fa:	b510      	push	{r4, lr}
 80065fc:	3901      	subs	r1, #1
 80065fe:	4402      	add	r2, r0
 8006600:	4290      	cmp	r0, r2
 8006602:	d101      	bne.n	8006608 <memcmp+0xe>
 8006604:	2000      	movs	r0, #0
 8006606:	e005      	b.n	8006614 <memcmp+0x1a>
 8006608:	7803      	ldrb	r3, [r0, #0]
 800660a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800660e:	42a3      	cmp	r3, r4
 8006610:	d001      	beq.n	8006616 <memcmp+0x1c>
 8006612:	1b18      	subs	r0, r3, r4
 8006614:	bd10      	pop	{r4, pc}
 8006616:	3001      	adds	r0, #1
 8006618:	e7f2      	b.n	8006600 <memcmp+0x6>

0800661a <memset>:
 800661a:	4402      	add	r2, r0
 800661c:	4603      	mov	r3, r0
 800661e:	4293      	cmp	r3, r2
 8006620:	d100      	bne.n	8006624 <memset+0xa>
 8006622:	4770      	bx	lr
 8006624:	f803 1b01 	strb.w	r1, [r3], #1
 8006628:	e7f9      	b.n	800661e <memset+0x4>
	...

0800662c <_close_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4d06      	ldr	r5, [pc, #24]	; (8006648 <_close_r+0x1c>)
 8006630:	2300      	movs	r3, #0
 8006632:	4604      	mov	r4, r0
 8006634:	4608      	mov	r0, r1
 8006636:	602b      	str	r3, [r5, #0]
 8006638:	f7fa fb2b 	bl	8000c92 <_close>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_close_r+0x1a>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_close_r+0x1a>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	200003f0 	.word	0x200003f0

0800664c <_lseek_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d07      	ldr	r5, [pc, #28]	; (800666c <_lseek_r+0x20>)
 8006650:	4604      	mov	r4, r0
 8006652:	4608      	mov	r0, r1
 8006654:	4611      	mov	r1, r2
 8006656:	2200      	movs	r2, #0
 8006658:	602a      	str	r2, [r5, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	f7fa fb40 	bl	8000ce0 <_lseek>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_lseek_r+0x1e>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	b103      	cbz	r3, 800666a <_lseek_r+0x1e>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	200003f0 	.word	0x200003f0

08006670 <_read_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d07      	ldr	r5, [pc, #28]	; (8006690 <_read_r+0x20>)
 8006674:	4604      	mov	r4, r0
 8006676:	4608      	mov	r0, r1
 8006678:	4611      	mov	r1, r2
 800667a:	2200      	movs	r2, #0
 800667c:	602a      	str	r2, [r5, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	f7fa face 	bl	8000c20 <_read>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <_read_r+0x1e>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	b103      	cbz	r3, 800668e <_read_r+0x1e>
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	200003f0 	.word	0x200003f0

08006694 <_write_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4d07      	ldr	r5, [pc, #28]	; (80066b4 <_write_r+0x20>)
 8006698:	4604      	mov	r4, r0
 800669a:	4608      	mov	r0, r1
 800669c:	4611      	mov	r1, r2
 800669e:	2200      	movs	r2, #0
 80066a0:	602a      	str	r2, [r5, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	f7fa fad9 	bl	8000c5a <_write>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_write_r+0x1e>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_write_r+0x1e>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	200003f0 	.word	0x200003f0

080066b8 <__errno>:
 80066b8:	4b01      	ldr	r3, [pc, #4]	; (80066c0 <__errno+0x8>)
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20000164 	.word	0x20000164

080066c4 <__libc_init_array>:
 80066c4:	b570      	push	{r4, r5, r6, lr}
 80066c6:	4d0d      	ldr	r5, [pc, #52]	; (80066fc <__libc_init_array+0x38>)
 80066c8:	4c0d      	ldr	r4, [pc, #52]	; (8006700 <__libc_init_array+0x3c>)
 80066ca:	1b64      	subs	r4, r4, r5
 80066cc:	10a4      	asrs	r4, r4, #2
 80066ce:	2600      	movs	r6, #0
 80066d0:	42a6      	cmp	r6, r4
 80066d2:	d109      	bne.n	80066e8 <__libc_init_array+0x24>
 80066d4:	4d0b      	ldr	r5, [pc, #44]	; (8006704 <__libc_init_array+0x40>)
 80066d6:	4c0c      	ldr	r4, [pc, #48]	; (8006708 <__libc_init_array+0x44>)
 80066d8:	f000 ffc2 	bl	8007660 <_init>
 80066dc:	1b64      	subs	r4, r4, r5
 80066de:	10a4      	asrs	r4, r4, #2
 80066e0:	2600      	movs	r6, #0
 80066e2:	42a6      	cmp	r6, r4
 80066e4:	d105      	bne.n	80066f2 <__libc_init_array+0x2e>
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ec:	4798      	blx	r3
 80066ee:	3601      	adds	r6, #1
 80066f0:	e7ee      	b.n	80066d0 <__libc_init_array+0xc>
 80066f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f6:	4798      	blx	r3
 80066f8:	3601      	adds	r6, #1
 80066fa:	e7f2      	b.n	80066e2 <__libc_init_array+0x1e>
 80066fc:	08007a88 	.word	0x08007a88
 8006700:	08007a88 	.word	0x08007a88
 8006704:	08007a88 	.word	0x08007a88
 8006708:	08007a8c 	.word	0x08007a8c

0800670c <__retarget_lock_init_recursive>:
 800670c:	4770      	bx	lr

0800670e <__retarget_lock_acquire_recursive>:
 800670e:	4770      	bx	lr

08006710 <__retarget_lock_release_recursive>:
 8006710:	4770      	bx	lr

08006712 <memcpy>:
 8006712:	440a      	add	r2, r1
 8006714:	4291      	cmp	r1, r2
 8006716:	f100 33ff 	add.w	r3, r0, #4294967295
 800671a:	d100      	bne.n	800671e <memcpy+0xc>
 800671c:	4770      	bx	lr
 800671e:	b510      	push	{r4, lr}
 8006720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006728:	4291      	cmp	r1, r2
 800672a:	d1f9      	bne.n	8006720 <memcpy+0xe>
 800672c:	bd10      	pop	{r4, pc}

0800672e <abort>:
 800672e:	b508      	push	{r3, lr}
 8006730:	2006      	movs	r0, #6
 8006732:	f000 fead 	bl	8007490 <raise>
 8006736:	2001      	movs	r0, #1
 8006738:	f7fa fa68 	bl	8000c0c <_exit>

0800673c <_free_r>:
 800673c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800673e:	2900      	cmp	r1, #0
 8006740:	d044      	beq.n	80067cc <_free_r+0x90>
 8006742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006746:	9001      	str	r0, [sp, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	f1a1 0404 	sub.w	r4, r1, #4
 800674e:	bfb8      	it	lt
 8006750:	18e4      	addlt	r4, r4, r3
 8006752:	f000 f8df 	bl	8006914 <__malloc_lock>
 8006756:	4a1e      	ldr	r2, [pc, #120]	; (80067d0 <_free_r+0x94>)
 8006758:	9801      	ldr	r0, [sp, #4]
 800675a:	6813      	ldr	r3, [r2, #0]
 800675c:	b933      	cbnz	r3, 800676c <_free_r+0x30>
 800675e:	6063      	str	r3, [r4, #4]
 8006760:	6014      	str	r4, [r2, #0]
 8006762:	b003      	add	sp, #12
 8006764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006768:	f000 b8da 	b.w	8006920 <__malloc_unlock>
 800676c:	42a3      	cmp	r3, r4
 800676e:	d908      	bls.n	8006782 <_free_r+0x46>
 8006770:	6825      	ldr	r5, [r4, #0]
 8006772:	1961      	adds	r1, r4, r5
 8006774:	428b      	cmp	r3, r1
 8006776:	bf01      	itttt	eq
 8006778:	6819      	ldreq	r1, [r3, #0]
 800677a:	685b      	ldreq	r3, [r3, #4]
 800677c:	1949      	addeq	r1, r1, r5
 800677e:	6021      	streq	r1, [r4, #0]
 8006780:	e7ed      	b.n	800675e <_free_r+0x22>
 8006782:	461a      	mov	r2, r3
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	b10b      	cbz	r3, 800678c <_free_r+0x50>
 8006788:	42a3      	cmp	r3, r4
 800678a:	d9fa      	bls.n	8006782 <_free_r+0x46>
 800678c:	6811      	ldr	r1, [r2, #0]
 800678e:	1855      	adds	r5, r2, r1
 8006790:	42a5      	cmp	r5, r4
 8006792:	d10b      	bne.n	80067ac <_free_r+0x70>
 8006794:	6824      	ldr	r4, [r4, #0]
 8006796:	4421      	add	r1, r4
 8006798:	1854      	adds	r4, r2, r1
 800679a:	42a3      	cmp	r3, r4
 800679c:	6011      	str	r1, [r2, #0]
 800679e:	d1e0      	bne.n	8006762 <_free_r+0x26>
 80067a0:	681c      	ldr	r4, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	6053      	str	r3, [r2, #4]
 80067a6:	440c      	add	r4, r1
 80067a8:	6014      	str	r4, [r2, #0]
 80067aa:	e7da      	b.n	8006762 <_free_r+0x26>
 80067ac:	d902      	bls.n	80067b4 <_free_r+0x78>
 80067ae:	230c      	movs	r3, #12
 80067b0:	6003      	str	r3, [r0, #0]
 80067b2:	e7d6      	b.n	8006762 <_free_r+0x26>
 80067b4:	6825      	ldr	r5, [r4, #0]
 80067b6:	1961      	adds	r1, r4, r5
 80067b8:	428b      	cmp	r3, r1
 80067ba:	bf04      	itt	eq
 80067bc:	6819      	ldreq	r1, [r3, #0]
 80067be:	685b      	ldreq	r3, [r3, #4]
 80067c0:	6063      	str	r3, [r4, #4]
 80067c2:	bf04      	itt	eq
 80067c4:	1949      	addeq	r1, r1, r5
 80067c6:	6021      	streq	r1, [r4, #0]
 80067c8:	6054      	str	r4, [r2, #4]
 80067ca:	e7ca      	b.n	8006762 <_free_r+0x26>
 80067cc:	b003      	add	sp, #12
 80067ce:	bd30      	pop	{r4, r5, pc}
 80067d0:	200003f8 	.word	0x200003f8

080067d4 <sbrk_aligned>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	4e0e      	ldr	r6, [pc, #56]	; (8006810 <sbrk_aligned+0x3c>)
 80067d8:	460c      	mov	r4, r1
 80067da:	6831      	ldr	r1, [r6, #0]
 80067dc:	4605      	mov	r5, r0
 80067de:	b911      	cbnz	r1, 80067e6 <sbrk_aligned+0x12>
 80067e0:	f000 fe72 	bl	80074c8 <_sbrk_r>
 80067e4:	6030      	str	r0, [r6, #0]
 80067e6:	4621      	mov	r1, r4
 80067e8:	4628      	mov	r0, r5
 80067ea:	f000 fe6d 	bl	80074c8 <_sbrk_r>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	d00a      	beq.n	8006808 <sbrk_aligned+0x34>
 80067f2:	1cc4      	adds	r4, r0, #3
 80067f4:	f024 0403 	bic.w	r4, r4, #3
 80067f8:	42a0      	cmp	r0, r4
 80067fa:	d007      	beq.n	800680c <sbrk_aligned+0x38>
 80067fc:	1a21      	subs	r1, r4, r0
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 fe62 	bl	80074c8 <_sbrk_r>
 8006804:	3001      	adds	r0, #1
 8006806:	d101      	bne.n	800680c <sbrk_aligned+0x38>
 8006808:	f04f 34ff 	mov.w	r4, #4294967295
 800680c:	4620      	mov	r0, r4
 800680e:	bd70      	pop	{r4, r5, r6, pc}
 8006810:	200003fc 	.word	0x200003fc

08006814 <_malloc_r>:
 8006814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006818:	1ccd      	adds	r5, r1, #3
 800681a:	f025 0503 	bic.w	r5, r5, #3
 800681e:	3508      	adds	r5, #8
 8006820:	2d0c      	cmp	r5, #12
 8006822:	bf38      	it	cc
 8006824:	250c      	movcc	r5, #12
 8006826:	2d00      	cmp	r5, #0
 8006828:	4607      	mov	r7, r0
 800682a:	db01      	blt.n	8006830 <_malloc_r+0x1c>
 800682c:	42a9      	cmp	r1, r5
 800682e:	d905      	bls.n	800683c <_malloc_r+0x28>
 8006830:	230c      	movs	r3, #12
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	2600      	movs	r6, #0
 8006836:	4630      	mov	r0, r6
 8006838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800683c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006910 <_malloc_r+0xfc>
 8006840:	f000 f868 	bl	8006914 <__malloc_lock>
 8006844:	f8d8 3000 	ldr.w	r3, [r8]
 8006848:	461c      	mov	r4, r3
 800684a:	bb5c      	cbnz	r4, 80068a4 <_malloc_r+0x90>
 800684c:	4629      	mov	r1, r5
 800684e:	4638      	mov	r0, r7
 8006850:	f7ff ffc0 	bl	80067d4 <sbrk_aligned>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	4604      	mov	r4, r0
 8006858:	d155      	bne.n	8006906 <_malloc_r+0xf2>
 800685a:	f8d8 4000 	ldr.w	r4, [r8]
 800685e:	4626      	mov	r6, r4
 8006860:	2e00      	cmp	r6, #0
 8006862:	d145      	bne.n	80068f0 <_malloc_r+0xdc>
 8006864:	2c00      	cmp	r4, #0
 8006866:	d048      	beq.n	80068fa <_malloc_r+0xe6>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	4631      	mov	r1, r6
 800686c:	4638      	mov	r0, r7
 800686e:	eb04 0903 	add.w	r9, r4, r3
 8006872:	f000 fe29 	bl	80074c8 <_sbrk_r>
 8006876:	4581      	cmp	r9, r0
 8006878:	d13f      	bne.n	80068fa <_malloc_r+0xe6>
 800687a:	6821      	ldr	r1, [r4, #0]
 800687c:	1a6d      	subs	r5, r5, r1
 800687e:	4629      	mov	r1, r5
 8006880:	4638      	mov	r0, r7
 8006882:	f7ff ffa7 	bl	80067d4 <sbrk_aligned>
 8006886:	3001      	adds	r0, #1
 8006888:	d037      	beq.n	80068fa <_malloc_r+0xe6>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	442b      	add	r3, r5
 800688e:	6023      	str	r3, [r4, #0]
 8006890:	f8d8 3000 	ldr.w	r3, [r8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d038      	beq.n	800690a <_malloc_r+0xf6>
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	42a2      	cmp	r2, r4
 800689c:	d12b      	bne.n	80068f6 <_malloc_r+0xe2>
 800689e:	2200      	movs	r2, #0
 80068a0:	605a      	str	r2, [r3, #4]
 80068a2:	e00f      	b.n	80068c4 <_malloc_r+0xb0>
 80068a4:	6822      	ldr	r2, [r4, #0]
 80068a6:	1b52      	subs	r2, r2, r5
 80068a8:	d41f      	bmi.n	80068ea <_malloc_r+0xd6>
 80068aa:	2a0b      	cmp	r2, #11
 80068ac:	d917      	bls.n	80068de <_malloc_r+0xca>
 80068ae:	1961      	adds	r1, r4, r5
 80068b0:	42a3      	cmp	r3, r4
 80068b2:	6025      	str	r5, [r4, #0]
 80068b4:	bf18      	it	ne
 80068b6:	6059      	strne	r1, [r3, #4]
 80068b8:	6863      	ldr	r3, [r4, #4]
 80068ba:	bf08      	it	eq
 80068bc:	f8c8 1000 	streq.w	r1, [r8]
 80068c0:	5162      	str	r2, [r4, r5]
 80068c2:	604b      	str	r3, [r1, #4]
 80068c4:	4638      	mov	r0, r7
 80068c6:	f104 060b 	add.w	r6, r4, #11
 80068ca:	f000 f829 	bl	8006920 <__malloc_unlock>
 80068ce:	f026 0607 	bic.w	r6, r6, #7
 80068d2:	1d23      	adds	r3, r4, #4
 80068d4:	1af2      	subs	r2, r6, r3
 80068d6:	d0ae      	beq.n	8006836 <_malloc_r+0x22>
 80068d8:	1b9b      	subs	r3, r3, r6
 80068da:	50a3      	str	r3, [r4, r2]
 80068dc:	e7ab      	b.n	8006836 <_malloc_r+0x22>
 80068de:	42a3      	cmp	r3, r4
 80068e0:	6862      	ldr	r2, [r4, #4]
 80068e2:	d1dd      	bne.n	80068a0 <_malloc_r+0x8c>
 80068e4:	f8c8 2000 	str.w	r2, [r8]
 80068e8:	e7ec      	b.n	80068c4 <_malloc_r+0xb0>
 80068ea:	4623      	mov	r3, r4
 80068ec:	6864      	ldr	r4, [r4, #4]
 80068ee:	e7ac      	b.n	800684a <_malloc_r+0x36>
 80068f0:	4634      	mov	r4, r6
 80068f2:	6876      	ldr	r6, [r6, #4]
 80068f4:	e7b4      	b.n	8006860 <_malloc_r+0x4c>
 80068f6:	4613      	mov	r3, r2
 80068f8:	e7cc      	b.n	8006894 <_malloc_r+0x80>
 80068fa:	230c      	movs	r3, #12
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	4638      	mov	r0, r7
 8006900:	f000 f80e 	bl	8006920 <__malloc_unlock>
 8006904:	e797      	b.n	8006836 <_malloc_r+0x22>
 8006906:	6025      	str	r5, [r4, #0]
 8006908:	e7dc      	b.n	80068c4 <_malloc_r+0xb0>
 800690a:	605b      	str	r3, [r3, #4]
 800690c:	deff      	udf	#255	; 0xff
 800690e:	bf00      	nop
 8006910:	200003f8 	.word	0x200003f8

08006914 <__malloc_lock>:
 8006914:	4801      	ldr	r0, [pc, #4]	; (800691c <__malloc_lock+0x8>)
 8006916:	f7ff befa 	b.w	800670e <__retarget_lock_acquire_recursive>
 800691a:	bf00      	nop
 800691c:	200003f4 	.word	0x200003f4

08006920 <__malloc_unlock>:
 8006920:	4801      	ldr	r0, [pc, #4]	; (8006928 <__malloc_unlock+0x8>)
 8006922:	f7ff bef5 	b.w	8006710 <__retarget_lock_release_recursive>
 8006926:	bf00      	nop
 8006928:	200003f4 	.word	0x200003f4

0800692c <__ssputs_r>:
 800692c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006930:	688e      	ldr	r6, [r1, #8]
 8006932:	461f      	mov	r7, r3
 8006934:	42be      	cmp	r6, r7
 8006936:	680b      	ldr	r3, [r1, #0]
 8006938:	4682      	mov	sl, r0
 800693a:	460c      	mov	r4, r1
 800693c:	4690      	mov	r8, r2
 800693e:	d82c      	bhi.n	800699a <__ssputs_r+0x6e>
 8006940:	898a      	ldrh	r2, [r1, #12]
 8006942:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006946:	d026      	beq.n	8006996 <__ssputs_r+0x6a>
 8006948:	6965      	ldr	r5, [r4, #20]
 800694a:	6909      	ldr	r1, [r1, #16]
 800694c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006950:	eba3 0901 	sub.w	r9, r3, r1
 8006954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006958:	1c7b      	adds	r3, r7, #1
 800695a:	444b      	add	r3, r9
 800695c:	106d      	asrs	r5, r5, #1
 800695e:	429d      	cmp	r5, r3
 8006960:	bf38      	it	cc
 8006962:	461d      	movcc	r5, r3
 8006964:	0553      	lsls	r3, r2, #21
 8006966:	d527      	bpl.n	80069b8 <__ssputs_r+0x8c>
 8006968:	4629      	mov	r1, r5
 800696a:	f7ff ff53 	bl	8006814 <_malloc_r>
 800696e:	4606      	mov	r6, r0
 8006970:	b360      	cbz	r0, 80069cc <__ssputs_r+0xa0>
 8006972:	6921      	ldr	r1, [r4, #16]
 8006974:	464a      	mov	r2, r9
 8006976:	f7ff fecc 	bl	8006712 <memcpy>
 800697a:	89a3      	ldrh	r3, [r4, #12]
 800697c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006984:	81a3      	strh	r3, [r4, #12]
 8006986:	6126      	str	r6, [r4, #16]
 8006988:	6165      	str	r5, [r4, #20]
 800698a:	444e      	add	r6, r9
 800698c:	eba5 0509 	sub.w	r5, r5, r9
 8006990:	6026      	str	r6, [r4, #0]
 8006992:	60a5      	str	r5, [r4, #8]
 8006994:	463e      	mov	r6, r7
 8006996:	42be      	cmp	r6, r7
 8006998:	d900      	bls.n	800699c <__ssputs_r+0x70>
 800699a:	463e      	mov	r6, r7
 800699c:	6820      	ldr	r0, [r4, #0]
 800699e:	4632      	mov	r2, r6
 80069a0:	4641      	mov	r1, r8
 80069a2:	f000 fd33 	bl	800740c <memmove>
 80069a6:	68a3      	ldr	r3, [r4, #8]
 80069a8:	1b9b      	subs	r3, r3, r6
 80069aa:	60a3      	str	r3, [r4, #8]
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	4433      	add	r3, r6
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	2000      	movs	r0, #0
 80069b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b8:	462a      	mov	r2, r5
 80069ba:	f000 fd95 	bl	80074e8 <_realloc_r>
 80069be:	4606      	mov	r6, r0
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d1e0      	bne.n	8006986 <__ssputs_r+0x5a>
 80069c4:	6921      	ldr	r1, [r4, #16]
 80069c6:	4650      	mov	r0, sl
 80069c8:	f7ff feb8 	bl	800673c <_free_r>
 80069cc:	230c      	movs	r3, #12
 80069ce:	f8ca 3000 	str.w	r3, [sl]
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d8:	81a3      	strh	r3, [r4, #12]
 80069da:	f04f 30ff 	mov.w	r0, #4294967295
 80069de:	e7e9      	b.n	80069b4 <__ssputs_r+0x88>

080069e0 <_svfiprintf_r>:
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	4698      	mov	r8, r3
 80069e6:	898b      	ldrh	r3, [r1, #12]
 80069e8:	061b      	lsls	r3, r3, #24
 80069ea:	b09d      	sub	sp, #116	; 0x74
 80069ec:	4607      	mov	r7, r0
 80069ee:	460d      	mov	r5, r1
 80069f0:	4614      	mov	r4, r2
 80069f2:	d50e      	bpl.n	8006a12 <_svfiprintf_r+0x32>
 80069f4:	690b      	ldr	r3, [r1, #16]
 80069f6:	b963      	cbnz	r3, 8006a12 <_svfiprintf_r+0x32>
 80069f8:	2140      	movs	r1, #64	; 0x40
 80069fa:	f7ff ff0b 	bl	8006814 <_malloc_r>
 80069fe:	6028      	str	r0, [r5, #0]
 8006a00:	6128      	str	r0, [r5, #16]
 8006a02:	b920      	cbnz	r0, 8006a0e <_svfiprintf_r+0x2e>
 8006a04:	230c      	movs	r3, #12
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0c:	e0d0      	b.n	8006bb0 <_svfiprintf_r+0x1d0>
 8006a0e:	2340      	movs	r3, #64	; 0x40
 8006a10:	616b      	str	r3, [r5, #20]
 8006a12:	2300      	movs	r3, #0
 8006a14:	9309      	str	r3, [sp, #36]	; 0x24
 8006a16:	2320      	movs	r3, #32
 8006a18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a20:	2330      	movs	r3, #48	; 0x30
 8006a22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006bc8 <_svfiprintf_r+0x1e8>
 8006a26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a2a:	f04f 0901 	mov.w	r9, #1
 8006a2e:	4623      	mov	r3, r4
 8006a30:	469a      	mov	sl, r3
 8006a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a36:	b10a      	cbz	r2, 8006a3c <_svfiprintf_r+0x5c>
 8006a38:	2a25      	cmp	r2, #37	; 0x25
 8006a3a:	d1f9      	bne.n	8006a30 <_svfiprintf_r+0x50>
 8006a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8006a40:	d00b      	beq.n	8006a5a <_svfiprintf_r+0x7a>
 8006a42:	465b      	mov	r3, fp
 8006a44:	4622      	mov	r2, r4
 8006a46:	4629      	mov	r1, r5
 8006a48:	4638      	mov	r0, r7
 8006a4a:	f7ff ff6f 	bl	800692c <__ssputs_r>
 8006a4e:	3001      	adds	r0, #1
 8006a50:	f000 80a9 	beq.w	8006ba6 <_svfiprintf_r+0x1c6>
 8006a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a56:	445a      	add	r2, fp
 8006a58:	9209      	str	r2, [sp, #36]	; 0x24
 8006a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 80a1 	beq.w	8006ba6 <_svfiprintf_r+0x1c6>
 8006a64:	2300      	movs	r3, #0
 8006a66:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a6e:	f10a 0a01 	add.w	sl, sl, #1
 8006a72:	9304      	str	r3, [sp, #16]
 8006a74:	9307      	str	r3, [sp, #28]
 8006a76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8006a7c:	4654      	mov	r4, sl
 8006a7e:	2205      	movs	r2, #5
 8006a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a84:	4850      	ldr	r0, [pc, #320]	; (8006bc8 <_svfiprintf_r+0x1e8>)
 8006a86:	f7f9 fbab 	bl	80001e0 <memchr>
 8006a8a:	9a04      	ldr	r2, [sp, #16]
 8006a8c:	b9d8      	cbnz	r0, 8006ac6 <_svfiprintf_r+0xe6>
 8006a8e:	06d0      	lsls	r0, r2, #27
 8006a90:	bf44      	itt	mi
 8006a92:	2320      	movmi	r3, #32
 8006a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a98:	0711      	lsls	r1, r2, #28
 8006a9a:	bf44      	itt	mi
 8006a9c:	232b      	movmi	r3, #43	; 0x2b
 8006a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8006aa8:	d015      	beq.n	8006ad6 <_svfiprintf_r+0xf6>
 8006aaa:	9a07      	ldr	r2, [sp, #28]
 8006aac:	4654      	mov	r4, sl
 8006aae:	2000      	movs	r0, #0
 8006ab0:	f04f 0c0a 	mov.w	ip, #10
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aba:	3b30      	subs	r3, #48	; 0x30
 8006abc:	2b09      	cmp	r3, #9
 8006abe:	d94d      	bls.n	8006b5c <_svfiprintf_r+0x17c>
 8006ac0:	b1b0      	cbz	r0, 8006af0 <_svfiprintf_r+0x110>
 8006ac2:	9207      	str	r2, [sp, #28]
 8006ac4:	e014      	b.n	8006af0 <_svfiprintf_r+0x110>
 8006ac6:	eba0 0308 	sub.w	r3, r0, r8
 8006aca:	fa09 f303 	lsl.w	r3, r9, r3
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	9304      	str	r3, [sp, #16]
 8006ad2:	46a2      	mov	sl, r4
 8006ad4:	e7d2      	b.n	8006a7c <_svfiprintf_r+0x9c>
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	1d19      	adds	r1, r3, #4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	9103      	str	r1, [sp, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bfbb      	ittet	lt
 8006ae2:	425b      	neglt	r3, r3
 8006ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ae8:	9307      	strge	r3, [sp, #28]
 8006aea:	9307      	strlt	r3, [sp, #28]
 8006aec:	bfb8      	it	lt
 8006aee:	9204      	strlt	r2, [sp, #16]
 8006af0:	7823      	ldrb	r3, [r4, #0]
 8006af2:	2b2e      	cmp	r3, #46	; 0x2e
 8006af4:	d10c      	bne.n	8006b10 <_svfiprintf_r+0x130>
 8006af6:	7863      	ldrb	r3, [r4, #1]
 8006af8:	2b2a      	cmp	r3, #42	; 0x2a
 8006afa:	d134      	bne.n	8006b66 <_svfiprintf_r+0x186>
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	1d1a      	adds	r2, r3, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	9203      	str	r2, [sp, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bfb8      	it	lt
 8006b08:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b0c:	3402      	adds	r4, #2
 8006b0e:	9305      	str	r3, [sp, #20]
 8006b10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006bd8 <_svfiprintf_r+0x1f8>
 8006b14:	7821      	ldrb	r1, [r4, #0]
 8006b16:	2203      	movs	r2, #3
 8006b18:	4650      	mov	r0, sl
 8006b1a:	f7f9 fb61 	bl	80001e0 <memchr>
 8006b1e:	b138      	cbz	r0, 8006b30 <_svfiprintf_r+0x150>
 8006b20:	9b04      	ldr	r3, [sp, #16]
 8006b22:	eba0 000a 	sub.w	r0, r0, sl
 8006b26:	2240      	movs	r2, #64	; 0x40
 8006b28:	4082      	lsls	r2, r0
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	3401      	adds	r4, #1
 8006b2e:	9304      	str	r3, [sp, #16]
 8006b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b34:	4825      	ldr	r0, [pc, #148]	; (8006bcc <_svfiprintf_r+0x1ec>)
 8006b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b3a:	2206      	movs	r2, #6
 8006b3c:	f7f9 fb50 	bl	80001e0 <memchr>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d038      	beq.n	8006bb6 <_svfiprintf_r+0x1d6>
 8006b44:	4b22      	ldr	r3, [pc, #136]	; (8006bd0 <_svfiprintf_r+0x1f0>)
 8006b46:	bb1b      	cbnz	r3, 8006b90 <_svfiprintf_r+0x1b0>
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	3307      	adds	r3, #7
 8006b4c:	f023 0307 	bic.w	r3, r3, #7
 8006b50:	3308      	adds	r3, #8
 8006b52:	9303      	str	r3, [sp, #12]
 8006b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b56:	4433      	add	r3, r6
 8006b58:	9309      	str	r3, [sp, #36]	; 0x24
 8006b5a:	e768      	b.n	8006a2e <_svfiprintf_r+0x4e>
 8006b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b60:	460c      	mov	r4, r1
 8006b62:	2001      	movs	r0, #1
 8006b64:	e7a6      	b.n	8006ab4 <_svfiprintf_r+0xd4>
 8006b66:	2300      	movs	r3, #0
 8006b68:	3401      	adds	r4, #1
 8006b6a:	9305      	str	r3, [sp, #20]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	f04f 0c0a 	mov.w	ip, #10
 8006b72:	4620      	mov	r0, r4
 8006b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b78:	3a30      	subs	r2, #48	; 0x30
 8006b7a:	2a09      	cmp	r2, #9
 8006b7c:	d903      	bls.n	8006b86 <_svfiprintf_r+0x1a6>
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0c6      	beq.n	8006b10 <_svfiprintf_r+0x130>
 8006b82:	9105      	str	r1, [sp, #20]
 8006b84:	e7c4      	b.n	8006b10 <_svfiprintf_r+0x130>
 8006b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e7f0      	b.n	8006b72 <_svfiprintf_r+0x192>
 8006b90:	ab03      	add	r3, sp, #12
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	462a      	mov	r2, r5
 8006b96:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <_svfiprintf_r+0x1f4>)
 8006b98:	a904      	add	r1, sp, #16
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	f3af 8000 	nop.w
 8006ba0:	1c42      	adds	r2, r0, #1
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	d1d6      	bne.n	8006b54 <_svfiprintf_r+0x174>
 8006ba6:	89ab      	ldrh	r3, [r5, #12]
 8006ba8:	065b      	lsls	r3, r3, #25
 8006baa:	f53f af2d 	bmi.w	8006a08 <_svfiprintf_r+0x28>
 8006bae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bb0:	b01d      	add	sp, #116	; 0x74
 8006bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb6:	ab03      	add	r3, sp, #12
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	462a      	mov	r2, r5
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <_svfiprintf_r+0x1f4>)
 8006bbe:	a904      	add	r1, sp, #16
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f000 f9bd 	bl	8006f40 <_printf_i>
 8006bc6:	e7eb      	b.n	8006ba0 <_svfiprintf_r+0x1c0>
 8006bc8:	08007a4b 	.word	0x08007a4b
 8006bcc:	08007a55 	.word	0x08007a55
 8006bd0:	00000000 	.word	0x00000000
 8006bd4:	0800692d 	.word	0x0800692d
 8006bd8:	08007a51 	.word	0x08007a51

08006bdc <__sfputc_r>:
 8006bdc:	6893      	ldr	r3, [r2, #8]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	b410      	push	{r4}
 8006be4:	6093      	str	r3, [r2, #8]
 8006be6:	da08      	bge.n	8006bfa <__sfputc_r+0x1e>
 8006be8:	6994      	ldr	r4, [r2, #24]
 8006bea:	42a3      	cmp	r3, r4
 8006bec:	db01      	blt.n	8006bf2 <__sfputc_r+0x16>
 8006bee:	290a      	cmp	r1, #10
 8006bf0:	d103      	bne.n	8006bfa <__sfputc_r+0x1e>
 8006bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bf6:	f000 bb73 	b.w	80072e0 <__swbuf_r>
 8006bfa:	6813      	ldr	r3, [r2, #0]
 8006bfc:	1c58      	adds	r0, r3, #1
 8006bfe:	6010      	str	r0, [r2, #0]
 8006c00:	7019      	strb	r1, [r3, #0]
 8006c02:	4608      	mov	r0, r1
 8006c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <__sfputs_r>:
 8006c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	460f      	mov	r7, r1
 8006c10:	4614      	mov	r4, r2
 8006c12:	18d5      	adds	r5, r2, r3
 8006c14:	42ac      	cmp	r4, r5
 8006c16:	d101      	bne.n	8006c1c <__sfputs_r+0x12>
 8006c18:	2000      	movs	r0, #0
 8006c1a:	e007      	b.n	8006c2c <__sfputs_r+0x22>
 8006c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c20:	463a      	mov	r2, r7
 8006c22:	4630      	mov	r0, r6
 8006c24:	f7ff ffda 	bl	8006bdc <__sfputc_r>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d1f3      	bne.n	8006c14 <__sfputs_r+0xa>
 8006c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c30 <_vfiprintf_r>:
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	460d      	mov	r5, r1
 8006c36:	b09d      	sub	sp, #116	; 0x74
 8006c38:	4614      	mov	r4, r2
 8006c3a:	4698      	mov	r8, r3
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	b118      	cbz	r0, 8006c48 <_vfiprintf_r+0x18>
 8006c40:	6a03      	ldr	r3, [r0, #32]
 8006c42:	b90b      	cbnz	r3, 8006c48 <_vfiprintf_r+0x18>
 8006c44:	f7ff fc2e 	bl	80064a4 <__sinit>
 8006c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c4a:	07d9      	lsls	r1, r3, #31
 8006c4c:	d405      	bmi.n	8006c5a <_vfiprintf_r+0x2a>
 8006c4e:	89ab      	ldrh	r3, [r5, #12]
 8006c50:	059a      	lsls	r2, r3, #22
 8006c52:	d402      	bmi.n	8006c5a <_vfiprintf_r+0x2a>
 8006c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c56:	f7ff fd5a 	bl	800670e <__retarget_lock_acquire_recursive>
 8006c5a:	89ab      	ldrh	r3, [r5, #12]
 8006c5c:	071b      	lsls	r3, r3, #28
 8006c5e:	d501      	bpl.n	8006c64 <_vfiprintf_r+0x34>
 8006c60:	692b      	ldr	r3, [r5, #16]
 8006c62:	b99b      	cbnz	r3, 8006c8c <_vfiprintf_r+0x5c>
 8006c64:	4629      	mov	r1, r5
 8006c66:	4630      	mov	r0, r6
 8006c68:	f000 fb78 	bl	800735c <__swsetup_r>
 8006c6c:	b170      	cbz	r0, 8006c8c <_vfiprintf_r+0x5c>
 8006c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c70:	07dc      	lsls	r4, r3, #31
 8006c72:	d504      	bpl.n	8006c7e <_vfiprintf_r+0x4e>
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	b01d      	add	sp, #116	; 0x74
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	89ab      	ldrh	r3, [r5, #12]
 8006c80:	0598      	lsls	r0, r3, #22
 8006c82:	d4f7      	bmi.n	8006c74 <_vfiprintf_r+0x44>
 8006c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c86:	f7ff fd43 	bl	8006710 <__retarget_lock_release_recursive>
 8006c8a:	e7f3      	b.n	8006c74 <_vfiprintf_r+0x44>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c90:	2320      	movs	r3, #32
 8006c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c9a:	2330      	movs	r3, #48	; 0x30
 8006c9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006e50 <_vfiprintf_r+0x220>
 8006ca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ca4:	f04f 0901 	mov.w	r9, #1
 8006ca8:	4623      	mov	r3, r4
 8006caa:	469a      	mov	sl, r3
 8006cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cb0:	b10a      	cbz	r2, 8006cb6 <_vfiprintf_r+0x86>
 8006cb2:	2a25      	cmp	r2, #37	; 0x25
 8006cb4:	d1f9      	bne.n	8006caa <_vfiprintf_r+0x7a>
 8006cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8006cba:	d00b      	beq.n	8006cd4 <_vfiprintf_r+0xa4>
 8006cbc:	465b      	mov	r3, fp
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7ff ffa1 	bl	8006c0a <__sfputs_r>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	f000 80a9 	beq.w	8006e20 <_vfiprintf_r+0x1f0>
 8006cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cd0:	445a      	add	r2, fp
 8006cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8006cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 80a1 	beq.w	8006e20 <_vfiprintf_r+0x1f0>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ce8:	f10a 0a01 	add.w	sl, sl, #1
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	9307      	str	r3, [sp, #28]
 8006cf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cf4:	931a      	str	r3, [sp, #104]	; 0x68
 8006cf6:	4654      	mov	r4, sl
 8006cf8:	2205      	movs	r2, #5
 8006cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cfe:	4854      	ldr	r0, [pc, #336]	; (8006e50 <_vfiprintf_r+0x220>)
 8006d00:	f7f9 fa6e 	bl	80001e0 <memchr>
 8006d04:	9a04      	ldr	r2, [sp, #16]
 8006d06:	b9d8      	cbnz	r0, 8006d40 <_vfiprintf_r+0x110>
 8006d08:	06d1      	lsls	r1, r2, #27
 8006d0a:	bf44      	itt	mi
 8006d0c:	2320      	movmi	r3, #32
 8006d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d12:	0713      	lsls	r3, r2, #28
 8006d14:	bf44      	itt	mi
 8006d16:	232b      	movmi	r3, #43	; 0x2b
 8006d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d20:	2b2a      	cmp	r3, #42	; 0x2a
 8006d22:	d015      	beq.n	8006d50 <_vfiprintf_r+0x120>
 8006d24:	9a07      	ldr	r2, [sp, #28]
 8006d26:	4654      	mov	r4, sl
 8006d28:	2000      	movs	r0, #0
 8006d2a:	f04f 0c0a 	mov.w	ip, #10
 8006d2e:	4621      	mov	r1, r4
 8006d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d34:	3b30      	subs	r3, #48	; 0x30
 8006d36:	2b09      	cmp	r3, #9
 8006d38:	d94d      	bls.n	8006dd6 <_vfiprintf_r+0x1a6>
 8006d3a:	b1b0      	cbz	r0, 8006d6a <_vfiprintf_r+0x13a>
 8006d3c:	9207      	str	r2, [sp, #28]
 8006d3e:	e014      	b.n	8006d6a <_vfiprintf_r+0x13a>
 8006d40:	eba0 0308 	sub.w	r3, r0, r8
 8006d44:	fa09 f303 	lsl.w	r3, r9, r3
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	9304      	str	r3, [sp, #16]
 8006d4c:	46a2      	mov	sl, r4
 8006d4e:	e7d2      	b.n	8006cf6 <_vfiprintf_r+0xc6>
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	1d19      	adds	r1, r3, #4
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	9103      	str	r1, [sp, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	bfbb      	ittet	lt
 8006d5c:	425b      	neglt	r3, r3
 8006d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8006d62:	9307      	strge	r3, [sp, #28]
 8006d64:	9307      	strlt	r3, [sp, #28]
 8006d66:	bfb8      	it	lt
 8006d68:	9204      	strlt	r2, [sp, #16]
 8006d6a:	7823      	ldrb	r3, [r4, #0]
 8006d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d6e:	d10c      	bne.n	8006d8a <_vfiprintf_r+0x15a>
 8006d70:	7863      	ldrb	r3, [r4, #1]
 8006d72:	2b2a      	cmp	r3, #42	; 0x2a
 8006d74:	d134      	bne.n	8006de0 <_vfiprintf_r+0x1b0>
 8006d76:	9b03      	ldr	r3, [sp, #12]
 8006d78:	1d1a      	adds	r2, r3, #4
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	9203      	str	r2, [sp, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bfb8      	it	lt
 8006d82:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d86:	3402      	adds	r4, #2
 8006d88:	9305      	str	r3, [sp, #20]
 8006d8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006e60 <_vfiprintf_r+0x230>
 8006d8e:	7821      	ldrb	r1, [r4, #0]
 8006d90:	2203      	movs	r2, #3
 8006d92:	4650      	mov	r0, sl
 8006d94:	f7f9 fa24 	bl	80001e0 <memchr>
 8006d98:	b138      	cbz	r0, 8006daa <_vfiprintf_r+0x17a>
 8006d9a:	9b04      	ldr	r3, [sp, #16]
 8006d9c:	eba0 000a 	sub.w	r0, r0, sl
 8006da0:	2240      	movs	r2, #64	; 0x40
 8006da2:	4082      	lsls	r2, r0
 8006da4:	4313      	orrs	r3, r2
 8006da6:	3401      	adds	r4, #1
 8006da8:	9304      	str	r3, [sp, #16]
 8006daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dae:	4829      	ldr	r0, [pc, #164]	; (8006e54 <_vfiprintf_r+0x224>)
 8006db0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006db4:	2206      	movs	r2, #6
 8006db6:	f7f9 fa13 	bl	80001e0 <memchr>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d03f      	beq.n	8006e3e <_vfiprintf_r+0x20e>
 8006dbe:	4b26      	ldr	r3, [pc, #152]	; (8006e58 <_vfiprintf_r+0x228>)
 8006dc0:	bb1b      	cbnz	r3, 8006e0a <_vfiprintf_r+0x1da>
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	3307      	adds	r3, #7
 8006dc6:	f023 0307 	bic.w	r3, r3, #7
 8006dca:	3308      	adds	r3, #8
 8006dcc:	9303      	str	r3, [sp, #12]
 8006dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd0:	443b      	add	r3, r7
 8006dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd4:	e768      	b.n	8006ca8 <_vfiprintf_r+0x78>
 8006dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dda:	460c      	mov	r4, r1
 8006ddc:	2001      	movs	r0, #1
 8006dde:	e7a6      	b.n	8006d2e <_vfiprintf_r+0xfe>
 8006de0:	2300      	movs	r3, #0
 8006de2:	3401      	adds	r4, #1
 8006de4:	9305      	str	r3, [sp, #20]
 8006de6:	4619      	mov	r1, r3
 8006de8:	f04f 0c0a 	mov.w	ip, #10
 8006dec:	4620      	mov	r0, r4
 8006dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006df2:	3a30      	subs	r2, #48	; 0x30
 8006df4:	2a09      	cmp	r2, #9
 8006df6:	d903      	bls.n	8006e00 <_vfiprintf_r+0x1d0>
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0c6      	beq.n	8006d8a <_vfiprintf_r+0x15a>
 8006dfc:	9105      	str	r1, [sp, #20]
 8006dfe:	e7c4      	b.n	8006d8a <_vfiprintf_r+0x15a>
 8006e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e04:	4604      	mov	r4, r0
 8006e06:	2301      	movs	r3, #1
 8006e08:	e7f0      	b.n	8006dec <_vfiprintf_r+0x1bc>
 8006e0a:	ab03      	add	r3, sp, #12
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	462a      	mov	r2, r5
 8006e10:	4b12      	ldr	r3, [pc, #72]	; (8006e5c <_vfiprintf_r+0x22c>)
 8006e12:	a904      	add	r1, sp, #16
 8006e14:	4630      	mov	r0, r6
 8006e16:	f3af 8000 	nop.w
 8006e1a:	4607      	mov	r7, r0
 8006e1c:	1c78      	adds	r0, r7, #1
 8006e1e:	d1d6      	bne.n	8006dce <_vfiprintf_r+0x19e>
 8006e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e22:	07d9      	lsls	r1, r3, #31
 8006e24:	d405      	bmi.n	8006e32 <_vfiprintf_r+0x202>
 8006e26:	89ab      	ldrh	r3, [r5, #12]
 8006e28:	059a      	lsls	r2, r3, #22
 8006e2a:	d402      	bmi.n	8006e32 <_vfiprintf_r+0x202>
 8006e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e2e:	f7ff fc6f 	bl	8006710 <__retarget_lock_release_recursive>
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	065b      	lsls	r3, r3, #25
 8006e36:	f53f af1d 	bmi.w	8006c74 <_vfiprintf_r+0x44>
 8006e3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e3c:	e71c      	b.n	8006c78 <_vfiprintf_r+0x48>
 8006e3e:	ab03      	add	r3, sp, #12
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	462a      	mov	r2, r5
 8006e44:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <_vfiprintf_r+0x22c>)
 8006e46:	a904      	add	r1, sp, #16
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f000 f879 	bl	8006f40 <_printf_i>
 8006e4e:	e7e4      	b.n	8006e1a <_vfiprintf_r+0x1ea>
 8006e50:	08007a4b 	.word	0x08007a4b
 8006e54:	08007a55 	.word	0x08007a55
 8006e58:	00000000 	.word	0x00000000
 8006e5c:	08006c0b 	.word	0x08006c0b
 8006e60:	08007a51 	.word	0x08007a51

08006e64 <_printf_common>:
 8006e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e68:	4616      	mov	r6, r2
 8006e6a:	4699      	mov	r9, r3
 8006e6c:	688a      	ldr	r2, [r1, #8]
 8006e6e:	690b      	ldr	r3, [r1, #16]
 8006e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e74:	4293      	cmp	r3, r2
 8006e76:	bfb8      	it	lt
 8006e78:	4613      	movlt	r3, r2
 8006e7a:	6033      	str	r3, [r6, #0]
 8006e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e80:	4607      	mov	r7, r0
 8006e82:	460c      	mov	r4, r1
 8006e84:	b10a      	cbz	r2, 8006e8a <_printf_common+0x26>
 8006e86:	3301      	adds	r3, #1
 8006e88:	6033      	str	r3, [r6, #0]
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	0699      	lsls	r1, r3, #26
 8006e8e:	bf42      	ittt	mi
 8006e90:	6833      	ldrmi	r3, [r6, #0]
 8006e92:	3302      	addmi	r3, #2
 8006e94:	6033      	strmi	r3, [r6, #0]
 8006e96:	6825      	ldr	r5, [r4, #0]
 8006e98:	f015 0506 	ands.w	r5, r5, #6
 8006e9c:	d106      	bne.n	8006eac <_printf_common+0x48>
 8006e9e:	f104 0a19 	add.w	sl, r4, #25
 8006ea2:	68e3      	ldr	r3, [r4, #12]
 8006ea4:	6832      	ldr	r2, [r6, #0]
 8006ea6:	1a9b      	subs	r3, r3, r2
 8006ea8:	42ab      	cmp	r3, r5
 8006eaa:	dc26      	bgt.n	8006efa <_printf_common+0x96>
 8006eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006eb0:	1e13      	subs	r3, r2, #0
 8006eb2:	6822      	ldr	r2, [r4, #0]
 8006eb4:	bf18      	it	ne
 8006eb6:	2301      	movne	r3, #1
 8006eb8:	0692      	lsls	r2, r2, #26
 8006eba:	d42b      	bmi.n	8006f14 <_printf_common+0xb0>
 8006ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	47c0      	blx	r8
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d01e      	beq.n	8006f08 <_printf_common+0xa4>
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	6922      	ldr	r2, [r4, #16]
 8006ece:	f003 0306 	and.w	r3, r3, #6
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	bf02      	ittt	eq
 8006ed6:	68e5      	ldreq	r5, [r4, #12]
 8006ed8:	6833      	ldreq	r3, [r6, #0]
 8006eda:	1aed      	subeq	r5, r5, r3
 8006edc:	68a3      	ldr	r3, [r4, #8]
 8006ede:	bf0c      	ite	eq
 8006ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ee4:	2500      	movne	r5, #0
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	bfc4      	itt	gt
 8006eea:	1a9b      	subgt	r3, r3, r2
 8006eec:	18ed      	addgt	r5, r5, r3
 8006eee:	2600      	movs	r6, #0
 8006ef0:	341a      	adds	r4, #26
 8006ef2:	42b5      	cmp	r5, r6
 8006ef4:	d11a      	bne.n	8006f2c <_printf_common+0xc8>
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	e008      	b.n	8006f0c <_printf_common+0xa8>
 8006efa:	2301      	movs	r3, #1
 8006efc:	4652      	mov	r2, sl
 8006efe:	4649      	mov	r1, r9
 8006f00:	4638      	mov	r0, r7
 8006f02:	47c0      	blx	r8
 8006f04:	3001      	adds	r0, #1
 8006f06:	d103      	bne.n	8006f10 <_printf_common+0xac>
 8006f08:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f10:	3501      	adds	r5, #1
 8006f12:	e7c6      	b.n	8006ea2 <_printf_common+0x3e>
 8006f14:	18e1      	adds	r1, r4, r3
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	2030      	movs	r0, #48	; 0x30
 8006f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f1e:	4422      	add	r2, r4
 8006f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f28:	3302      	adds	r3, #2
 8006f2a:	e7c7      	b.n	8006ebc <_printf_common+0x58>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	4622      	mov	r2, r4
 8006f30:	4649      	mov	r1, r9
 8006f32:	4638      	mov	r0, r7
 8006f34:	47c0      	blx	r8
 8006f36:	3001      	adds	r0, #1
 8006f38:	d0e6      	beq.n	8006f08 <_printf_common+0xa4>
 8006f3a:	3601      	adds	r6, #1
 8006f3c:	e7d9      	b.n	8006ef2 <_printf_common+0x8e>
	...

08006f40 <_printf_i>:
 8006f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f44:	7e0f      	ldrb	r7, [r1, #24]
 8006f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f48:	2f78      	cmp	r7, #120	; 0x78
 8006f4a:	4691      	mov	r9, r2
 8006f4c:	4680      	mov	r8, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	469a      	mov	sl, r3
 8006f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f56:	d807      	bhi.n	8006f68 <_printf_i+0x28>
 8006f58:	2f62      	cmp	r7, #98	; 0x62
 8006f5a:	d80a      	bhi.n	8006f72 <_printf_i+0x32>
 8006f5c:	2f00      	cmp	r7, #0
 8006f5e:	f000 80d4 	beq.w	800710a <_printf_i+0x1ca>
 8006f62:	2f58      	cmp	r7, #88	; 0x58
 8006f64:	f000 80c0 	beq.w	80070e8 <_printf_i+0x1a8>
 8006f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f70:	e03a      	b.n	8006fe8 <_printf_i+0xa8>
 8006f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f76:	2b15      	cmp	r3, #21
 8006f78:	d8f6      	bhi.n	8006f68 <_printf_i+0x28>
 8006f7a:	a101      	add	r1, pc, #4	; (adr r1, 8006f80 <_printf_i+0x40>)
 8006f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f80:	08006fd9 	.word	0x08006fd9
 8006f84:	08006fed 	.word	0x08006fed
 8006f88:	08006f69 	.word	0x08006f69
 8006f8c:	08006f69 	.word	0x08006f69
 8006f90:	08006f69 	.word	0x08006f69
 8006f94:	08006f69 	.word	0x08006f69
 8006f98:	08006fed 	.word	0x08006fed
 8006f9c:	08006f69 	.word	0x08006f69
 8006fa0:	08006f69 	.word	0x08006f69
 8006fa4:	08006f69 	.word	0x08006f69
 8006fa8:	08006f69 	.word	0x08006f69
 8006fac:	080070f1 	.word	0x080070f1
 8006fb0:	08007019 	.word	0x08007019
 8006fb4:	080070ab 	.word	0x080070ab
 8006fb8:	08006f69 	.word	0x08006f69
 8006fbc:	08006f69 	.word	0x08006f69
 8006fc0:	08007113 	.word	0x08007113
 8006fc4:	08006f69 	.word	0x08006f69
 8006fc8:	08007019 	.word	0x08007019
 8006fcc:	08006f69 	.word	0x08006f69
 8006fd0:	08006f69 	.word	0x08006f69
 8006fd4:	080070b3 	.word	0x080070b3
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	1d1a      	adds	r2, r3, #4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	602a      	str	r2, [r5, #0]
 8006fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e09f      	b.n	800712c <_printf_i+0x1ec>
 8006fec:	6820      	ldr	r0, [r4, #0]
 8006fee:	682b      	ldr	r3, [r5, #0]
 8006ff0:	0607      	lsls	r7, r0, #24
 8006ff2:	f103 0104 	add.w	r1, r3, #4
 8006ff6:	6029      	str	r1, [r5, #0]
 8006ff8:	d501      	bpl.n	8006ffe <_printf_i+0xbe>
 8006ffa:	681e      	ldr	r6, [r3, #0]
 8006ffc:	e003      	b.n	8007006 <_printf_i+0xc6>
 8006ffe:	0646      	lsls	r6, r0, #25
 8007000:	d5fb      	bpl.n	8006ffa <_printf_i+0xba>
 8007002:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007006:	2e00      	cmp	r6, #0
 8007008:	da03      	bge.n	8007012 <_printf_i+0xd2>
 800700a:	232d      	movs	r3, #45	; 0x2d
 800700c:	4276      	negs	r6, r6
 800700e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007012:	485a      	ldr	r0, [pc, #360]	; (800717c <_printf_i+0x23c>)
 8007014:	230a      	movs	r3, #10
 8007016:	e012      	b.n	800703e <_printf_i+0xfe>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	6820      	ldr	r0, [r4, #0]
 800701c:	1d19      	adds	r1, r3, #4
 800701e:	6029      	str	r1, [r5, #0]
 8007020:	0605      	lsls	r5, r0, #24
 8007022:	d501      	bpl.n	8007028 <_printf_i+0xe8>
 8007024:	681e      	ldr	r6, [r3, #0]
 8007026:	e002      	b.n	800702e <_printf_i+0xee>
 8007028:	0641      	lsls	r1, r0, #25
 800702a:	d5fb      	bpl.n	8007024 <_printf_i+0xe4>
 800702c:	881e      	ldrh	r6, [r3, #0]
 800702e:	4853      	ldr	r0, [pc, #332]	; (800717c <_printf_i+0x23c>)
 8007030:	2f6f      	cmp	r7, #111	; 0x6f
 8007032:	bf0c      	ite	eq
 8007034:	2308      	moveq	r3, #8
 8007036:	230a      	movne	r3, #10
 8007038:	2100      	movs	r1, #0
 800703a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800703e:	6865      	ldr	r5, [r4, #4]
 8007040:	60a5      	str	r5, [r4, #8]
 8007042:	2d00      	cmp	r5, #0
 8007044:	bfa2      	ittt	ge
 8007046:	6821      	ldrge	r1, [r4, #0]
 8007048:	f021 0104 	bicge.w	r1, r1, #4
 800704c:	6021      	strge	r1, [r4, #0]
 800704e:	b90e      	cbnz	r6, 8007054 <_printf_i+0x114>
 8007050:	2d00      	cmp	r5, #0
 8007052:	d04b      	beq.n	80070ec <_printf_i+0x1ac>
 8007054:	4615      	mov	r5, r2
 8007056:	fbb6 f1f3 	udiv	r1, r6, r3
 800705a:	fb03 6711 	mls	r7, r3, r1, r6
 800705e:	5dc7      	ldrb	r7, [r0, r7]
 8007060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007064:	4637      	mov	r7, r6
 8007066:	42bb      	cmp	r3, r7
 8007068:	460e      	mov	r6, r1
 800706a:	d9f4      	bls.n	8007056 <_printf_i+0x116>
 800706c:	2b08      	cmp	r3, #8
 800706e:	d10b      	bne.n	8007088 <_printf_i+0x148>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	07de      	lsls	r6, r3, #31
 8007074:	d508      	bpl.n	8007088 <_printf_i+0x148>
 8007076:	6923      	ldr	r3, [r4, #16]
 8007078:	6861      	ldr	r1, [r4, #4]
 800707a:	4299      	cmp	r1, r3
 800707c:	bfde      	ittt	le
 800707e:	2330      	movle	r3, #48	; 0x30
 8007080:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007084:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007088:	1b52      	subs	r2, r2, r5
 800708a:	6122      	str	r2, [r4, #16]
 800708c:	f8cd a000 	str.w	sl, [sp]
 8007090:	464b      	mov	r3, r9
 8007092:	aa03      	add	r2, sp, #12
 8007094:	4621      	mov	r1, r4
 8007096:	4640      	mov	r0, r8
 8007098:	f7ff fee4 	bl	8006e64 <_printf_common>
 800709c:	3001      	adds	r0, #1
 800709e:	d14a      	bne.n	8007136 <_printf_i+0x1f6>
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295
 80070a4:	b004      	add	sp, #16
 80070a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	f043 0320 	orr.w	r3, r3, #32
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	4833      	ldr	r0, [pc, #204]	; (8007180 <_printf_i+0x240>)
 80070b4:	2778      	movs	r7, #120	; 0x78
 80070b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	6829      	ldr	r1, [r5, #0]
 80070be:	061f      	lsls	r7, r3, #24
 80070c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80070c4:	d402      	bmi.n	80070cc <_printf_i+0x18c>
 80070c6:	065f      	lsls	r7, r3, #25
 80070c8:	bf48      	it	mi
 80070ca:	b2b6      	uxthmi	r6, r6
 80070cc:	07df      	lsls	r7, r3, #31
 80070ce:	bf48      	it	mi
 80070d0:	f043 0320 	orrmi.w	r3, r3, #32
 80070d4:	6029      	str	r1, [r5, #0]
 80070d6:	bf48      	it	mi
 80070d8:	6023      	strmi	r3, [r4, #0]
 80070da:	b91e      	cbnz	r6, 80070e4 <_printf_i+0x1a4>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	f023 0320 	bic.w	r3, r3, #32
 80070e2:	6023      	str	r3, [r4, #0]
 80070e4:	2310      	movs	r3, #16
 80070e6:	e7a7      	b.n	8007038 <_printf_i+0xf8>
 80070e8:	4824      	ldr	r0, [pc, #144]	; (800717c <_printf_i+0x23c>)
 80070ea:	e7e4      	b.n	80070b6 <_printf_i+0x176>
 80070ec:	4615      	mov	r5, r2
 80070ee:	e7bd      	b.n	800706c <_printf_i+0x12c>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	6826      	ldr	r6, [r4, #0]
 80070f4:	6961      	ldr	r1, [r4, #20]
 80070f6:	1d18      	adds	r0, r3, #4
 80070f8:	6028      	str	r0, [r5, #0]
 80070fa:	0635      	lsls	r5, r6, #24
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	d501      	bpl.n	8007104 <_printf_i+0x1c4>
 8007100:	6019      	str	r1, [r3, #0]
 8007102:	e002      	b.n	800710a <_printf_i+0x1ca>
 8007104:	0670      	lsls	r0, r6, #25
 8007106:	d5fb      	bpl.n	8007100 <_printf_i+0x1c0>
 8007108:	8019      	strh	r1, [r3, #0]
 800710a:	2300      	movs	r3, #0
 800710c:	6123      	str	r3, [r4, #16]
 800710e:	4615      	mov	r5, r2
 8007110:	e7bc      	b.n	800708c <_printf_i+0x14c>
 8007112:	682b      	ldr	r3, [r5, #0]
 8007114:	1d1a      	adds	r2, r3, #4
 8007116:	602a      	str	r2, [r5, #0]
 8007118:	681d      	ldr	r5, [r3, #0]
 800711a:	6862      	ldr	r2, [r4, #4]
 800711c:	2100      	movs	r1, #0
 800711e:	4628      	mov	r0, r5
 8007120:	f7f9 f85e 	bl	80001e0 <memchr>
 8007124:	b108      	cbz	r0, 800712a <_printf_i+0x1ea>
 8007126:	1b40      	subs	r0, r0, r5
 8007128:	6060      	str	r0, [r4, #4]
 800712a:	6863      	ldr	r3, [r4, #4]
 800712c:	6123      	str	r3, [r4, #16]
 800712e:	2300      	movs	r3, #0
 8007130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007134:	e7aa      	b.n	800708c <_printf_i+0x14c>
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	462a      	mov	r2, r5
 800713a:	4649      	mov	r1, r9
 800713c:	4640      	mov	r0, r8
 800713e:	47d0      	blx	sl
 8007140:	3001      	adds	r0, #1
 8007142:	d0ad      	beq.n	80070a0 <_printf_i+0x160>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	079b      	lsls	r3, r3, #30
 8007148:	d413      	bmi.n	8007172 <_printf_i+0x232>
 800714a:	68e0      	ldr	r0, [r4, #12]
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	4298      	cmp	r0, r3
 8007150:	bfb8      	it	lt
 8007152:	4618      	movlt	r0, r3
 8007154:	e7a6      	b.n	80070a4 <_printf_i+0x164>
 8007156:	2301      	movs	r3, #1
 8007158:	4632      	mov	r2, r6
 800715a:	4649      	mov	r1, r9
 800715c:	4640      	mov	r0, r8
 800715e:	47d0      	blx	sl
 8007160:	3001      	adds	r0, #1
 8007162:	d09d      	beq.n	80070a0 <_printf_i+0x160>
 8007164:	3501      	adds	r5, #1
 8007166:	68e3      	ldr	r3, [r4, #12]
 8007168:	9903      	ldr	r1, [sp, #12]
 800716a:	1a5b      	subs	r3, r3, r1
 800716c:	42ab      	cmp	r3, r5
 800716e:	dcf2      	bgt.n	8007156 <_printf_i+0x216>
 8007170:	e7eb      	b.n	800714a <_printf_i+0x20a>
 8007172:	2500      	movs	r5, #0
 8007174:	f104 0619 	add.w	r6, r4, #25
 8007178:	e7f5      	b.n	8007166 <_printf_i+0x226>
 800717a:	bf00      	nop
 800717c:	08007a5c 	.word	0x08007a5c
 8007180:	08007a6d 	.word	0x08007a6d

08007184 <__sflush_r>:
 8007184:	898a      	ldrh	r2, [r1, #12]
 8007186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800718a:	4605      	mov	r5, r0
 800718c:	0710      	lsls	r0, r2, #28
 800718e:	460c      	mov	r4, r1
 8007190:	d458      	bmi.n	8007244 <__sflush_r+0xc0>
 8007192:	684b      	ldr	r3, [r1, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	dc05      	bgt.n	80071a4 <__sflush_r+0x20>
 8007198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	dc02      	bgt.n	80071a4 <__sflush_r+0x20>
 800719e:	2000      	movs	r0, #0
 80071a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071a6:	2e00      	cmp	r6, #0
 80071a8:	d0f9      	beq.n	800719e <__sflush_r+0x1a>
 80071aa:	2300      	movs	r3, #0
 80071ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071b0:	682f      	ldr	r7, [r5, #0]
 80071b2:	6a21      	ldr	r1, [r4, #32]
 80071b4:	602b      	str	r3, [r5, #0]
 80071b6:	d032      	beq.n	800721e <__sflush_r+0x9a>
 80071b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	075a      	lsls	r2, r3, #29
 80071be:	d505      	bpl.n	80071cc <__sflush_r+0x48>
 80071c0:	6863      	ldr	r3, [r4, #4]
 80071c2:	1ac0      	subs	r0, r0, r3
 80071c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071c6:	b10b      	cbz	r3, 80071cc <__sflush_r+0x48>
 80071c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071ca:	1ac0      	subs	r0, r0, r3
 80071cc:	2300      	movs	r3, #0
 80071ce:	4602      	mov	r2, r0
 80071d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071d2:	6a21      	ldr	r1, [r4, #32]
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b0      	blx	r6
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	d106      	bne.n	80071ec <__sflush_r+0x68>
 80071de:	6829      	ldr	r1, [r5, #0]
 80071e0:	291d      	cmp	r1, #29
 80071e2:	d82b      	bhi.n	800723c <__sflush_r+0xb8>
 80071e4:	4a29      	ldr	r2, [pc, #164]	; (800728c <__sflush_r+0x108>)
 80071e6:	410a      	asrs	r2, r1
 80071e8:	07d6      	lsls	r6, r2, #31
 80071ea:	d427      	bmi.n	800723c <__sflush_r+0xb8>
 80071ec:	2200      	movs	r2, #0
 80071ee:	6062      	str	r2, [r4, #4]
 80071f0:	04d9      	lsls	r1, r3, #19
 80071f2:	6922      	ldr	r2, [r4, #16]
 80071f4:	6022      	str	r2, [r4, #0]
 80071f6:	d504      	bpl.n	8007202 <__sflush_r+0x7e>
 80071f8:	1c42      	adds	r2, r0, #1
 80071fa:	d101      	bne.n	8007200 <__sflush_r+0x7c>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b903      	cbnz	r3, 8007202 <__sflush_r+0x7e>
 8007200:	6560      	str	r0, [r4, #84]	; 0x54
 8007202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007204:	602f      	str	r7, [r5, #0]
 8007206:	2900      	cmp	r1, #0
 8007208:	d0c9      	beq.n	800719e <__sflush_r+0x1a>
 800720a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800720e:	4299      	cmp	r1, r3
 8007210:	d002      	beq.n	8007218 <__sflush_r+0x94>
 8007212:	4628      	mov	r0, r5
 8007214:	f7ff fa92 	bl	800673c <_free_r>
 8007218:	2000      	movs	r0, #0
 800721a:	6360      	str	r0, [r4, #52]	; 0x34
 800721c:	e7c0      	b.n	80071a0 <__sflush_r+0x1c>
 800721e:	2301      	movs	r3, #1
 8007220:	4628      	mov	r0, r5
 8007222:	47b0      	blx	r6
 8007224:	1c41      	adds	r1, r0, #1
 8007226:	d1c8      	bne.n	80071ba <__sflush_r+0x36>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0c5      	beq.n	80071ba <__sflush_r+0x36>
 800722e:	2b1d      	cmp	r3, #29
 8007230:	d001      	beq.n	8007236 <__sflush_r+0xb2>
 8007232:	2b16      	cmp	r3, #22
 8007234:	d101      	bne.n	800723a <__sflush_r+0xb6>
 8007236:	602f      	str	r7, [r5, #0]
 8007238:	e7b1      	b.n	800719e <__sflush_r+0x1a>
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007240:	81a3      	strh	r3, [r4, #12]
 8007242:	e7ad      	b.n	80071a0 <__sflush_r+0x1c>
 8007244:	690f      	ldr	r7, [r1, #16]
 8007246:	2f00      	cmp	r7, #0
 8007248:	d0a9      	beq.n	800719e <__sflush_r+0x1a>
 800724a:	0793      	lsls	r3, r2, #30
 800724c:	680e      	ldr	r6, [r1, #0]
 800724e:	bf08      	it	eq
 8007250:	694b      	ldreq	r3, [r1, #20]
 8007252:	600f      	str	r7, [r1, #0]
 8007254:	bf18      	it	ne
 8007256:	2300      	movne	r3, #0
 8007258:	eba6 0807 	sub.w	r8, r6, r7
 800725c:	608b      	str	r3, [r1, #8]
 800725e:	f1b8 0f00 	cmp.w	r8, #0
 8007262:	dd9c      	ble.n	800719e <__sflush_r+0x1a>
 8007264:	6a21      	ldr	r1, [r4, #32]
 8007266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007268:	4643      	mov	r3, r8
 800726a:	463a      	mov	r2, r7
 800726c:	4628      	mov	r0, r5
 800726e:	47b0      	blx	r6
 8007270:	2800      	cmp	r0, #0
 8007272:	dc06      	bgt.n	8007282 <__sflush_r+0xfe>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800727a:	81a3      	strh	r3, [r4, #12]
 800727c:	f04f 30ff 	mov.w	r0, #4294967295
 8007280:	e78e      	b.n	80071a0 <__sflush_r+0x1c>
 8007282:	4407      	add	r7, r0
 8007284:	eba8 0800 	sub.w	r8, r8, r0
 8007288:	e7e9      	b.n	800725e <__sflush_r+0xda>
 800728a:	bf00      	nop
 800728c:	dfbffffe 	.word	0xdfbffffe

08007290 <_fflush_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	690b      	ldr	r3, [r1, #16]
 8007294:	4605      	mov	r5, r0
 8007296:	460c      	mov	r4, r1
 8007298:	b913      	cbnz	r3, 80072a0 <_fflush_r+0x10>
 800729a:	2500      	movs	r5, #0
 800729c:	4628      	mov	r0, r5
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	b118      	cbz	r0, 80072aa <_fflush_r+0x1a>
 80072a2:	6a03      	ldr	r3, [r0, #32]
 80072a4:	b90b      	cbnz	r3, 80072aa <_fflush_r+0x1a>
 80072a6:	f7ff f8fd 	bl	80064a4 <__sinit>
 80072aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0f3      	beq.n	800729a <_fflush_r+0xa>
 80072b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072b4:	07d0      	lsls	r0, r2, #31
 80072b6:	d404      	bmi.n	80072c2 <_fflush_r+0x32>
 80072b8:	0599      	lsls	r1, r3, #22
 80072ba:	d402      	bmi.n	80072c2 <_fflush_r+0x32>
 80072bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072be:	f7ff fa26 	bl	800670e <__retarget_lock_acquire_recursive>
 80072c2:	4628      	mov	r0, r5
 80072c4:	4621      	mov	r1, r4
 80072c6:	f7ff ff5d 	bl	8007184 <__sflush_r>
 80072ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072cc:	07da      	lsls	r2, r3, #31
 80072ce:	4605      	mov	r5, r0
 80072d0:	d4e4      	bmi.n	800729c <_fflush_r+0xc>
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	059b      	lsls	r3, r3, #22
 80072d6:	d4e1      	bmi.n	800729c <_fflush_r+0xc>
 80072d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072da:	f7ff fa19 	bl	8006710 <__retarget_lock_release_recursive>
 80072de:	e7dd      	b.n	800729c <_fflush_r+0xc>

080072e0 <__swbuf_r>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	460e      	mov	r6, r1
 80072e4:	4614      	mov	r4, r2
 80072e6:	4605      	mov	r5, r0
 80072e8:	b118      	cbz	r0, 80072f2 <__swbuf_r+0x12>
 80072ea:	6a03      	ldr	r3, [r0, #32]
 80072ec:	b90b      	cbnz	r3, 80072f2 <__swbuf_r+0x12>
 80072ee:	f7ff f8d9 	bl	80064a4 <__sinit>
 80072f2:	69a3      	ldr	r3, [r4, #24]
 80072f4:	60a3      	str	r3, [r4, #8]
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	071a      	lsls	r2, r3, #28
 80072fa:	d525      	bpl.n	8007348 <__swbuf_r+0x68>
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	b31b      	cbz	r3, 8007348 <__swbuf_r+0x68>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	6922      	ldr	r2, [r4, #16]
 8007304:	1a98      	subs	r0, r3, r2
 8007306:	6963      	ldr	r3, [r4, #20]
 8007308:	b2f6      	uxtb	r6, r6
 800730a:	4283      	cmp	r3, r0
 800730c:	4637      	mov	r7, r6
 800730e:	dc04      	bgt.n	800731a <__swbuf_r+0x3a>
 8007310:	4621      	mov	r1, r4
 8007312:	4628      	mov	r0, r5
 8007314:	f7ff ffbc 	bl	8007290 <_fflush_r>
 8007318:	b9e0      	cbnz	r0, 8007354 <__swbuf_r+0x74>
 800731a:	68a3      	ldr	r3, [r4, #8]
 800731c:	3b01      	subs	r3, #1
 800731e:	60a3      	str	r3, [r4, #8]
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	6022      	str	r2, [r4, #0]
 8007326:	701e      	strb	r6, [r3, #0]
 8007328:	6962      	ldr	r2, [r4, #20]
 800732a:	1c43      	adds	r3, r0, #1
 800732c:	429a      	cmp	r2, r3
 800732e:	d004      	beq.n	800733a <__swbuf_r+0x5a>
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	07db      	lsls	r3, r3, #31
 8007334:	d506      	bpl.n	8007344 <__swbuf_r+0x64>
 8007336:	2e0a      	cmp	r6, #10
 8007338:	d104      	bne.n	8007344 <__swbuf_r+0x64>
 800733a:	4621      	mov	r1, r4
 800733c:	4628      	mov	r0, r5
 800733e:	f7ff ffa7 	bl	8007290 <_fflush_r>
 8007342:	b938      	cbnz	r0, 8007354 <__swbuf_r+0x74>
 8007344:	4638      	mov	r0, r7
 8007346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007348:	4621      	mov	r1, r4
 800734a:	4628      	mov	r0, r5
 800734c:	f000 f806 	bl	800735c <__swsetup_r>
 8007350:	2800      	cmp	r0, #0
 8007352:	d0d5      	beq.n	8007300 <__swbuf_r+0x20>
 8007354:	f04f 37ff 	mov.w	r7, #4294967295
 8007358:	e7f4      	b.n	8007344 <__swbuf_r+0x64>
	...

0800735c <__swsetup_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	4b2a      	ldr	r3, [pc, #168]	; (8007408 <__swsetup_r+0xac>)
 8007360:	4605      	mov	r5, r0
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	460c      	mov	r4, r1
 8007366:	b118      	cbz	r0, 8007370 <__swsetup_r+0x14>
 8007368:	6a03      	ldr	r3, [r0, #32]
 800736a:	b90b      	cbnz	r3, 8007370 <__swsetup_r+0x14>
 800736c:	f7ff f89a 	bl	80064a4 <__sinit>
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007376:	0718      	lsls	r0, r3, #28
 8007378:	d422      	bmi.n	80073c0 <__swsetup_r+0x64>
 800737a:	06d9      	lsls	r1, r3, #27
 800737c:	d407      	bmi.n	800738e <__swsetup_r+0x32>
 800737e:	2309      	movs	r3, #9
 8007380:	602b      	str	r3, [r5, #0]
 8007382:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007386:	81a3      	strh	r3, [r4, #12]
 8007388:	f04f 30ff 	mov.w	r0, #4294967295
 800738c:	e034      	b.n	80073f8 <__swsetup_r+0x9c>
 800738e:	0758      	lsls	r0, r3, #29
 8007390:	d512      	bpl.n	80073b8 <__swsetup_r+0x5c>
 8007392:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007394:	b141      	cbz	r1, 80073a8 <__swsetup_r+0x4c>
 8007396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800739a:	4299      	cmp	r1, r3
 800739c:	d002      	beq.n	80073a4 <__swsetup_r+0x48>
 800739e:	4628      	mov	r0, r5
 80073a0:	f7ff f9cc 	bl	800673c <_free_r>
 80073a4:	2300      	movs	r3, #0
 80073a6:	6363      	str	r3, [r4, #52]	; 0x34
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073ae:	81a3      	strh	r3, [r4, #12]
 80073b0:	2300      	movs	r3, #0
 80073b2:	6063      	str	r3, [r4, #4]
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	6023      	str	r3, [r4, #0]
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	f043 0308 	orr.w	r3, r3, #8
 80073be:	81a3      	strh	r3, [r4, #12]
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	b94b      	cbnz	r3, 80073d8 <__swsetup_r+0x7c>
 80073c4:	89a3      	ldrh	r3, [r4, #12]
 80073c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ce:	d003      	beq.n	80073d8 <__swsetup_r+0x7c>
 80073d0:	4621      	mov	r1, r4
 80073d2:	4628      	mov	r0, r5
 80073d4:	f000 f8dd 	bl	8007592 <__smakebuf_r>
 80073d8:	89a0      	ldrh	r0, [r4, #12]
 80073da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073de:	f010 0301 	ands.w	r3, r0, #1
 80073e2:	d00a      	beq.n	80073fa <__swsetup_r+0x9e>
 80073e4:	2300      	movs	r3, #0
 80073e6:	60a3      	str	r3, [r4, #8]
 80073e8:	6963      	ldr	r3, [r4, #20]
 80073ea:	425b      	negs	r3, r3
 80073ec:	61a3      	str	r3, [r4, #24]
 80073ee:	6923      	ldr	r3, [r4, #16]
 80073f0:	b943      	cbnz	r3, 8007404 <__swsetup_r+0xa8>
 80073f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073f6:	d1c4      	bne.n	8007382 <__swsetup_r+0x26>
 80073f8:	bd38      	pop	{r3, r4, r5, pc}
 80073fa:	0781      	lsls	r1, r0, #30
 80073fc:	bf58      	it	pl
 80073fe:	6963      	ldrpl	r3, [r4, #20]
 8007400:	60a3      	str	r3, [r4, #8]
 8007402:	e7f4      	b.n	80073ee <__swsetup_r+0x92>
 8007404:	2000      	movs	r0, #0
 8007406:	e7f7      	b.n	80073f8 <__swsetup_r+0x9c>
 8007408:	20000164 	.word	0x20000164

0800740c <memmove>:
 800740c:	4288      	cmp	r0, r1
 800740e:	b510      	push	{r4, lr}
 8007410:	eb01 0402 	add.w	r4, r1, r2
 8007414:	d902      	bls.n	800741c <memmove+0x10>
 8007416:	4284      	cmp	r4, r0
 8007418:	4623      	mov	r3, r4
 800741a:	d807      	bhi.n	800742c <memmove+0x20>
 800741c:	1e43      	subs	r3, r0, #1
 800741e:	42a1      	cmp	r1, r4
 8007420:	d008      	beq.n	8007434 <memmove+0x28>
 8007422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800742a:	e7f8      	b.n	800741e <memmove+0x12>
 800742c:	4402      	add	r2, r0
 800742e:	4601      	mov	r1, r0
 8007430:	428a      	cmp	r2, r1
 8007432:	d100      	bne.n	8007436 <memmove+0x2a>
 8007434:	bd10      	pop	{r4, pc}
 8007436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800743a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800743e:	e7f7      	b.n	8007430 <memmove+0x24>

08007440 <_raise_r>:
 8007440:	291f      	cmp	r1, #31
 8007442:	b538      	push	{r3, r4, r5, lr}
 8007444:	4604      	mov	r4, r0
 8007446:	460d      	mov	r5, r1
 8007448:	d904      	bls.n	8007454 <_raise_r+0x14>
 800744a:	2316      	movs	r3, #22
 800744c:	6003      	str	r3, [r0, #0]
 800744e:	f04f 30ff 	mov.w	r0, #4294967295
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007456:	b112      	cbz	r2, 800745e <_raise_r+0x1e>
 8007458:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800745c:	b94b      	cbnz	r3, 8007472 <_raise_r+0x32>
 800745e:	4620      	mov	r0, r4
 8007460:	f000 f830 	bl	80074c4 <_getpid_r>
 8007464:	462a      	mov	r2, r5
 8007466:	4601      	mov	r1, r0
 8007468:	4620      	mov	r0, r4
 800746a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800746e:	f000 b817 	b.w	80074a0 <_kill_r>
 8007472:	2b01      	cmp	r3, #1
 8007474:	d00a      	beq.n	800748c <_raise_r+0x4c>
 8007476:	1c59      	adds	r1, r3, #1
 8007478:	d103      	bne.n	8007482 <_raise_r+0x42>
 800747a:	2316      	movs	r3, #22
 800747c:	6003      	str	r3, [r0, #0]
 800747e:	2001      	movs	r0, #1
 8007480:	e7e7      	b.n	8007452 <_raise_r+0x12>
 8007482:	2400      	movs	r4, #0
 8007484:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007488:	4628      	mov	r0, r5
 800748a:	4798      	blx	r3
 800748c:	2000      	movs	r0, #0
 800748e:	e7e0      	b.n	8007452 <_raise_r+0x12>

08007490 <raise>:
 8007490:	4b02      	ldr	r3, [pc, #8]	; (800749c <raise+0xc>)
 8007492:	4601      	mov	r1, r0
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	f7ff bfd3 	b.w	8007440 <_raise_r>
 800749a:	bf00      	nop
 800749c:	20000164 	.word	0x20000164

080074a0 <_kill_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4d07      	ldr	r5, [pc, #28]	; (80074c0 <_kill_r+0x20>)
 80074a4:	2300      	movs	r3, #0
 80074a6:	4604      	mov	r4, r0
 80074a8:	4608      	mov	r0, r1
 80074aa:	4611      	mov	r1, r2
 80074ac:	602b      	str	r3, [r5, #0]
 80074ae:	f7f9 fb9d 	bl	8000bec <_kill>
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	d102      	bne.n	80074bc <_kill_r+0x1c>
 80074b6:	682b      	ldr	r3, [r5, #0]
 80074b8:	b103      	cbz	r3, 80074bc <_kill_r+0x1c>
 80074ba:	6023      	str	r3, [r4, #0]
 80074bc:	bd38      	pop	{r3, r4, r5, pc}
 80074be:	bf00      	nop
 80074c0:	200003f0 	.word	0x200003f0

080074c4 <_getpid_r>:
 80074c4:	f7f9 bb8a 	b.w	8000bdc <_getpid>

080074c8 <_sbrk_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4d06      	ldr	r5, [pc, #24]	; (80074e4 <_sbrk_r+0x1c>)
 80074cc:	2300      	movs	r3, #0
 80074ce:	4604      	mov	r4, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	602b      	str	r3, [r5, #0]
 80074d4:	f7f9 fc12 	bl	8000cfc <_sbrk>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d102      	bne.n	80074e2 <_sbrk_r+0x1a>
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	b103      	cbz	r3, 80074e2 <_sbrk_r+0x1a>
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
 80074e4:	200003f0 	.word	0x200003f0

080074e8 <_realloc_r>:
 80074e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ec:	4680      	mov	r8, r0
 80074ee:	4614      	mov	r4, r2
 80074f0:	460e      	mov	r6, r1
 80074f2:	b921      	cbnz	r1, 80074fe <_realloc_r+0x16>
 80074f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074f8:	4611      	mov	r1, r2
 80074fa:	f7ff b98b 	b.w	8006814 <_malloc_r>
 80074fe:	b92a      	cbnz	r2, 800750c <_realloc_r+0x24>
 8007500:	f7ff f91c 	bl	800673c <_free_r>
 8007504:	4625      	mov	r5, r4
 8007506:	4628      	mov	r0, r5
 8007508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800750c:	f000 f8a0 	bl	8007650 <_malloc_usable_size_r>
 8007510:	4284      	cmp	r4, r0
 8007512:	4607      	mov	r7, r0
 8007514:	d802      	bhi.n	800751c <_realloc_r+0x34>
 8007516:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800751a:	d812      	bhi.n	8007542 <_realloc_r+0x5a>
 800751c:	4621      	mov	r1, r4
 800751e:	4640      	mov	r0, r8
 8007520:	f7ff f978 	bl	8006814 <_malloc_r>
 8007524:	4605      	mov	r5, r0
 8007526:	2800      	cmp	r0, #0
 8007528:	d0ed      	beq.n	8007506 <_realloc_r+0x1e>
 800752a:	42bc      	cmp	r4, r7
 800752c:	4622      	mov	r2, r4
 800752e:	4631      	mov	r1, r6
 8007530:	bf28      	it	cs
 8007532:	463a      	movcs	r2, r7
 8007534:	f7ff f8ed 	bl	8006712 <memcpy>
 8007538:	4631      	mov	r1, r6
 800753a:	4640      	mov	r0, r8
 800753c:	f7ff f8fe 	bl	800673c <_free_r>
 8007540:	e7e1      	b.n	8007506 <_realloc_r+0x1e>
 8007542:	4635      	mov	r5, r6
 8007544:	e7df      	b.n	8007506 <_realloc_r+0x1e>

08007546 <__swhatbuf_r>:
 8007546:	b570      	push	{r4, r5, r6, lr}
 8007548:	460c      	mov	r4, r1
 800754a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754e:	2900      	cmp	r1, #0
 8007550:	b096      	sub	sp, #88	; 0x58
 8007552:	4615      	mov	r5, r2
 8007554:	461e      	mov	r6, r3
 8007556:	da0d      	bge.n	8007574 <__swhatbuf_r+0x2e>
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800755e:	f04f 0100 	mov.w	r1, #0
 8007562:	bf0c      	ite	eq
 8007564:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007568:	2340      	movne	r3, #64	; 0x40
 800756a:	2000      	movs	r0, #0
 800756c:	6031      	str	r1, [r6, #0]
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	b016      	add	sp, #88	; 0x58
 8007572:	bd70      	pop	{r4, r5, r6, pc}
 8007574:	466a      	mov	r2, sp
 8007576:	f000 f849 	bl	800760c <_fstat_r>
 800757a:	2800      	cmp	r0, #0
 800757c:	dbec      	blt.n	8007558 <__swhatbuf_r+0x12>
 800757e:	9901      	ldr	r1, [sp, #4]
 8007580:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007584:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007588:	4259      	negs	r1, r3
 800758a:	4159      	adcs	r1, r3
 800758c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007590:	e7eb      	b.n	800756a <__swhatbuf_r+0x24>

08007592 <__smakebuf_r>:
 8007592:	898b      	ldrh	r3, [r1, #12]
 8007594:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007596:	079d      	lsls	r5, r3, #30
 8007598:	4606      	mov	r6, r0
 800759a:	460c      	mov	r4, r1
 800759c:	d507      	bpl.n	80075ae <__smakebuf_r+0x1c>
 800759e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	6123      	str	r3, [r4, #16]
 80075a6:	2301      	movs	r3, #1
 80075a8:	6163      	str	r3, [r4, #20]
 80075aa:	b002      	add	sp, #8
 80075ac:	bd70      	pop	{r4, r5, r6, pc}
 80075ae:	ab01      	add	r3, sp, #4
 80075b0:	466a      	mov	r2, sp
 80075b2:	f7ff ffc8 	bl	8007546 <__swhatbuf_r>
 80075b6:	9900      	ldr	r1, [sp, #0]
 80075b8:	4605      	mov	r5, r0
 80075ba:	4630      	mov	r0, r6
 80075bc:	f7ff f92a 	bl	8006814 <_malloc_r>
 80075c0:	b948      	cbnz	r0, 80075d6 <__smakebuf_r+0x44>
 80075c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c6:	059a      	lsls	r2, r3, #22
 80075c8:	d4ef      	bmi.n	80075aa <__smakebuf_r+0x18>
 80075ca:	f023 0303 	bic.w	r3, r3, #3
 80075ce:	f043 0302 	orr.w	r3, r3, #2
 80075d2:	81a3      	strh	r3, [r4, #12]
 80075d4:	e7e3      	b.n	800759e <__smakebuf_r+0xc>
 80075d6:	89a3      	ldrh	r3, [r4, #12]
 80075d8:	6020      	str	r0, [r4, #0]
 80075da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075de:	81a3      	strh	r3, [r4, #12]
 80075e0:	9b00      	ldr	r3, [sp, #0]
 80075e2:	6163      	str	r3, [r4, #20]
 80075e4:	9b01      	ldr	r3, [sp, #4]
 80075e6:	6120      	str	r0, [r4, #16]
 80075e8:	b15b      	cbz	r3, 8007602 <__smakebuf_r+0x70>
 80075ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ee:	4630      	mov	r0, r6
 80075f0:	f000 f81e 	bl	8007630 <_isatty_r>
 80075f4:	b128      	cbz	r0, 8007602 <__smakebuf_r+0x70>
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	f023 0303 	bic.w	r3, r3, #3
 80075fc:	f043 0301 	orr.w	r3, r3, #1
 8007600:	81a3      	strh	r3, [r4, #12]
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	431d      	orrs	r5, r3
 8007606:	81a5      	strh	r5, [r4, #12]
 8007608:	e7cf      	b.n	80075aa <__smakebuf_r+0x18>
	...

0800760c <_fstat_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d07      	ldr	r5, [pc, #28]	; (800762c <_fstat_r+0x20>)
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	4611      	mov	r1, r2
 8007618:	602b      	str	r3, [r5, #0]
 800761a:	f7f9 fb46 	bl	8000caa <_fstat>
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	d102      	bne.n	8007628 <_fstat_r+0x1c>
 8007622:	682b      	ldr	r3, [r5, #0]
 8007624:	b103      	cbz	r3, 8007628 <_fstat_r+0x1c>
 8007626:	6023      	str	r3, [r4, #0]
 8007628:	bd38      	pop	{r3, r4, r5, pc}
 800762a:	bf00      	nop
 800762c:	200003f0 	.word	0x200003f0

08007630 <_isatty_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d06      	ldr	r5, [pc, #24]	; (800764c <_isatty_r+0x1c>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	602b      	str	r3, [r5, #0]
 800763c:	f7f9 fb45 	bl	8000cca <_isatty>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_isatty_r+0x1a>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_isatty_r+0x1a>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	200003f0 	.word	0x200003f0

08007650 <_malloc_usable_size_r>:
 8007650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007654:	1f18      	subs	r0, r3, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	bfbc      	itt	lt
 800765a:	580b      	ldrlt	r3, [r1, r0]
 800765c:	18c0      	addlt	r0, r0, r3
 800765e:	4770      	bx	lr

08007660 <_init>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	bf00      	nop
 8007664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007666:	bc08      	pop	{r3}
 8007668:	469e      	mov	lr, r3
 800766a:	4770      	bx	lr

0800766c <_fini>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	bf00      	nop
 8007670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007672:	bc08      	pop	{r3}
 8007674:	469e      	mov	lr, r3
 8007676:	4770      	bx	lr

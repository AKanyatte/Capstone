
stm32LORA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004184  08004184  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004184  08004184  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004184  08004184  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004184  08004184  00014184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800418c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000005c  080041e8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  080041e8  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae53  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f3f  00000000  00000000  0002af22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  0002ce68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000859  00000000  00000000  0002d978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002005e  00000000  00000000  0002e1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cbcd  00000000  00000000  0004e22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf026  00000000  00000000  0005adfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003104  00000000  00000000  00119e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0011cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080040b8 	.word	0x080040b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080040b8 	.word	0x080040b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  LoRa_Init();
 8000286:	f000 f81b 	bl	80002c0 <LoRa_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028a:	f000 fc4c 	bl	8000b26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028e:	f000 f973 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000292:	f000 fa3b 	bl	800070c <MX_GPIO_Init>
  MX_USART2_Init();
 8000296:	f000 fa0d 	bl	80006b4 <MX_USART2_Init>
  MX_SPI1_Init();
 800029a:	f000 f9cf 	bl	800063c <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

	    // Your data to be transmitted
	    uint8_t dataToSend[] = "Hello, LoRa!";
 800029e:	4b07      	ldr	r3, [pc, #28]	; (80002bc <main+0x3c>)
 80002a0:	463c      	mov	r4, r7
 80002a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a4:	c407      	stmia	r4!, {r0, r1, r2}
 80002a6:	7023      	strb	r3, [r4, #0]

	    // Send data to LoRa module
	    LoRa_SendData(dataToSend, sizeof(dataToSend));
 80002a8:	463b      	mov	r3, r7
 80002aa:	210d      	movs	r1, #13
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f8ad 	bl	800040c <LoRa_SendData>

	    // Delay before sending again (you may need to adjust this based on your requirements)
	    HAL_Delay(5000);
 80002b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80002b6:	f000 fcab 	bl	8000c10 <HAL_Delay>
  {
 80002ba:	e7f0      	b.n	800029e <main+0x1e>
 80002bc:	080040d0 	.word	0x080040d0

080002c0 <LoRa_Init>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void LoRa_Init() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
  // Implement the initialization of the LoRa module here
  // This may include setting LoRa parameters, frequency, etc.

	  // Set LoRa mode, sleep mode
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Set NSS low
 80002c6:	2200      	movs	r2, #0
 80002c8:	2101      	movs	r1, #1
 80002ca:	484c      	ldr	r0, [pc, #304]	; (80003fc <LoRa_Init+0x13c>)
 80002cc:	f000 ff80 	bl	80011d0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, REG_OP_MODE | 0x80, 1, HAL_MAX_DELAY);  // Set write command
 80002d0:	f04f 33ff 	mov.w	r3, #4294967295
 80002d4:	2201      	movs	r2, #1
 80002d6:	2181      	movs	r1, #129	; 0x81
 80002d8:	4849      	ldr	r0, [pc, #292]	; (8000400 <LoRa_Init+0x140>)
 80002da:	f002 f9d8 	bl	800268e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, 0x80, 1, HAL_MAX_DELAY);  // Set sleep mode
 80002de:	f04f 33ff 	mov.w	r3, #4294967295
 80002e2:	2201      	movs	r2, #1
 80002e4:	2180      	movs	r1, #128	; 0x80
 80002e6:	4846      	ldr	r0, [pc, #280]	; (8000400 <LoRa_Init+0x140>)
 80002e8:	f002 f9d1 	bl	800268e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Set NSS high
 80002ec:	2201      	movs	r2, #1
 80002ee:	2101      	movs	r1, #1
 80002f0:	4842      	ldr	r0, [pc, #264]	; (80003fc <LoRa_Init+0x13c>)
 80002f2:	f000 ff6d 	bl	80011d0 <HAL_GPIO_WritePin>

	  // Set LoRa mode, standby mode
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Set NSS low
 80002f6:	2200      	movs	r2, #0
 80002f8:	2101      	movs	r1, #1
 80002fa:	4840      	ldr	r0, [pc, #256]	; (80003fc <LoRa_Init+0x13c>)
 80002fc:	f000 ff68 	bl	80011d0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, REG_OP_MODE | 0x80, 1, HAL_MAX_DELAY);  // Set write command
 8000300:	f04f 33ff 	mov.w	r3, #4294967295
 8000304:	2201      	movs	r2, #1
 8000306:	2181      	movs	r1, #129	; 0x81
 8000308:	483d      	ldr	r0, [pc, #244]	; (8000400 <LoRa_Init+0x140>)
 800030a:	f002 f9c0 	bl	800268e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, 0x81, 1, HAL_MAX_DELAY);  // Set standby mode
 800030e:	f04f 33ff 	mov.w	r3, #4294967295
 8000312:	2201      	movs	r2, #1
 8000314:	2181      	movs	r1, #129	; 0x81
 8000316:	483a      	ldr	r0, [pc, #232]	; (8000400 <LoRa_Init+0x140>)
 8000318:	f002 f9b9 	bl	800268e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Set NSS high
 800031c:	2201      	movs	r2, #1
 800031e:	2101      	movs	r1, #1
 8000320:	4836      	ldr	r0, [pc, #216]	; (80003fc <LoRa_Init+0x13c>)
 8000322:	f000 ff55 	bl	80011d0 <HAL_GPIO_WritePin>

	  // Configure frequency (433MHz in this example)
	  uint32_t frequency = 915000000;  // Set your desired frequency
 8000326:	4b37      	ldr	r3, [pc, #220]	; (8000404 <LoRa_Init+0x144>)
 8000328:	607b      	str	r3, [r7, #4]
	  uint32_t frf = (frequency << 19) / 32000000;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	04db      	lsls	r3, r3, #19
 800032e:	4a36      	ldr	r2, [pc, #216]	; (8000408 <LoRa_Init+0x148>)
 8000330:	fba2 2303 	umull	r2, r3, r2, r3
 8000334:	0ddb      	lsrs	r3, r3, #23
 8000336:	603b      	str	r3, [r7, #0]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Set NSS low
 8000338:	2200      	movs	r2, #0
 800033a:	2101      	movs	r1, #1
 800033c:	482f      	ldr	r0, [pc, #188]	; (80003fc <LoRa_Init+0x13c>)
 800033e:	f000 ff47 	bl	80011d0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, REG_FRF_MSB | 0x80, 1, HAL_MAX_DELAY);  // Set write command
 8000342:	f04f 33ff 	mov.w	r3, #4294967295
 8000346:	2201      	movs	r2, #1
 8000348:	2186      	movs	r1, #134	; 0x86
 800034a:	482d      	ldr	r0, [pc, #180]	; (8000400 <LoRa_Init+0x140>)
 800034c:	f002 f99f 	bl	800268e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, (frf >> 16) & 0xFF, 1, HAL_MAX_DELAY);
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	0c1b      	lsrs	r3, r3, #16
 8000354:	b2db      	uxtb	r3, r3
 8000356:	4619      	mov	r1, r3
 8000358:	f04f 33ff 	mov.w	r3, #4294967295
 800035c:	2201      	movs	r2, #1
 800035e:	4828      	ldr	r0, [pc, #160]	; (8000400 <LoRa_Init+0x140>)
 8000360:	f002 f995 	bl	800268e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, (frf >> 8) & 0xFF, 1, HAL_MAX_DELAY);
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	0a1b      	lsrs	r3, r3, #8
 8000368:	b2db      	uxtb	r3, r3
 800036a:	4619      	mov	r1, r3
 800036c:	f04f 33ff 	mov.w	r3, #4294967295
 8000370:	2201      	movs	r2, #1
 8000372:	4823      	ldr	r0, [pc, #140]	; (8000400 <LoRa_Init+0x140>)
 8000374:	f002 f98b 	bl	800268e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, frf & 0xFF, 1, HAL_MAX_DELAY);
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	b2db      	uxtb	r3, r3
 800037c:	4619      	mov	r1, r3
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
 8000382:	2201      	movs	r2, #1
 8000384:	481e      	ldr	r0, [pc, #120]	; (8000400 <LoRa_Init+0x140>)
 8000386:	f002 f982 	bl	800268e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Set NSS high
 800038a:	2201      	movs	r2, #1
 800038c:	2101      	movs	r1, #1
 800038e:	481b      	ldr	r0, [pc, #108]	; (80003fc <LoRa_Init+0x13c>)
 8000390:	f000 ff1e 	bl	80011d0 <HAL_GPIO_WritePin>

	  // Configure LoRa parameters
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Set NSS low
 8000394:	2200      	movs	r2, #0
 8000396:	2101      	movs	r1, #1
 8000398:	4818      	ldr	r0, [pc, #96]	; (80003fc <LoRa_Init+0x13c>)
 800039a:	f000 ff19 	bl	80011d0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, REG_LORA_CONFIG_1 | 0x80, 1, HAL_MAX_DELAY);  // Set write command
 800039e:	f04f 33ff 	mov.w	r3, #4294967295
 80003a2:	2201      	movs	r2, #1
 80003a4:	219d      	movs	r1, #157	; 0x9d
 80003a6:	4816      	ldr	r0, [pc, #88]	; (8000400 <LoRa_Init+0x140>)
 80003a8:	f002 f971 	bl	800268e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, 0x72, 1, HAL_MAX_DELAY);  // SF = 7, BW = 125kHz
 80003ac:	f04f 33ff 	mov.w	r3, #4294967295
 80003b0:	2201      	movs	r2, #1
 80003b2:	2172      	movs	r1, #114	; 0x72
 80003b4:	4812      	ldr	r0, [pc, #72]	; (8000400 <LoRa_Init+0x140>)
 80003b6:	f002 f96a 	bl	800268e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Set NSS high
 80003ba:	2201      	movs	r2, #1
 80003bc:	2101      	movs	r1, #1
 80003be:	480f      	ldr	r0, [pc, #60]	; (80003fc <LoRa_Init+0x13c>)
 80003c0:	f000 ff06 	bl	80011d0 <HAL_GPIO_WritePin>

	  // Set PA config
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Set NSS low
 80003c4:	2200      	movs	r2, #0
 80003c6:	2101      	movs	r1, #1
 80003c8:	480c      	ldr	r0, [pc, #48]	; (80003fc <LoRa_Init+0x13c>)
 80003ca:	f000 ff01 	bl	80011d0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, REG_PA_CONFIG | 0x80, 1, HAL_MAX_DELAY);  // Set write command
 80003ce:	f04f 33ff 	mov.w	r3, #4294967295
 80003d2:	2201      	movs	r2, #1
 80003d4:	2189      	movs	r1, #137	; 0x89
 80003d6:	480a      	ldr	r0, [pc, #40]	; (8000400 <LoRa_Init+0x140>)
 80003d8:	f002 f959 	bl	800268e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, 0x8F, 1, HAL_MAX_DELAY);  // Set PA max power
 80003dc:	f04f 33ff 	mov.w	r3, #4294967295
 80003e0:	2201      	movs	r2, #1
 80003e2:	218f      	movs	r1, #143	; 0x8f
 80003e4:	4806      	ldr	r0, [pc, #24]	; (8000400 <LoRa_Init+0x140>)
 80003e6:	f002 f952 	bl	800268e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Set NSS high
 80003ea:	2201      	movs	r2, #1
 80003ec:	2101      	movs	r1, #1
 80003ee:	4803      	ldr	r0, [pc, #12]	; (80003fc <LoRa_Init+0x13c>)
 80003f0:	f000 feee 	bl	80011d0 <HAL_GPIO_WritePin>



}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	48000400 	.word	0x48000400
 8000400:	20000078 	.word	0x20000078
 8000404:	3689cac0 	.word	0x3689cac0
 8000408:	431bde83 	.word	0x431bde83

0800040c <LoRa_SendData>:

void LoRa_SendData(uint8_t *data, uint16_t size) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	460b      	mov	r3, r1
 8000416:	807b      	strh	r3, [r7, #2]
  // Implement code to send data to LoRa module through SPI
  // You'll need to handle the SPI communication based on your specific setup
  // Use the HAL_SPI_Transmit function or similar for SPI communication

	  // Set LoRa mode, standby mode
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Set NSS low
 8000418:	2200      	movs	r2, #0
 800041a:	2101      	movs	r1, #1
 800041c:	4845      	ldr	r0, [pc, #276]	; (8000534 <LoRa_SendData+0x128>)
 800041e:	f000 fed7 	bl	80011d0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, REG_OP_MODE | 0x80, 1, HAL_MAX_DELAY);  // Set write command
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	2201      	movs	r2, #1
 8000428:	2181      	movs	r1, #129	; 0x81
 800042a:	4843      	ldr	r0, [pc, #268]	; (8000538 <LoRa_SendData+0x12c>)
 800042c:	f002 f92f 	bl	800268e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, 0x81, 1, HAL_MAX_DELAY);  // Set standby mode
 8000430:	f04f 33ff 	mov.w	r3, #4294967295
 8000434:	2201      	movs	r2, #1
 8000436:	2181      	movs	r1, #129	; 0x81
 8000438:	483f      	ldr	r0, [pc, #252]	; (8000538 <LoRa_SendData+0x12c>)
 800043a:	f002 f928 	bl	800268e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Set NSS high
 800043e:	2201      	movs	r2, #1
 8000440:	2101      	movs	r1, #1
 8000442:	483c      	ldr	r0, [pc, #240]	; (8000534 <LoRa_SendData+0x128>)
 8000444:	f000 fec4 	bl	80011d0 <HAL_GPIO_WritePin>

	  // Set FIFO address pointer
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Set NSS low
 8000448:	2200      	movs	r2, #0
 800044a:	2101      	movs	r1, #1
 800044c:	4839      	ldr	r0, [pc, #228]	; (8000534 <LoRa_SendData+0x128>)
 800044e:	f000 febf 	bl	80011d0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, REG_FIFO_ADDR_PTR | 0x80, 1, HAL_MAX_DELAY);  // Set write command
 8000452:	f04f 33ff 	mov.w	r3, #4294967295
 8000456:	2201      	movs	r2, #1
 8000458:	218d      	movs	r1, #141	; 0x8d
 800045a:	4837      	ldr	r0, [pc, #220]	; (8000538 <LoRa_SendData+0x12c>)
 800045c:	f002 f917 	bl	800268e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, 0x80, 1, HAL_MAX_DELAY);  // Set FIFO address pointer to 0
 8000460:	f04f 33ff 	mov.w	r3, #4294967295
 8000464:	2201      	movs	r2, #1
 8000466:	2180      	movs	r1, #128	; 0x80
 8000468:	4833      	ldr	r0, [pc, #204]	; (8000538 <LoRa_SendData+0x12c>)
 800046a:	f002 f910 	bl	800268e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Set NSS high
 800046e:	2201      	movs	r2, #1
 8000470:	2101      	movs	r1, #1
 8000472:	4830      	ldr	r0, [pc, #192]	; (8000534 <LoRa_SendData+0x128>)
 8000474:	f000 feac 	bl	80011d0 <HAL_GPIO_WritePin>

	  // Write data to FIFO
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Set NSS low
 8000478:	2200      	movs	r2, #0
 800047a:	2101      	movs	r1, #1
 800047c:	482d      	ldr	r0, [pc, #180]	; (8000534 <LoRa_SendData+0x128>)
 800047e:	f000 fea7 	bl	80011d0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, REG_FIFO | 0x80, 1, HAL_MAX_DELAY);  // Set write command
 8000482:	f04f 33ff 	mov.w	r3, #4294967295
 8000486:	2201      	movs	r2, #1
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	482b      	ldr	r0, [pc, #172]	; (8000538 <LoRa_SendData+0x12c>)
 800048c:	f002 f8ff 	bl	800268e <HAL_SPI_Transmit>

	  for (uint16_t i = 0; i < size; i++) {
 8000490:	2300      	movs	r3, #0
 8000492:	81fb      	strh	r3, [r7, #14]
 8000494:	e01f      	b.n	80004d6 <LoRa_SendData+0xca>
	    HAL_SPI_Transmit(&hspi1, data[i], 1, HAL_MAX_DELAY);
 8000496:	89fb      	ldrh	r3, [r7, #14]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	4413      	add	r3, r2
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	4619      	mov	r1, r3
 80004a0:	f04f 33ff 	mov.w	r3, #4294967295
 80004a4:	2201      	movs	r2, #1
 80004a6:	4824      	ldr	r0, [pc, #144]	; (8000538 <LoRa_SendData+0x12c>)
 80004a8:	f002 f8f1 	bl	800268e <HAL_SPI_Transmit>

	    // Print the current byte to USART2
	    char hex[3];
	    snprintf(hex, sizeof(hex), "%02X", data[i]);
 80004ac:	89fb      	ldrh	r3, [r7, #14]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	f107 0008 	add.w	r0, r7, #8
 80004b8:	4a20      	ldr	r2, [pc, #128]	; (800053c <LoRa_SendData+0x130>)
 80004ba:	2103      	movs	r1, #3
 80004bc:	f003 f944 	bl	8003748 <sniprintf>
	    USART2_SendString(hex);
 80004c0:	f107 0308 	add.w	r3, r7, #8
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 f841 	bl	800054c <USART2_SendString>
	    USART2_SendString(" ");
 80004ca:	481d      	ldr	r0, [pc, #116]	; (8000540 <LoRa_SendData+0x134>)
 80004cc:	f000 f83e 	bl	800054c <USART2_SendString>
	  for (uint16_t i = 0; i < size; i++) {
 80004d0:	89fb      	ldrh	r3, [r7, #14]
 80004d2:	3301      	adds	r3, #1
 80004d4:	81fb      	strh	r3, [r7, #14]
 80004d6:	89fa      	ldrh	r2, [r7, #14]
 80004d8:	887b      	ldrh	r3, [r7, #2]
 80004da:	429a      	cmp	r2, r3
 80004dc:	d3db      	bcc.n	8000496 <LoRa_SendData+0x8a>
	  }



	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Set NSS high
 80004de:	2201      	movs	r2, #1
 80004e0:	2101      	movs	r1, #1
 80004e2:	4814      	ldr	r0, [pc, #80]	; (8000534 <LoRa_SendData+0x128>)
 80004e4:	f000 fe74 	bl	80011d0 <HAL_GPIO_WritePin>

	  // Set LoRa mode, transmit mode
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Set NSS low
 80004e8:	2200      	movs	r2, #0
 80004ea:	2101      	movs	r1, #1
 80004ec:	4811      	ldr	r0, [pc, #68]	; (8000534 <LoRa_SendData+0x128>)
 80004ee:	f000 fe6f 	bl	80011d0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, REG_OP_MODE | 0x80, 1, HAL_MAX_DELAY);  // Set write command
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295
 80004f6:	2201      	movs	r2, #1
 80004f8:	2181      	movs	r1, #129	; 0x81
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <LoRa_SendData+0x12c>)
 80004fc:	f002 f8c7 	bl	800268e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, 0x83, 1, HAL_MAX_DELAY);  // Set transmit mode
 8000500:	f04f 33ff 	mov.w	r3, #4294967295
 8000504:	2201      	movs	r2, #1
 8000506:	2183      	movs	r1, #131	; 0x83
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <LoRa_SendData+0x12c>)
 800050a:	f002 f8c0 	bl	800268e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Set NSS high
 800050e:	2201      	movs	r2, #1
 8000510:	2101      	movs	r1, #1
 8000512:	4808      	ldr	r0, [pc, #32]	; (8000534 <LoRa_SendData+0x128>)
 8000514:	f000 fe5c 	bl	80011d0 <HAL_GPIO_WritePin>


	  USART2_SendString("Sending data to LoRa: ");
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <LoRa_SendData+0x138>)
 800051a:	f000 f817 	bl	800054c <USART2_SendString>
	  USART2_SendString((char *)data);
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f000 f814 	bl	800054c <USART2_SendString>
	  USART2_SendString("\r\n");
 8000524:	4808      	ldr	r0, [pc, #32]	; (8000548 <LoRa_SendData+0x13c>)
 8000526:	f000 f811 	bl	800054c <USART2_SendString>

}
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	48000400 	.word	0x48000400
 8000538:	20000078 	.word	0x20000078
 800053c:	080040e0 	.word	0x080040e0
 8000540:	080040e8 	.word	0x080040e8
 8000544:	080040ec 	.word	0x080040ec
 8000548:	08004104 	.word	0x08004104

0800054c <USART2_SendString>:

void USART2_SendString(char *str) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  HAL_USART_Transmit(&husart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff fe3b 	bl	80001d0 <strlen>
 800055a:	4603      	mov	r3, r0
 800055c:	b29a      	uxth	r2, r3
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <USART2_SendString+0x28>)
 8000566:	f002 fcc9 	bl	8002efc <HAL_USART_Transmit>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200000dc 	.word	0x200000dc

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b096      	sub	sp, #88	; 0x58
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2244      	movs	r2, #68	; 0x44
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 f912 	bl	80037b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059e:	f000 fe4d 	bl	800123c <HAL_PWREx_ControlVoltageScaling>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a8:	f000 f90a 	bl	80007c0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ac:	f000 fe28 	bl	8001200 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b0:	4b21      	ldr	r3, [pc, #132]	; (8000638 <SystemClock_Config+0xc0>)
 80005b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005b6:	4a20      	ldr	r2, [pc, #128]	; (8000638 <SystemClock_Config+0xc0>)
 80005b8:	f023 0318 	bic.w	r3, r3, #24
 80005bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005c0:	2314      	movs	r3, #20
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d0:	2360      	movs	r3, #96	; 0x60
 80005d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005d8:	2301      	movs	r3, #1
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005e0:	2310      	movs	r3, #16
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fe77 	bl	80012e8 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000600:	f000 f8de 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2303      	movs	r3, #3
 800060a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	2101      	movs	r1, #1
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fa77 	bl	8001b10 <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000628:	f000 f8ca 	bl	80007c0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800062c:	f001 fe8a 	bl	8002344 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000630:	bf00      	nop
 8000632:	3758      	adds	r7, #88	; 0x58
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000

0800063c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_SPI1_Init+0x70>)
 8000642:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <MX_SPI1_Init+0x74>)
 8000644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_SPI1_Init+0x70>)
 8000648:	f44f 7282 	mov.w	r2, #260	; 0x104
 800064c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_SPI1_Init+0x70>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_SPI1_Init+0x70>)
 8000656:	f44f 7240 	mov.w	r2, #768	; 0x300
 800065a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_SPI1_Init+0x70>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_SPI1_Init+0x70>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_SPI1_Init+0x70>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_SPI1_Init+0x70>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_SPI1_Init+0x70>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_SPI1_Init+0x70>)
 800067c:	2200      	movs	r2, #0
 800067e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_SPI1_Init+0x70>)
 8000682:	2200      	movs	r2, #0
 8000684:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_SPI1_Init+0x70>)
 8000688:	2207      	movs	r2, #7
 800068a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_SPI1_Init+0x70>)
 800068e:	2200      	movs	r2, #0
 8000690:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_SPI1_Init+0x70>)
 8000694:	2208      	movs	r2, #8
 8000696:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_SPI1_Init+0x70>)
 800069a:	f001 ff55 	bl	8002548 <HAL_SPI_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 80006a4:	f000 f88c 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000078 	.word	0x20000078
 80006b0:	40013000 	.word	0x40013000

080006b4 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_USART2_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_USART2_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_Init+0x50>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_USART2_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_USART2_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_USART2_Init+0x50>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_USART2_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_USART2_Init+0x50>)
 80006f2:	f002 fbb9 	bl	8002e68 <HAL_USART_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f860 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000dc 	.word	0x200000dc
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <MX_GPIO_Init+0xac>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a24      	ldr	r2, [pc, #144]	; (80007b8 <MX_GPIO_Init+0xac>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_GPIO_Init+0xac>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_GPIO_Init+0xac>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <MX_GPIO_Init+0xac>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_GPIO_Init+0xac>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_GPIO_Init+0xac>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <MX_GPIO_Init+0xac>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_GPIO_Init+0xac>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2108      	movs	r1, #8
 800076e:	4813      	ldr	r0, [pc, #76]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000770:	f000 fd2e 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000774:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f000 fbb5 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000792:	2308      	movs	r3, #8
 8000794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4619      	mov	r1, r3
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_GPIO_Init+0xb0>)
 80007aa:	f000 fba7 	bl	8000efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ae:	bf00      	nop
 80007b0:	3720      	adds	r7, #32
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000400 	.word	0x48000400

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_MspInit+0x44>)
 80007d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d6:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <HAL_MspInit+0x44>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6613      	str	r3, [r2, #96]	; 0x60
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <HAL_MspInit+0x44>)
 80007e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x44>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x44>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6593      	str	r3, [r2, #88]	; 0x58
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x44>)
 80007f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a29      	ldr	r2, [pc, #164]	; (80008d8 <HAL_SPI_MspInit+0xc4>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d14c      	bne.n	80008d0 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <HAL_SPI_MspInit+0xc8>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	4a28      	ldr	r2, [pc, #160]	; (80008dc <HAL_SPI_MspInit+0xc8>)
 800083c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000840:	6613      	str	r3, [r2, #96]	; 0x60
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <HAL_SPI_MspInit+0xc8>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b23      	ldr	r3, [pc, #140]	; (80008dc <HAL_SPI_MspInit+0xc8>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a22      	ldr	r2, [pc, #136]	; (80008dc <HAL_SPI_MspInit+0xc8>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <HAL_SPI_MspInit+0xc8>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <HAL_SPI_MspInit+0xc8>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <HAL_SPI_MspInit+0xc8>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <HAL_SPI_MspInit+0xc8>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800087e:	23e0      	movs	r3, #224	; 0xe0
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800088e:	2305      	movs	r3, #5
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f000 fb2e 	bl	8000efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008a0:	2301      	movs	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008b0:	2305      	movs	r3, #5
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <HAL_SPI_MspInit+0xcc>)
 80008bc:	f000 fb1e 	bl	8000efc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2023      	movs	r0, #35	; 0x23
 80008c6:	f000 faa2 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008ca:	2023      	movs	r0, #35	; 0x23
 80008cc:	f000 fabb 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40013000 	.word	0x40013000
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48000400 	.word	0x48000400

080008e4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b09e      	sub	sp, #120	; 0x78
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	2254      	movs	r2, #84	; 0x54
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f002 ff53 	bl	80037b0 <memset>
  if(husart->Instance==USART2)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a2c      	ldr	r2, [pc, #176]	; (80009c0 <HAL_USART_MspInit+0xdc>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d150      	bne.n	80009b6 <HAL_USART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000914:	2302      	movs	r3, #2
 8000916:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000918:	2300      	movs	r3, #0
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fb19 	bl	8001f58 <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 800092c:	f7ff ff48 	bl	80007c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <HAL_USART_MspInit+0xe0>)
 8000932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000934:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <HAL_USART_MspInit+0xe0>)
 8000936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093a:	6593      	str	r3, [r2, #88]	; 0x58
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_USART_MspInit+0xe0>)
 800093e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_USART_MspInit+0xe0>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094c:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <HAL_USART_MspInit+0xe0>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_USART_MspInit+0xe0>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_4;
 8000960:	2314      	movs	r3, #20
 8000962:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000970:	2307      	movs	r3, #7
 8000972:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000978:	4619      	mov	r1, r3
 800097a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097e:	f000 fabd 	bl	8000efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000986:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000994:	2303      	movs	r3, #3
 8000996:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800099c:	4619      	mov	r1, r3
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f000 faab 	bl	8000efc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2026      	movs	r0, #38	; 0x26
 80009ac:	f000 fa2f 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009b0:	2026      	movs	r0, #38	; 0x26
 80009b2:	f000 fa48 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3778      	adds	r7, #120	; 0x78
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40021000 	.word	0x40021000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 f8dc 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <SPI1_IRQHandler+0x10>)
 8000a22:	f001 ffa9 	bl	8002978 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000078 	.word	0x20000078

08000a30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <USART2_IRQHandler+0x10>)
 8000a36:	f002 fb0f 	bl	8003058 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000dc 	.word	0x200000dc

08000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a4c:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <_sbrk+0x5c>)
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <_sbrk+0x60>)
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <_sbrk+0x64>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <_sbrk+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d207      	bcs.n	8000a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a74:	f002 fea4 	bl	80037c0 <__errno>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	e009      	b.n	8000a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <_sbrk+0x64>)
 8000a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20010000 	.word	0x20010000
 8000aa4:	00000400 	.word	0x00000400
 8000aa8:	2000012c 	.word	0x2000012c
 8000aac:	20000280 	.word	0x20000280

08000ab0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <SystemInit+0x20>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <SystemInit+0x20>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad8:	f7ff ffea 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	; (8000b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <LoopForever+0xe>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <LoopForever+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b02:	f002 fe63 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b06:	f7ff fbbb 	bl	8000280 <main>

08000b0a <LoopForever>:

LoopForever:
    b LoopForever
 8000b0a:	e7fe      	b.n	8000b0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b18:	0800418c 	.word	0x0800418c
  ldr r2, =_sbss
 8000b1c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b20:	2000027c 	.word	0x2000027c

08000b24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_IRQHandler>

08000b26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f961 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f80e 	bl	8000b58 <HAL_InitTick>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	e001      	b.n	8000b4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b48:	f7ff fe40 	bl	80007cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_InitTick+0x6c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d023      	beq.n	8000bb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_InitTick+0x70>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_InitTick+0x6c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f96d 	bl	8000e62 <HAL_SYSTICK_Config>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d10f      	bne.n	8000bae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d809      	bhi.n	8000ba8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f000 f937 	bl	8000e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_InitTick+0x74>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e007      	b.n	8000bb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e004      	b.n	8000bb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	e001      	b.n	8000bb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000130 	.word	0x20000130

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000130 	.word	0x20000130

08000c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff ffee 	bl	8000bf8 <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d005      	beq.n	8000c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_Delay+0x44>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c36:	bf00      	nop
 8000c38:	f7ff ffde 	bl	8000bf8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8f7      	bhi.n	8000c38 <HAL_Delay+0x28>
  {
  }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff8e 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff29 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff3e 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff8e 	bl	8000d4c <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff31 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa2 	bl	8000db4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d005      	beq.n	8000e9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2204      	movs	r2, #4
 8000e96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]
 8000e9c:	e029      	b.n	8000ef2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 020e 	bic.w	r2, r2, #14
 8000eac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0201 	bic.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f003 021c 	and.w	r2, r3, #28
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	2101      	movs	r1, #1
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	4798      	blx	r3
    }
  }
  return status;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0a:	e148      	b.n	800119e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 813a 	beq.w	8001198 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d005      	beq.n	8000f3c <HAL_GPIO_Init+0x40>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d130      	bne.n	8000f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f72:	2201      	movs	r2, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	f003 0201 	and.w	r2, r3, #1
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d017      	beq.n	8000fda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d123      	bne.n	800102e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	6939      	ldr	r1, [r7, #16]
 800102a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0203 	and.w	r2, r3, #3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 8094 	beq.w	8001198 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001070:	4b52      	ldr	r3, [pc, #328]	; (80011bc <HAL_GPIO_Init+0x2c0>)
 8001072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001074:	4a51      	ldr	r2, [pc, #324]	; (80011bc <HAL_GPIO_Init+0x2c0>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6613      	str	r3, [r2, #96]	; 0x60
 800107c:	4b4f      	ldr	r3, [pc, #316]	; (80011bc <HAL_GPIO_Init+0x2c0>)
 800107e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001088:	4a4d      	ldr	r2, [pc, #308]	; (80011c0 <HAL_GPIO_Init+0x2c4>)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010b2:	d00d      	beq.n	80010d0 <HAL_GPIO_Init+0x1d4>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a43      	ldr	r2, [pc, #268]	; (80011c4 <HAL_GPIO_Init+0x2c8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d007      	beq.n	80010cc <HAL_GPIO_Init+0x1d0>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a42      	ldr	r2, [pc, #264]	; (80011c8 <HAL_GPIO_Init+0x2cc>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d101      	bne.n	80010c8 <HAL_GPIO_Init+0x1cc>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e004      	b.n	80010d2 <HAL_GPIO_Init+0x1d6>
 80010c8:	2307      	movs	r3, #7
 80010ca:	e002      	b.n	80010d2 <HAL_GPIO_Init+0x1d6>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <HAL_GPIO_Init+0x1d6>
 80010d0:	2300      	movs	r3, #0
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	f002 0203 	and.w	r2, r2, #3
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	4093      	lsls	r3, r2
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010e2:	4937      	ldr	r1, [pc, #220]	; (80011c0 <HAL_GPIO_Init+0x2c4>)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3302      	adds	r3, #2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010f0:	4b36      	ldr	r3, [pc, #216]	; (80011cc <HAL_GPIO_Init+0x2d0>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001114:	4a2d      	ldr	r2, [pc, #180]	; (80011cc <HAL_GPIO_Init+0x2d0>)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800111a:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <HAL_GPIO_Init+0x2d0>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800113e:	4a23      	ldr	r2, [pc, #140]	; (80011cc <HAL_GPIO_Init+0x2d0>)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <HAL_GPIO_Init+0x2d0>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001168:	4a18      	ldr	r2, [pc, #96]	; (80011cc <HAL_GPIO_Init+0x2d0>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_GPIO_Init+0x2d0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_GPIO_Init+0x2d0>)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3301      	adds	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	fa22 f303 	lsr.w	r3, r2, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f47f aeaf 	bne.w	8000f0c <HAL_GPIO_Init+0x10>
  }
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	371c      	adds	r7, #28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000
 80011c4:	48000400 	.word	0x48000400
 80011c8:	48000800 	.word	0x48000800
 80011cc:	40010400 	.word	0x40010400

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40007000 	.word	0x40007000

08001220 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <HAL_PWREx_GetVoltageRange+0x18>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40007000 	.word	0x40007000

0800123c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800124a:	d130      	bne.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001258:	d038      	beq.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001262:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001268:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2232      	movs	r2, #50	; 0x32
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	0c9b      	lsrs	r3, r3, #18
 800127c:	3301      	adds	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001280:	e002      	b.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3b01      	subs	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001294:	d102      	bne.n	800129c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f2      	bne.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a8:	d110      	bne.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e00f      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ba:	d007      	beq.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c4:	4a05      	ldr	r2, [pc, #20]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40007000 	.word	0x40007000
 80012e0:	20000000 	.word	0x20000000
 80012e4:	431bde83 	.word	0x431bde83

080012e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f000 bc02 	b.w	8001b00 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fc:	4b96      	ldr	r3, [pc, #600]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001306:	4b94      	ldr	r3, [pc, #592]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80e4 	beq.w	80014e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d007      	beq.n	8001334 <HAL_RCC_OscConfig+0x4c>
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	2b0c      	cmp	r3, #12
 8001328:	f040 808b 	bne.w	8001442 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2b01      	cmp	r3, #1
 8001330:	f040 8087 	bne.w	8001442 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001334:	4b88      	ldr	r3, [pc, #544]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <HAL_RCC_OscConfig+0x64>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e3d9      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1a      	ldr	r2, [r3, #32]
 8001350:	4b81      	ldr	r3, [pc, #516]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <HAL_RCC_OscConfig+0x7e>
 800135c:	4b7e      	ldr	r3, [pc, #504]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001364:	e005      	b.n	8001372 <HAL_RCC_OscConfig+0x8a>
 8001366:	4b7c      	ldr	r3, [pc, #496]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001372:	4293      	cmp	r3, r2
 8001374:	d223      	bcs.n	80013be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fd8c 	bl	8001e98 <RCC_SetFlashLatencyFromMSIRange>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e3ba      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138a:	4b73      	ldr	r3, [pc, #460]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a72      	ldr	r2, [pc, #456]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b70      	ldr	r3, [pc, #448]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	496d      	ldr	r1, [pc, #436]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a8:	4b6b      	ldr	r3, [pc, #428]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	4968      	ldr	r1, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
 80013bc:	e025      	b.n	800140a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013be:	4b66      	ldr	r3, [pc, #408]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a65      	ldr	r2, [pc, #404]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b63      	ldr	r3, [pc, #396]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4960      	ldr	r1, [pc, #384]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013dc:	4b5e      	ldr	r3, [pc, #376]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	495b      	ldr	r1, [pc, #364]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d109      	bne.n	800140a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fd4c 	bl	8001e98 <RCC_SetFlashLatencyFromMSIRange>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e37a      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800140a:	f000 fc81 	bl	8001d10 <HAL_RCC_GetSysClockFreq>
 800140e:	4602      	mov	r2, r0
 8001410:	4b51      	ldr	r3, [pc, #324]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	4950      	ldr	r1, [pc, #320]	; (800155c <HAL_RCC_OscConfig+0x274>)
 800141c:	5ccb      	ldrb	r3, [r1, r3]
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	fa22 f303 	lsr.w	r3, r2, r3
 8001426:	4a4e      	ldr	r2, [pc, #312]	; (8001560 <HAL_RCC_OscConfig+0x278>)
 8001428:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800142a:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fb92 	bl	8000b58 <HAL_InitTick>
 8001434:	4603      	mov	r3, r0
 8001436:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d052      	beq.n	80014e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	e35e      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d032      	beq.n	80014b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800144a:	4b43      	ldr	r3, [pc, #268]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a42      	ldr	r2, [pc, #264]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001456:	f7ff fbcf 	bl	8000bf8 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800145e:	f7ff fbcb 	bl	8000bf8 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e347      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001470:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147c:	4b36      	ldr	r3, [pc, #216]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a35      	ldr	r2, [pc, #212]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4930      	ldr	r1, [pc, #192]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	492b      	ldr	r1, [pc, #172]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
 80014ae:	e01a      	b.n	80014e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a28      	ldr	r2, [pc, #160]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80014b6:	f023 0301 	bic.w	r3, r3, #1
 80014ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fb9c 	bl	8000bf8 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c4:	f7ff fb98 	bl	8000bf8 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e314      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1dc>
 80014e2:	e000      	b.n	80014e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d073      	beq.n	80015da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_OscConfig+0x21c>
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2b0c      	cmp	r3, #12
 80014fc:	d10e      	bne.n	800151c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2b03      	cmp	r3, #3
 8001502:	d10b      	bne.n	800151c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d063      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d15f      	bne.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e2f1      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001524:	d106      	bne.n	8001534 <HAL_RCC_OscConfig+0x24c>
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800152c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e025      	b.n	8001580 <HAL_RCC_OscConfig+0x298>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153c:	d114      	bne.n	8001568 <HAL_RCC_OscConfig+0x280>
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a02      	ldr	r2, [pc, #8]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e013      	b.n	8001580 <HAL_RCC_OscConfig+0x298>
 8001558:	40021000 	.word	0x40021000
 800155c:	08004108 	.word	0x08004108
 8001560:	20000000 	.word	0x20000000
 8001564:	20000004 	.word	0x20000004
 8001568:	4ba0      	ldr	r3, [pc, #640]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a9f      	ldr	r2, [pc, #636]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800156e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b9d      	ldr	r3, [pc, #628]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a9c      	ldr	r2, [pc, #624]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fb36 	bl	8000bf8 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fb32 	bl	8000bf8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e2ae      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a2:	4b92      	ldr	r3, [pc, #584]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x2a8>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fb22 	bl	8000bf8 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fb1e 	bl	8000bf8 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e29a      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ca:	4b88      	ldr	r3, [pc, #544]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2d0>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d060      	beq.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_OscConfig+0x310>
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	d119      	bne.n	8001626 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d116      	bne.n	8001626 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f8:	4b7c      	ldr	r3, [pc, #496]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_OscConfig+0x328>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e277      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b76      	ldr	r3, [pc, #472]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	061b      	lsls	r3, r3, #24
 800161e:	4973      	ldr	r1, [pc, #460]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001624:	e040      	b.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d023      	beq.n	8001676 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162e:	4b6f      	ldr	r3, [pc, #444]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6e      	ldr	r2, [pc, #440]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fadd 	bl	8000bf8 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff fad9 	bl	8000bf8 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e255      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001654:	4b65      	ldr	r3, [pc, #404]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b62      	ldr	r3, [pc, #392]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	061b      	lsls	r3, r3, #24
 800166e:	495f      	ldr	r1, [pc, #380]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
 8001674:	e018      	b.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001676:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a5c      	ldr	r2, [pc, #368]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800167c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff fab9 	bl	8000bf8 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff fab5 	bl	8000bf8 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e231      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d03c      	beq.n	800172e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016bc:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c2:	4a4a      	ldr	r2, [pc, #296]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff fa94 	bl	8000bf8 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff fa90 	bl	8000bf8 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e20c      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80016e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ef      	beq.n	80016d4 <HAL_RCC_OscConfig+0x3ec>
 80016f4:	e01b      	b.n	800172e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80016f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fc:	4a3b      	ldr	r2, [pc, #236]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001706:	f7ff fa77 	bl	8000bf8 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170e:	f7ff fa73 	bl	8000bf8 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e1ef      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001720:	4b32      	ldr	r3, [pc, #200]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ef      	bne.n	800170e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80a6 	beq.w	8001888 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001740:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10d      	bne.n	8001768 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001756:	6593      	str	r3, [r2, #88]	; 0x58
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001764:	2301      	movs	r3, #1
 8001766:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_RCC_OscConfig+0x508>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d118      	bne.n	80017a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_RCC_OscConfig+0x508>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <HAL_RCC_OscConfig+0x508>)
 800177a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001780:	f7ff fa3a 	bl	8000bf8 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001788:	f7ff fa36 	bl	8000bf8 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e1b2      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_RCC_OscConfig+0x508>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d108      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4d8>
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80017b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b4:	4a0d      	ldr	r2, [pc, #52]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017be:	e029      	b.n	8001814 <HAL_RCC_OscConfig+0x52c>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d115      	bne.n	80017f4 <HAL_RCC_OscConfig+0x50c>
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ce:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	4a03      	ldr	r2, [pc, #12]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e8:	e014      	b.n	8001814 <HAL_RCC_OscConfig+0x52c>
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40007000 	.word	0x40007000
 80017f4:	4b9a      	ldr	r3, [pc, #616]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fa:	4a99      	ldr	r2, [pc, #612]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001804:	4b96      	ldr	r3, [pc, #600]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180a:	4a95      	ldr	r2, [pc, #596]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d016      	beq.n	800184a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff f9ec 	bl	8000bf8 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001822:	e00a      	b.n	800183a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7ff f9e8 	bl	8000bf8 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e162      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183a:	4b89      	ldr	r3, [pc, #548]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 800183c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ed      	beq.n	8001824 <HAL_RCC_OscConfig+0x53c>
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff f9d5 	bl	8000bf8 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff f9d1 	bl	8000bf8 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e14b      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001868:	4b7d      	ldr	r3, [pc, #500]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1ed      	bne.n	8001852 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001876:	7ffb      	ldrb	r3, [r7, #31]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187c:	4b78      	ldr	r3, [pc, #480]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	4a77      	ldr	r2, [pc, #476]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 8001882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001886:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0320 	and.w	r3, r3, #32
 8001890:	2b00      	cmp	r3, #0
 8001892:	d03c      	beq.n	800190e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01c      	beq.n	80018d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800189c:	4b70      	ldr	r3, [pc, #448]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 800189e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018a2:	4a6f      	ldr	r2, [pc, #444]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ac:	f7ff f9a4 	bl	8000bf8 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018b4:	f7ff f9a0 	bl	8000bf8 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e11c      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018c6:	4b66      	ldr	r3, [pc, #408]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 80018c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ef      	beq.n	80018b4 <HAL_RCC_OscConfig+0x5cc>
 80018d4:	e01b      	b.n	800190e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018d6:	4b62      	ldr	r3, [pc, #392]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 80018d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018dc:	4a60      	ldr	r2, [pc, #384]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e6:	f7ff f987 	bl	8000bf8 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ee:	f7ff f983 	bl	8000bf8 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e0ff      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001900:	4b57      	ldr	r3, [pc, #348]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 8001902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1ef      	bne.n	80018ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80f3 	beq.w	8001afe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	2b02      	cmp	r3, #2
 800191e:	f040 80c9 	bne.w	8001ab4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001922:	4b4f      	ldr	r3, [pc, #316]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f003 0203 	and.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	429a      	cmp	r2, r3
 8001934:	d12c      	bne.n	8001990 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	3b01      	subs	r3, #1
 8001942:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d123      	bne.n	8001990 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001952:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d11b      	bne.n	8001990 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001962:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d113      	bne.n	8001990 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001972:	085b      	lsrs	r3, r3, #1
 8001974:	3b01      	subs	r3, #1
 8001976:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d109      	bne.n	8001990 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	085b      	lsrs	r3, r3, #1
 8001988:	3b01      	subs	r3, #1
 800198a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d06b      	beq.n	8001a68 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d062      	beq.n	8001a5c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001996:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0ac      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a2d      	ldr	r2, [pc, #180]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 80019ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019b2:	f7ff f921 	bl	8000bf8 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff f91d 	bl	8000bf8 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e099      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f0      	bne.n	80019ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_RCC_OscConfig+0x77c>)
 80019de:	4013      	ands	r3, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019e8:	3a01      	subs	r2, #1
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	4311      	orrs	r1, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019f2:	0212      	lsls	r2, r2, #8
 80019f4:	4311      	orrs	r1, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019fa:	0852      	lsrs	r2, r2, #1
 80019fc:	3a01      	subs	r2, #1
 80019fe:	0552      	lsls	r2, r2, #21
 8001a00:	4311      	orrs	r1, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a06:	0852      	lsrs	r2, r2, #1
 8001a08:	3a01      	subs	r2, #1
 8001a0a:	0652      	lsls	r2, r2, #25
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a12:	06d2      	lsls	r2, r2, #27
 8001a14:	430a      	orrs	r2, r1
 8001a16:	4912      	ldr	r1, [pc, #72]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 8001a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a28:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a34:	f7ff f8e0 	bl	8000bf8 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff f8dc 	bl	8000bf8 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e058      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <HAL_RCC_OscConfig+0x778>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a5a:	e050      	b.n	8001afe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e04f      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
 8001a60:	40021000 	.word	0x40021000
 8001a64:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <HAL_RCC_OscConfig+0x820>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d144      	bne.n	8001afe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_RCC_OscConfig+0x820>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <HAL_RCC_OscConfig+0x820>)
 8001a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <HAL_RCC_OscConfig+0x820>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4a20      	ldr	r2, [pc, #128]	; (8001b08 <HAL_RCC_OscConfig+0x820>)
 8001a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a8c:	f7ff f8b4 	bl	8000bf8 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f8b0 	bl	8000bf8 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e02c      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_RCC_OscConfig+0x820>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x7ac>
 8001ab2:	e024      	b.n	8001afe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d01f      	beq.n	8001afa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_RCC_OscConfig+0x820>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_RCC_OscConfig+0x820>)
 8001ac0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f897 	bl	8000bf8 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ace:	f7ff f893 	bl	8000bf8 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e00f      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_RCC_OscConfig+0x820>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_RCC_OscConfig+0x820>)
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	4905      	ldr	r1, [pc, #20]	; (8001b08 <HAL_RCC_OscConfig+0x820>)
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_RCC_OscConfig+0x824>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
 8001af8:	e001      	b.n	8001afe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	feeefffc 	.word	0xfeeefffc

08001b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0e7      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b24:	4b75      	ldr	r3, [pc, #468]	; (8001cfc <HAL_RCC_ClockConfig+0x1ec>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d910      	bls.n	8001b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b72      	ldr	r3, [pc, #456]	; (8001cfc <HAL_RCC_ClockConfig+0x1ec>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 0207 	bic.w	r2, r3, #7
 8001b3a:	4970      	ldr	r1, [pc, #448]	; (8001cfc <HAL_RCC_ClockConfig+0x1ec>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b6e      	ldr	r3, [pc, #440]	; (8001cfc <HAL_RCC_ClockConfig+0x1ec>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0cf      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d010      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	4b66      	ldr	r3, [pc, #408]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d908      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b70:	4b63      	ldr	r3, [pc, #396]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4960      	ldr	r1, [pc, #384]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d04c      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b96:	4b5a      	ldr	r3, [pc, #360]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d121      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e0a6      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bae:	4b54      	ldr	r3, [pc, #336]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d115      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e09a      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc6:	4b4e      	ldr	r3, [pc, #312]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d109      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e08e      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd6:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e086      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001be6:	4b46      	ldr	r3, [pc, #280]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f023 0203 	bic.w	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4943      	ldr	r1, [pc, #268]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bf8:	f7fe fffe 	bl	8000bf8 <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c00:	f7fe fffa 	bl	8000bf8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e06e      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 020c 	and.w	r2, r3, #12
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d1eb      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d010      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d208      	bcs.n	8001c56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c44:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	492b      	ldr	r1, [pc, #172]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <HAL_RCC_ClockConfig+0x1ec>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d210      	bcs.n	8001c86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c64:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <HAL_RCC_ClockConfig+0x1ec>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 0207 	bic.w	r2, r3, #7
 8001c6c:	4923      	ldr	r1, [pc, #140]	; (8001cfc <HAL_RCC_ClockConfig+0x1ec>)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c74:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <HAL_RCC_ClockConfig+0x1ec>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e036      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d008      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	4918      	ldr	r1, [pc, #96]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d009      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4910      	ldr	r1, [pc, #64]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cc4:	f000 f824 	bl	8001d10 <HAL_RCC_GetSysClockFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	490b      	ldr	r1, [pc, #44]	; (8001d04 <HAL_RCC_ClockConfig+0x1f4>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce0:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_RCC_ClockConfig+0x1fc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe ff35 	bl	8000b58 <HAL_InitTick>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cf2:	7afb      	ldrb	r3, [r7, #11]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40022000 	.word	0x40022000
 8001d00:	40021000 	.word	0x40021000
 8001d04:	08004108 	.word	0x08004108
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000004 	.word	0x20000004

08001d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1e:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d28:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x34>
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d121      	bne.n	8001d82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d11e      	bne.n	8001d82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d44:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d107      	bne.n	8001d60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d50:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	e005      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d60:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d6c:	4a2b      	ldr	r2, [pc, #172]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10d      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d102      	bne.n	8001d8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	e004      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d134      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d003      	beq.n	8001db6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d003      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0xac>
 8001db4:	e005      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x110>)
 8001db8:	617b      	str	r3, [r7, #20]
      break;
 8001dba:	e005      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dbe:	617b      	str	r3, [r7, #20]
      break;
 8001dc0:	e002      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	617b      	str	r3, [r7, #20]
      break;
 8001dc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	0a1b      	lsrs	r3, r3, #8
 8001ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	fb03 f202 	mul.w	r2, r3, r2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	0e5b      	lsrs	r3, r3, #25
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e08:	69bb      	ldr	r3, [r7, #24]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	08004120 	.word	0x08004120
 8001e20:	00f42400 	.word	0x00f42400
 8001e24:	007a1200 	.word	0x007a1200

08001e28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000000 	.word	0x20000000

08001e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e44:	f7ff fff0 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4904      	ldr	r1, [pc, #16]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	08004118 	.word	0x08004118

08001e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e70:	f7ff ffda 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	0adb      	lsrs	r3, r3, #11
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4904      	ldr	r1, [pc, #16]	; (8001e94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08004118 	.word	0x08004118

08001e98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001eb0:	f7ff f9b6 	bl	8001220 <HAL_PWREx_GetVoltageRange>
 8001eb4:	6178      	str	r0, [r7, #20]
 8001eb6:	e014      	b.n	8001ee2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	4a24      	ldr	r2, [pc, #144]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ed0:	f7ff f9a6 	bl	8001220 <HAL_PWREx_GetVoltageRange>
 8001ed4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee8:	d10b      	bne.n	8001f02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d919      	bls.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ef4:	d902      	bls.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	e013      	b.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001efc:	2301      	movs	r3, #1
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	e010      	b.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b80      	cmp	r3, #128	; 0x80
 8001f06:	d902      	bls.n	8001f0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f08:	2303      	movs	r3, #3
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	e00a      	b.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b80      	cmp	r3, #128	; 0x80
 8001f12:	d102      	bne.n	8001f1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f14:	2302      	movs	r3, #2
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	e004      	b.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b70      	cmp	r3, #112	; 0x70
 8001f1e:	d101      	bne.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f20:	2301      	movs	r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 0207 	bic.w	r2, r3, #7
 8001f2c:	4909      	ldr	r1, [pc, #36]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d001      	beq.n	8001f46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40022000 	.word	0x40022000

08001f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f60:	2300      	movs	r3, #0
 8001f62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f64:	2300      	movs	r3, #0
 8001f66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d031      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f7c:	d01a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f82:	d814      	bhi.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d009      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f8c:	d10f      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f8e:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	4a5c      	ldr	r2, [pc, #368]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f98:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f9a:	e00c      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f9de 	bl	8002364 <RCCEx_PLLSAI1_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fac:	e003      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fb6:	7cfb      	ldrb	r3, [r7, #19]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10b      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fbc:	4b51      	ldr	r3, [pc, #324]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	494e      	ldr	r1, [pc, #312]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fd2:	e001      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 809e 	beq.w	8002122 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fea:	4b46      	ldr	r3, [pc, #280]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00d      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002000:	4b40      	ldr	r3, [pc, #256]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	4a3f      	ldr	r2, [pc, #252]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200a:	6593      	str	r3, [r2, #88]	; 0x58
 800200c:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002018:	2301      	movs	r3, #1
 800201a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201c:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a39      	ldr	r2, [pc, #228]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002026:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002028:	f7fe fde6 	bl	8000bf8 <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800202e:	e009      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002030:	f7fe fde2 	bl	8000bf8 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d902      	bls.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	74fb      	strb	r3, [r7, #19]
        break;
 8002042:	e005      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002044:	4b30      	ldr	r3, [pc, #192]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ef      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d15a      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002056:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002060:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01e      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	429a      	cmp	r2, r3
 8002070:	d019      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002072:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800207c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800207e:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002084:	4a1f      	ldr	r2, [pc, #124]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002094:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800209e:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d016      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe fda2 	bl	8000bf8 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b6:	e00b      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7fe fd9e 	bl	8000bf8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d902      	bls.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	74fb      	strb	r3, [r7, #19]
            break;
 80020ce:	e006      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0ec      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80020de:	7cfb      	ldrb	r3, [r7, #19]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10b      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f2:	4904      	ldr	r1, [pc, #16]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020fa:	e009      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	74bb      	strb	r3, [r7, #18]
 8002100:	e006      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002110:	7c7b      	ldrb	r3, [r7, #17]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d105      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002116:	4b8a      	ldr	r3, [pc, #552]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	4a89      	ldr	r2, [pc, #548]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800211c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002120:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800212e:	4b84      	ldr	r3, [pc, #528]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002134:	f023 0203 	bic.w	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4980      	ldr	r1, [pc, #512]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002150:	4b7b      	ldr	r3, [pc, #492]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	f023 020c 	bic.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	4978      	ldr	r1, [pc, #480]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002172:	4b73      	ldr	r3, [pc, #460]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	496f      	ldr	r1, [pc, #444]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002194:	4b6a      	ldr	r3, [pc, #424]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a2:	4967      	ldr	r1, [pc, #412]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021b6:	4b62      	ldr	r3, [pc, #392]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	495e      	ldr	r1, [pc, #376]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021d8:	4b59      	ldr	r3, [pc, #356]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	4956      	ldr	r1, [pc, #344]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021fa:	4b51      	ldr	r3, [pc, #324]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	494d      	ldr	r1, [pc, #308]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d028      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800221c:	4b48      	ldr	r3, [pc, #288]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4945      	ldr	r1, [pc, #276]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800223a:	d106      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800223c:	4b40      	ldr	r3, [pc, #256]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a3f      	ldr	r2, [pc, #252]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002246:	60d3      	str	r3, [r2, #12]
 8002248:	e011      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002252:	d10c      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3304      	adds	r3, #4
 8002258:	2101      	movs	r1, #1
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f882 	bl	8002364 <RCCEx_PLLSAI1_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d028      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	492d      	ldr	r1, [pc, #180]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002298:	d106      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4a28      	ldr	r2, [pc, #160]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a4:	60d3      	str	r3, [r2, #12]
 80022a6:	e011      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022b0:	d10c      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	2101      	movs	r1, #1
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 f853 	bl	8002364 <RCCEx_PLLSAI1_Config>
 80022be:	4603      	mov	r3, r0
 80022c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022c2:	7cfb      	ldrb	r3, [r7, #19]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01c      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e6:	4916      	ldr	r1, [pc, #88]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022f6:	d10c      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3304      	adds	r3, #4
 80022fc:	2102      	movs	r1, #2
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f830 	bl	8002364 <RCCEx_PLLSAI1_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	4904      	ldr	r1, [pc, #16]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002334:	7cbb      	ldrb	r3, [r7, #18]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000

08002344 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800234e:	f043 0304 	orr.w	r3, r3, #4
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000

08002364 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002372:	4b74      	ldr	r3, [pc, #464]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d018      	beq.n	80023b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800237e:	4b71      	ldr	r3, [pc, #452]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0203 	and.w	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d10d      	bne.n	80023aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
       ||
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002396:	4b6b      	ldr	r3, [pc, #428]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
       ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d047      	beq.n	800243a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	e044      	b.n	800243a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d018      	beq.n	80023ea <RCCEx_PLLSAI1_Config+0x86>
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d825      	bhi.n	8002408 <RCCEx_PLLSAI1_Config+0xa4>
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d002      	beq.n	80023c6 <RCCEx_PLLSAI1_Config+0x62>
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d009      	beq.n	80023d8 <RCCEx_PLLSAI1_Config+0x74>
 80023c4:	e020      	b.n	8002408 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023c6:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d11d      	bne.n	800240e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d6:	e01a      	b.n	800240e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023d8:	4b5a      	ldr	r3, [pc, #360]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d116      	bne.n	8002412 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e8:	e013      	b.n	8002412 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023ea:	4b56      	ldr	r3, [pc, #344]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023f6:	4b53      	ldr	r3, [pc, #332]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002406:	e006      	b.n	8002416 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      break;
 800240c:	e004      	b.n	8002418 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800240e:	bf00      	nop
 8002410:	e002      	b.n	8002418 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002412:	bf00      	nop
 8002414:	e000      	b.n	8002418 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002416:	bf00      	nop
    }

    if(status == HAL_OK)
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10d      	bne.n	800243a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800241e:	4b49      	ldr	r3, [pc, #292]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6819      	ldr	r1, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	430b      	orrs	r3, r1
 8002434:	4943      	ldr	r1, [pc, #268]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002436:	4313      	orrs	r3, r2
 8002438:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d17c      	bne.n	800253a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002440:	4b40      	ldr	r3, [pc, #256]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a3f      	ldr	r2, [pc, #252]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002446:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800244a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800244c:	f7fe fbd4 	bl	8000bf8 <HAL_GetTick>
 8002450:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002452:	e009      	b.n	8002468 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002454:	f7fe fbd0 	bl	8000bf8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d902      	bls.n	8002468 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	73fb      	strb	r3, [r7, #15]
        break;
 8002466:	e005      	b.n	8002474 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002468:	4b36      	ldr	r3, [pc, #216]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ef      	bne.n	8002454 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d15f      	bne.n	800253a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d110      	bne.n	80024a2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002480:	4b30      	ldr	r3, [pc, #192]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002488:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6892      	ldr	r2, [r2, #8]
 8002490:	0211      	lsls	r1, r2, #8
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68d2      	ldr	r2, [r2, #12]
 8002496:	06d2      	lsls	r2, r2, #27
 8002498:	430a      	orrs	r2, r1
 800249a:	492a      	ldr	r1, [pc, #168]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 800249c:	4313      	orrs	r3, r2
 800249e:	610b      	str	r3, [r1, #16]
 80024a0:	e027      	b.n	80024f2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d112      	bne.n	80024ce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024a8:	4b26      	ldr	r3, [pc, #152]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6892      	ldr	r2, [r2, #8]
 80024b8:	0211      	lsls	r1, r2, #8
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6912      	ldr	r2, [r2, #16]
 80024be:	0852      	lsrs	r2, r2, #1
 80024c0:	3a01      	subs	r2, #1
 80024c2:	0552      	lsls	r2, r2, #21
 80024c4:	430a      	orrs	r2, r1
 80024c6:	491f      	ldr	r1, [pc, #124]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	610b      	str	r3, [r1, #16]
 80024cc:	e011      	b.n	80024f2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6892      	ldr	r2, [r2, #8]
 80024de:	0211      	lsls	r1, r2, #8
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6952      	ldr	r2, [r2, #20]
 80024e4:	0852      	lsrs	r2, r2, #1
 80024e6:	3a01      	subs	r2, #1
 80024e8:	0652      	lsls	r2, r2, #25
 80024ea:	430a      	orrs	r2, r1
 80024ec:	4915      	ldr	r1, [pc, #84]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a13      	ldr	r2, [pc, #76]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7fe fb7b 	bl	8000bf8 <HAL_GetTick>
 8002502:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002504:	e009      	b.n	800251a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002506:	f7fe fb77 	bl	8000bf8 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d902      	bls.n	800251a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	73fb      	strb	r3, [r7, #15]
          break;
 8002518:	e005      	b.n	8002526 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0ef      	beq.n	8002506 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d106      	bne.n	800253a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4903      	ldr	r1, [pc, #12]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002536:	4313      	orrs	r3, r2
 8002538:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000

08002548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e095      	b.n	8002686 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2b00      	cmp	r3, #0
 8002560:	d108      	bne.n	8002574 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800256a:	d009      	beq.n	8002580 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
 8002572:	e005      	b.n	8002580 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe f93a 	bl	8000814 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025c0:	d902      	bls.n	80025c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	e002      	b.n	80025ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80025d6:	d007      	beq.n	80025e8 <HAL_SPI_Init+0xa0>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025e0:	d002      	beq.n	80025e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262a:	ea42 0103 	orr.w	r1, r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	f003 0204 	and.w	r2, r3, #4
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002664:	ea42 0103 	orr.w	r1, r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b088      	sub	sp, #32
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_SPI_Transmit+0x22>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e15f      	b.n	8002970 <HAL_SPI_Transmit+0x2e2>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026b8:	f7fe fa9e 	bl	8000bf8 <HAL_GetTick>
 80026bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d002      	beq.n	80026d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
 80026d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026d2:	e148      	b.n	8002966 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_SPI_Transmit+0x52>
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026e4:	e13f      	b.n	8002966 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2203      	movs	r2, #3
 80026ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	88fa      	ldrh	r2, [r7, #6]
 80026fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002730:	d10f      	bne.n	8002752 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002740:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002750:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275c:	2b40      	cmp	r3, #64	; 0x40
 800275e:	d007      	beq.n	8002770 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800276e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002778:	d94f      	bls.n	800281a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_SPI_Transmit+0xfa>
 8002782:	8afb      	ldrh	r3, [r7, #22]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d142      	bne.n	800280e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	881a      	ldrh	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	1c9a      	adds	r2, r3, #2
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027ac:	e02f      	b.n	800280e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d112      	bne.n	80027e2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	881a      	ldrh	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	1c9a      	adds	r2, r3, #2
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027e0:	e015      	b.n	800280e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027e2:	f7fe fa09 	bl	8000bf8 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d803      	bhi.n	80027fa <HAL_SPI_Transmit+0x16c>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d102      	bne.n	8002800 <HAL_SPI_Transmit+0x172>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d106      	bne.n	800280e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800280c:	e0ab      	b.n	8002966 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1ca      	bne.n	80027ae <HAL_SPI_Transmit+0x120>
 8002818:	e080      	b.n	800291c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_SPI_Transmit+0x19a>
 8002822:	8afb      	ldrh	r3, [r7, #22]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d174      	bne.n	8002912 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d912      	bls.n	8002858 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	1c9a      	adds	r2, r3, #2
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b02      	subs	r3, #2
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002856:	e05c      	b.n	8002912 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	330c      	adds	r3, #12
 8002862:	7812      	ldrb	r2, [r2, #0]
 8002864:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800287e:	e048      	b.n	8002912 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d12b      	bne.n	80028e6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d912      	bls.n	80028be <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	881a      	ldrh	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	1c9a      	adds	r2, r3, #2
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b02      	subs	r3, #2
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028bc:	e029      	b.n	8002912 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	330c      	adds	r3, #12
 80028c8:	7812      	ldrb	r2, [r2, #0]
 80028ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028e4:	e015      	b.n	8002912 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028e6:	f7fe f987 	bl	8000bf8 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d803      	bhi.n	80028fe <HAL_SPI_Transmit+0x270>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d102      	bne.n	8002904 <HAL_SPI_Transmit+0x276>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002910:	e029      	b.n	8002966 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1b1      	bne.n	8002880 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	6839      	ldr	r1, [r7, #0]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fa5b 	bl	8002ddc <SPI_EndRxTxTransaction>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	77fb      	strb	r3, [r7, #31]
 800295c:	e003      	b.n	8002966 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800296e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10e      	bne.n	80029b8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
    return;
 80029b6:	e0ce      	b.n	8002b56 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <HAL_SPI_IRQHandler+0x5e>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
    return;
 80029d4:	e0bf      	b.n	8002b56 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <HAL_SPI_IRQHandler+0x7e>
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80b0 	beq.w	8002b56 <HAL_SPI_IRQHandler+0x1de>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80aa 	beq.w	8002b56 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d023      	beq.n	8002a54 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d011      	beq.n	8002a3c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1c:	f043 0204 	orr.w	r2, r3, #4
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	e00b      	b.n	8002a54 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]
        return;
 8002a52:	e080      	b.n	8002b56 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d014      	beq.n	8002a88 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00c      	beq.n	8002aac <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a96:	f043 0208 	orr.w	r2, r3, #8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d04f      	beq.n	8002b54 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ac2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d104      	bne.n	8002ae0 <HAL_SPI_IRQHandler+0x168>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d034      	beq.n	8002b4a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0203 	bic.w	r2, r2, #3
 8002aee:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d011      	beq.n	8002b1c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <HAL_SPI_IRQHandler+0x1e4>)
 8002afe:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe f9b8 	bl	8000e7a <HAL_DMA_Abort_IT>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d016      	beq.n	8002b52 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b28:	4a0c      	ldr	r2, [pc, #48]	; (8002b5c <HAL_SPI_IRQHandler+0x1e4>)
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe f9a2 	bl	8000e7a <HAL_DMA_Abort_IT>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002b48:	e003      	b.n	8002b52 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f808 	bl	8002b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b50:	e000      	b.n	8002b54 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002b52:	bf00      	nop
    return;
 8002b54:	bf00      	nop
  }
}
 8002b56:	3720      	adds	r7, #32
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	08002b75 	.word	0x08002b75

08002b60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f7ff ffe5 	bl	8002b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bb0:	f7fe f822 	bl	8000bf8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bc0:	f7fe f81a 	bl	8000bf8 <HAL_GetTick>
 8002bc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bc6:	4b39      	ldr	r3, [pc, #228]	; (8002cac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	015b      	lsls	r3, r3, #5
 8002bcc:	0d1b      	lsrs	r3, r3, #20
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	fb02 f303 	mul.w	r3, r2, r3
 8002bd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bd6:	e054      	b.n	8002c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bde:	d050      	beq.n	8002c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002be0:	f7fe f80a 	bl	8000bf8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d902      	bls.n	8002bf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d13d      	bne.n	8002c72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c0e:	d111      	bne.n	8002c34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c18:	d004      	beq.n	8002c24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c22:	d107      	bne.n	8002c34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3c:	d10f      	bne.n	8002c5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e017      	b.n	8002ca2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d19b      	bne.n	8002bd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3720      	adds	r7, #32
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000000 	.word	0x20000000

08002cb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002cc2:	f7fd ff99 	bl	8000bf8 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002cd2:	f7fd ff91 	bl	8000bf8 <HAL_GetTick>
 8002cd6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002ce0:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00da      	lsls	r2, r3, #3
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	0d1b      	lsrs	r3, r3, #20
 8002cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002cf8:	e060      	b.n	8002dbc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d00:	d107      	bne.n	8002d12 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d104      	bne.n	8002d12 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d050      	beq.n	8002dbc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d1a:	f7fd ff6d 	bl	8000bf8 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d902      	bls.n	8002d30 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d13d      	bne.n	8002dac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d48:	d111      	bne.n	8002d6e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d52:	d004      	beq.n	8002d5e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5c:	d107      	bne.n	8002d6e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d76:	d10f      	bne.n	8002d98 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e010      	b.n	8002dce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d196      	bne.n	8002cfa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3728      	adds	r7, #40	; 0x28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000000 	.word	0x20000000

08002ddc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff ff5b 	bl	8002cb0 <SPI_WaitFifoStateUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e027      	b.n	8002e60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2200      	movs	r2, #0
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff fec0 	bl	8002ba0 <SPI_WaitFlagStateUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d007      	beq.n	8002e36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2a:	f043 0220 	orr.w	r2, r3, #32
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e014      	b.n	8002e60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff ff34 	bl	8002cb0 <SPI_WaitFifoStateUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e52:	f043 0220 	orr.w	r2, r3, #32
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e000      	b.n	8002e60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e03c      	b.n	8002ef4 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd fd28 	bl	80008e4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fa97 	bl	80033e0 <USART_SetConfig>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e01b      	b.n	8002ef4 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002eca:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eda:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fba5 	bl	800363c <USART_CheckIdleState>
 8002ef2:	4603      	mov	r3, r0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	f040 809a 	bne.w	800304e <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_USART_Transmit+0x2a>
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e092      	b.n	8003050 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_USART_Transmit+0x3c>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e08b      	b.n	8003050 <HAL_USART_Transmit+0x154>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2212      	movs	r2, #18
 8002f4a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4e:	f7fd fe53 	bl	8000bf8 <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	88fa      	ldrh	r2, [r7, #6]
 8002f58:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	88fa      	ldrh	r2, [r7, #6]
 8002f5e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f68:	d108      	bne.n	8002f7c <HAL_USART_Transmit+0x80>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	e003      	b.n	8002f84 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8002f84:	e02b      	b.n	8002fde <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f9ef 	bl	8003374 <USART_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e057      	b.n	8003050 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	881a      	ldrh	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	3302      	adds	r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	e008      	b.n	8002fd0 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	b292      	uxth	r2, r2
 8002fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ce      	bne.n	8002f86 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2140      	movs	r1, #64	; 0x40
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f9be 	bl	8003374 <USART_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e026      	b.n	8003050 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2240      	movs	r2, #64	; 0x40
 8003008:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2208      	movs	r2, #8
 8003010:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	8b1b      	ldrh	r3, [r3, #24]
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0208 	orr.w	r2, r2, #8
 8003022:	b292      	uxth	r2, r2
 8003024:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	8b1b      	ldrh	r3, [r3, #24]
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0210 	orr.w	r2, r2, #16
 8003036:	b292      	uxth	r2, r2
 8003038:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e000      	b.n	8003050 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 800304e:	2302      	movs	r3, #2
  }
}
 8003050:	4618      	mov	r0, r3
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	617b      	str	r3, [r7, #20]
  /* If no error occurs */
#if defined(USART_CR2_SLVEN)
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
                                      USART_ISR_UDR));
#else
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	f640 030f 	movw	r3, #2063	; 0x80f
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
#endif /* USART_CR2_SLVEN */
  if (errorflags == 0U)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d113      	bne.n	80030b0 <HAL_USART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00e      	beq.n	80030b0 <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <HAL_USART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (husart->RxISR != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 810d 	beq.w	80032c0 <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
      }
      return;
 80030ae:	e107      	b.n	80032c0 <HAL_USART_IRQHandler+0x268>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
#else
  if ((errorflags != 0U)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80e3 	beq.w	800327e <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d105      	bne.n	80030ce <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80d8 	beq.w	800327e <HAL_USART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00e      	beq.n	80030f6 <HAL_USART_IRQHandler+0x9e>
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2201      	movs	r2, #1
 80030e8:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ee:	f043 0201 	orr.w	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00e      	beq.n	800311e <HAL_USART_IRQHandler+0xc6>
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2202      	movs	r2, #2
 8003110:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003116:	f043 0204 	orr.w	r2, r3, #4
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00e      	beq.n	8003146 <HAL_USART_IRQHandler+0xee>
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2204      	movs	r2, #4
 8003138:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	64da      	str	r2, [r3, #76]	; 0x4c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d104      	bne.n	8003164 <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <HAL_USART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2208      	movs	r2, #8
 800316a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003170:	f043 0208 	orr.w	r2, r3, #8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00f      	beq.n	80031a2 <HAL_USART_IRQHandler+0x14a>
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003194:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
#endif /* USART_CR2_SLVEN */

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 808c 	beq.w	80032c4 <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00c      	beq.n	80031d0 <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <HAL_USART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (husart->RxISR != NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d002      	beq.n	80031ee <HAL_USART_IRQHandler+0x196>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d03e      	beq.n	800326c <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f88e 	bl	8003310 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d130      	bne.n	8003264 <HAL_USART_IRQHandler+0x20c>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003210:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2200      	movs	r2, #0
 8003220:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd fe27 	bl	8000e7a <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	2b00      	cmp	r3, #0
 8003232:	d013      	beq.n	800325c <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	4a25      	ldr	r2, [pc, #148]	; (80032d0 <HAL_USART_IRQHandler+0x278>)
 800323a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd fe1a 	bl	8000e7a <HAL_DMA_Abort_IT>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d016      	beq.n	800327a <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003256:	4610      	mov	r0, r2
 8003258:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800325a:	e00e      	b.n	800327a <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f84d 	bl	80032fc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003262:	e00a      	b.n	800327a <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f849 	bl	80032fc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800326a:	e006      	b.n	800327a <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f845 	bl	80032fc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    return;
 8003278:	e024      	b.n	80032c4 <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800327a:	bf00      	nop
    return;
 800327c:	e022      	b.n	80032c4 <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00d      	beq.n	80032a4 <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_USART_IRQHandler+0x24c>
#endif /* USART_CR1_FIFOEN */
  {
    if (husart->TxISR != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d016      	beq.n	80032c8 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
    }
    return;
 80032a2:	e011      	b.n	80032c8 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <HAL_USART_IRQHandler+0x272>
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fa02 	bl	80036c2 <USART_EndTransmit_IT>
    return;
 80032be:	e004      	b.n	80032ca <HAL_USART_IRQHandler+0x272>
      return;
 80032c0:	bf00      	nop
 80032c2:	e002      	b.n	80032ca <HAL_USART_IRQHandler+0x272>
    return;
 80032c4:	bf00      	nop
 80032c6:	e000      	b.n	80032ca <HAL_USART_IRQHandler+0x272>
    return;
 80032c8:	bf00      	nop
    HAL_USARTEx_RxFifoFullCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80032ca:	3720      	adds	r7, #32
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	0800334d 	.word	0x0800334d

080032d4 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8003326:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f7ff ffc8 	bl	80032fc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003384:	e018      	b.n	80033b8 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d014      	beq.n	80033b8 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338e:	f7fd fc33 	bl	8000bf8 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <USART_WaitOnFlagUntilTimeout+0x30>
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e00f      	b.n	80033d8 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69da      	ldr	r2, [r3, #28]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d0d7      	beq.n	8003386 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003404:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b87      	ldr	r3, [pc, #540]	; (800362c <USART_SetConfig+0x24c>)
 800340e:	4013      	ands	r3, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	6979      	ldr	r1, [r7, #20]
 8003416:	430b      	orrs	r3, r1
 8003418:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800341a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800341e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	4313      	orrs	r3, r2
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a74      	ldr	r2, [pc, #464]	; (8003630 <USART_SetConfig+0x250>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d121      	bne.n	80034a6 <USART_SetConfig+0xc6>
 8003462:	4b74      	ldr	r3, [pc, #464]	; (8003634 <USART_SetConfig+0x254>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	2b03      	cmp	r3, #3
 800346e:	d817      	bhi.n	80034a0 <USART_SetConfig+0xc0>
 8003470:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <USART_SetConfig+0x98>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	08003489 	.word	0x08003489
 800347c:	08003495 	.word	0x08003495
 8003480:	0800348f 	.word	0x0800348f
 8003484:	0800349b 	.word	0x0800349b
 8003488:	2301      	movs	r3, #1
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e045      	b.n	800351a <USART_SetConfig+0x13a>
 800348e:	2302      	movs	r3, #2
 8003490:	77fb      	strb	r3, [r7, #31]
 8003492:	e042      	b.n	800351a <USART_SetConfig+0x13a>
 8003494:	2304      	movs	r3, #4
 8003496:	77fb      	strb	r3, [r7, #31]
 8003498:	e03f      	b.n	800351a <USART_SetConfig+0x13a>
 800349a:	2308      	movs	r3, #8
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	e03c      	b.n	800351a <USART_SetConfig+0x13a>
 80034a0:	2310      	movs	r3, #16
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e039      	b.n	800351a <USART_SetConfig+0x13a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a63      	ldr	r2, [pc, #396]	; (8003638 <USART_SetConfig+0x258>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d132      	bne.n	8003516 <USART_SetConfig+0x136>
 80034b0:	4b60      	ldr	r3, [pc, #384]	; (8003634 <USART_SetConfig+0x254>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b0c      	cmp	r3, #12
 80034bc:	d828      	bhi.n	8003510 <USART_SetConfig+0x130>
 80034be:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <USART_SetConfig+0xe4>)
 80034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c4:	080034f9 	.word	0x080034f9
 80034c8:	08003511 	.word	0x08003511
 80034cc:	08003511 	.word	0x08003511
 80034d0:	08003511 	.word	0x08003511
 80034d4:	08003505 	.word	0x08003505
 80034d8:	08003511 	.word	0x08003511
 80034dc:	08003511 	.word	0x08003511
 80034e0:	08003511 	.word	0x08003511
 80034e4:	080034ff 	.word	0x080034ff
 80034e8:	08003511 	.word	0x08003511
 80034ec:	08003511 	.word	0x08003511
 80034f0:	08003511 	.word	0x08003511
 80034f4:	0800350b 	.word	0x0800350b
 80034f8:	2300      	movs	r3, #0
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e00d      	b.n	800351a <USART_SetConfig+0x13a>
 80034fe:	2302      	movs	r3, #2
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e00a      	b.n	800351a <USART_SetConfig+0x13a>
 8003504:	2304      	movs	r3, #4
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e007      	b.n	800351a <USART_SetConfig+0x13a>
 800350a:	2308      	movs	r3, #8
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e004      	b.n	800351a <USART_SetConfig+0x13a>
 8003510:	2310      	movs	r3, #16
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e001      	b.n	800351a <USART_SetConfig+0x13a>
 8003516:	2310      	movs	r3, #16
 8003518:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800351a:	7ffb      	ldrb	r3, [r7, #31]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d85a      	bhi.n	80035d6 <USART_SetConfig+0x1f6>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <USART_SetConfig+0x148>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800354d 	.word	0x0800354d
 800352c:	0800356b 	.word	0x0800356b
 8003530:	08003589 	.word	0x08003589
 8003534:	080035d7 	.word	0x080035d7
 8003538:	080035a3 	.word	0x080035a3
 800353c:	080035d7 	.word	0x080035d7
 8003540:	080035d7 	.word	0x080035d7
 8003544:	080035d7 	.word	0x080035d7
 8003548:	080035c1 	.word	0x080035c1
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800354c:	f7fe fc78 	bl	8001e40 <HAL_RCC_GetPCLK1Freq>
 8003550:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	005a      	lsls	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	441a      	add	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003568:	e038      	b.n	80035dc <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800356a:	f7fe fc7f 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 800356e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	005a      	lsls	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	441a      	add	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003586:	e029      	b.n	80035dc <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003592:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6852      	ldr	r2, [r2, #4]
 800359a:	fbb3 f3f2 	udiv	r3, r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80035a0:	e01c      	b.n	80035dc <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80035a2:	f7fe fbb5 	bl	8001d10 <HAL_RCC_GetSysClockFreq>
 80035a6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	005a      	lsls	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	441a      	add	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80035be:	e00d      	b.n	80035dc <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80035d4:	e002      	b.n	80035dc <USART_SetConfig+0x1fc>
    default:
      ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	77bb      	strb	r3, [r7, #30]
      break;
 80035da:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b0f      	cmp	r3, #15
 80035e0:	d916      	bls.n	8003610 <USART_SetConfig+0x230>
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e8:	d212      	bcs.n	8003610 <USART_SetConfig+0x230>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	f023 030f 	bic.w	r3, r3, #15
 80035f2:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	b29a      	uxth	r2, r3
 8003600:	89fb      	ldrh	r3, [r7, #14]
 8003602:	4313      	orrs	r3, r2
 8003604:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	89fa      	ldrh	r2, [r7, #14]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	e001      	b.n	8003614 <USART_SetConfig+0x234>
  }
  else
  {
    ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8003620:	7fbb      	ldrb	r3, [r7, #30]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	efff69f3 	.word	0xefff69f3
 8003630:	40013800 	.word	0x40013800
 8003634:	40021000 	.word	0x40021000
 8003638:	40004400 	.word	0x40004400

0800363c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af02      	add	r7, sp, #8
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800364a:	f7fd fad5 	bl	8000bf8 <HAL_GetTick>
 800364e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b08      	cmp	r3, #8
 800365c:	d10e      	bne.n	800367c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800365e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fe81 	bl	8003374 <USART_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e01e      	b.n	80036ba <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b04      	cmp	r3, #4
 8003688:	d10e      	bne.n	80036a8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800368a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fe6b 	bl	8003374 <USART_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e008      	b.n	80036ba <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d8:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	63da      	str	r2, [r3, #60]	; 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b12      	cmp	r3, #18
 80036fa:	d115      	bne.n	8003728 <USART_EndTransmit_IT+0x66>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2208      	movs	r2, #8
 8003702:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	8b1b      	ldrh	r3, [r3, #24]
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0208 	orr.w	r2, r2, #8
 8003714:	b292      	uxth	r2, r2
 8003716:	831a      	strh	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff fdd7 	bl	80032d4 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003726:	e00b      	b.n	8003740 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    HAL_USART_TxRxCpltCallback(husart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff fdd4 	bl	80032e8 <HAL_USART_TxRxCpltCallback>
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <sniprintf>:
 8003748:	b40c      	push	{r2, r3}
 800374a:	b530      	push	{r4, r5, lr}
 800374c:	4b17      	ldr	r3, [pc, #92]	; (80037ac <sniprintf+0x64>)
 800374e:	1e0c      	subs	r4, r1, #0
 8003750:	681d      	ldr	r5, [r3, #0]
 8003752:	b09d      	sub	sp, #116	; 0x74
 8003754:	da08      	bge.n	8003768 <sniprintf+0x20>
 8003756:	238b      	movs	r3, #139	; 0x8b
 8003758:	602b      	str	r3, [r5, #0]
 800375a:	f04f 30ff 	mov.w	r0, #4294967295
 800375e:	b01d      	add	sp, #116	; 0x74
 8003760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003764:	b002      	add	sp, #8
 8003766:	4770      	bx	lr
 8003768:	f44f 7302 	mov.w	r3, #520	; 0x208
 800376c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003770:	bf14      	ite	ne
 8003772:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003776:	4623      	moveq	r3, r4
 8003778:	9304      	str	r3, [sp, #16]
 800377a:	9307      	str	r3, [sp, #28]
 800377c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003780:	9002      	str	r0, [sp, #8]
 8003782:	9006      	str	r0, [sp, #24]
 8003784:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003788:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800378a:	ab21      	add	r3, sp, #132	; 0x84
 800378c:	a902      	add	r1, sp, #8
 800378e:	4628      	mov	r0, r5
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	f000 f9a1 	bl	8003ad8 <_svfiprintf_r>
 8003796:	1c43      	adds	r3, r0, #1
 8003798:	bfbc      	itt	lt
 800379a:	238b      	movlt	r3, #139	; 0x8b
 800379c:	602b      	strlt	r3, [r5, #0]
 800379e:	2c00      	cmp	r4, #0
 80037a0:	d0dd      	beq.n	800375e <sniprintf+0x16>
 80037a2:	9b02      	ldr	r3, [sp, #8]
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	e7d9      	b.n	800375e <sniprintf+0x16>
 80037aa:	bf00      	nop
 80037ac:	20000058 	.word	0x20000058

080037b0 <memset>:
 80037b0:	4402      	add	r2, r0
 80037b2:	4603      	mov	r3, r0
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d100      	bne.n	80037ba <memset+0xa>
 80037b8:	4770      	bx	lr
 80037ba:	f803 1b01 	strb.w	r1, [r3], #1
 80037be:	e7f9      	b.n	80037b4 <memset+0x4>

080037c0 <__errno>:
 80037c0:	4b01      	ldr	r3, [pc, #4]	; (80037c8 <__errno+0x8>)
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000058 	.word	0x20000058

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	4d0d      	ldr	r5, [pc, #52]	; (8003804 <__libc_init_array+0x38>)
 80037d0:	4c0d      	ldr	r4, [pc, #52]	; (8003808 <__libc_init_array+0x3c>)
 80037d2:	1b64      	subs	r4, r4, r5
 80037d4:	10a4      	asrs	r4, r4, #2
 80037d6:	2600      	movs	r6, #0
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	4d0b      	ldr	r5, [pc, #44]	; (800380c <__libc_init_array+0x40>)
 80037de:	4c0c      	ldr	r4, [pc, #48]	; (8003810 <__libc_init_array+0x44>)
 80037e0:	f000 fc6a 	bl	80040b8 <_init>
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	2600      	movs	r6, #0
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	08004184 	.word	0x08004184
 8003808:	08004184 	.word	0x08004184
 800380c:	08004184 	.word	0x08004184
 8003810:	08004188 	.word	0x08004188

08003814 <__retarget_lock_acquire_recursive>:
 8003814:	4770      	bx	lr

08003816 <__retarget_lock_release_recursive>:
 8003816:	4770      	bx	lr

08003818 <memcpy>:
 8003818:	440a      	add	r2, r1
 800381a:	4291      	cmp	r1, r2
 800381c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003820:	d100      	bne.n	8003824 <memcpy+0xc>
 8003822:	4770      	bx	lr
 8003824:	b510      	push	{r4, lr}
 8003826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800382a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800382e:	4291      	cmp	r1, r2
 8003830:	d1f9      	bne.n	8003826 <memcpy+0xe>
 8003832:	bd10      	pop	{r4, pc}

08003834 <_free_r>:
 8003834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003836:	2900      	cmp	r1, #0
 8003838:	d044      	beq.n	80038c4 <_free_r+0x90>
 800383a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800383e:	9001      	str	r0, [sp, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	f1a1 0404 	sub.w	r4, r1, #4
 8003846:	bfb8      	it	lt
 8003848:	18e4      	addlt	r4, r4, r3
 800384a:	f000 f8df 	bl	8003a0c <__malloc_lock>
 800384e:	4a1e      	ldr	r2, [pc, #120]	; (80038c8 <_free_r+0x94>)
 8003850:	9801      	ldr	r0, [sp, #4]
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	b933      	cbnz	r3, 8003864 <_free_r+0x30>
 8003856:	6063      	str	r3, [r4, #4]
 8003858:	6014      	str	r4, [r2, #0]
 800385a:	b003      	add	sp, #12
 800385c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003860:	f000 b8da 	b.w	8003a18 <__malloc_unlock>
 8003864:	42a3      	cmp	r3, r4
 8003866:	d908      	bls.n	800387a <_free_r+0x46>
 8003868:	6825      	ldr	r5, [r4, #0]
 800386a:	1961      	adds	r1, r4, r5
 800386c:	428b      	cmp	r3, r1
 800386e:	bf01      	itttt	eq
 8003870:	6819      	ldreq	r1, [r3, #0]
 8003872:	685b      	ldreq	r3, [r3, #4]
 8003874:	1949      	addeq	r1, r1, r5
 8003876:	6021      	streq	r1, [r4, #0]
 8003878:	e7ed      	b.n	8003856 <_free_r+0x22>
 800387a:	461a      	mov	r2, r3
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	b10b      	cbz	r3, 8003884 <_free_r+0x50>
 8003880:	42a3      	cmp	r3, r4
 8003882:	d9fa      	bls.n	800387a <_free_r+0x46>
 8003884:	6811      	ldr	r1, [r2, #0]
 8003886:	1855      	adds	r5, r2, r1
 8003888:	42a5      	cmp	r5, r4
 800388a:	d10b      	bne.n	80038a4 <_free_r+0x70>
 800388c:	6824      	ldr	r4, [r4, #0]
 800388e:	4421      	add	r1, r4
 8003890:	1854      	adds	r4, r2, r1
 8003892:	42a3      	cmp	r3, r4
 8003894:	6011      	str	r1, [r2, #0]
 8003896:	d1e0      	bne.n	800385a <_free_r+0x26>
 8003898:	681c      	ldr	r4, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	6053      	str	r3, [r2, #4]
 800389e:	440c      	add	r4, r1
 80038a0:	6014      	str	r4, [r2, #0]
 80038a2:	e7da      	b.n	800385a <_free_r+0x26>
 80038a4:	d902      	bls.n	80038ac <_free_r+0x78>
 80038a6:	230c      	movs	r3, #12
 80038a8:	6003      	str	r3, [r0, #0]
 80038aa:	e7d6      	b.n	800385a <_free_r+0x26>
 80038ac:	6825      	ldr	r5, [r4, #0]
 80038ae:	1961      	adds	r1, r4, r5
 80038b0:	428b      	cmp	r3, r1
 80038b2:	bf04      	itt	eq
 80038b4:	6819      	ldreq	r1, [r3, #0]
 80038b6:	685b      	ldreq	r3, [r3, #4]
 80038b8:	6063      	str	r3, [r4, #4]
 80038ba:	bf04      	itt	eq
 80038bc:	1949      	addeq	r1, r1, r5
 80038be:	6021      	streq	r1, [r4, #0]
 80038c0:	6054      	str	r4, [r2, #4]
 80038c2:	e7ca      	b.n	800385a <_free_r+0x26>
 80038c4:	b003      	add	sp, #12
 80038c6:	bd30      	pop	{r4, r5, pc}
 80038c8:	20000274 	.word	0x20000274

080038cc <sbrk_aligned>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	4e0e      	ldr	r6, [pc, #56]	; (8003908 <sbrk_aligned+0x3c>)
 80038d0:	460c      	mov	r4, r1
 80038d2:	6831      	ldr	r1, [r6, #0]
 80038d4:	4605      	mov	r5, r0
 80038d6:	b911      	cbnz	r1, 80038de <sbrk_aligned+0x12>
 80038d8:	f000 fba6 	bl	8004028 <_sbrk_r>
 80038dc:	6030      	str	r0, [r6, #0]
 80038de:	4621      	mov	r1, r4
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 fba1 	bl	8004028 <_sbrk_r>
 80038e6:	1c43      	adds	r3, r0, #1
 80038e8:	d00a      	beq.n	8003900 <sbrk_aligned+0x34>
 80038ea:	1cc4      	adds	r4, r0, #3
 80038ec:	f024 0403 	bic.w	r4, r4, #3
 80038f0:	42a0      	cmp	r0, r4
 80038f2:	d007      	beq.n	8003904 <sbrk_aligned+0x38>
 80038f4:	1a21      	subs	r1, r4, r0
 80038f6:	4628      	mov	r0, r5
 80038f8:	f000 fb96 	bl	8004028 <_sbrk_r>
 80038fc:	3001      	adds	r0, #1
 80038fe:	d101      	bne.n	8003904 <sbrk_aligned+0x38>
 8003900:	f04f 34ff 	mov.w	r4, #4294967295
 8003904:	4620      	mov	r0, r4
 8003906:	bd70      	pop	{r4, r5, r6, pc}
 8003908:	20000278 	.word	0x20000278

0800390c <_malloc_r>:
 800390c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003910:	1ccd      	adds	r5, r1, #3
 8003912:	f025 0503 	bic.w	r5, r5, #3
 8003916:	3508      	adds	r5, #8
 8003918:	2d0c      	cmp	r5, #12
 800391a:	bf38      	it	cc
 800391c:	250c      	movcc	r5, #12
 800391e:	2d00      	cmp	r5, #0
 8003920:	4607      	mov	r7, r0
 8003922:	db01      	blt.n	8003928 <_malloc_r+0x1c>
 8003924:	42a9      	cmp	r1, r5
 8003926:	d905      	bls.n	8003934 <_malloc_r+0x28>
 8003928:	230c      	movs	r3, #12
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	2600      	movs	r6, #0
 800392e:	4630      	mov	r0, r6
 8003930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003934:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a08 <_malloc_r+0xfc>
 8003938:	f000 f868 	bl	8003a0c <__malloc_lock>
 800393c:	f8d8 3000 	ldr.w	r3, [r8]
 8003940:	461c      	mov	r4, r3
 8003942:	bb5c      	cbnz	r4, 800399c <_malloc_r+0x90>
 8003944:	4629      	mov	r1, r5
 8003946:	4638      	mov	r0, r7
 8003948:	f7ff ffc0 	bl	80038cc <sbrk_aligned>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	4604      	mov	r4, r0
 8003950:	d155      	bne.n	80039fe <_malloc_r+0xf2>
 8003952:	f8d8 4000 	ldr.w	r4, [r8]
 8003956:	4626      	mov	r6, r4
 8003958:	2e00      	cmp	r6, #0
 800395a:	d145      	bne.n	80039e8 <_malloc_r+0xdc>
 800395c:	2c00      	cmp	r4, #0
 800395e:	d048      	beq.n	80039f2 <_malloc_r+0xe6>
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	4631      	mov	r1, r6
 8003964:	4638      	mov	r0, r7
 8003966:	eb04 0903 	add.w	r9, r4, r3
 800396a:	f000 fb5d 	bl	8004028 <_sbrk_r>
 800396e:	4581      	cmp	r9, r0
 8003970:	d13f      	bne.n	80039f2 <_malloc_r+0xe6>
 8003972:	6821      	ldr	r1, [r4, #0]
 8003974:	1a6d      	subs	r5, r5, r1
 8003976:	4629      	mov	r1, r5
 8003978:	4638      	mov	r0, r7
 800397a:	f7ff ffa7 	bl	80038cc <sbrk_aligned>
 800397e:	3001      	adds	r0, #1
 8003980:	d037      	beq.n	80039f2 <_malloc_r+0xe6>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	442b      	add	r3, r5
 8003986:	6023      	str	r3, [r4, #0]
 8003988:	f8d8 3000 	ldr.w	r3, [r8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d038      	beq.n	8003a02 <_malloc_r+0xf6>
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	42a2      	cmp	r2, r4
 8003994:	d12b      	bne.n	80039ee <_malloc_r+0xe2>
 8003996:	2200      	movs	r2, #0
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	e00f      	b.n	80039bc <_malloc_r+0xb0>
 800399c:	6822      	ldr	r2, [r4, #0]
 800399e:	1b52      	subs	r2, r2, r5
 80039a0:	d41f      	bmi.n	80039e2 <_malloc_r+0xd6>
 80039a2:	2a0b      	cmp	r2, #11
 80039a4:	d917      	bls.n	80039d6 <_malloc_r+0xca>
 80039a6:	1961      	adds	r1, r4, r5
 80039a8:	42a3      	cmp	r3, r4
 80039aa:	6025      	str	r5, [r4, #0]
 80039ac:	bf18      	it	ne
 80039ae:	6059      	strne	r1, [r3, #4]
 80039b0:	6863      	ldr	r3, [r4, #4]
 80039b2:	bf08      	it	eq
 80039b4:	f8c8 1000 	streq.w	r1, [r8]
 80039b8:	5162      	str	r2, [r4, r5]
 80039ba:	604b      	str	r3, [r1, #4]
 80039bc:	4638      	mov	r0, r7
 80039be:	f104 060b 	add.w	r6, r4, #11
 80039c2:	f000 f829 	bl	8003a18 <__malloc_unlock>
 80039c6:	f026 0607 	bic.w	r6, r6, #7
 80039ca:	1d23      	adds	r3, r4, #4
 80039cc:	1af2      	subs	r2, r6, r3
 80039ce:	d0ae      	beq.n	800392e <_malloc_r+0x22>
 80039d0:	1b9b      	subs	r3, r3, r6
 80039d2:	50a3      	str	r3, [r4, r2]
 80039d4:	e7ab      	b.n	800392e <_malloc_r+0x22>
 80039d6:	42a3      	cmp	r3, r4
 80039d8:	6862      	ldr	r2, [r4, #4]
 80039da:	d1dd      	bne.n	8003998 <_malloc_r+0x8c>
 80039dc:	f8c8 2000 	str.w	r2, [r8]
 80039e0:	e7ec      	b.n	80039bc <_malloc_r+0xb0>
 80039e2:	4623      	mov	r3, r4
 80039e4:	6864      	ldr	r4, [r4, #4]
 80039e6:	e7ac      	b.n	8003942 <_malloc_r+0x36>
 80039e8:	4634      	mov	r4, r6
 80039ea:	6876      	ldr	r6, [r6, #4]
 80039ec:	e7b4      	b.n	8003958 <_malloc_r+0x4c>
 80039ee:	4613      	mov	r3, r2
 80039f0:	e7cc      	b.n	800398c <_malloc_r+0x80>
 80039f2:	230c      	movs	r3, #12
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	4638      	mov	r0, r7
 80039f8:	f000 f80e 	bl	8003a18 <__malloc_unlock>
 80039fc:	e797      	b.n	800392e <_malloc_r+0x22>
 80039fe:	6025      	str	r5, [r4, #0]
 8003a00:	e7dc      	b.n	80039bc <_malloc_r+0xb0>
 8003a02:	605b      	str	r3, [r3, #4]
 8003a04:	deff      	udf	#255	; 0xff
 8003a06:	bf00      	nop
 8003a08:	20000274 	.word	0x20000274

08003a0c <__malloc_lock>:
 8003a0c:	4801      	ldr	r0, [pc, #4]	; (8003a14 <__malloc_lock+0x8>)
 8003a0e:	f7ff bf01 	b.w	8003814 <__retarget_lock_acquire_recursive>
 8003a12:	bf00      	nop
 8003a14:	20000270 	.word	0x20000270

08003a18 <__malloc_unlock>:
 8003a18:	4801      	ldr	r0, [pc, #4]	; (8003a20 <__malloc_unlock+0x8>)
 8003a1a:	f7ff befc 	b.w	8003816 <__retarget_lock_release_recursive>
 8003a1e:	bf00      	nop
 8003a20:	20000270 	.word	0x20000270

08003a24 <__ssputs_r>:
 8003a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a28:	688e      	ldr	r6, [r1, #8]
 8003a2a:	461f      	mov	r7, r3
 8003a2c:	42be      	cmp	r6, r7
 8003a2e:	680b      	ldr	r3, [r1, #0]
 8003a30:	4682      	mov	sl, r0
 8003a32:	460c      	mov	r4, r1
 8003a34:	4690      	mov	r8, r2
 8003a36:	d82c      	bhi.n	8003a92 <__ssputs_r+0x6e>
 8003a38:	898a      	ldrh	r2, [r1, #12]
 8003a3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a3e:	d026      	beq.n	8003a8e <__ssputs_r+0x6a>
 8003a40:	6965      	ldr	r5, [r4, #20]
 8003a42:	6909      	ldr	r1, [r1, #16]
 8003a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a48:	eba3 0901 	sub.w	r9, r3, r1
 8003a4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a50:	1c7b      	adds	r3, r7, #1
 8003a52:	444b      	add	r3, r9
 8003a54:	106d      	asrs	r5, r5, #1
 8003a56:	429d      	cmp	r5, r3
 8003a58:	bf38      	it	cc
 8003a5a:	461d      	movcc	r5, r3
 8003a5c:	0553      	lsls	r3, r2, #21
 8003a5e:	d527      	bpl.n	8003ab0 <__ssputs_r+0x8c>
 8003a60:	4629      	mov	r1, r5
 8003a62:	f7ff ff53 	bl	800390c <_malloc_r>
 8003a66:	4606      	mov	r6, r0
 8003a68:	b360      	cbz	r0, 8003ac4 <__ssputs_r+0xa0>
 8003a6a:	6921      	ldr	r1, [r4, #16]
 8003a6c:	464a      	mov	r2, r9
 8003a6e:	f7ff fed3 	bl	8003818 <memcpy>
 8003a72:	89a3      	ldrh	r3, [r4, #12]
 8003a74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7c:	81a3      	strh	r3, [r4, #12]
 8003a7e:	6126      	str	r6, [r4, #16]
 8003a80:	6165      	str	r5, [r4, #20]
 8003a82:	444e      	add	r6, r9
 8003a84:	eba5 0509 	sub.w	r5, r5, r9
 8003a88:	6026      	str	r6, [r4, #0]
 8003a8a:	60a5      	str	r5, [r4, #8]
 8003a8c:	463e      	mov	r6, r7
 8003a8e:	42be      	cmp	r6, r7
 8003a90:	d900      	bls.n	8003a94 <__ssputs_r+0x70>
 8003a92:	463e      	mov	r6, r7
 8003a94:	6820      	ldr	r0, [r4, #0]
 8003a96:	4632      	mov	r2, r6
 8003a98:	4641      	mov	r1, r8
 8003a9a:	f000 faab 	bl	8003ff4 <memmove>
 8003a9e:	68a3      	ldr	r3, [r4, #8]
 8003aa0:	1b9b      	subs	r3, r3, r6
 8003aa2:	60a3      	str	r3, [r4, #8]
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	4433      	add	r3, r6
 8003aa8:	6023      	str	r3, [r4, #0]
 8003aaa:	2000      	movs	r0, #0
 8003aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab0:	462a      	mov	r2, r5
 8003ab2:	f000 fac9 	bl	8004048 <_realloc_r>
 8003ab6:	4606      	mov	r6, r0
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d1e0      	bne.n	8003a7e <__ssputs_r+0x5a>
 8003abc:	6921      	ldr	r1, [r4, #16]
 8003abe:	4650      	mov	r0, sl
 8003ac0:	f7ff feb8 	bl	8003834 <_free_r>
 8003ac4:	230c      	movs	r3, #12
 8003ac6:	f8ca 3000 	str.w	r3, [sl]
 8003aca:	89a3      	ldrh	r3, [r4, #12]
 8003acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad0:	81a3      	strh	r3, [r4, #12]
 8003ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad6:	e7e9      	b.n	8003aac <__ssputs_r+0x88>

08003ad8 <_svfiprintf_r>:
 8003ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003adc:	4698      	mov	r8, r3
 8003ade:	898b      	ldrh	r3, [r1, #12]
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	b09d      	sub	sp, #116	; 0x74
 8003ae4:	4607      	mov	r7, r0
 8003ae6:	460d      	mov	r5, r1
 8003ae8:	4614      	mov	r4, r2
 8003aea:	d50e      	bpl.n	8003b0a <_svfiprintf_r+0x32>
 8003aec:	690b      	ldr	r3, [r1, #16]
 8003aee:	b963      	cbnz	r3, 8003b0a <_svfiprintf_r+0x32>
 8003af0:	2140      	movs	r1, #64	; 0x40
 8003af2:	f7ff ff0b 	bl	800390c <_malloc_r>
 8003af6:	6028      	str	r0, [r5, #0]
 8003af8:	6128      	str	r0, [r5, #16]
 8003afa:	b920      	cbnz	r0, 8003b06 <_svfiprintf_r+0x2e>
 8003afc:	230c      	movs	r3, #12
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295
 8003b04:	e0d0      	b.n	8003ca8 <_svfiprintf_r+0x1d0>
 8003b06:	2340      	movs	r3, #64	; 0x40
 8003b08:	616b      	str	r3, [r5, #20]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b0e:	2320      	movs	r3, #32
 8003b10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b14:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b18:	2330      	movs	r3, #48	; 0x30
 8003b1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003cc0 <_svfiprintf_r+0x1e8>
 8003b1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b22:	f04f 0901 	mov.w	r9, #1
 8003b26:	4623      	mov	r3, r4
 8003b28:	469a      	mov	sl, r3
 8003b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b2e:	b10a      	cbz	r2, 8003b34 <_svfiprintf_r+0x5c>
 8003b30:	2a25      	cmp	r2, #37	; 0x25
 8003b32:	d1f9      	bne.n	8003b28 <_svfiprintf_r+0x50>
 8003b34:	ebba 0b04 	subs.w	fp, sl, r4
 8003b38:	d00b      	beq.n	8003b52 <_svfiprintf_r+0x7a>
 8003b3a:	465b      	mov	r3, fp
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	4629      	mov	r1, r5
 8003b40:	4638      	mov	r0, r7
 8003b42:	f7ff ff6f 	bl	8003a24 <__ssputs_r>
 8003b46:	3001      	adds	r0, #1
 8003b48:	f000 80a9 	beq.w	8003c9e <_svfiprintf_r+0x1c6>
 8003b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b4e:	445a      	add	r2, fp
 8003b50:	9209      	str	r2, [sp, #36]	; 0x24
 8003b52:	f89a 3000 	ldrb.w	r3, [sl]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80a1 	beq.w	8003c9e <_svfiprintf_r+0x1c6>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b66:	f10a 0a01 	add.w	sl, sl, #1
 8003b6a:	9304      	str	r3, [sp, #16]
 8003b6c:	9307      	str	r3, [sp, #28]
 8003b6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b72:	931a      	str	r3, [sp, #104]	; 0x68
 8003b74:	4654      	mov	r4, sl
 8003b76:	2205      	movs	r2, #5
 8003b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b7c:	4850      	ldr	r0, [pc, #320]	; (8003cc0 <_svfiprintf_r+0x1e8>)
 8003b7e:	f7fc fb2f 	bl	80001e0 <memchr>
 8003b82:	9a04      	ldr	r2, [sp, #16]
 8003b84:	b9d8      	cbnz	r0, 8003bbe <_svfiprintf_r+0xe6>
 8003b86:	06d0      	lsls	r0, r2, #27
 8003b88:	bf44      	itt	mi
 8003b8a:	2320      	movmi	r3, #32
 8003b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b90:	0711      	lsls	r1, r2, #28
 8003b92:	bf44      	itt	mi
 8003b94:	232b      	movmi	r3, #43	; 0x2b
 8003b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8003ba0:	d015      	beq.n	8003bce <_svfiprintf_r+0xf6>
 8003ba2:	9a07      	ldr	r2, [sp, #28]
 8003ba4:	4654      	mov	r4, sl
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	f04f 0c0a 	mov.w	ip, #10
 8003bac:	4621      	mov	r1, r4
 8003bae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bb2:	3b30      	subs	r3, #48	; 0x30
 8003bb4:	2b09      	cmp	r3, #9
 8003bb6:	d94d      	bls.n	8003c54 <_svfiprintf_r+0x17c>
 8003bb8:	b1b0      	cbz	r0, 8003be8 <_svfiprintf_r+0x110>
 8003bba:	9207      	str	r2, [sp, #28]
 8003bbc:	e014      	b.n	8003be8 <_svfiprintf_r+0x110>
 8003bbe:	eba0 0308 	sub.w	r3, r0, r8
 8003bc2:	fa09 f303 	lsl.w	r3, r9, r3
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	9304      	str	r3, [sp, #16]
 8003bca:	46a2      	mov	sl, r4
 8003bcc:	e7d2      	b.n	8003b74 <_svfiprintf_r+0x9c>
 8003bce:	9b03      	ldr	r3, [sp, #12]
 8003bd0:	1d19      	adds	r1, r3, #4
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	9103      	str	r1, [sp, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bfbb      	ittet	lt
 8003bda:	425b      	neglt	r3, r3
 8003bdc:	f042 0202 	orrlt.w	r2, r2, #2
 8003be0:	9307      	strge	r3, [sp, #28]
 8003be2:	9307      	strlt	r3, [sp, #28]
 8003be4:	bfb8      	it	lt
 8003be6:	9204      	strlt	r2, [sp, #16]
 8003be8:	7823      	ldrb	r3, [r4, #0]
 8003bea:	2b2e      	cmp	r3, #46	; 0x2e
 8003bec:	d10c      	bne.n	8003c08 <_svfiprintf_r+0x130>
 8003bee:	7863      	ldrb	r3, [r4, #1]
 8003bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf2:	d134      	bne.n	8003c5e <_svfiprintf_r+0x186>
 8003bf4:	9b03      	ldr	r3, [sp, #12]
 8003bf6:	1d1a      	adds	r2, r3, #4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	9203      	str	r2, [sp, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bfb8      	it	lt
 8003c00:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c04:	3402      	adds	r4, #2
 8003c06:	9305      	str	r3, [sp, #20]
 8003c08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003cd0 <_svfiprintf_r+0x1f8>
 8003c0c:	7821      	ldrb	r1, [r4, #0]
 8003c0e:	2203      	movs	r2, #3
 8003c10:	4650      	mov	r0, sl
 8003c12:	f7fc fae5 	bl	80001e0 <memchr>
 8003c16:	b138      	cbz	r0, 8003c28 <_svfiprintf_r+0x150>
 8003c18:	9b04      	ldr	r3, [sp, #16]
 8003c1a:	eba0 000a 	sub.w	r0, r0, sl
 8003c1e:	2240      	movs	r2, #64	; 0x40
 8003c20:	4082      	lsls	r2, r0
 8003c22:	4313      	orrs	r3, r2
 8003c24:	3401      	adds	r4, #1
 8003c26:	9304      	str	r3, [sp, #16]
 8003c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c2c:	4825      	ldr	r0, [pc, #148]	; (8003cc4 <_svfiprintf_r+0x1ec>)
 8003c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c32:	2206      	movs	r2, #6
 8003c34:	f7fc fad4 	bl	80001e0 <memchr>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d038      	beq.n	8003cae <_svfiprintf_r+0x1d6>
 8003c3c:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <_svfiprintf_r+0x1f0>)
 8003c3e:	bb1b      	cbnz	r3, 8003c88 <_svfiprintf_r+0x1b0>
 8003c40:	9b03      	ldr	r3, [sp, #12]
 8003c42:	3307      	adds	r3, #7
 8003c44:	f023 0307 	bic.w	r3, r3, #7
 8003c48:	3308      	adds	r3, #8
 8003c4a:	9303      	str	r3, [sp, #12]
 8003c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c4e:	4433      	add	r3, r6
 8003c50:	9309      	str	r3, [sp, #36]	; 0x24
 8003c52:	e768      	b.n	8003b26 <_svfiprintf_r+0x4e>
 8003c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c58:	460c      	mov	r4, r1
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	e7a6      	b.n	8003bac <_svfiprintf_r+0xd4>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	3401      	adds	r4, #1
 8003c62:	9305      	str	r3, [sp, #20]
 8003c64:	4619      	mov	r1, r3
 8003c66:	f04f 0c0a 	mov.w	ip, #10
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c70:	3a30      	subs	r2, #48	; 0x30
 8003c72:	2a09      	cmp	r2, #9
 8003c74:	d903      	bls.n	8003c7e <_svfiprintf_r+0x1a6>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0c6      	beq.n	8003c08 <_svfiprintf_r+0x130>
 8003c7a:	9105      	str	r1, [sp, #20]
 8003c7c:	e7c4      	b.n	8003c08 <_svfiprintf_r+0x130>
 8003c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c82:	4604      	mov	r4, r0
 8003c84:	2301      	movs	r3, #1
 8003c86:	e7f0      	b.n	8003c6a <_svfiprintf_r+0x192>
 8003c88:	ab03      	add	r3, sp, #12
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	462a      	mov	r2, r5
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <_svfiprintf_r+0x1f4>)
 8003c90:	a904      	add	r1, sp, #16
 8003c92:	4638      	mov	r0, r7
 8003c94:	f3af 8000 	nop.w
 8003c98:	1c42      	adds	r2, r0, #1
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	d1d6      	bne.n	8003c4c <_svfiprintf_r+0x174>
 8003c9e:	89ab      	ldrh	r3, [r5, #12]
 8003ca0:	065b      	lsls	r3, r3, #25
 8003ca2:	f53f af2d 	bmi.w	8003b00 <_svfiprintf_r+0x28>
 8003ca6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ca8:	b01d      	add	sp, #116	; 0x74
 8003caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cae:	ab03      	add	r3, sp, #12
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	462a      	mov	r2, r5
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <_svfiprintf_r+0x1f4>)
 8003cb6:	a904      	add	r1, sp, #16
 8003cb8:	4638      	mov	r0, r7
 8003cba:	f000 f879 	bl	8003db0 <_printf_i>
 8003cbe:	e7eb      	b.n	8003c98 <_svfiprintf_r+0x1c0>
 8003cc0:	08004150 	.word	0x08004150
 8003cc4:	0800415a 	.word	0x0800415a
 8003cc8:	00000000 	.word	0x00000000
 8003ccc:	08003a25 	.word	0x08003a25
 8003cd0:	08004156 	.word	0x08004156

08003cd4 <_printf_common>:
 8003cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd8:	4616      	mov	r6, r2
 8003cda:	4699      	mov	r9, r3
 8003cdc:	688a      	ldr	r2, [r1, #8]
 8003cde:	690b      	ldr	r3, [r1, #16]
 8003ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	bfb8      	it	lt
 8003ce8:	4613      	movlt	r3, r2
 8003cea:	6033      	str	r3, [r6, #0]
 8003cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cf0:	4607      	mov	r7, r0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	b10a      	cbz	r2, 8003cfa <_printf_common+0x26>
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	6033      	str	r3, [r6, #0]
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	0699      	lsls	r1, r3, #26
 8003cfe:	bf42      	ittt	mi
 8003d00:	6833      	ldrmi	r3, [r6, #0]
 8003d02:	3302      	addmi	r3, #2
 8003d04:	6033      	strmi	r3, [r6, #0]
 8003d06:	6825      	ldr	r5, [r4, #0]
 8003d08:	f015 0506 	ands.w	r5, r5, #6
 8003d0c:	d106      	bne.n	8003d1c <_printf_common+0x48>
 8003d0e:	f104 0a19 	add.w	sl, r4, #25
 8003d12:	68e3      	ldr	r3, [r4, #12]
 8003d14:	6832      	ldr	r2, [r6, #0]
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	42ab      	cmp	r3, r5
 8003d1a:	dc26      	bgt.n	8003d6a <_printf_common+0x96>
 8003d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d20:	1e13      	subs	r3, r2, #0
 8003d22:	6822      	ldr	r2, [r4, #0]
 8003d24:	bf18      	it	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	0692      	lsls	r2, r2, #26
 8003d2a:	d42b      	bmi.n	8003d84 <_printf_common+0xb0>
 8003d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d30:	4649      	mov	r1, r9
 8003d32:	4638      	mov	r0, r7
 8003d34:	47c0      	blx	r8
 8003d36:	3001      	adds	r0, #1
 8003d38:	d01e      	beq.n	8003d78 <_printf_common+0xa4>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	6922      	ldr	r2, [r4, #16]
 8003d3e:	f003 0306 	and.w	r3, r3, #6
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	bf02      	ittt	eq
 8003d46:	68e5      	ldreq	r5, [r4, #12]
 8003d48:	6833      	ldreq	r3, [r6, #0]
 8003d4a:	1aed      	subeq	r5, r5, r3
 8003d4c:	68a3      	ldr	r3, [r4, #8]
 8003d4e:	bf0c      	ite	eq
 8003d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d54:	2500      	movne	r5, #0
 8003d56:	4293      	cmp	r3, r2
 8003d58:	bfc4      	itt	gt
 8003d5a:	1a9b      	subgt	r3, r3, r2
 8003d5c:	18ed      	addgt	r5, r5, r3
 8003d5e:	2600      	movs	r6, #0
 8003d60:	341a      	adds	r4, #26
 8003d62:	42b5      	cmp	r5, r6
 8003d64:	d11a      	bne.n	8003d9c <_printf_common+0xc8>
 8003d66:	2000      	movs	r0, #0
 8003d68:	e008      	b.n	8003d7c <_printf_common+0xa8>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	4652      	mov	r2, sl
 8003d6e:	4649      	mov	r1, r9
 8003d70:	4638      	mov	r0, r7
 8003d72:	47c0      	blx	r8
 8003d74:	3001      	adds	r0, #1
 8003d76:	d103      	bne.n	8003d80 <_printf_common+0xac>
 8003d78:	f04f 30ff 	mov.w	r0, #4294967295
 8003d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d80:	3501      	adds	r5, #1
 8003d82:	e7c6      	b.n	8003d12 <_printf_common+0x3e>
 8003d84:	18e1      	adds	r1, r4, r3
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	2030      	movs	r0, #48	; 0x30
 8003d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d8e:	4422      	add	r2, r4
 8003d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d98:	3302      	adds	r3, #2
 8003d9a:	e7c7      	b.n	8003d2c <_printf_common+0x58>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	4622      	mov	r2, r4
 8003da0:	4649      	mov	r1, r9
 8003da2:	4638      	mov	r0, r7
 8003da4:	47c0      	blx	r8
 8003da6:	3001      	adds	r0, #1
 8003da8:	d0e6      	beq.n	8003d78 <_printf_common+0xa4>
 8003daa:	3601      	adds	r6, #1
 8003dac:	e7d9      	b.n	8003d62 <_printf_common+0x8e>
	...

08003db0 <_printf_i>:
 8003db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003db4:	7e0f      	ldrb	r7, [r1, #24]
 8003db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003db8:	2f78      	cmp	r7, #120	; 0x78
 8003dba:	4691      	mov	r9, r2
 8003dbc:	4680      	mov	r8, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	469a      	mov	sl, r3
 8003dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dc6:	d807      	bhi.n	8003dd8 <_printf_i+0x28>
 8003dc8:	2f62      	cmp	r7, #98	; 0x62
 8003dca:	d80a      	bhi.n	8003de2 <_printf_i+0x32>
 8003dcc:	2f00      	cmp	r7, #0
 8003dce:	f000 80d4 	beq.w	8003f7a <_printf_i+0x1ca>
 8003dd2:	2f58      	cmp	r7, #88	; 0x58
 8003dd4:	f000 80c0 	beq.w	8003f58 <_printf_i+0x1a8>
 8003dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003de0:	e03a      	b.n	8003e58 <_printf_i+0xa8>
 8003de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003de6:	2b15      	cmp	r3, #21
 8003de8:	d8f6      	bhi.n	8003dd8 <_printf_i+0x28>
 8003dea:	a101      	add	r1, pc, #4	; (adr r1, 8003df0 <_printf_i+0x40>)
 8003dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003df0:	08003e49 	.word	0x08003e49
 8003df4:	08003e5d 	.word	0x08003e5d
 8003df8:	08003dd9 	.word	0x08003dd9
 8003dfc:	08003dd9 	.word	0x08003dd9
 8003e00:	08003dd9 	.word	0x08003dd9
 8003e04:	08003dd9 	.word	0x08003dd9
 8003e08:	08003e5d 	.word	0x08003e5d
 8003e0c:	08003dd9 	.word	0x08003dd9
 8003e10:	08003dd9 	.word	0x08003dd9
 8003e14:	08003dd9 	.word	0x08003dd9
 8003e18:	08003dd9 	.word	0x08003dd9
 8003e1c:	08003f61 	.word	0x08003f61
 8003e20:	08003e89 	.word	0x08003e89
 8003e24:	08003f1b 	.word	0x08003f1b
 8003e28:	08003dd9 	.word	0x08003dd9
 8003e2c:	08003dd9 	.word	0x08003dd9
 8003e30:	08003f83 	.word	0x08003f83
 8003e34:	08003dd9 	.word	0x08003dd9
 8003e38:	08003e89 	.word	0x08003e89
 8003e3c:	08003dd9 	.word	0x08003dd9
 8003e40:	08003dd9 	.word	0x08003dd9
 8003e44:	08003f23 	.word	0x08003f23
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	1d1a      	adds	r2, r3, #4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	602a      	str	r2, [r5, #0]
 8003e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e09f      	b.n	8003f9c <_printf_i+0x1ec>
 8003e5c:	6820      	ldr	r0, [r4, #0]
 8003e5e:	682b      	ldr	r3, [r5, #0]
 8003e60:	0607      	lsls	r7, r0, #24
 8003e62:	f103 0104 	add.w	r1, r3, #4
 8003e66:	6029      	str	r1, [r5, #0]
 8003e68:	d501      	bpl.n	8003e6e <_printf_i+0xbe>
 8003e6a:	681e      	ldr	r6, [r3, #0]
 8003e6c:	e003      	b.n	8003e76 <_printf_i+0xc6>
 8003e6e:	0646      	lsls	r6, r0, #25
 8003e70:	d5fb      	bpl.n	8003e6a <_printf_i+0xba>
 8003e72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e76:	2e00      	cmp	r6, #0
 8003e78:	da03      	bge.n	8003e82 <_printf_i+0xd2>
 8003e7a:	232d      	movs	r3, #45	; 0x2d
 8003e7c:	4276      	negs	r6, r6
 8003e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e82:	485a      	ldr	r0, [pc, #360]	; (8003fec <_printf_i+0x23c>)
 8003e84:	230a      	movs	r3, #10
 8003e86:	e012      	b.n	8003eae <_printf_i+0xfe>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	6820      	ldr	r0, [r4, #0]
 8003e8c:	1d19      	adds	r1, r3, #4
 8003e8e:	6029      	str	r1, [r5, #0]
 8003e90:	0605      	lsls	r5, r0, #24
 8003e92:	d501      	bpl.n	8003e98 <_printf_i+0xe8>
 8003e94:	681e      	ldr	r6, [r3, #0]
 8003e96:	e002      	b.n	8003e9e <_printf_i+0xee>
 8003e98:	0641      	lsls	r1, r0, #25
 8003e9a:	d5fb      	bpl.n	8003e94 <_printf_i+0xe4>
 8003e9c:	881e      	ldrh	r6, [r3, #0]
 8003e9e:	4853      	ldr	r0, [pc, #332]	; (8003fec <_printf_i+0x23c>)
 8003ea0:	2f6f      	cmp	r7, #111	; 0x6f
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2308      	moveq	r3, #8
 8003ea6:	230a      	movne	r3, #10
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eae:	6865      	ldr	r5, [r4, #4]
 8003eb0:	60a5      	str	r5, [r4, #8]
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	bfa2      	ittt	ge
 8003eb6:	6821      	ldrge	r1, [r4, #0]
 8003eb8:	f021 0104 	bicge.w	r1, r1, #4
 8003ebc:	6021      	strge	r1, [r4, #0]
 8003ebe:	b90e      	cbnz	r6, 8003ec4 <_printf_i+0x114>
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	d04b      	beq.n	8003f5c <_printf_i+0x1ac>
 8003ec4:	4615      	mov	r5, r2
 8003ec6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003eca:	fb03 6711 	mls	r7, r3, r1, r6
 8003ece:	5dc7      	ldrb	r7, [r0, r7]
 8003ed0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ed4:	4637      	mov	r7, r6
 8003ed6:	42bb      	cmp	r3, r7
 8003ed8:	460e      	mov	r6, r1
 8003eda:	d9f4      	bls.n	8003ec6 <_printf_i+0x116>
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d10b      	bne.n	8003ef8 <_printf_i+0x148>
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	07de      	lsls	r6, r3, #31
 8003ee4:	d508      	bpl.n	8003ef8 <_printf_i+0x148>
 8003ee6:	6923      	ldr	r3, [r4, #16]
 8003ee8:	6861      	ldr	r1, [r4, #4]
 8003eea:	4299      	cmp	r1, r3
 8003eec:	bfde      	ittt	le
 8003eee:	2330      	movle	r3, #48	; 0x30
 8003ef0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ef4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ef8:	1b52      	subs	r2, r2, r5
 8003efa:	6122      	str	r2, [r4, #16]
 8003efc:	f8cd a000 	str.w	sl, [sp]
 8003f00:	464b      	mov	r3, r9
 8003f02:	aa03      	add	r2, sp, #12
 8003f04:	4621      	mov	r1, r4
 8003f06:	4640      	mov	r0, r8
 8003f08:	f7ff fee4 	bl	8003cd4 <_printf_common>
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d14a      	bne.n	8003fa6 <_printf_i+0x1f6>
 8003f10:	f04f 30ff 	mov.w	r0, #4294967295
 8003f14:	b004      	add	sp, #16
 8003f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	f043 0320 	orr.w	r3, r3, #32
 8003f20:	6023      	str	r3, [r4, #0]
 8003f22:	4833      	ldr	r0, [pc, #204]	; (8003ff0 <_printf_i+0x240>)
 8003f24:	2778      	movs	r7, #120	; 0x78
 8003f26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	6829      	ldr	r1, [r5, #0]
 8003f2e:	061f      	lsls	r7, r3, #24
 8003f30:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f34:	d402      	bmi.n	8003f3c <_printf_i+0x18c>
 8003f36:	065f      	lsls	r7, r3, #25
 8003f38:	bf48      	it	mi
 8003f3a:	b2b6      	uxthmi	r6, r6
 8003f3c:	07df      	lsls	r7, r3, #31
 8003f3e:	bf48      	it	mi
 8003f40:	f043 0320 	orrmi.w	r3, r3, #32
 8003f44:	6029      	str	r1, [r5, #0]
 8003f46:	bf48      	it	mi
 8003f48:	6023      	strmi	r3, [r4, #0]
 8003f4a:	b91e      	cbnz	r6, 8003f54 <_printf_i+0x1a4>
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	f023 0320 	bic.w	r3, r3, #32
 8003f52:	6023      	str	r3, [r4, #0]
 8003f54:	2310      	movs	r3, #16
 8003f56:	e7a7      	b.n	8003ea8 <_printf_i+0xf8>
 8003f58:	4824      	ldr	r0, [pc, #144]	; (8003fec <_printf_i+0x23c>)
 8003f5a:	e7e4      	b.n	8003f26 <_printf_i+0x176>
 8003f5c:	4615      	mov	r5, r2
 8003f5e:	e7bd      	b.n	8003edc <_printf_i+0x12c>
 8003f60:	682b      	ldr	r3, [r5, #0]
 8003f62:	6826      	ldr	r6, [r4, #0]
 8003f64:	6961      	ldr	r1, [r4, #20]
 8003f66:	1d18      	adds	r0, r3, #4
 8003f68:	6028      	str	r0, [r5, #0]
 8003f6a:	0635      	lsls	r5, r6, #24
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	d501      	bpl.n	8003f74 <_printf_i+0x1c4>
 8003f70:	6019      	str	r1, [r3, #0]
 8003f72:	e002      	b.n	8003f7a <_printf_i+0x1ca>
 8003f74:	0670      	lsls	r0, r6, #25
 8003f76:	d5fb      	bpl.n	8003f70 <_printf_i+0x1c0>
 8003f78:	8019      	strh	r1, [r3, #0]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	6123      	str	r3, [r4, #16]
 8003f7e:	4615      	mov	r5, r2
 8003f80:	e7bc      	b.n	8003efc <_printf_i+0x14c>
 8003f82:	682b      	ldr	r3, [r5, #0]
 8003f84:	1d1a      	adds	r2, r3, #4
 8003f86:	602a      	str	r2, [r5, #0]
 8003f88:	681d      	ldr	r5, [r3, #0]
 8003f8a:	6862      	ldr	r2, [r4, #4]
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4628      	mov	r0, r5
 8003f90:	f7fc f926 	bl	80001e0 <memchr>
 8003f94:	b108      	cbz	r0, 8003f9a <_printf_i+0x1ea>
 8003f96:	1b40      	subs	r0, r0, r5
 8003f98:	6060      	str	r0, [r4, #4]
 8003f9a:	6863      	ldr	r3, [r4, #4]
 8003f9c:	6123      	str	r3, [r4, #16]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fa4:	e7aa      	b.n	8003efc <_printf_i+0x14c>
 8003fa6:	6923      	ldr	r3, [r4, #16]
 8003fa8:	462a      	mov	r2, r5
 8003faa:	4649      	mov	r1, r9
 8003fac:	4640      	mov	r0, r8
 8003fae:	47d0      	blx	sl
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d0ad      	beq.n	8003f10 <_printf_i+0x160>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	079b      	lsls	r3, r3, #30
 8003fb8:	d413      	bmi.n	8003fe2 <_printf_i+0x232>
 8003fba:	68e0      	ldr	r0, [r4, #12]
 8003fbc:	9b03      	ldr	r3, [sp, #12]
 8003fbe:	4298      	cmp	r0, r3
 8003fc0:	bfb8      	it	lt
 8003fc2:	4618      	movlt	r0, r3
 8003fc4:	e7a6      	b.n	8003f14 <_printf_i+0x164>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	4632      	mov	r2, r6
 8003fca:	4649      	mov	r1, r9
 8003fcc:	4640      	mov	r0, r8
 8003fce:	47d0      	blx	sl
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	d09d      	beq.n	8003f10 <_printf_i+0x160>
 8003fd4:	3501      	adds	r5, #1
 8003fd6:	68e3      	ldr	r3, [r4, #12]
 8003fd8:	9903      	ldr	r1, [sp, #12]
 8003fda:	1a5b      	subs	r3, r3, r1
 8003fdc:	42ab      	cmp	r3, r5
 8003fde:	dcf2      	bgt.n	8003fc6 <_printf_i+0x216>
 8003fe0:	e7eb      	b.n	8003fba <_printf_i+0x20a>
 8003fe2:	2500      	movs	r5, #0
 8003fe4:	f104 0619 	add.w	r6, r4, #25
 8003fe8:	e7f5      	b.n	8003fd6 <_printf_i+0x226>
 8003fea:	bf00      	nop
 8003fec:	08004161 	.word	0x08004161
 8003ff0:	08004172 	.word	0x08004172

08003ff4 <memmove>:
 8003ff4:	4288      	cmp	r0, r1
 8003ff6:	b510      	push	{r4, lr}
 8003ff8:	eb01 0402 	add.w	r4, r1, r2
 8003ffc:	d902      	bls.n	8004004 <memmove+0x10>
 8003ffe:	4284      	cmp	r4, r0
 8004000:	4623      	mov	r3, r4
 8004002:	d807      	bhi.n	8004014 <memmove+0x20>
 8004004:	1e43      	subs	r3, r0, #1
 8004006:	42a1      	cmp	r1, r4
 8004008:	d008      	beq.n	800401c <memmove+0x28>
 800400a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800400e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004012:	e7f8      	b.n	8004006 <memmove+0x12>
 8004014:	4402      	add	r2, r0
 8004016:	4601      	mov	r1, r0
 8004018:	428a      	cmp	r2, r1
 800401a:	d100      	bne.n	800401e <memmove+0x2a>
 800401c:	bd10      	pop	{r4, pc}
 800401e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004026:	e7f7      	b.n	8004018 <memmove+0x24>

08004028 <_sbrk_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4d06      	ldr	r5, [pc, #24]	; (8004044 <_sbrk_r+0x1c>)
 800402c:	2300      	movs	r3, #0
 800402e:	4604      	mov	r4, r0
 8004030:	4608      	mov	r0, r1
 8004032:	602b      	str	r3, [r5, #0]
 8004034:	f7fc fd06 	bl	8000a44 <_sbrk>
 8004038:	1c43      	adds	r3, r0, #1
 800403a:	d102      	bne.n	8004042 <_sbrk_r+0x1a>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	b103      	cbz	r3, 8004042 <_sbrk_r+0x1a>
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	2000026c 	.word	0x2000026c

08004048 <_realloc_r>:
 8004048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800404c:	4680      	mov	r8, r0
 800404e:	4614      	mov	r4, r2
 8004050:	460e      	mov	r6, r1
 8004052:	b921      	cbnz	r1, 800405e <_realloc_r+0x16>
 8004054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004058:	4611      	mov	r1, r2
 800405a:	f7ff bc57 	b.w	800390c <_malloc_r>
 800405e:	b92a      	cbnz	r2, 800406c <_realloc_r+0x24>
 8004060:	f7ff fbe8 	bl	8003834 <_free_r>
 8004064:	4625      	mov	r5, r4
 8004066:	4628      	mov	r0, r5
 8004068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800406c:	f000 f81b 	bl	80040a6 <_malloc_usable_size_r>
 8004070:	4284      	cmp	r4, r0
 8004072:	4607      	mov	r7, r0
 8004074:	d802      	bhi.n	800407c <_realloc_r+0x34>
 8004076:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800407a:	d812      	bhi.n	80040a2 <_realloc_r+0x5a>
 800407c:	4621      	mov	r1, r4
 800407e:	4640      	mov	r0, r8
 8004080:	f7ff fc44 	bl	800390c <_malloc_r>
 8004084:	4605      	mov	r5, r0
 8004086:	2800      	cmp	r0, #0
 8004088:	d0ed      	beq.n	8004066 <_realloc_r+0x1e>
 800408a:	42bc      	cmp	r4, r7
 800408c:	4622      	mov	r2, r4
 800408e:	4631      	mov	r1, r6
 8004090:	bf28      	it	cs
 8004092:	463a      	movcs	r2, r7
 8004094:	f7ff fbc0 	bl	8003818 <memcpy>
 8004098:	4631      	mov	r1, r6
 800409a:	4640      	mov	r0, r8
 800409c:	f7ff fbca 	bl	8003834 <_free_r>
 80040a0:	e7e1      	b.n	8004066 <_realloc_r+0x1e>
 80040a2:	4635      	mov	r5, r6
 80040a4:	e7df      	b.n	8004066 <_realloc_r+0x1e>

080040a6 <_malloc_usable_size_r>:
 80040a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040aa:	1f18      	subs	r0, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bfbc      	itt	lt
 80040b0:	580b      	ldrlt	r3, [r1, r0]
 80040b2:	18c0      	addlt	r0, r0, r3
 80040b4:	4770      	bx	lr
	...

080040b8 <_init>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr

080040c4 <_fini>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr

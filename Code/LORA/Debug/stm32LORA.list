
stm32LORA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800712c  0800712c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007528  08007528  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  08007528  08007528  00017528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007530  08007530  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007534  08007534  00017534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08007538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000168  080076a0  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  080076a0  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d37c  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026e0  00000000  00000000  0002d557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  0002fc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b9  00000000  00000000  00030920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000210bb  00000000  00000000  000312d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f3fd  00000000  00000000  00052394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1bb9  00000000  00000000  00061791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d4c  00000000  00000000  0012334c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00127098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007114 	.word	0x08007114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	08007114 	.word	0x08007114

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295
 800028e:	f000 b9bb 	b.w	8000608 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
  * @retval int
  */


int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b0b0      	sub	sp, #192	; 0xc0
 8000610:	af00      	add	r7, sp, #0
int main(void)
 8000612:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* USER CODE BEGIN 1 */

	rfm95_handle_t rfm95_handle = {
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	22b8      	movs	r2, #184	; 0xb8
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f005 fefe 	bl	8006422 <memset>
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <main+0x80>)
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <main+0x84>)
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	2301      	movs	r3, #1
 8000630:	81bb      	strh	r3, [r7, #12]
	        },
			.receive_mode = RFM95_RECEIVE_MODE_NONE
	    };

	    // Initialise RFM95 module.
	    if (!rfm95_init(&rfm95_handle)) {
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fb69 	bl	8001d0c <rfm95_init>
 800063a:	4603      	mov	r3, r0
 800063c:	f083 0301 	eor.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <main+0x40>
	        printf("RFM95 init failed\n\r");
 8000646:	4813      	ldr	r0, [pc, #76]	; (8000694 <main+0x88>)
 8000648:	f005 fe86 	bl	8006358 <iprintf>
	    }

	    uint8_t data_packet[] = {0x01, 0x02, 0x03, 0x04};
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <main+0x8c>)
 800064e:	603b      	str	r3, [r7, #0]

	    if (!rfm95_send_receive_cycle(&rfm95_handle, data_packet, sizeof(data_packet))) {
 8000650:	4639      	mov	r1, r7
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2204      	movs	r2, #4
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fb8a 	bl	8002d70 <rfm95_send_receive_cycle>
 800065c:	4603      	mov	r3, r0
 800065e:	f083 0301 	eor.w	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <main+0x64>
	        printf("RFM95 send failed\n\r");
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <main+0x90>)
 800066a:	f005 fe75 	bl	8006358 <iprintf>
 800066e:	e002      	b.n	8000676 <main+0x6a>
	    } else {
	        printf("RFM95 send success\n\r");
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <main+0x94>)
 8000672:	f005 fe71 	bl	8006358 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f002 fc68 	bl	8002f4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f813 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f8db 	bl	8000838 <MX_GPIO_Init>
  MX_USART2_Init();
 8000682:	f000 f8ad 	bl	80007e0 <MX_USART2_Init>
  //MX_USART2_UART_Init();
  MX_SPI1_Init();
 8000686:	f000 f86f 	bl	8000768 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x7e>
 800068c:	20000184 	.word	0x20000184
 8000690:	48000400 	.word	0x48000400
 8000694:	0800712c 	.word	0x0800712c
 8000698:	04030201 	.word	0x04030201
 800069c:	08007140 	.word	0x08007140
 80006a0:	08007154 	.word	0x08007154

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b096      	sub	sp, #88	; 0x58
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2244      	movs	r2, #68	; 0x44
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 feb5 	bl	8006422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ca:	f002 ffc9 	bl	8003660 <HAL_PWREx_ControlVoltageScaling>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d4:	f000 f90a 	bl	80008ec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006d8:	f002 ffa4 	bl	8003624 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006dc:	4b21      	ldr	r3, [pc, #132]	; (8000764 <SystemClock_Config+0xc0>)
 80006de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006e2:	4a20      	ldr	r2, [pc, #128]	; (8000764 <SystemClock_Config+0xc0>)
 80006e4:	f023 0318 	bic.w	r3, r3, #24
 80006e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006ec:	2314      	movs	r3, #20
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006fc:	2360      	movs	r3, #96	; 0x60
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000704:	2301      	movs	r3, #1
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800070c:	2310      	movs	r3, #16
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000710:	2307      	movs	r3, #7
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fff3 	bl	800370c <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800072c:	f000 f8de 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2303      	movs	r3, #3
 8000736:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	2101      	movs	r1, #1
 8000748:	4618      	mov	r0, r3
 800074a:	f003 fbf3 	bl	8003f34 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000754:	f000 f8ca 	bl	80008ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000758:	f004 f806 	bl	8004768 <HAL_RCCEx_EnableMSIPLLMode>
}
 800075c:	bf00      	nop
 800075e:	3758      	adds	r7, #88	; 0x58
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000

08000768 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_SPI1_Init+0x70>)
 800076e:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <MX_SPI1_Init+0x74>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_SPI1_Init+0x70>)
 8000774:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_SPI1_Init+0x70>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_SPI1_Init+0x70>)
 8000782:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000786:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_SPI1_Init+0x70>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_SPI1_Init+0x70>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_SPI1_Init+0x70>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_SPI1_Init+0x70>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_SPI1_Init+0x70>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_SPI1_Init+0x70>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_SPI1_Init+0x70>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_SPI1_Init+0x70>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_SPI1_Init+0x70>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_SPI1_Init+0x70>)
 80007c0:	2208      	movs	r2, #8
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_SPI1_Init+0x70>)
 80007c6:	f004 f8d1 	bl	800496c <HAL_SPI_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 80007d0:	f000 f88c 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000184 	.word	0x20000184
 80007dc:	40013000 	.word	0x40013000

080007e0 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_USART2_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_USART2_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_Init+0x50>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART2_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_USART2_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_USART2_Init+0x50>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_USART2_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_USART2_Init+0x50>)
 800081e:	f005 f8e7 	bl	80059f0 <HAL_USART_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000828:	f000 f860 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200001e8 	.word	0x200001e8
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <MX_GPIO_Init+0xac>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a24      	ldr	r2, [pc, #144]	; (80008e4 <MX_GPIO_Init+0xac>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_GPIO_Init+0xac>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_GPIO_Init+0xac>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a1e      	ldr	r2, [pc, #120]	; (80008e4 <MX_GPIO_Init+0xac>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_GPIO_Init+0xac>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_GPIO_Init+0xac>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <MX_GPIO_Init+0xac>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_GPIO_Init+0xac>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2108      	movs	r1, #8
 800089a:	4813      	ldr	r0, [pc, #76]	; (80008e8 <MX_GPIO_Init+0xb0>)
 800089c:	f002 feaa 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80008a0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80008a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4619      	mov	r1, r3
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ba:	f002 fd31 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008be:	2308      	movs	r3, #8
 80008c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_GPIO_Init+0xb0>)
 80008d6:	f002 fd23 	bl	8003320 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48000400 	.word	0x48000400

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_MspInit+0x44>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	4a0e      	ldr	r2, [pc, #56]	; (800093c <HAL_MspInit+0x44>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6613      	str	r3, [r2, #96]	; 0x60
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_MspInit+0x44>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_MspInit+0x44>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <HAL_MspInit+0x44>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6593      	str	r3, [r2, #88]	; 0x58
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_MspInit+0x44>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a29      	ldr	r2, [pc, #164]	; (8000a04 <HAL_SPI_MspInit+0xc4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d14c      	bne.n	80009fc <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000962:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <HAL_SPI_MspInit+0xc8>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	4a28      	ldr	r2, [pc, #160]	; (8000a08 <HAL_SPI_MspInit+0xc8>)
 8000968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800096c:	6613      	str	r3, [r2, #96]	; 0x60
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <HAL_SPI_MspInit+0xc8>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <HAL_SPI_MspInit+0xc8>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <HAL_SPI_MspInit+0xc8>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <HAL_SPI_MspInit+0xc8>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <HAL_SPI_MspInit+0xc8>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <HAL_SPI_MspInit+0xc8>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <HAL_SPI_MspInit+0xc8>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009aa:	23e0      	movs	r3, #224	; 0xe0
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ba:	2305      	movs	r3, #5
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f002 fcaa 	bl	8003320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009cc:	2301      	movs	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009dc:	2305      	movs	r3, #5
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4809      	ldr	r0, [pc, #36]	; (8000a0c <HAL_SPI_MspInit+0xcc>)
 80009e8:	f002 fc9a 	bl	8003320 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	2023      	movs	r0, #35	; 0x23
 80009f2:	f002 fc1e 	bl	8003232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009f6:	2023      	movs	r0, #35	; 0x23
 80009f8:	f002 fc37 	bl	800326a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	; 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40013000 	.word	0x40013000
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	48000400 	.word	0x48000400

08000a10 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09e      	sub	sp, #120	; 0x78
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2254      	movs	r2, #84	; 0x54
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f005 fcf6 	bl	8006422 <memset>
  if(husart->Instance==USART2)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a2c      	ldr	r2, [pc, #176]	; (8000aec <HAL_USART_MspInit+0xdc>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d150      	bne.n	8000ae2 <HAL_USART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 fc95 	bl	800437c <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8000a58:	f7ff ff48 	bl	80008ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <HAL_USART_MspInit+0xe0>)
 8000a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a60:	4a23      	ldr	r2, [pc, #140]	; (8000af0 <HAL_USART_MspInit+0xe0>)
 8000a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a66:	6593      	str	r3, [r2, #88]	; 0x58
 8000a68:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <HAL_USART_MspInit+0xe0>)
 8000a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <HAL_USART_MspInit+0xe0>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a78:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <HAL_USART_MspInit+0xe0>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <HAL_USART_MspInit+0xe0>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA4     ------> USART2_CK
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_4;
 8000a8c:	2314      	movs	r3, #20
 8000a8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f002 fc39 	bl	8003320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ab2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f002 fc27 	bl	8003320 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2026      	movs	r0, #38	; 0x26
 8000ad8:	f002 fbab 	bl	8003232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000adc:	2026      	movs	r0, #38	; 0x26
 8000ade:	f002 fbc4 	bl	800326a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3778      	adds	r7, #120	; 0x78
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40021000 	.word	0x40021000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b40:	f002 fa58 	bl	8002ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <SPI1_IRQHandler+0x10>)
 8000b4e:	f004 fc7f 	bl	8005450 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000184 	.word	0x20000184

08000b5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <USART2_IRQHandler+0x10>)
 8000b62:	f004 ff8f 	bl	8005a84 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200001e8 	.word	0x200001e8

08000b70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return 1;
 8000b74:	2301      	movs	r3, #1
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_kill>:

int _kill(int pid, int sig)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b8a:	f005 fc99 	bl	80064c0 <__errno>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2216      	movs	r2, #22
 8000b92:	601a      	str	r2, [r3, #0]
  return -1;
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_exit>:

void _exit (int status)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ffe7 	bl	8000b80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bb2:	e7fe      	b.n	8000bb2 <_exit+0x12>

08000bb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e00a      	b.n	8000bdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bc6:	f3af 8000 	nop.w
 8000bca:	4601      	mov	r1, r0
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	b2ca      	uxtb	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbf0      	blt.n	8000bc6 <_read+0x12>
  }

  return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	e009      	b.n	8000c14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf1      	blt.n	8000c00 <_write+0x12>
  }
  return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_close>:

int _close(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_isatty>:

int _isatty(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f005 fbfe 	bl	80064c0 <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20010000 	.word	0x20010000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	20000238 	.word	0x20000238
 8000cf8:	200003a0 	.word	0x200003a0

08000cfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d24:	f7ff ffea 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d2a:	490d      	ldr	r1, [pc, #52]	; (8000d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <LoopForever+0xe>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d40:	4c0a      	ldr	r4, [pc, #40]	; (8000d6c <LoopForever+0x16>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f005 fbbd 	bl	80064cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d52:	f7ff fc5b 	bl	800060c <main>

08000d56 <LoopForever>:

LoopForever:
    b LoopForever
 8000d56:	e7fe      	b.n	8000d56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8000d64:	08007538 	.word	0x08007538
  ldr r2, =_sbss
 8000d68:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8000d6c:	2000039c 	.word	0x2000039c

08000d70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC1_IRQHandler>
	...

08000d74 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 8000d74:	b5b0      	push	{r4, r5, r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	777b      	strb	r3, [r7, #29]
 8000d86:	e01b      	b.n	8000dc0 <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	77bb      	strb	r3, [r7, #30]
 8000d8c:	e012      	b.n	8000db4 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 8000d8e:	7fba      	ldrb	r2, [r7, #30]
 8000d90:	7f7b      	ldrb	r3, [r7, #29]
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	461a      	mov	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	1899      	adds	r1, r3, r2
 8000d9c:	7fba      	ldrb	r2, [r7, #30]
 8000d9e:	7f7b      	ldrb	r3, [r7, #29]
 8000da0:	7808      	ldrb	r0, [r1, #0]
 8000da2:	4961      	ldr	r1, [pc, #388]	; (8000f28 <AES_Encrypt+0x1b4>)
 8000da4:	0092      	lsls	r2, r2, #2
 8000da6:	440a      	add	r2, r1
 8000da8:	4413      	add	r3, r2
 8000daa:	4602      	mov	r2, r0
 8000dac:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000dae:	7fbb      	ldrb	r3, [r7, #30]
 8000db0:	3301      	adds	r3, #1
 8000db2:	77bb      	strb	r3, [r7, #30]
 8000db4:	7fbb      	ldrb	r3, [r7, #30]
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d9e9      	bls.n	8000d8e <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 8000dba:	7f7b      	ldrb	r3, [r7, #29]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	777b      	strb	r3, [r7, #29]
 8000dc0:	7f7b      	ldrb	r3, [r7, #29]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d9e0      	bls.n	8000d88 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	77fb      	strb	r3, [r7, #31]
 8000dca:	e00b      	b.n	8000de4 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 8000dcc:	7ffb      	ldrb	r3, [r7, #31]
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	441a      	add	r2, r3
 8000dd2:	7ffb      	ldrb	r3, [r7, #31]
 8000dd4:	7812      	ldrb	r2, [r2, #0]
 8000dd6:	3320      	adds	r3, #32
 8000dd8:	443b      	add	r3, r7
 8000dda:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 8000dde:	7ffb      	ldrb	r3, [r7, #31]
 8000de0:	3301      	adds	r3, #1
 8000de2:	77fb      	strb	r3, [r7, #31]
 8000de4:	7ffb      	ldrb	r3, [r7, #31]
 8000de6:	2b0f      	cmp	r3, #15
 8000de8:	d9f0      	bls.n	8000dcc <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f89c 	bl	8000f2c <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 8000df4:	2301      	movs	r3, #1
 8000df6:	773b      	strb	r3, [r7, #28]
 8000df8:	e038      	b.n	8000e6c <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	777b      	strb	r3, [r7, #29]
 8000dfe:	e01f      	b.n	8000e40 <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	77bb      	strb	r3, [r7, #30]
 8000e04:	e016      	b.n	8000e34 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000e06:	7fba      	ldrb	r2, [r7, #30]
 8000e08:	7f7b      	ldrb	r3, [r7, #29]
 8000e0a:	4947      	ldr	r1, [pc, #284]	; (8000f28 <AES_Encrypt+0x1b4>)
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	440a      	add	r2, r1
 8000e10:	4413      	add	r3, r2
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	7fbd      	ldrb	r5, [r7, #30]
 8000e16:	7f7c      	ldrb	r4, [r7, #29]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f8bf 	bl	8000f9c <AES_Sub_Byte>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4619      	mov	r1, r3
 8000e22:	4a41      	ldr	r2, [pc, #260]	; (8000f28 <AES_Encrypt+0x1b4>)
 8000e24:	00ab      	lsls	r3, r5, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	4423      	add	r3, r4
 8000e2a:	460a      	mov	r2, r1
 8000e2c:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 8000e2e:	7fbb      	ldrb	r3, [r7, #30]
 8000e30:	3301      	adds	r3, #1
 8000e32:	77bb      	strb	r3, [r7, #30]
 8000e34:	7fbb      	ldrb	r3, [r7, #30]
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d9e5      	bls.n	8000e06 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 8000e3a:	7f7b      	ldrb	r3, [r7, #29]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	777b      	strb	r3, [r7, #29]
 8000e40:	7f7b      	ldrb	r3, [r7, #29]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d9dc      	bls.n	8000e00 <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 8000e46:	f000 f8c7 	bl	8000fd8 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 8000e4a:	f000 f909 	bl	8001060 <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 8000e4e:	f107 020c 	add.w	r2, r7, #12
 8000e52:	7f3b      	ldrb	r3, [r7, #28]
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f998 	bl	800118c <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f863 	bl	8000f2c <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 8000e66:	7f3b      	ldrb	r3, [r7, #28]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	773b      	strb	r3, [r7, #28]
 8000e6c:	7f3b      	ldrb	r3, [r7, #28]
 8000e6e:	2b09      	cmp	r3, #9
 8000e70:	d9c3      	bls.n	8000dfa <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	777b      	strb	r3, [r7, #29]
 8000e76:	e01f      	b.n	8000eb8 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	77bb      	strb	r3, [r7, #30]
 8000e7c:	e016      	b.n	8000eac <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000e7e:	7fba      	ldrb	r2, [r7, #30]
 8000e80:	7f7b      	ldrb	r3, [r7, #29]
 8000e82:	4929      	ldr	r1, [pc, #164]	; (8000f28 <AES_Encrypt+0x1b4>)
 8000e84:	0092      	lsls	r2, r2, #2
 8000e86:	440a      	add	r2, r1
 8000e88:	4413      	add	r3, r2
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	7fbd      	ldrb	r5, [r7, #30]
 8000e8e:	7f7c      	ldrb	r4, [r7, #29]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 f883 	bl	8000f9c <AES_Sub_Byte>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4a23      	ldr	r2, [pc, #140]	; (8000f28 <AES_Encrypt+0x1b4>)
 8000e9c:	00ab      	lsls	r3, r5, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4423      	add	r3, r4
 8000ea2:	460a      	mov	r2, r1
 8000ea4:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000ea6:	7fbb      	ldrb	r3, [r7, #30]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	77bb      	strb	r3, [r7, #30]
 8000eac:	7fbb      	ldrb	r3, [r7, #30]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d9e5      	bls.n	8000e7e <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 8000eb2:	7f7b      	ldrb	r3, [r7, #29]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	777b      	strb	r3, [r7, #29]
 8000eb8:	7f7b      	ldrb	r3, [r7, #29]
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d9dc      	bls.n	8000e78 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 8000ebe:	f000 f88b 	bl	8000fd8 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 8000ec2:	f107 020c 	add.w	r2, r7, #12
 8000ec6:	7f3b      	ldrb	r3, [r7, #28]
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f95e 	bl	800118c <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f829 	bl	8000f2c <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	777b      	strb	r3, [r7, #29]
 8000ede:	e01a      	b.n	8000f16 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	77bb      	strb	r3, [r7, #30]
 8000ee4:	e011      	b.n	8000f0a <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 8000ee6:	7fb9      	ldrb	r1, [r7, #30]
 8000ee8:	7f7a      	ldrb	r2, [r7, #29]
 8000eea:	7fb8      	ldrb	r0, [r7, #30]
 8000eec:	7f7b      	ldrb	r3, [r7, #29]
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4403      	add	r3, r0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4403      	add	r3, r0
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <AES_Encrypt+0x1b4>)
 8000efa:	0089      	lsls	r1, r1, #2
 8000efc:	4401      	add	r1, r0
 8000efe:	440a      	add	r2, r1
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000f04:	7fbb      	ldrb	r3, [r7, #30]
 8000f06:	3301      	adds	r3, #1
 8000f08:	77bb      	strb	r3, [r7, #30]
 8000f0a:	7fbb      	ldrb	r3, [r7, #30]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d9ea      	bls.n	8000ee6 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 8000f10:	7f7b      	ldrb	r3, [r7, #29]
 8000f12:	3301      	adds	r3, #1
 8000f14:	777b      	strb	r3, [r7, #29]
 8000f16:	7f7b      	ldrb	r3, [r7, #29]
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d9e1      	bls.n	8000ee0 <AES_Encrypt+0x16c>
		}
	}

}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bdb0      	pop	{r4, r5, r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000023c 	.word	0x2000023c

08000f2c <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	73bb      	strb	r3, [r7, #14]
 8000f38:	e024      	b.n	8000f84 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	e01b      	b.n	8000f78 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	7bbb      	ldrb	r3, [r7, #14]
 8000f44:	4914      	ldr	r1, [pc, #80]	; (8000f98 <AES_Add_Round_Key+0x6c>)
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	440a      	add	r2, r1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	7818      	ldrb	r0, [r3, #0]
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	7bbb      	ldrb	r3, [r7, #14]
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	461a      	mov	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	7819      	ldrb	r1, [r3, #0]
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	4041      	eors	r1, r0
 8000f64:	b2c8      	uxtb	r0, r1
 8000f66:	490c      	ldr	r1, [pc, #48]	; (8000f98 <AES_Add_Round_Key+0x6c>)
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	440a      	add	r2, r1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4602      	mov	r2, r0
 8000f70:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	3301      	adds	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d9e0      	bls.n	8000f40 <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 8000f7e:	7bbb      	ldrb	r3, [r7, #14]
 8000f80:	3301      	adds	r3, #1
 8000f82:	73bb      	strb	r3, [r7, #14]
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d9d7      	bls.n	8000f3a <AES_Add_Round_Key+0xe>
		}
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	2000023c 	.word	0x2000023c

08000f9c <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	091b      	lsrs	r3, r3, #4
 8000faa:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	4906      	ldr	r1, [pc, #24]	; (8000fd4 <AES_Sub_Byte+0x38>)
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	440a      	add	r2, r1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 8000fc4:	7b7b      	ldrb	r3, [r7, #13]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <AES_Shift_Rows+0x84>)
 8000fe0:	791b      	ldrb	r3, [r3, #4]
 8000fe2:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <AES_Shift_Rows+0x84>)
 8000fe6:	795a      	ldrb	r2, [r3, #5]
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <AES_Shift_Rows+0x84>)
 8000fea:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <AES_Shift_Rows+0x84>)
 8000fee:	799a      	ldrb	r2, [r3, #6]
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <AES_Shift_Rows+0x84>)
 8000ff2:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <AES_Shift_Rows+0x84>)
 8000ff6:	79da      	ldrb	r2, [r3, #7]
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <AES_Shift_Rows+0x84>)
 8000ffa:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 8000ffc:	4a17      	ldr	r2, [pc, #92]	; (800105c <AES_Shift_Rows+0x84>)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <AES_Shift_Rows+0x84>)
 8001004:	7a1b      	ldrb	r3, [r3, #8]
 8001006:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <AES_Shift_Rows+0x84>)
 800100a:	7a9a      	ldrb	r2, [r3, #10]
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <AES_Shift_Rows+0x84>)
 800100e:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 8001010:	4a12      	ldr	r2, [pc, #72]	; (800105c <AES_Shift_Rows+0x84>)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <AES_Shift_Rows+0x84>)
 8001018:	7a5b      	ldrb	r3, [r3, #9]
 800101a:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <AES_Shift_Rows+0x84>)
 800101e:	7ada      	ldrb	r2, [r3, #11]
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <AES_Shift_Rows+0x84>)
 8001022:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <AES_Shift_Rows+0x84>)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <AES_Shift_Rows+0x84>)
 800102c:	7bdb      	ldrb	r3, [r3, #15]
 800102e:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <AES_Shift_Rows+0x84>)
 8001032:	7b9a      	ldrb	r2, [r3, #14]
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <AES_Shift_Rows+0x84>)
 8001036:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <AES_Shift_Rows+0x84>)
 800103a:	7b5a      	ldrb	r2, [r3, #13]
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <AES_Shift_Rows+0x84>)
 800103e:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <AES_Shift_Rows+0x84>)
 8001042:	7b1a      	ldrb	r2, [r3, #12]
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <AES_Shift_Rows+0x84>)
 8001046:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <AES_Shift_Rows+0x84>)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	7313      	strb	r3, [r2, #12]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2000023c 	.word	0x2000023c

08001060 <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 8001066:	2300      	movs	r3, #0
 8001068:	73bb      	strb	r3, [r7, #14]
 800106a:	e082      	b.n	8001172 <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	e033      	b.n	80010da <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 8001072:	7bf9      	ldrb	r1, [r7, #15]
 8001074:	7bba      	ldrb	r2, [r7, #14]
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	4843      	ldr	r0, [pc, #268]	; (8001188 <AES_Mix_Collums+0x128>)
 800107a:	0089      	lsls	r1, r1, #2
 800107c:	4401      	add	r1, r0
 800107e:	440a      	add	r2, r1
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	3310      	adds	r3, #16
 8001084:	443b      	add	r3, r7
 8001086:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	7bbb      	ldrb	r3, [r7, #14]
 800108e:	493e      	ldr	r1, [pc, #248]	; (8001188 <AES_Mix_Collums+0x128>)
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	440a      	add	r2, r1
 8001094:	4413      	add	r3, r2
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	0052      	lsls	r2, r2, #1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	3310      	adds	r3, #16
 80010a0:	443b      	add	r3, r7
 80010a2:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	4937      	ldr	r1, [pc, #220]	; (8001188 <AES_Mix_Collums+0x128>)
 80010ac:	0092      	lsls	r2, r2, #2
 80010ae:	440a      	add	r2, r1
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	da0c      	bge.n	80010d4 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	3310      	adds	r3, #16
 80010be:	443b      	add	r3, r7
 80010c0:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	f082 021b 	eor.w	r2, r2, #27
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	3310      	adds	r3, #16
 80010ce:	443b      	add	r3, r7
 80010d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	3301      	adds	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d9c8      	bls.n	8001072 <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 80010e0:	793a      	ldrb	r2, [r7, #4]
 80010e2:	7a7b      	ldrb	r3, [r7, #9]
 80010e4:	4053      	eors	r3, r2
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	797b      	ldrb	r3, [r7, #5]
 80010ea:	4053      	eors	r3, r2
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	7abb      	ldrb	r3, [r7, #10]
 80010f0:	4053      	eors	r3, r2
 80010f2:	b2d9      	uxtb	r1, r3
 80010f4:	7afa      	ldrb	r2, [r7, #11]
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	404a      	eors	r2, r1
 80010fa:	b2d1      	uxtb	r1, r2
 80010fc:	4a22      	ldr	r2, [pc, #136]	; (8001188 <AES_Mix_Collums+0x128>)
 80010fe:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 8001100:	7a3a      	ldrb	r2, [r7, #8]
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	4053      	eors	r3, r2
 8001106:	b2da      	uxtb	r2, r3
 8001108:	7abb      	ldrb	r3, [r7, #10]
 800110a:	4053      	eors	r3, r2
 800110c:	b2da      	uxtb	r2, r3
 800110e:	79bb      	ldrb	r3, [r7, #6]
 8001110:	4053      	eors	r3, r2
 8001112:	b2d9      	uxtb	r1, r3
 8001114:	7afa      	ldrb	r2, [r7, #11]
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	404a      	eors	r2, r1
 800111a:	b2d1      	uxtb	r1, r2
 800111c:	4a1a      	ldr	r2, [pc, #104]	; (8001188 <AES_Mix_Collums+0x128>)
 800111e:	4413      	add	r3, r2
 8001120:	460a      	mov	r2, r1
 8001122:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 8001124:	7a3a      	ldrb	r2, [r7, #8]
 8001126:	7a7b      	ldrb	r3, [r7, #9]
 8001128:	4053      	eors	r3, r2
 800112a:	b2da      	uxtb	r2, r3
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	4053      	eors	r3, r2
 8001130:	b2da      	uxtb	r2, r3
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	4053      	eors	r3, r2
 8001136:	b2d9      	uxtb	r1, r3
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	404a      	eors	r2, r1
 800113e:	b2d1      	uxtb	r1, r2
 8001140:	4a11      	ldr	r2, [pc, #68]	; (8001188 <AES_Mix_Collums+0x128>)
 8001142:	4413      	add	r3, r2
 8001144:	460a      	mov	r2, r1
 8001146:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 8001148:	7a3a      	ldrb	r2, [r7, #8]
 800114a:	793b      	ldrb	r3, [r7, #4]
 800114c:	4053      	eors	r3, r2
 800114e:	b2da      	uxtb	r2, r3
 8001150:	7a7b      	ldrb	r3, [r7, #9]
 8001152:	4053      	eors	r3, r2
 8001154:	b2da      	uxtb	r2, r3
 8001156:	7abb      	ldrb	r3, [r7, #10]
 8001158:	4053      	eors	r3, r2
 800115a:	b2d9      	uxtb	r1, r3
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	404a      	eors	r2, r1
 8001162:	b2d1      	uxtb	r1, r2
 8001164:	4a08      	ldr	r2, [pc, #32]	; (8001188 <AES_Mix_Collums+0x128>)
 8001166:	4413      	add	r3, r2
 8001168:	460a      	mov	r2, r1
 800116a:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	3301      	adds	r3, #1
 8001170:	73bb      	strb	r3, [r7, #14]
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	2b03      	cmp	r3, #3
 8001176:	f67f af79 	bls.w	800106c <AES_Mix_Collums+0xc>
	}
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	2000023c 	.word	0x2000023c

0800118c <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	75fb      	strb	r3, [r7, #23]
 800119c:	e00c      	b.n	80011b8 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	330c      	adds	r3, #12
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	441a      	add	r2, r3
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	3318      	adds	r3, #24
 80011ac:	443b      	add	r3, r7
 80011ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	3301      	adds	r3, #1
 80011b6:	75fb      	strb	r3, [r7, #23]
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d9ef      	bls.n	800119e <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 80011be:	7b3b      	ldrb	r3, [r7, #12]
 80011c0:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 80011c2:	7b7b      	ldrb	r3, [r7, #13]
 80011c4:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 80011c6:	7bbb      	ldrb	r3, [r7, #14]
 80011c8:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 80011ce:	7d3b      	ldrb	r3, [r7, #20]
 80011d0:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	75fb      	strb	r3, [r7, #23]
 80011d6:	e012      	b.n	80011fe <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	3318      	adds	r3, #24
 80011dc:	443b      	add	r3, r7
 80011de:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80011e2:	7dfc      	ldrb	r4, [r7, #23]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fed9 	bl	8000f9c <AES_Sub_Byte>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	f104 0318 	add.w	r3, r4, #24
 80011f2:	443b      	add	r3, r7
 80011f4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	3301      	adds	r3, #1
 80011fc:	75fb      	strb	r3, [r7, #23]
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	2b03      	cmp	r3, #3
 8001202:	d9e9      	bls.n	80011d8 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 8001204:	2301      	movs	r3, #1
 8001206:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 8001208:	e010      	b.n	800122c <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 800120a:	7d7b      	ldrb	r3, [r7, #21]
 800120c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001210:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 8001212:	7d7b      	ldrb	r3, [r7, #21]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 8001218:	7cfb      	ldrb	r3, [r7, #19]
 800121a:	2b80      	cmp	r3, #128	; 0x80
 800121c:	d103      	bne.n	8001226 <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 800121e:	7d7b      	ldrb	r3, [r7, #21]
 8001220:	f083 031b 	eor.w	r3, r3, #27
 8001224:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	3b01      	subs	r3, #1
 800122a:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d1eb      	bne.n	800120a <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 8001232:	7b3a      	ldrb	r2, [r7, #12]
 8001234:	7d7b      	ldrb	r3, [r7, #21]
 8001236:	4053      	eors	r3, r2
 8001238:	b2db      	uxtb	r3, r3
 800123a:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	75fb      	strb	r3, [r7, #23]
 8001240:	e02f      	b.n	80012a2 <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 8001242:	2300      	movs	r3, #0
 8001244:	75bb      	strb	r3, [r7, #22]
 8001246:	e026      	b.n	8001296 <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 8001248:	7dba      	ldrb	r2, [r7, #22]
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	461a      	mov	r2, r3
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	4413      	add	r3, r2
 8001256:	7819      	ldrb	r1, [r3, #0]
 8001258:	7dbb      	ldrb	r3, [r7, #22]
 800125a:	3318      	adds	r3, #24
 800125c:	443b      	add	r3, r7
 800125e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001262:	7db8      	ldrb	r0, [r7, #22]
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4403      	add	r3, r0
 800126a:	4618      	mov	r0, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	4403      	add	r3, r0
 8001270:	404a      	eors	r2, r1
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 8001276:	7dba      	ldrb	r2, [r7, #22]
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	461a      	mov	r2, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	441a      	add	r2, r3
 8001284:	7dbb      	ldrb	r3, [r7, #22]
 8001286:	7812      	ldrb	r2, [r2, #0]
 8001288:	3318      	adds	r3, #24
 800128a:	443b      	add	r3, r7
 800128c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 8001290:	7dbb      	ldrb	r3, [r7, #22]
 8001292:	3301      	adds	r3, #1
 8001294:	75bb      	strb	r3, [r7, #22]
 8001296:	7dbb      	ldrb	r3, [r7, #22]
 8001298:	2b03      	cmp	r3, #3
 800129a:	d9d5      	bls.n	8001248 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 800129c:	7dfb      	ldrb	r3, [r7, #23]
 800129e:	3301      	adds	r3, #1
 80012a0:	75fb      	strb	r3, [r7, #23]
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d9cc      	bls.n	8001242 <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	371c      	adds	r7, #28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd90      	pop	{r4, r7, pc}

080012b2 <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b08a      	sub	sp, #40	; 0x28
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	461a      	mov	r2, r3
 80012be:	460b      	mov	r3, r1
 80012c0:	72fb      	strb	r3, [r7, #11]
 80012c2:	4613      	mov	r3, r2
 80012c4:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 80012d8:	7afb      	ldrb	r3, [r7, #11]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 80012e0:	7afb      	ldrb	r3, [r7, #11]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 80012ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 80012f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012f6:	3301      	adds	r3, #1
 80012f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 80012fc:	2301      	movs	r3, #1
 80012fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001302:	e07e      	b.n	8001402 <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 8001304:	2301      	movs	r3, #1
 8001306:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 8001308:	2300      	movs	r3, #0
 800130a:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 800130c:	2300      	movs	r3, #0
 800130e:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 8001310:	2300      	movs	r3, #0
 8001312:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 8001314:	2300      	movs	r3, #0
 8001316:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 8001318:	7abb      	ldrb	r3, [r7, #10]
 800131a:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 800131c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 8001322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001324:	789b      	ldrb	r3, [r3, #2]
 8001326:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 8001328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132a:	785b      	ldrb	r3, [r3, #1]
 800132c:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 800132e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	b2db      	uxtb	r3, r3
 8001340:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 8001342:	2300      	movs	r3, #0
 8001344:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 800134e:	2300      	movs	r3, #0
 8001350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 8001354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fd06 	bl	8000d74 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 8001368:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800136c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001370:	429a      	cmp	r2, r3
 8001372:	d01c      	beq.n	80013ae <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800137a:	e013      	b.n	80013a4 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001384:	3328      	adds	r3, #40	; 0x28
 8001386:	443b      	add	r3, r7
 8001388:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800138c:	4053      	eors	r3, r2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	701a      	strb	r2, [r3, #0]
				Data++;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 800139a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800139e:	3301      	adds	r3, #1
 80013a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d9e7      	bls.n	800137c <Encrypt_Payload+0xca>
 80013ac:	e024      	b.n	80013f8 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 80013ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 80013b6:	2310      	movs	r3, #16
 80013b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013c2:	e013      	b.n	80013ec <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013cc:	3328      	adds	r3, #40	; 0x28
 80013ce:	443b      	add	r3, r7
 80013d0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80013d4:	4053      	eors	r3, r2
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	701a      	strb	r2, [r3, #0]
				Data++;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3301      	adds	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 80013e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013e6:	3301      	adds	r3, #1
 80013e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80013f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d3e5      	bcc.n	80013c4 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 80013f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013fc:	3301      	adds	r3, #1
 80013fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001402:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001406:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800140a:	429a      	cmp	r2, r3
 800140c:	f67f af7a 	bls.w	8001304 <Encrypt_Payload+0x52>
			}
		}
	}
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	; 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b09b      	sub	sp, #108	; 0x6c
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	4613      	mov	r3, r2
 800142a:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 800142c:	4bba      	ldr	r3, [pc, #744]	; (8001718 <Calculate_MIC+0x2fc>)
 800142e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 8001438:	4bb7      	ldr	r3, [pc, #732]	; (8001718 <Calculate_MIC+0x2fc>)
 800143a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800143e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 8001444:	4bb4      	ldr	r3, [pc, #720]	; (8001718 <Calculate_MIC+0x2fc>)
 8001446:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800144a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 8001450:	4bb1      	ldr	r3, [pc, #708]	; (8001718 <Calculate_MIC+0x2fc>)
 8001452:	f107 0414 	add.w	r4, r7, #20
 8001456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001458:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 800145c:	2300      	movs	r3, #0
 800145e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 8001462:	2300      	movs	r3, #0
 8001464:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 8001468:	2301      	movs	r3, #1
 800146a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 800146e:	2349      	movs	r3, #73	; 0x49
 8001470:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 800147a:	2300      	movs	r3, #0
 800147c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 8001480:	2300      	movs	r3, #0
 8001482:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 8001486:	2300      	movs	r3, #0
 8001488:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 800148c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001490:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 8001494:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001498:	78db      	ldrb	r3, [r3, #3]
 800149a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 800149e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014a2:	789b      	ldrb	r3, [r3, #2]
 80014a4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 80014a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014ac:	785b      	ldrb	r3, [r3, #1]
 80014ae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 80014b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 80014f8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d004      	beq.n	800150a <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 8001500:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001504:	3301      	adds	r3, #1
 8001506:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 800150a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800150e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001512:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f901 	bl	800171c <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 800151a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800151e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fc27 	bl	8000d74 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 8001526:	2300      	movs	r3, #0
 8001528:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800152c:	e010      	b.n	8001550 <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 800152e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001532:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001536:	3268      	adds	r2, #104	; 0x68
 8001538:	443a      	add	r2, r7
 800153a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800153e:	3368      	adds	r3, #104	; 0x68
 8001540:	443b      	add	r3, r7
 8001542:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 8001546:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800154a:	3301      	adds	r3, #1
 800154c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001550:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d9ea      	bls.n	800152e <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 8001558:	e043      	b.n	80015e2 <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 800155a:	2300      	movs	r3, #0
 800155c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001560:	e00f      	b.n	8001582 <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 8001562:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	3368      	adds	r3, #104	; 0x68
 800156c:	443b      	add	r3, r7
 800156e:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3301      	adds	r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8001578:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800157c:	3301      	adds	r3, #1
 800157e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001582:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001586:	2b0f      	cmp	r3, #15
 8001588:	d9eb      	bls.n	8001562 <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800158a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f94a 	bl	800182e <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fbe7 	bl	8000d74 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015ac:	e010      	b.n	80015d0 <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 80015ae:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80015b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015b6:	3268      	adds	r2, #104	; 0x68
 80015b8:	443a      	add	r2, r7
 80015ba:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 80015be:	3368      	adds	r3, #104	; 0x68
 80015c0:	443b      	add	r3, r7
 80015c2:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 80015c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015ca:	3301      	adds	r3, #1
 80015cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d9ea      	bls.n	80015ae <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 80015d8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80015dc:	3301      	adds	r3, #1
 80015de:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 80015e2:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80015e6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3b5      	bcc.n	800155a <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 80015ee:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d12e      	bne.n	8001654 <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015fc:	e00f      	b.n	800161e <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 80015fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	3368      	adds	r3, #104	; 0x68
 8001608:	443b      	add	r3, r7
 800160a:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3301      	adds	r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8001614:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001618:	3301      	adds	r3, #1
 800161a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800161e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001622:	2b0f      	cmp	r3, #15
 8001624:	d9eb      	bls.n	80015fe <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 8001626:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f8fc 	bl	800182e <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8001636:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f8f4 	bl	800182e <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fb91 	bl	8000d74 <AES_Encrypt>
 8001652:	e04d      	b.n	80016f0 <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800165a:	e02f      	b.n	80016bc <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 800165c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001660:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001664:	429a      	cmp	r2, r3
 8001666:	d20a      	bcs.n	800167e <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 8001668:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	7812      	ldrb	r2, [r2, #0]
 8001670:	3368      	adds	r3, #104	; 0x68
 8001672:	443b      	add	r3, r7
 8001674:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3301      	adds	r3, #1
 800167c:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 800167e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001682:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001686:	429a      	cmp	r2, r3
 8001688:	d106      	bne.n	8001698 <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 800168a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800168e:	3368      	adds	r3, #104	; 0x68
 8001690:	443b      	add	r3, r7
 8001692:	2280      	movs	r2, #128	; 0x80
 8001694:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 8001698:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800169c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d906      	bls.n	80016b2 <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 80016a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016a8:	3368      	adds	r3, #104	; 0x68
 80016aa:	443b      	add	r3, r7
 80016ac:	2200      	movs	r2, #0
 80016ae:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 80016b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016b6:	3301      	adds	r3, #1
 80016b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d9cb      	bls.n	800165c <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 80016c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f8ad 	bl	800182e <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 80016d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f8a5 	bl	800182e <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fb42 	bl	8000d74 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 80016f0:	7d3a      	ldrb	r2, [r7, #20]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	3301      	adds	r3, #1
 80016fa:	7d7a      	ldrb	r2, [r7, #21]
 80016fc:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3302      	adds	r3, #2
 8001702:	7dba      	ldrb	r2, [r7, #22]
 8001704:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3303      	adds	r3, #3
 800170a:	7dfa      	ldrb	r2, [r7, #23]
 800170c:	701a      	strb	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	376c      	adds	r7, #108	; 0x6c
 8001712:	46bd      	mov	sp, r7
 8001714:	bd90      	pop	{r4, r7, pc}
 8001716:	bf00      	nop
 8001718:	0800716c 	.word	0x0800716c

0800171c <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7ff fb22 	bl	8000d74 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b25b      	sxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	da02      	bge.n	8001740 <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 800173a:	2301      	movs	r3, #1
 800173c:	75bb      	strb	r3, [r7, #22]
 800173e:	e001      	b.n	8001744 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 f83c 	bl	80017c2 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 800174a:	7dbb      	ldrb	r3, [r7, #22]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d109      	bne.n	8001764 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	330f      	adds	r3, #15
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	320f      	adds	r2, #15
 800175a:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800175e:	43db      	mvns	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 8001764:	2300      	movs	r3, #0
 8001766:	75fb      	strb	r3, [r7, #23]
 8001768:	e00a      	b.n	8001780 <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	441a      	add	r2, r3
 8001770:	7dfb      	ldrb	r3, [r7, #23]
 8001772:	68b9      	ldr	r1, [r7, #8]
 8001774:	440b      	add	r3, r1
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	3301      	adds	r3, #1
 800177e:	75fb      	strb	r3, [r7, #23]
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	d9f1      	bls.n	800176a <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b25b      	sxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	da02      	bge.n	8001796 <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 8001790:	2301      	movs	r3, #1
 8001792:	75bb      	strb	r3, [r7, #22]
 8001794:	e001      	b.n	800179a <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 800179a:	68b8      	ldr	r0, [r7, #8]
 800179c:	f000 f811 	bl	80017c2 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 80017a0:	7dbb      	ldrb	r3, [r7, #22]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d109      	bne.n	80017ba <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	330f      	adds	r3, #15
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	320f      	adds	r2, #15
 80017b0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 80017b4:	43db      	mvns	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	7013      	strb	r3, [r2, #0]
	}
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b085      	sub	sp, #20
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	e022      	b.n	800181a <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	2b0e      	cmp	r3, #14
 80017d8:	d80d      	bhi.n	80017f6 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	3301      	adds	r3, #1
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	da02      	bge.n	80017f0 <Shift_Left+0x2e>
			{
				Overflow = 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73bb      	strb	r3, [r7, #14]
 80017ee:	e004      	b.n	80017fa <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73bb      	strb	r3, [r7, #14]
 80017f4:	e001      	b.n	80017fa <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	b2d9      	uxtb	r1, r3
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	7bba      	ldrb	r2, [r7, #14]
 800180e:	440a      	add	r2, r1
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	3301      	adds	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d9d9      	bls.n	80017d4 <Shift_Left+0x12>
	}
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 800182e:	b480      	push	{r7}
 8001830:	b085      	sub	sp, #20
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]
 800183c:	e010      	b.n	8001860 <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	7819      	ldrb	r1, [r3, #0]
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	4413      	add	r3, r2
 800184c:	781a      	ldrb	r2, [r3, #0]
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4403      	add	r3, r0
 8001854:	404a      	eors	r2, r1
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	3301      	adds	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	2b0f      	cmp	r3, #15
 8001864:	d9eb      	bls.n	800183e <XOR+0x10>
	}
}
 8001866:	bf00      	nop
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	460b      	mov	r3, r1
 8001882:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6858      	ldr	r0, [r3, #4]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	891b      	ldrh	r3, [r3, #8]
 800188c:	2200      	movs	r2, #0
 800188e:	4619      	mov	r1, r3
 8001890:	f001 feb0 	bl	80035f4 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 8001894:	7afb      	ldrb	r3, [r7, #11]
 8001896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800189a:	b2db      	uxtb	r3, r3
 800189c:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	f107 0117 	add.w	r1, r7, #23
 80018a6:	230a      	movs	r3, #10
 80018a8:	2201      	movs	r2, #1
 80018aa:	f003 f902 	bl	8004ab2 <HAL_SPI_Transmit>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <read_register+0x44>
		return false;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e015      	b.n	80018e4 <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	230a      	movs	r3, #10
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	f003 fa6a 	bl	8004d9c <HAL_SPI_Receive>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <read_register+0x5e>
		return false;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e008      	b.n	80018e4 <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6858      	ldr	r0, [r3, #4]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	891b      	ldrh	r3, [r3, #8]
 80018da:	2201      	movs	r2, #1
 80018dc:	4619      	mov	r1, r3
 80018de:	f001 fe89 	bl	80035f4 <HAL_GPIO_WritePin>

	return true;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	70fb      	strb	r3, [r7, #3]
 80018f8:	4613      	mov	r3, r2
 80018fa:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6858      	ldr	r0, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	891b      	ldrh	r3, [r3, #8]
 8001904:	2200      	movs	r2, #0
 8001906:	4619      	mov	r1, r3
 8001908:	f001 fe74 	bl	80035f4 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001912:	b2db      	uxtb	r3, r3
 8001914:	733b      	strb	r3, [r7, #12]
 8001916:	78bb      	ldrb	r3, [r7, #2]
 8001918:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	f107 010c 	add.w	r1, r7, #12
 8001922:	230a      	movs	r3, #10
 8001924:	2202      	movs	r2, #2
 8001926:	f003 f8c4 	bl	8004ab2 <HAL_SPI_Transmit>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <write_register+0x48>
		return false;
 8001930:	2300      	movs	r3, #0
 8001932:	e008      	b.n	8001946 <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6858      	ldr	r0, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	891b      	ldrh	r3, [r3, #8]
 800193c:	2201      	movs	r2, #1
 800193e:	4619      	mov	r1, r3
 8001940:	f001 fe58 	bl	80035f4 <HAL_GPIO_WritePin>

	return true;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <config_set_channel>:

static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	460b      	mov	r3, r1
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 800195e:	7afb      	ldrb	r3, [r7, #11]
 8001960:	2b0f      	cmp	r3, #15
 8001962:	d905      	bls.n	8001970 <config_set_channel+0x20>
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <config_set_channel+0x54>)
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <config_set_channel+0x58>)
 8001968:	216d      	movs	r1, #109	; 0x6d
 800196a:	4810      	ldr	r0, [pc, #64]	; (80019ac <config_set_channel+0x5c>)
 800196c:	f004 fc02 	bl	8006174 <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 8001970:	7afa      	ldrb	r2, [r7, #11]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	321a      	adds	r2, #26
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8001982:	b21a      	sxth	r2, r3
 8001984:	7afb      	ldrb	r3, [r7, #11]
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	b21b      	sxth	r3, r3
 800198e:	4313      	orrs	r3, r2
 8001990:	b21b      	sxth	r3, r3
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	0800717c 	.word	0x0800717c
 80019a8:	08007450 	.word	0x08007450
 80019ac:	08007190 	.word	0x08007190

080019b0 <config_load_default>:

static void config_load_default(rfm95_handle_t *handle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f64a 3267 	movw	r2, #43879	; 0xab67
 80019be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	handle->config.tx_frame_count = 0;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	handle->config.rx_frame_count = 0;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	handle->config.rx1_delay = 1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	handle->config.channel_mask = 0;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	config_set_channel(handle, 0, 868100000);
 80019e2:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <config_load_default+0x58>)
 80019e4:	2100      	movs	r1, #0
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffb2 	bl	8001950 <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 80019ec:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <config_load_default+0x5c>)
 80019ee:	2101      	movs	r1, #1
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ffad 	bl	8001950 <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 80019f6:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <config_load_default+0x60>)
 80019f8:	2102      	movs	r1, #2
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffa8 	bl	8001950 <config_set_channel>
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	33be27a0 	.word	0x33be27a0
 8001a0c:	33c134e0 	.word	0x33c134e0
 8001a10:	33c44220 	.word	0x33c44220

08001a14 <reset>:

static void reset(rfm95_handle_t *handle)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68d8      	ldr	r0, [r3, #12]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	8a1b      	ldrh	r3, [r3, #16]
 8001a24:	2200      	movs	r2, #0
 8001a26:	4619      	mov	r1, r3
 8001a28:	f001 fde4 	bl	80035f4 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f001 fb01 	bl	8003034 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68d8      	ldr	r0, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	8a1b      	ldrh	r3, [r3, #16]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f001 fdd9 	bl	80035f4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001a42:	2005      	movs	r0, #5
 8001a44:	f001 faf6 	bl	8003034 <HAL_Delay>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <configure_frequency>:

static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001a5a:	6839      	ldr	r1, [r7, #0]
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	460a      	mov	r2, r1
 8001a60:	4603      	mov	r3, r0
 8001a62:	0b55      	lsrs	r5, r2, #13
 8001a64:	04d4      	lsls	r4, r2, #19
 8001a66:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <configure_frequency+0xb4>)
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	4629      	mov	r1, r5
 8001a70:	f7fe fc4e 	bl	8000310 <__aeabi_uldivmod>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 8001a7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	0c02      	lsrs	r2, r0, #16
 8001a8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001a8e:	0c0b      	lsrs	r3, r1, #16
 8001a90:	b2d3      	uxtb	r3, r2
 8001a92:	461a      	mov	r2, r3
 8001a94:	2106      	movs	r1, #6
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ff28 	bl	80018ec <write_register>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f083 0301 	eor.w	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <configure_frequency+0x5c>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e026      	b.n	8001afa <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 8001aac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	0a02      	lsrs	r2, r0, #8
 8001aba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001abe:	0a0b      	lsrs	r3, r1, #8
 8001ac0:	b2d3      	uxtb	r3, r2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2107      	movs	r1, #7
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ff10 	bl	80018ec <write_register>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f083 0301 	eor.w	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <configure_frequency+0x8c>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e00e      	b.n	8001afa <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 8001adc:	7a3b      	ldrb	r3, [r7, #8]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2108      	movs	r1, #8
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ff02 	bl	80018ec <write_register>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f083 0301 	eor.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <configure_frequency+0xa8>
 8001af4:	2300      	movs	r3, #0
 8001af6:	e000      	b.n	8001afa <configure_frequency+0xaa>

	return true;
 8001af8:	2301      	movs	r3, #1
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bdb0      	pop	{r4, r5, r7, pc}
 8001b02:	bf00      	nop
 8001b04:	01e84800 	.word	0x01e84800

08001b08 <configure_channel>:

static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8001b18:	461a      	mov	r2, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	fa42 f303 	asr.w	r3, r2, r3
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <configure_channel+0x2c>
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <configure_channel+0x48>)
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <configure_channel+0x4c>)
 8001b2c:	2194      	movs	r1, #148	; 0x94
 8001b2e:	480a      	ldr	r0, [pc, #40]	; (8001b58 <configure_channel+0x50>)
 8001b30:	f004 fb20 	bl	8006174 <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	321a      	adds	r2, #26
 8001b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff85 	bl	8001a50 <configure_frequency>
 8001b46:	4603      	mov	r3, r0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	080071b8 	.word	0x080071b8
 8001b54:	08007464 	.word	0x08007464
 8001b58:	08007190 	.word	0x08007190

08001b5c <wait_for_irq>:

static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	460b      	mov	r3, r1
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	72fb      	strb	r3, [r7, #11]
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4798      	blx	r3
 8001b70:	4601      	mov	r1, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	fb02 f303 	mul.w	r3, r2, r3
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <wait_for_irq+0x5c>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	099b      	lsrs	r3, r3, #6
 8001b84:	440b      	add	r3, r1
 8001b86:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 8001b88:	e008      	b.n	8001b9c <wait_for_irq+0x40>
		if (handle->get_precision_tick() >= timeout_tick) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4798      	blx	r3
 8001b90:	4602      	mov	r2, r0
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d801      	bhi.n	8001b9c <wait_for_irq+0x40>
			return false;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e008      	b.n	8001bae <wait_for_irq+0x52>
	while (handle->interrupt_times[interrupt] == 0) {
 8001b9c:	7afb      	ldrb	r3, [r7, #11]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	332a      	adds	r3, #42	; 0x2a
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ee      	beq.n	8001b8a <wait_for_irq+0x2e>
		}
	}

	return true;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	10624dd3 	.word	0x10624dd3

08001bbc <wait_for_rx_irqs>:

static bool wait_for_rx_irqs(rfm95_handle_t *handle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	uint32_t timeout_tick = handle->get_precision_tick() +
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	4798      	blx	r3
 8001bca:	4602      	mov	r2, r0
	                        RFM95_RECEIVE_TIMEOUT * handle->precision_tick_frequency / 1000;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4912      	ldr	r1, [pc, #72]	; (8001c24 <wait_for_rx_irqs+0x68>)
 8001bda:	fba1 1303 	umull	r1, r3, r1, r3
 8001bde:	099b      	lsrs	r3, r3, #6
	uint32_t timeout_tick = handle->get_precision_tick() +
 8001be0:	4413      	add	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 8001be4:	e008      	b.n	8001bf8 <wait_for_rx_irqs+0x3c>
		if (handle->get_precision_tick() >= timeout_tick) {
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4798      	blx	r3
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d801      	bhi.n	8001bf8 <wait_for_rx_irqs+0x3c>
			return false;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e011      	b.n	8001c1c <wait_for_rx_irqs+0x60>
	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d104      	bne.n	8001c0c <wait_for_rx_irqs+0x50>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0ec      	beq.n	8001be6 <wait_for_rx_irqs+0x2a>
		}
	}

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bf14      	ite	ne
 8001c16:	2301      	movne	r3, #1
 8001c18:	2300      	moveq	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	10624dd3 	.word	0x10624dd3

08001c28 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 8001c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	dd03      	ble.n	8001c44 <rfm95_set_power+0x1c>
 8001c3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c40:	2b11      	cmp	r3, #17
 8001c42:	dd09      	ble.n	8001c58 <rfm95_set_power+0x30>
 8001c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c48:	2b14      	cmp	r3, #20
 8001c4a:	d005      	beq.n	8001c58 <rfm95_set_power+0x30>
 8001c4c:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <rfm95_set_power+0xd8>)
 8001c4e:	4a2d      	ldr	r2, [pc, #180]	; (8001d04 <rfm95_set_power+0xdc>)
 8001c50:	21b5      	movs	r1, #181	; 0xb5
 8001c52:	482d      	ldr	r0, [pc, #180]	; (8001d08 <rfm95_set_power+0xe0>)
 8001c54:	f004 fa8e 	bl	8006174 <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8001c58:	2300      	movs	r3, #0
 8001c5a:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8001c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	dd18      	ble.n	8001c9a <rfm95_set_power+0x72>
 8001c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c6c:	2b11      	cmp	r3, #17
 8001c6e:	dc14      	bgt.n	8001c9a <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8001c70:	7b3b      	ldrb	r3, [r7, #12]
 8001c72:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001c76:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001c78:	7b3b      	ldrb	r3, [r7, #12]
 8001c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7e:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	3b02      	subs	r3, #2
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	7b3b      	ldrb	r3, [r7, #12]
 8001c8e:	f362 0303 	bfi	r3, r2, #0, #4
 8001c92:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001c94:	2384      	movs	r3, #132	; 0x84
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	e011      	b.n	8001cbe <rfm95_set_power+0x96>

	} else if (power == 20) {
 8001c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c9e:	2b14      	cmp	r3, #20
 8001ca0:	d10d      	bne.n	8001cbe <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 8001ca2:	7b3b      	ldrb	r3, [r7, #12]
 8001ca4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001ca8:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001caa:	7b3b      	ldrb	r3, [r7, #12]
 8001cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb0:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8001cb2:	7b3b      	ldrb	r3, [r7, #12]
 8001cb4:	f043 030f 	orr.w	r3, r3, #15
 8001cb8:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8001cba:	2387      	movs	r3, #135	; 0x87
 8001cbc:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8001cbe:	7b3b      	ldrb	r3, [r7, #12]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	2109      	movs	r1, #9
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fe11 	bl	80018ec <write_register>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f083 0301 	eor.w	r3, r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <rfm95_set_power+0xb2>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e00e      	b.n	8001cf8 <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	214d      	movs	r1, #77	; 0x4d
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff fe03 	bl	80018ec <write_register>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f083 0301 	eor.w	r3, r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <rfm95_set_power+0xce>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <rfm95_set_power+0xd0>

	return true;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	080071ec 	.word	0x080071ec
 8001d04:	08007478 	.word	0x08007478
 8001d08:	08007190 	.word	0x08007190

08001d0c <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d1e:	d005      	beq.n	8001d2c <rfm95_init+0x20>
 8001d20:	4b9a      	ldr	r3, [pc, #616]	; (8001f8c <rfm95_init+0x280>)
 8001d22:	4a9b      	ldr	r2, [pc, #620]	; (8001f90 <rfm95_init+0x284>)
 8001d24:	21cf      	movs	r1, #207	; 0xcf
 8001d26:	489b      	ldr	r0, [pc, #620]	; (8001f94 <rfm95_init+0x288>)
 8001d28:	f004 fa24 	bl	8006174 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <rfm95_init+0x36>
 8001d36:	4b98      	ldr	r3, [pc, #608]	; (8001f98 <rfm95_init+0x28c>)
 8001d38:	4a95      	ldr	r2, [pc, #596]	; (8001f90 <rfm95_init+0x284>)
 8001d3a:	21d0      	movs	r1, #208	; 0xd0
 8001d3c:	4895      	ldr	r0, [pc, #596]	; (8001f94 <rfm95_init+0x288>)
 8001d3e:	f004 fa19 	bl	8006174 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d4c:	d005      	beq.n	8001d5a <rfm95_init+0x4e>
 8001d4e:	4b93      	ldr	r3, [pc, #588]	; (8001f9c <rfm95_init+0x290>)
 8001d50:	4a8f      	ldr	r2, [pc, #572]	; (8001f90 <rfm95_init+0x284>)
 8001d52:	21d1      	movs	r1, #209	; 0xd1
 8001d54:	488f      	ldr	r0, [pc, #572]	; (8001f94 <rfm95_init+0x288>)
 8001d56:	f004 fa0d 	bl	8006174 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <rfm95_init+0x64>
 8001d64:	4b8e      	ldr	r3, [pc, #568]	; (8001fa0 <rfm95_init+0x294>)
 8001d66:	4a8a      	ldr	r2, [pc, #552]	; (8001f90 <rfm95_init+0x284>)
 8001d68:	21d2      	movs	r1, #210	; 0xd2
 8001d6a:	488a      	ldr	r0, [pc, #552]	; (8001f94 <rfm95_init+0x288>)
 8001d6c:	f004 fa02 	bl	8006174 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <rfm95_init+0x7a>
 8001d7a:	4b8a      	ldr	r3, [pc, #552]	; (8001fa4 <rfm95_init+0x298>)
 8001d7c:	4a84      	ldr	r2, [pc, #528]	; (8001f90 <rfm95_init+0x284>)
 8001d7e:	21d3      	movs	r1, #211	; 0xd3
 8001d80:	4884      	ldr	r0, [pc, #528]	; (8001f94 <rfm95_init+0x288>)
 8001d82:	f004 f9f7 	bl	8006174 <__assert_func>
	assert(handle->get_precision_tick != NULL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d105      	bne.n	8001d9a <rfm95_init+0x8e>
 8001d8e:	4b86      	ldr	r3, [pc, #536]	; (8001fa8 <rfm95_init+0x29c>)
 8001d90:	4a7f      	ldr	r2, [pc, #508]	; (8001f90 <rfm95_init+0x284>)
 8001d92:	21d4      	movs	r1, #212	; 0xd4
 8001d94:	487f      	ldr	r0, [pc, #508]	; (8001f94 <rfm95_init+0x288>)
 8001d96:	f004 f9ed 	bl	8006174 <__assert_func>
	assert(handle->random_int != NULL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <rfm95_init+0xa2>
 8001da2:	4b82      	ldr	r3, [pc, #520]	; (8001fac <rfm95_init+0x2a0>)
 8001da4:	4a7a      	ldr	r2, [pc, #488]	; (8001f90 <rfm95_init+0x284>)
 8001da6:	21d5      	movs	r1, #213	; 0xd5
 8001da8:	487a      	ldr	r0, [pc, #488]	; (8001f94 <rfm95_init+0x288>)
 8001daa:	f004 f9e3 	bl	8006174 <__assert_func>
	assert(handle->precision_sleep_until != NULL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d105      	bne.n	8001dc2 <rfm95_init+0xb6>
 8001db6:	4b7e      	ldr	r3, [pc, #504]	; (8001fb0 <rfm95_init+0x2a4>)
 8001db8:	4a75      	ldr	r2, [pc, #468]	; (8001f90 <rfm95_init+0x284>)
 8001dba:	21d6      	movs	r1, #214	; 0xd6
 8001dbc:	4875      	ldr	r0, [pc, #468]	; (8001f94 <rfm95_init+0x288>)
 8001dbe:	f004 f9d9 	bl	8006174 <__assert_func>
	assert(handle->precision_tick_frequency > 10000);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d805      	bhi.n	8001dda <rfm95_init+0xce>
 8001dce:	4b79      	ldr	r3, [pc, #484]	; (8001fb4 <rfm95_init+0x2a8>)
 8001dd0:	4a6f      	ldr	r2, [pc, #444]	; (8001f90 <rfm95_init+0x284>)
 8001dd2:	21d7      	movs	r1, #215	; 0xd7
 8001dd4:	486f      	ldr	r0, [pc, #444]	; (8001f94 <rfm95_init+0x288>)
 8001dd6:	f004 f9cd 	bl	8006174 <__assert_func>

	reset(handle);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fe1a 	bl	8001a14 <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d012      	beq.n	8001e0e <rfm95_init+0x102>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	3260      	adds	r2, #96	; 0x60
 8001df0:	4610      	mov	r0, r2
 8001df2:	4798      	blx	r3
 8001df4:	4603      	mov	r3, r0
 8001df6:	f083 0301 	eor.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <rfm95_init+0x102>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001e06:	f64a 3267 	movw	r2, #43879	; 0xab67
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d002      	beq.n	8001e14 <rfm95_init+0x108>
		config_load_default(handle);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fdce 	bl	80019b0 <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8001e14:	f107 020f 	add.w	r2, r7, #15
 8001e18:	2301      	movs	r3, #1
 8001e1a:	2142      	movs	r1, #66	; 0x42
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff fd29 	bl	8001874 <read_register>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f083 0301 	eor.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <rfm95_init+0x126>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e0a7      	b.n	8001f82 <rfm95_init+0x276>
	if (version != RFM9x_VER) return false;
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	2b12      	cmp	r3, #18
 8001e36:	d001      	beq.n	8001e3c <rfm95_init+0x130>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e0a2      	b.n	8001f82 <rfm95_init+0x276>

	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2101      	movs	r1, #1
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff fd53 	bl	80018ec <write_register>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f083 0301 	eor.w	r3, r3, #1
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <rfm95_init+0x14a>
 8001e52:	2300      	movs	r3, #0
 8001e54:	e095      	b.n	8001f82 <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	2101      	movs	r1, #1
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff fd46 	bl	80018ec <write_register>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f083 0301 	eor.w	r3, r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <rfm95_init+0x164>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e088      	b.n	8001f82 <rfm95_init+0x276>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8001e70:	2200      	movs	r2, #0
 8001e72:	2140      	movs	r1, #64	; 0x40
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff fd39 	bl	80018ec <write_register>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f083 0301 	eor.w	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <rfm95_init+0x17e>
 8001e86:	2300      	movs	r3, #0
 8001e88:	e07b      	b.n	8001f82 <rfm95_init+0x276>

	if (handle->on_after_interrupts_configured != NULL) {
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <rfm95_init+0x18c>
		handle->on_after_interrupts_configured();
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17)) return false;
 8001e98:	2111      	movs	r1, #17
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fec4 	bl	8001c28 <rfm95_set_power>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f083 0301 	eor.w	r3, r3, #1
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <rfm95_init+0x1a4>
 8001eac:	2300      	movs	r3, #0
 8001eae:	e068      	b.n	8001f82 <rfm95_init+0x276>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8001eb0:	2223      	movs	r2, #35	; 0x23
 8001eb2:	210c      	movs	r1, #12
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff fd19 	bl	80018ec <write_register>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f083 0301 	eor.w	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <rfm95_init+0x1be>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e05b      	b.n	8001f82 <rfm95_init+0x276>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2120      	movs	r1, #32
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fd0c 	bl	80018ec <write_register>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f083 0301 	eor.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <rfm95_init+0x1d8>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e04e      	b.n	8001f82 <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	2121      	movs	r1, #33	; 0x21
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fcff 	bl	80018ec <write_register>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f083 0301 	eor.w	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <rfm95_init+0x1f2>
 8001efa:	2300      	movs	r3, #0
 8001efc:	e041      	b.n	8001f82 <rfm95_init+0x276>

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 8001efe:	2234      	movs	r2, #52	; 0x34
 8001f00:	2139      	movs	r1, #57	; 0x39
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fcf2 	bl	80018ec <write_register>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f083 0301 	eor.w	r3, r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <rfm95_init+0x20c>
 8001f14:	2300      	movs	r3, #0
 8001f16:	e034      	b.n	8001f82 <rfm95_init+0x276>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 8001f18:	2280      	movs	r2, #128	; 0x80
 8001f1a:	210e      	movs	r1, #14
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fce5 	bl	80018ec <write_register>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f083 0301 	eor.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <rfm95_init+0x226>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e027      	b.n	8001f82 <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 8001f32:	2200      	movs	r2, #0
 8001f34:	210f      	movs	r1, #15
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fcd8 	bl	80018ec <write_register>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f083 0301 	eor.w	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <rfm95_init+0x240>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e01a      	b.n	8001f82 <rfm95_init+0x276>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 8001f4c:	2240      	movs	r2, #64	; 0x40
 8001f4e:	2123      	movs	r1, #35	; 0x23
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fccb 	bl	80018ec <write_register>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f083 0301 	eor.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <rfm95_init+0x25a>
 8001f62:	2300      	movs	r3, #0
 8001f64:	e00d      	b.n	8001f82 <rfm95_init+0x276>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001f66:	2280      	movs	r2, #128	; 0x80
 8001f68:	2101      	movs	r1, #1
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fcbe 	bl	80018ec <write_register>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f083 0301 	eor.w	r3, r3, #1
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <rfm95_init+0x274>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e000      	b.n	8001f82 <rfm95_init+0x276>

	return true;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	08007218 	.word	0x08007218
 8001f90:	08007488 	.word	0x08007488
 8001f94:	08007190 	.word	0x08007190
 8001f98:	0800724c 	.word	0x0800724c
 8001f9c:	08007288 	.word	0x08007288
 8001fa0:	080072c0 	.word	0x080072c0
 8001fa4:	080072fc 	.word	0x080072fc
 8001fa8:	08007334 	.word	0x08007334
 8001fac:	08007358 	.word	0x08007358
 8001fb0:	08007374 	.word	0x08007374
 8001fb4:	0800739c 	.word	0x0800739c

08001fb8 <process_mac_commands>:

static bool process_mac_commands(rfm95_handle_t *handle, const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t answer_buffer[51], uint8_t *answer_buffer_length,
                                 int8_t snr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08c      	sub	sp, #48	; 0x30
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t answer_index = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	while (index < frame_payload_length) {
 8001fd2:	bf00      	nop
 8001fd4:	e1d8      	b.n	8002388 <process_mac_commands+0x3d0>
		switch (frame_payload[index++])
 8001fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	f200 81cc 	bhi.w	8002388 <process_mac_commands+0x3d0>
 8001ff0:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <process_mac_commands+0x40>)
 8001ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff6:	bf00      	nop
 8001ff8:	0800202d 	.word	0x0800202d
 8001ffc:	08002047 	.word	0x08002047
 8002000:	08002065 	.word	0x08002065
 8002004:	08002083 	.word	0x08002083
 8002008:	0800209d 	.word	0x0800209d
 800200c:	0800214b 	.word	0x0800214b
 8002010:	080021b9 	.word	0x080021b9
 8002014:	080022eb 	.word	0x080022eb
 8002018:	0800234b 	.word	0x0800234b
 800201c:	08002359 	.word	0x08002359
 8002020:	0800236b 	.word	0x0800236b
 8002024:	08002379 	.word	0x08002379
 8002028:	08002387 	.word	0x08002387
		{
			case 0x01: // ResetConf
			{
				if (index >= frame_payload_length) return false;
 800202c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	d801      	bhi.n	800203a <process_mac_commands+0x82>
 8002036:	2300      	movs	r3, #0
 8002038:	e1b1      	b.n	800239e <process_mac_commands+0x3e6>

				index += 1;
 800203a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800203e:	3301      	adds	r3, #1
 8002040:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8002044:	e1a0      	b.n	8002388 <process_mac_commands+0x3d0>
			}
			case 0x02: // LinkCheckReq
			{
				if ((index + 1) >= frame_payload_length) return false;
 8002046:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800204a:	3301      	adds	r3, #1
 800204c:	461a      	mov	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4293      	cmp	r3, r2
 8002052:	d801      	bhi.n	8002058 <process_mac_commands+0xa0>
 8002054:	2300      	movs	r3, #0
 8002056:	e1a2      	b.n	800239e <process_mac_commands+0x3e6>

				index += 2;
 8002058:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800205c:	3302      	adds	r3, #2
 800205e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8002062:	e191      	b.n	8002388 <process_mac_commands+0x3d0>
			}
			case 0x03: // LinkADRReq
			{
				if ((index + 3) >= frame_payload_length) return false;
 8002064:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002068:	3303      	adds	r3, #3
 800206a:	461a      	mov	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4293      	cmp	r3, r2
 8002070:	d801      	bhi.n	8002076 <process_mac_commands+0xbe>
 8002072:	2300      	movs	r3, #0
 8002074:	e193      	b.n	800239e <process_mac_commands+0x3e6>

				index += 4;
 8002076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800207a:	3304      	adds	r3, #4
 800207c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8002080:	e182      	b.n	8002388 <process_mac_commands+0x3d0>
			}
			case 0x04: // DutyCycleReq
			{
				if (index >= frame_payload_length) return false;
 8002082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	429a      	cmp	r2, r3
 800208a:	d801      	bhi.n	8002090 <process_mac_commands+0xd8>
 800208c:	2300      	movs	r3, #0
 800208e:	e186      	b.n	800239e <process_mac_commands+0x3e6>

				index += 1;
 8002090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002094:	3301      	adds	r3, #1
 8002096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800209a:	e175      	b.n	8002388 <process_mac_commands+0x3d0>
			}
			case 0x05: // RXParamSetupReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 800209c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020a0:	3304      	adds	r3, #4
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d801      	bhi.n	80020ae <process_mac_commands+0xf6>
 80020aa:	2300      	movs	r3, #0
 80020ac:	e177      	b.n	800239e <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 80020ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020b2:	2b30      	cmp	r3, #48	; 0x30
 80020b4:	d901      	bls.n	80020ba <process_mac_commands+0x102>
 80020b6:	2300      	movs	r3, #0
 80020b8:	e171      	b.n	800239e <process_mac_commands+0x3e6>

				uint8_t dl_settings = frame_payload[index++];
 80020ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80020c4:	461a      	mov	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4413      	add	r3, r2
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	77bb      	strb	r3, [r7, #30]
				uint8_t frequency_lsb = frame_payload[index++];
 80020ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80020d8:	461a      	mov	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	4413      	add	r3, r2
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	777b      	strb	r3, [r7, #29]
				uint8_t frequency_msb = frame_payload[index++];
 80020e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80020ec:	461a      	mov	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4413      	add	r3, r2
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	773b      	strb	r3, [r7, #28]
				uint8_t frequency_hsb = frame_payload[index++];
 80020f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002100:	461a      	mov	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	76fb      	strb	r3, [r7, #27]
				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 800210a:	7f7a      	ldrb	r2, [r7, #29]
 800210c:	7f3b      	ldrb	r3, [r7, #28]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	431a      	orrs	r2, r3
 8002112:	7efb      	ldrb	r3, [r7, #27]
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	4313      	orrs	r3, r2
 8002118:	2264      	movs	r2, #100	; 0x64
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	617b      	str	r3, [r7, #20]

				answer_buffer[answer_index++] = 0x05;
 8002120:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800212a:	461a      	mov	r2, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4413      	add	r3, r2
 8002130:	2205      	movs	r2, #5
 8002132:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0b0000111;
 8002134:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800213e:	461a      	mov	r2, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4413      	add	r3, r2
 8002144:	2207      	movs	r2, #7
 8002146:	701a      	strb	r2, [r3, #0]
				break;
 8002148:	e11e      	b.n	8002388 <process_mac_commands+0x3d0>
			}
			case 0x06: // DevStatusReq
			{
				if ((answer_index + 3) >= 51) return false;
 800214a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800214e:	2b2f      	cmp	r3, #47	; 0x2f
 8002150:	d901      	bls.n	8002156 <process_mac_commands+0x19e>
 8002152:	2300      	movs	r3, #0
 8002154:	e123      	b.n	800239e <process_mac_commands+0x3e6>

				uint8_t margin = (uint8_t)(snr & 0x1f);
 8002156:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	f887 3020 	strb.w	r3, [r7, #32]
				uint8_t battery_level = handle->get_battery_level == NULL ? 0xff : handle->get_battery_level();
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <process_mac_commands+0x1bc>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216e:	4798      	blx	r3
 8002170:	4603      	mov	r3, r0
 8002172:	e000      	b.n	8002176 <process_mac_commands+0x1be>
 8002174:	23ff      	movs	r3, #255	; 0xff
 8002176:	77fb      	strb	r3, [r7, #31]

				answer_buffer[answer_index++] = 0x06;
 8002178:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002182:	461a      	mov	r2, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4413      	add	r3, r2
 8002188:	2206      	movs	r2, #6
 800218a:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = battery_level;
 800218c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002196:	461a      	mov	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4413      	add	r3, r2
 800219c:	7ffa      	ldrb	r2, [r7, #31]
 800219e:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = margin;
 80021a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80021aa:	461a      	mov	r2, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021b4:	701a      	strb	r2, [r3, #0]
				break;
 80021b6:	e0e7      	b.n	8002388 <process_mac_commands+0x3d0>
			}
			case 0x07: // NewChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 80021b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021bc:	3304      	adds	r3, #4
 80021be:	461a      	mov	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d801      	bhi.n	80021ca <process_mac_commands+0x212>
 80021c6:	2300      	movs	r3, #0
 80021c8:	e0e9      	b.n	800239e <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 80021ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021ce:	2b30      	cmp	r3, #48	; 0x30
 80021d0:	d901      	bls.n	80021d6 <process_mac_commands+0x21e>
 80021d2:	2300      	movs	r3, #0
 80021d4:	e0e3      	b.n	800239e <process_mac_commands+0x3e6>

				uint8_t channel_index = frame_payload[index++];
 80021d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	4413      	add	r3, r2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				uint8_t frequency_lsb = frame_payload[index++];
 80021ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80021f6:	461a      	mov	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				uint8_t frequency_msb = frame_payload[index++];
 8002202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800220c:	461a      	mov	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	4413      	add	r3, r2
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				uint8_t frequency_hsb = frame_payload[index++];
 8002218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002222:	461a      	mov	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4413      	add	r3, r2
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				uint8_t min_max_dr = frame_payload[index++];
 800222e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4413      	add	r3, r2
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 8002244:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002248:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	431a      	orrs	r2, r3
 8002250:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	4313      	orrs	r3, r2
 8002258:	2264      	movs	r2, #100	; 0x64
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
				uint8_t min_dr = min_max_dr & 0x0f;
 8002260:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				uint8_t max_dr = (min_max_dr >> 4) & 0x0f;
 800226c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

				if (channel_index >= 3) {
 8002276:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800227a:	2b02      	cmp	r3, #2
 800227c:	d906      	bls.n	800228c <process_mac_commands+0x2d4>
					config_set_channel(handle, channel_index, frequency);
 800227e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002284:	4619      	mov	r1, r3
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f7ff fb62 	bl	8001950 <config_set_channel>
				}

				bool dr_supports_125kHz_SF7 = min_dr <= 5 || max_dr >= 5;
 800228c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002290:	2b05      	cmp	r3, #5
 8002292:	d903      	bls.n	800229c <process_mac_commands+0x2e4>
 8002294:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002298:	2b04      	cmp	r3, #4
 800229a:	d901      	bls.n	80022a0 <process_mac_commands+0x2e8>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <process_mac_commands+0x2ea>
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80022a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

				answer_buffer[answer_index++] = 0x07;
 80022b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80022bc:	461a      	mov	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	2207      	movs	r2, #7
 80022c4:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0x01 | (dr_supports_125kHz_SF7 << 1);
 80022c6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	b25b      	sxtb	r3, r3
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	b25a      	sxtb	r2, r3
 80022d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022d8:	1c59      	adds	r1, r3, #1
 80022da:	f887 102e 	strb.w	r1, [r7, #46]	; 0x2e
 80022de:	4619      	mov	r1, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	440b      	add	r3, r1
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	701a      	strb	r2, [r3, #0]
				break;
 80022e8:	e04e      	b.n	8002388 <process_mac_commands+0x3d0>
			}
			case 0x08: // RXTimingSetupReq
			{
				if (index >= frame_payload_length) return false;
 80022ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d801      	bhi.n	80022f8 <process_mac_commands+0x340>
 80022f4:	2300      	movs	r3, #0
 80022f6:	e052      	b.n	800239e <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 80022f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022fc:	2b30      	cmp	r3, #48	; 0x30
 80022fe:	d901      	bls.n	8002304 <process_mac_commands+0x34c>
 8002300:	2300      	movs	r3, #0
 8002302:	e04c      	b.n	800239e <process_mac_commands+0x3e6>

				handle->config.rx1_delay = frame_payload[index++] & 0xf;
 8002304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800230e:	461a      	mov	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4413      	add	r3, r2
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	b2da      	uxtb	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				if (handle->config.rx1_delay == 0) {
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <process_mac_commands+0x37c>
					handle->config.rx1_delay = 1;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				}

				answer_buffer[answer_index++] = 0x08;
 8002334:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800233e:	461a      	mov	r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	4413      	add	r3, r2
 8002344:	2208      	movs	r2, #8
 8002346:	701a      	strb	r2, [r3, #0]
				break;
 8002348:	e01e      	b.n	8002388 <process_mac_commands+0x3d0>
			}
			case 0x09: // TxParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 800234a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	d819      	bhi.n	8002388 <process_mac_commands+0x3d0>
 8002354:	2300      	movs	r3, #0
 8002356:	e022      	b.n	800239e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0a: // DlChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8002358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800235c:	3304      	adds	r3, #4
 800235e:	461a      	mov	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4293      	cmp	r3, r2
 8002364:	d810      	bhi.n	8002388 <process_mac_commands+0x3d0>
 8002366:	2300      	movs	r3, #0
 8002368:	e019      	b.n	800239e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0b: // RekeyConf
			{
				if (index >= frame_payload_length) return false;
 800236a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	d809      	bhi.n	8002388 <process_mac_commands+0x3d0>
 8002374:	2300      	movs	r3, #0
 8002376:	e012      	b.n	800239e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0c: // ADRParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8002378:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	429a      	cmp	r2, r3
 8002380:	d802      	bhi.n	8002388 <process_mac_commands+0x3d0>
 8002382:	2300      	movs	r3, #0
 8002384:	e00b      	b.n	800239e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0d: // DeviceTimeReq
			{
				break;
 8002386:	bf00      	nop
	while (index < frame_payload_length) {
 8002388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	429a      	cmp	r2, r3
 8002390:	f63f ae21 	bhi.w	8001fd6 <process_mac_commands+0x1e>
			}
		}
	}

	*answer_buffer_length = answer_index;
 8002394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002396:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800239a:	701a      	strb	r2, [r3, #0]
	return true;
 800239c:	2301      	movs	r3, #1
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3730      	adds	r7, #48	; 0x30
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop

080023a8 <receive_at_scheduled_time>:

static bool receive_at_scheduled_time(rfm95_handle_t *handle, uint32_t scheduled_time)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
	// Sleep until 1ms before the scheduled time.
	handle->precision_sleep_until(scheduled_time - handle->precision_tick_frequency / 1000);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023ba:	492b      	ldr	r1, [pc, #172]	; (8002468 <receive_at_scheduled_time+0xc0>)
 80023bc:	fba1 1202 	umull	r1, r2, r1, r2
 80023c0:	0992      	lsrs	r2, r2, #6
 80023c2:	6839      	ldr	r1, [r7, #0]
 80023c4:	1a8a      	subs	r2, r1, r2
 80023c6:	4610      	mov	r0, r2
 80023c8:	4798      	blx	r3

	// Clear flags and previous interrupt time, configure mapping for RX done.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 80023ca:	2200      	movs	r2, #0
 80023cc:	2140      	movs	r1, #64	; 0x40
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff fa8c 	bl	80018ec <write_register>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f083 0301 	eor.w	r3, r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <receive_at_scheduled_time+0x3c>
 80023e0:	2300      	movs	r3, #0
 80023e2:	e03c      	b.n	800245e <receive_at_scheduled_time+0xb6>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 80023e4:	22ff      	movs	r2, #255	; 0xff
 80023e6:	2112      	movs	r1, #18
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff fa7f 	bl	80018ec <write_register>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <receive_at_scheduled_time+0x56>
 80023fa:	2300      	movs	r3, #0
 80023fc:	e02f      	b.n	800245e <receive_at_scheduled_time+0xb6>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8002416:	2281      	movs	r2, #129	; 0x81
 8002418:	2101      	movs	r1, #1
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff fa66 	bl	80018ec <write_register>
 8002420:	4603      	mov	r3, r0
 8002422:	f083 0301 	eor.w	r3, r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <receive_at_scheduled_time+0x88>
 800242c:	2300      	movs	r3, #0
 800242e:	e016      	b.n	800245e <receive_at_scheduled_time+0xb6>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8002430:	220a      	movs	r2, #10
 8002432:	2102      	movs	r1, #2
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fb91 	bl	8001b5c <wait_for_irq>

	// Now sleep until the real scheduled time.
	handle->precision_sleep_until(scheduled_time);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243e:	6838      	ldr	r0, [r7, #0]
 8002440:	4798      	blx	r3

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 8002442:	2286      	movs	r2, #134	; 0x86
 8002444:	2101      	movs	r1, #1
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff fa50 	bl	80018ec <write_register>
 800244c:	4603      	mov	r3, r0
 800244e:	f083 0301 	eor.w	r3, r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <receive_at_scheduled_time+0xb4>
 8002458:	2300      	movs	r3, #0
 800245a:	e000      	b.n	800245e <receive_at_scheduled_time+0xb6>

	return true;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	10624dd3 	.word	0x10624dd3

0800246c <calculate_rx_timings>:

static void calculate_rx_timings(rfm95_handle_t *handle, uint32_t bw, uint8_t sf, uint32_t tx_ticks,
                                 uint32_t *rx_target, uint32_t *rx_window_symbols)
{
 800246c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002470:	b08a      	sub	sp, #40	; 0x28
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4613      	mov	r3, r2
 800247c:	71fb      	strb	r3, [r7, #7]
	volatile int32_t symbol_rate_ns = (int32_t)(((2 << (sf - 1)) * 1000000) / bw);
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	3b01      	subs	r3, #1
 8002482:	2202      	movs	r2, #2
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	4a29      	ldr	r2, [pc, #164]	; (8002530 <calculate_rx_timings+0xc4>)
 800248a:	fb02 f303 	mul.w	r3, r2, r3
 800248e:	461a      	mov	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	627b      	str	r3, [r7, #36]	; 0x24

	volatile int32_t rx_timing_error_ns = (int32_t)(handle->precision_tick_drift_ns_per_s * handle->config.rx1_delay);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	623b      	str	r3, [r7, #32]
	volatile int32_t rx_window_ns = 2 * symbol_rate_ns + 2 * rx_timing_error_ns;
 80024a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	4413      	add	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	61fb      	str	r3, [r7, #28]
	volatile int32_t rx_offset_ns = 4 * symbol_rate_ns - (rx_timing_error_ns / 2);
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	009a      	lsls	r2, r3, #2
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	0fd9      	lsrs	r1, r3, #31
 80024ba:	440b      	add	r3, r1
 80024bc:	105b      	asrs	r3, r3, #1
 80024be:	425b      	negs	r3, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	17da      	asrs	r2, r3, #31
 80024c8:	469a      	mov	sl, r3
 80024ca:	4693      	mov	fp, r2
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	2200      	movs	r2, #0
 80024d2:	4698      	mov	r8, r3
 80024d4:	4691      	mov	r9, r2
 80024d6:	fb08 f20b 	mul.w	r2, r8, fp
 80024da:	fb0a f309 	mul.w	r3, sl, r9
 80024de:	4413      	add	r3, r2
 80024e0:	fbaa 4508 	umull	r4, r5, sl, r8
 80024e4:	442b      	add	r3, r5
 80024e6:	461d      	mov	r5, r3
 80024e8:	4a11      	ldr	r2, [pc, #68]	; (8002530 <calculate_rx_timings+0xc4>)
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	4620      	mov	r0, r4
 80024f0:	4629      	mov	r1, r5
 80024f2:	f7fd febd 	bl	8000270 <__aeabi_ldivmod>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4613      	mov	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8002508:	fb03 f202 	mul.w	r2, r3, r2
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4413      	add	r3, r2
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	441a      	add	r2, r3
 8002514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002516:	601a      	str	r2, [r3, #0]
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002520:	461a      	mov	r2, r3
 8002522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002524:	601a      	str	r2, [r3, #0]
}
 8002526:	bf00      	nop
 8002528:	3728      	adds	r7, #40	; 0x28
 800252a:	46bd      	mov	sp, r7
 800252c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002530:	000f4240 	.word	0x000f4240

08002534 <receive_package>:

static bool receive_package(rfm95_handle_t *handle, uint32_t tx_ticks, uint8_t *payload_buf, size_t *payload_len,
                            int8_t *snr)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08c      	sub	sp, #48	; 0x30
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);
 8002548:	f107 0320 	add.w	r3, r7, #32
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2207      	movs	r2, #7
 8002558:	49ab      	ldr	r1, [pc, #684]	; (8002808 <receive_package+0x2d4>)
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f7ff ff86 	bl	800246c <calculate_rx_timings>

	assert(rx1_window_symbols <= 0x3ff);
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002566:	d306      	bcc.n	8002576 <receive_package+0x42>
 8002568:	4ba8      	ldr	r3, [pc, #672]	; (800280c <receive_package+0x2d8>)
 800256a:	4aa9      	ldr	r2, [pc, #676]	; (8002810 <receive_package+0x2dc>)
 800256c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002570:	48a8      	ldr	r0, [pc, #672]	; (8002814 <receive_package+0x2e0>)
 8002572:	f003 fdff 	bl	8006174 <__assert_func>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8002576:	2272      	movs	r2, #114	; 0x72
 8002578:	211d      	movs	r1, #29
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f7ff f9b6 	bl	80018ec <write_register>
 8002580:	4603      	mov	r3, r0
 8002582:	f083 0301 	eor.w	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <receive_package+0x5c>
 800258c:	2300      	movs	r3, #0
 800258e:	e136      	b.n	80027fe <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx1_window_symbols >> 8) & 0x3))) return false;
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	211e      	movs	r1, #30
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f7ff f9a0 	bl	80018ec <write_register>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f083 0301 	eor.w	r3, r3, #1
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <receive_package+0x88>
 80025b8:	2300      	movs	r3, #0
 80025ba:	e120      	b.n	80027fe <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 80025bc:	2204      	movs	r2, #4
 80025be:	2126      	movs	r1, #38	; 0x26
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff f993 	bl	80018ec <write_register>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f083 0301 	eor.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <receive_package+0xa2>
 80025d2:	2300      	movs	r3, #0
 80025d4:	e113      	b.n	80027fe <receive_package+0x2ca>

	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	211f      	movs	r1, #31
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f7ff f984 	bl	80018ec <write_register>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f083 0301 	eor.w	r3, r3, #1
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <receive_package+0xc0>
 80025f0:	2300      	movs	r3, #0
 80025f2:	e104      	b.n	80027fe <receive_package+0x2ca>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_RX)) return false;
 80025f4:	2267      	movs	r2, #103	; 0x67
 80025f6:	2133      	movs	r1, #51	; 0x33
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f7ff f977 	bl	80018ec <write_register>
 80025fe:	4603      	mov	r3, r0
 8002600:	f083 0301 	eor.w	r3, r3, #1
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <receive_package+0xda>
 800260a:	2300      	movs	r3, #0
 800260c:	e0f7      	b.n	80027fe <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_RX)) return false;
 800260e:	2219      	movs	r2, #25
 8002610:	213b      	movs	r1, #59	; 0x3b
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7ff f96a 	bl	80018ec <write_register>
 8002618:	4603      	mov	r3, r0
 800261a:	f083 0301 	eor.w	r3, r3, #1
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <receive_package+0xf4>
 8002624:	2300      	movs	r3, #0
 8002626:	e0ea      	b.n	80027fe <receive_package+0x2ca>

	receive_at_scheduled_time(handle, rx1_target);
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	4619      	mov	r1, r3
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff febb 	bl	80023a8 <receive_at_scheduled_time>

	// If there was nothing received during RX1, try RX2.
	if (!wait_for_rx_irqs(handle)) {
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f7ff fac2 	bl	8001bbc <wait_for_rx_irqs>
 8002638:	4603      	mov	r3, r0
 800263a:	f083 0301 	eor.w	r3, r3, #1
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d07a      	beq.n	800273a <receive_package+0x206>

		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	2101      	movs	r1, #1
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f7ff f94f 	bl	80018ec <write_register>
 800264e:	4603      	mov	r3, r0
 8002650:	f083 0301 	eor.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <receive_package+0x12a>
 800265a:	2300      	movs	r3, #0
 800265c:	e0cf      	b.n	80027fe <receive_package+0x2ca>

		if (handle->receive_mode == RFM95_RECEIVE_MODE_RX12) {
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002664:	2b02      	cmp	r3, #2
 8002666:	d166      	bne.n	8002736 <receive_package+0x202>

			uint32_t rx2_target, rx2_window_symbols;
			calculate_rx_timings(handle, 125000, 12, tx_ticks, &rx2_target, &rx2_window_symbols);
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	f107 0318 	add.w	r3, r7, #24
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	220c      	movs	r2, #12
 8002678:	4963      	ldr	r1, [pc, #396]	; (8002808 <receive_package+0x2d4>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f7ff fef6 	bl	800246c <calculate_rx_timings>

			// Configure 869.525 MHz
			if (!configure_frequency(handle, 869525000)) return false;
 8002680:	4965      	ldr	r1, [pc, #404]	; (8002818 <receive_package+0x2e4>)
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f7ff f9e4 	bl	8001a50 <configure_frequency>
 8002688:	4603      	mov	r3, r0
 800268a:	f083 0301 	eor.w	r3, r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <receive_package+0x164>
 8002694:	2300      	movs	r3, #0
 8002696:	e0b2      	b.n	80027fe <receive_package+0x2ca>

			// Configure modem SF12
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0xc2)) return false;
 8002698:	22c2      	movs	r2, #194	; 0xc2
 800269a:	211d      	movs	r1, #29
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff f925 	bl	80018ec <write_register>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f083 0301 	eor.w	r3, r3, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <receive_package+0x17e>
 80026ae:	2300      	movs	r3, #0
 80026b0:	e0a5      	b.n	80027fe <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx2_window_symbols >> 8) & 0x3))) return false;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	211e      	movs	r1, #30
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f7ff f90f 	bl	80018ec <write_register>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f083 0301 	eor.w	r3, r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <receive_package+0x1aa>
 80026da:	2300      	movs	r3, #0
 80026dc:	e08f      	b.n	80027fe <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 80026de:	2204      	movs	r2, #4
 80026e0:	2126      	movs	r1, #38	; 0x26
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7ff f902 	bl	80018ec <write_register>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f083 0301 	eor.w	r3, r3, #1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <receive_package+0x1c4>
 80026f4:	2300      	movs	r3, #0
 80026f6:	e082      	b.n	80027fe <receive_package+0x2ca>

			// Set maximum symbol timeout.
			if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx2_window_symbols)) return false;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	211f      	movs	r1, #31
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff f8f3 	bl	80018ec <write_register>
 8002706:	4603      	mov	r3, r0
 8002708:	f083 0301 	eor.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <receive_package+0x1e2>
 8002712:	2300      	movs	r3, #0
 8002714:	e073      	b.n	80027fe <receive_package+0x2ca>

			receive_at_scheduled_time(handle, rx2_target);
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4619      	mov	r1, r3
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f7ff fe44 	bl	80023a8 <receive_at_scheduled_time>

			if (!wait_for_rx_irqs(handle)) {
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7ff fa4b 	bl	8001bbc <wait_for_rx_irqs>
 8002726:	4603      	mov	r3, r0
 8002728:	f083 0301 	eor.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <receive_package+0x202>
				// No payload during in RX1 and RX2
				return true;
 8002732:	2301      	movs	r3, #1
 8002734:	e063      	b.n	80027fe <receive_package+0x2ca>
			}
		}

		return true;
 8002736:	2301      	movs	r3, #1
 8002738:	e061      	b.n	80027fe <receive_package+0x2ca>
	}

	uint8_t irq_flags;
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 800273a:	f107 021f 	add.w	r2, r7, #31
 800273e:	2301      	movs	r3, #1
 8002740:	2112      	movs	r1, #18
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff f896 	bl	8001874 <read_register>

	// Check if there was a CRC error.
	if (irq_flags & 0x20) {
 8002748:	7ffb      	ldrb	r3, [r7, #31]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <receive_package+0x222>
		return true;
 8002752:	2301      	movs	r3, #1
 8002754:	e053      	b.n	80027fe <receive_package+0x2ca>
	}

	int8_t packet_snr;
	if (!read_register(handle, RFM95_REGISTER_PACKET_SNR, (uint8_t *)&packet_snr, 1)) return false;
 8002756:	f107 021e 	add.w	r2, r7, #30
 800275a:	2301      	movs	r3, #1
 800275c:	2119      	movs	r1, #25
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7ff f888 	bl	8001874 <read_register>
 8002764:	4603      	mov	r3, r0
 8002766:	f083 0301 	eor.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <receive_package+0x240>
 8002770:	2300      	movs	r3, #0
 8002772:	e044      	b.n	80027fe <receive_package+0x2ca>
	*snr = (int8_t)(packet_snr / 4);
 8002774:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002778:	2b00      	cmp	r3, #0
 800277a:	da00      	bge.n	800277e <receive_package+0x24a>
 800277c:	3303      	adds	r3, #3
 800277e:	109b      	asrs	r3, r3, #2
 8002780:	b25a      	sxtb	r2, r3
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	701a      	strb	r2, [r3, #0]

	// Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 8002786:	f107 021d 	add.w	r2, r7, #29
 800278a:	2301      	movs	r3, #1
 800278c:	2113      	movs	r1, #19
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff f870 	bl	8001874 <read_register>
 8002794:	4603      	mov	r3, r0
 8002796:	f083 0301 	eor.w	r3, r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <receive_package+0x270>
 80027a0:	2300      	movs	r3, #0
 80027a2:	e02c      	b.n	80027fe <receive_package+0x2ca>

	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 80027a4:	2200      	movs	r2, #0
 80027a6:	210d      	movs	r1, #13
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff f89f 	bl	80018ec <write_register>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f083 0301 	eor.w	r3, r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <receive_package+0x28a>
 80027ba:	2300      	movs	r3, #0
 80027bc:	e01f      	b.n	80027fe <receive_package+0x2ca>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, payload_len_internal)) return false;
 80027be:	7f7b      	ldrb	r3, [r7, #29]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	2100      	movs	r1, #0
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff f855 	bl	8001874 <read_register>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f083 0301 	eor.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <receive_package+0x2a6>
 80027d6:	2300      	movs	r3, #0
 80027d8:	e011      	b.n	80027fe <receive_package+0x2ca>

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	2101      	movs	r1, #1
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff f884 	bl	80018ec <write_register>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f083 0301 	eor.w	r3, r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <receive_package+0x2c0>
 80027f0:	2300      	movs	r3, #0
 80027f2:	e004      	b.n	80027fe <receive_package+0x2ca>

	// Successful payload receive, set payload length to tell caller.
	*payload_len = payload_len_internal;
 80027f4:	7f7b      	ldrb	r3, [r7, #29]
 80027f6:	461a      	mov	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	601a      	str	r2, [r3, #0]
	return true;
 80027fc:	2301      	movs	r3, #1
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3728      	adds	r7, #40	; 0x28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	0001e848 	.word	0x0001e848
 800280c:	080073c8 	.word	0x080073c8
 8002810:	08007494 	.word	0x08007494
 8002814:	08007190 	.word	0x08007190
 8002818:	33d3e608 	.word	0x33d3e608

0800281c <send_package>:

static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel,
                         uint32_t *tx_ticks)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	70fb      	strb	r3, [r7, #3]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel)) return false;
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	4619      	mov	r1, r3
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff f96a 	bl	8001b08 <configure_channel>
 8002834:	4603      	mov	r3, r0
 8002836:	f083 0301 	eor.w	r3, r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <send_package+0x28>
 8002840:	2300      	movs	r3, #0
 8002842:	e0d8      	b.n	80029f6 <send_package+0x1da>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8002844:	2272      	movs	r2, #114	; 0x72
 8002846:	211d      	movs	r1, #29
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7ff f84f 	bl	80018ec <write_register>
 800284e:	4603      	mov	r3, r0
 8002850:	f083 0301 	eor.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <send_package+0x42>
 800285a:	2300      	movs	r3, #0
 800285c:	e0cb      	b.n	80029f6 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false;
 800285e:	2274      	movs	r2, #116	; 0x74
 8002860:	211e      	movs	r1, #30
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7ff f842 	bl	80018ec <write_register>
 8002868:	4603      	mov	r3, r0
 800286a:	f083 0301 	eor.w	r3, r3, #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <send_package+0x5c>
 8002874:	2300      	movs	r3, #0
 8002876:	e0be      	b.n	80029f6 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8002878:	2204      	movs	r2, #4
 800287a:	2126      	movs	r1, #38	; 0x26
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff f835 	bl	80018ec <write_register>
 8002882:	4603      	mov	r3, r0
 8002884:	f083 0301 	eor.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <send_package+0x76>
 800288e:	2300      	movs	r3, #0
 8002890:	e0b1      	b.n	80029f6 <send_package+0x1da>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8002892:	2227      	movs	r2, #39	; 0x27
 8002894:	2133      	movs	r1, #51	; 0x33
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff f828 	bl	80018ec <write_register>
 800289c:	4603      	mov	r3, r0
 800289e:	f083 0301 	eor.w	r3, r3, #1
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <send_package+0x90>
 80028a8:	2300      	movs	r3, #0
 80028aa:	e0a4      	b.n	80029f6 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 80028ac:	221d      	movs	r2, #29
 80028ae:	213b      	movs	r1, #59	; 0x3b
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff f81b 	bl	80018ec <write_register>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f083 0301 	eor.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <send_package+0xaa>
 80028c2:	2300      	movs	r3, #0
 80028c4:	e097      	b.n	80029f6 <send_package+0x1da>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len)) return false;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	2122      	movs	r1, #34	; 0x22
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7ff f80c 	bl	80018ec <write_register>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f083 0301 	eor.w	r3, r3, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <send_package+0xc8>
 80028e0:	2300      	movs	r3, #0
 80028e2:	e088      	b.n	80029f6 <send_package+0x1da>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 80028e4:	2240      	movs	r2, #64	; 0x40
 80028e6:	2140      	movs	r1, #64	; 0x40
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f7fe ffff 	bl	80018ec <write_register>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f083 0301 	eor.w	r3, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <send_package+0xe2>
 80028fa:	2300      	movs	r3, #0
 80028fc:	e07b      	b.n	80029f6 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 80028fe:	22ff      	movs	r2, #255	; 0xff
 8002900:	2112      	movs	r1, #18
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f7fe fff2 	bl	80018ec <write_register>
 8002908:	4603      	mov	r3, r0
 800290a:	f083 0301 	eor.w	r3, r3, #1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <send_package+0xfc>
 8002914:	2300      	movs	r3, #0
 8002916:	e06e      	b.n	80029f6 <send_package+0x1da>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8002928:	2281      	movs	r2, #129	; 0x81
 800292a:	2101      	movs	r1, #1
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f7fe ffdd 	bl	80018ec <write_register>
 8002932:	4603      	mov	r3, r0
 8002934:	f083 0301 	eor.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <send_package+0x126>
 800293e:	2300      	movs	r3, #0
 8002940:	e059      	b.n	80029f6 <send_package+0x1da>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8002942:	220a      	movs	r2, #10
 8002944:	2102      	movs	r1, #2
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff f908 	bl	8001b5c <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 800294c:	2280      	movs	r2, #128	; 0x80
 800294e:	210d      	movs	r1, #13
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7fe ffcb 	bl	80018ec <write_register>
 8002956:	4603      	mov	r3, r0
 8002958:	f083 0301 	eor.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <send_package+0x14a>
 8002962:	2300      	movs	r3, #0
 8002964:	e047      	b.n	80029f6 <send_package+0x1da>

	// Write payload to FIFO.
	for (size_t i = 0; i < payload_len; i++) {
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e00b      	b.n	8002984 <send_package+0x168>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	4413      	add	r3, r2
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	2100      	movs	r1, #0
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7fe ffb7 	bl	80018ec <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3301      	adds	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	d3ef      	bcc.n	800296c <send_package+0x150>
	}

	// Set modem to tx mode.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 800298c:	2283      	movs	r2, #131	; 0x83
 800298e:	2101      	movs	r1, #1
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7fe ffab 	bl	80018ec <write_register>
 8002996:	4603      	mov	r3, r0
 8002998:	f083 0301 	eor.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <send_package+0x18a>
 80029a2:	2300      	movs	r3, #0
 80029a4:	e027      	b.n	80029f6 <send_package+0x1da>

	// Wait for the transfer complete interrupt.
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 80029a6:	2264      	movs	r2, #100	; 0x64
 80029a8:	2100      	movs	r1, #0
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7ff f8d6 	bl	8001b5c <wait_for_irq>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f083 0301 	eor.w	r3, r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <send_package+0x1a4>
 80029bc:	2300      	movs	r3, #0
 80029be:	e01a      	b.n	80029f6 <send_package+0x1da>

	// Set real tx time in ticks.
	*tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	601a      	str	r2, [r3, #0]

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	2101      	movs	r1, #1
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7fe ff8c 	bl	80018ec <write_register>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f083 0301 	eor.w	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <send_package+0x1c8>
 80029e0:	2300      	movs	r3, #0
 80029e2:	e008      	b.n	80029f6 <send_package+0x1da>

	// Increment tx frame counter.
	handle->config.tx_frame_count++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80029ea:	3301      	adds	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	return true;
 80029f4:	2301      	movs	r3, #1
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <encode_phy_payload>:

static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t port)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b08d      	sub	sp, #52	; 0x34
 8002a04:	af04      	add	r7, sp, #16
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	330d      	adds	r3, #13
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d906      	bls.n	8002a28 <encode_phy_payload+0x28>
 8002a1a:	4b51      	ldr	r3, [pc, #324]	; (8002b60 <encode_phy_payload+0x160>)
 8002a1c:	4a51      	ldr	r2, [pc, #324]	; (8002b64 <encode_phy_payload+0x164>)
 8002a1e:	f240 214f 	movw	r1, #591	; 0x24f
 8002a22:	4851      	ldr	r0, [pc, #324]	; (8002b68 <encode_phy_payload+0x168>)
 8002a24:	f003 fba6 	bl	8006174 <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2240      	movs	r2, #64	; 0x40
 8002a2c:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	3301      	adds	r3, #1
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	7d52      	ldrb	r2, [r2, #21]
 8002a36:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	7d12      	ldrb	r2, [r2, #20]
 8002a40:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	3303      	adds	r3, #3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	7cd2      	ldrb	r2, [r2, #19]
 8002a4a:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	7c92      	ldrb	r2, [r2, #18]
 8002a54:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3305      	adds	r3, #5
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	3306      	adds	r3, #6
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	3307      	adds	r3, #7
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3308      	adds	r3, #8
 8002a82:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002a86:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	3309      	adds	r3, #9
 8002a8c:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	4413      	add	r3, r2
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 fd3e 	bl	800651a <memcpy>
	if (port == 0) {
 8002a9e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d113      	bne.n	8002ace <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	18d0      	adds	r0, r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2d9      	uxtb	r1, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002ab6:	461c      	mov	r4, r3
		                0, handle->network_session_key, handle->device_address);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3316      	adds	r3, #22
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002ac0:	9201      	str	r2, [sp, #4]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	f7fe fbf3 	bl	80012b2 <Encrypt_Payload>
 8002acc:	e012      	b.n	8002af4 <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	18d0      	adds	r0, r2, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	b2d9      	uxtb	r1, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002ade:	461c      	mov	r4, r3
		                0, handle->application_session_key, handle->device_address);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3326      	adds	r3, #38	; 0x26
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002ae8:	9201      	str	r2, [sp, #4]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2300      	movs	r3, #0
 8002aee:	4622      	mov	r2, r4
 8002af0:	f7fe fbdf 	bl	80012b2 <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	4413      	add	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	b2d8      	uxtb	r0, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002b06:	461c      	mov	r4, r3
	              handle->network_session_key, handle->device_address);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3316      	adds	r3, #22
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 8002b10:	f107 0114 	add.w	r1, r7, #20
 8002b14:	9202      	str	r2, [sp, #8]
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	4623      	mov	r3, r4
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68b8      	ldr	r0, [r7, #8]
 8002b22:	f7fe fc7b 	bl	800141c <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 8002b26:	2300      	movs	r3, #0
 8002b28:	77fb      	strb	r3, [r7, #31]
 8002b2a:	e00d      	b.n	8002b48 <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 8002b2c:	7ffa      	ldrb	r2, [r7, #31]
 8002b2e:	7ff9      	ldrb	r1, [r7, #31]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	440b      	add	r3, r1
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	440b      	add	r3, r1
 8002b38:	3220      	adds	r2, #32
 8002b3a:	443a      	add	r2, r7
 8002b3c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8002b40:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8002b42:	7ffb      	ldrb	r3, [r7, #31]
 8002b44:	3301      	adds	r3, #1
 8002b46:	77fb      	strb	r3, [r7, #31]
 8002b48:	7ffb      	ldrb	r3, [r7, #31]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d9ee      	bls.n	8002b2c <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	3304      	adds	r3, #4
 8002b52:	61bb      	str	r3, [r7, #24]

	return payload_len;
 8002b54:	69bb      	ldr	r3, [r7, #24]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	; 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd90      	pop	{r4, r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	080073e4 	.word	0x080073e4
 8002b64:	080074a4 	.word	0x080074a4
 8002b68:	08007190 	.word	0x08007190

08002b6c <decode_phy_payload>:

static bool decode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], uint8_t payload_length,
                               uint8_t **decoded_frame_payload_ptr, uint8_t *decoded_frame_payload_length, uint8_t *frame_port)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b08d      	sub	sp, #52	; 0x34
 8002b70:	af04      	add	r7, sp, #16
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	71fb      	strb	r3, [r7, #7]
	// Only unconfirmed down-links are supported for now.
	if (payload_buf[0] != 0x60) {
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b60      	cmp	r3, #96	; 0x60
 8002b82:	d001      	beq.n	8002b88 <decode_phy_payload+0x1c>
		return false;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e0aa      	b.n	8002cde <decode_phy_payload+0x172>
	}

	// Does the device address match?
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	7d5b      	ldrb	r3, [r3, #21]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d114      	bne.n	8002bc0 <decode_phy_payload+0x54>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	3302      	adds	r3, #2
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	7d1b      	ldrb	r3, [r3, #20]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d10d      	bne.n	8002bc0 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	3303      	adds	r3, #3
 8002ba8:	781a      	ldrb	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	7cdb      	ldrb	r3, [r3, #19]
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d106      	bne.n	8002bc0 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	781a      	ldrb	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	7c9b      	ldrb	r3, [r3, #18]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <decode_phy_payload+0x58>
		return false;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e08c      	b.n	8002cde <decode_phy_payload+0x172>
	}

	uint8_t frame_control = payload_buf[5];
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	795b      	ldrb	r3, [r3, #5]
 8002bc8:	77fb      	strb	r3, [r7, #31]
	uint8_t frame_opts_length = frame_control & 0x0f;
 8002bca:	7ffb      	ldrb	r3, [r7, #31]
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	77bb      	strb	r3, [r7, #30]
	uint16_t rx_frame_count = (payload_buf[7] << 8) | payload_buf[6];
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3307      	adds	r3, #7
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	b21a      	sxth	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	3306      	adds	r3, #6
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	b21b      	sxth	r3, r3
 8002be4:	4313      	orrs	r3, r2
 8002be6:	b21b      	sxth	r3, r3
 8002be8:	83bb      	strh	r3, [r7, #28]

	// Check if rx frame count is valid and if so, update accordingly.
	if (rx_frame_count < handle->config.rx_frame_count) {
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002bf0:	8bba      	ldrh	r2, [r7, #28]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d201      	bcs.n	8002bfa <decode_phy_payload+0x8e>
		return false;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e071      	b.n	8002cde <decode_phy_payload+0x172>
	}
	handle->config.rx_frame_count = rx_frame_count;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8bba      	ldrh	r2, [r7, #28]
 8002bfe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	uint8_t check_mic[4];
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	3b04      	subs	r3, #4
 8002c06:	b2d8      	uxtb	r0, r3
 8002c08:	8bbc      	ldrh	r4, [r7, #28]
	              handle->network_session_key, handle->device_address);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3316      	adds	r3, #22
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 8002c12:	f107 0114 	add.w	r1, r7, #20
 8002c16:	9202      	str	r2, [sp, #8]
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	4623      	mov	r3, r4
 8002c20:	4602      	mov	r2, r0
 8002c22:	68b8      	ldr	r0, [r7, #8]
 8002c24:	f7fe fbfa 	bl	800141c <Calculate_MIC>
	if (memcmp(check_mic, &payload_buf[payload_length - 4], 4) != 0) {
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	3b04      	subs	r3, #4
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	18d1      	adds	r1, r2, r3
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	2204      	movs	r2, #4
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 fbe3 	bl	8006402 <memcmp>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <decode_phy_payload+0xda>
		return false;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e04b      	b.n	8002cde <decode_phy_payload+0x172>
	}

	if (payload_length - 12 - frame_opts_length == 0) {
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	f1a3 020c 	sub.w	r2, r3, #12
 8002c4c:	7fbb      	ldrb	r3, [r7, #30]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d10b      	bne.n	8002c6a <decode_phy_payload+0xfe>
		*frame_port = 0;
 8002c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
		*decoded_frame_payload_ptr = &payload_buf[8];
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f103 0208 	add.w	r2, r3, #8
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_opts_length;
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	7fba      	ldrb	r2, [r7, #30]
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e038      	b.n	8002cdc <decode_phy_payload+0x170>

	} else {
		*frame_port = payload_buf[8];
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	7a1a      	ldrb	r2, [r3, #8]
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c70:	701a      	strb	r2, [r3, #0]

		uint8_t frame_payload_start = 9 + frame_opts_length;
 8002c72:	7fbb      	ldrb	r3, [r7, #30]
 8002c74:	3309      	adds	r3, #9
 8002c76:	76fb      	strb	r3, [r7, #27]
		uint8_t frame_payload_end = payload_length - 4;
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	3b04      	subs	r3, #4
 8002c7c:	76bb      	strb	r3, [r7, #26]
		uint8_t frame_payload_length = frame_payload_end - frame_payload_start;
 8002c7e:	7eba      	ldrb	r2, [r7, #26]
 8002c80:	7efb      	ldrb	r3, [r7, #27]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	767b      	strb	r3, [r7, #25]

		if (*frame_port == 0) {
 8002c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10f      	bne.n	8002cae <decode_phy_payload+0x142>
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002c8e:	7efb      	ldrb	r3, [r7, #27]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	18d0      	adds	r0, r2, r3
 8002c94:	8bbc      	ldrh	r4, [r7, #28]
			                1, handle->network_session_key, handle->device_address);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3316      	adds	r3, #22
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002c9e:	7e79      	ldrb	r1, [r7, #25]
 8002ca0:	9201      	str	r2, [sp, #4]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	f7fe fb03 	bl	80012b2 <Encrypt_Payload>
 8002cac:	e00e      	b.n	8002ccc <decode_phy_payload+0x160>
		} else {
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002cae:	7efb      	ldrb	r3, [r7, #27]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	18d0      	adds	r0, r2, r3
 8002cb4:	8bbc      	ldrh	r4, [r7, #28]
			                1, handle->application_session_key, handle->device_address);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3326      	adds	r3, #38	; 0x26
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002cbe:	7e79      	ldrb	r1, [r7, #25]
 8002cc0:	9201      	str	r2, [sp, #4]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	f7fe faf3 	bl	80012b2 <Encrypt_Payload>
		}

		*decoded_frame_payload_ptr = &payload_buf[frame_payload_start];
 8002ccc:	7efb      	ldrb	r3, [r7, #27]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	441a      	add	r2, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_payload_length;
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	7e7a      	ldrb	r2, [r7, #25]
 8002cda:	701a      	strb	r2, [r3, #0]
	}

	return true;
 8002cdc:	2301      	movs	r3, #1
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3724      	adds	r7, #36	; 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}

08002ce6 <select_random_channel>:

static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73bb      	strb	r3, [r7, #14]
 8002cf6:	e010      	b.n	8002d1a <select_random_channel+0x34>
		if (handle->config.channel_mask & (1 << i)) {
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002cfe:	461a      	mov	r2, r3
 8002d00:	7bbb      	ldrb	r3, [r7, #14]
 8002d02:	fa42 f303 	asr.w	r3, r2, r3
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <select_random_channel+0x2e>
			channel_count++;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	3301      	adds	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 16; i++) {
 8002d14:	7bbb      	ldrb	r3, [r7, #14]
 8002d16:	3301      	adds	r3, #1
 8002d18:	73bb      	strb	r3, [r7, #14]
 8002d1a:	7bbb      	ldrb	r3, [r7, #14]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d9eb      	bls.n	8002cf8 <select_random_channel+0x12>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	4610      	mov	r0, r2
 8002d28:	4798      	blx	r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 16; i++) {
 8002d2e:	2300      	movs	r3, #0
 8002d30:	733b      	strb	r3, [r7, #12]
 8002d32:	e015      	b.n	8002d60 <select_random_channel+0x7a>
		if (handle->config.channel_mask & (1 << i)) {
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	7b3b      	ldrb	r3, [r7, #12]
 8002d3e:	fa42 f303 	asr.w	r3, r2, r3
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <select_random_channel+0x74>
			if (random_channel == 0) {
 8002d4a:	7b7b      	ldrb	r3, [r7, #13]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <select_random_channel+0x6e>
				return i;
 8002d50:	7b3b      	ldrb	r3, [r7, #12]
 8002d52:	e009      	b.n	8002d68 <select_random_channel+0x82>
			} else {
				random_channel--;
 8002d54:	7b7b      	ldrb	r3, [r7, #13]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 16; i++) {
 8002d5a:	7b3b      	ldrb	r3, [r7, #12]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	733b      	strb	r3, [r7, #12]
 8002d60:	7b3b      	ldrb	r3, [r7, #12]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	d9e6      	bls.n	8002d34 <select_random_channel+0x4e>
			}
		}
	}

	return 0;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <rfm95_send_receive_cycle>:

bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b0aa      	sub	sp, #168	; 0xa8
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d80:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d84:	223c      	movs	r2, #60	; 0x3c
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fb4a 	bl	8006422 <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 8002d8e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002d92:	2301      	movs	r3, #1
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7ff fe30 	bl	8002a00 <encode_phy_payload>
 8002da0:	4603      	mov	r3, r0
 8002da2:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t random_channel = select_random_channel(handle);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7ff ff9e 	bl	8002ce6 <select_random_channel>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 8002db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002db2:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8002db6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002dba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f7ff fd2a 	bl	800281c <send_package>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f083 0301 	eor.w	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <rfm95_send_receive_cycle+0x72>
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002dd4:	2280      	movs	r2, #128	; 0x80
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7fe fd87 	bl	80018ec <write_register>
		return false;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e0af      	b.n	8002f42 <rfm95_send_receive_cycle+0x1d2>
	}

	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 8002de2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002de6:	2240      	movs	r2, #64	; 0x40
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 fb19 	bl	8006422 <memset>
	phy_payload_len = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	65bb      	str	r3, [r7, #88]	; 0x58

	// Only receive if configured to do so.
	if (handle->receive_mode != RFM95_RECEIVE_MODE_NONE) {
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 8096 	beq.w	8002f2c <rfm95_send_receive_cycle+0x1bc>

		int8_t snr;

		// Try receiving a down-link.
		if (!receive_package(handle, tx_ticks, phy_payload_buf, &phy_payload_len, &snr)) {
 8002e00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e02:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002e0a:	f107 0353 	add.w	r3, r7, #83	; 0x53
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	4603      	mov	r3, r0
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f7ff fb8e 	bl	8002534 <receive_package>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f083 0301 	eor.w	r3, r3, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <rfm95_send_receive_cycle+0xd6>
			write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	2101      	movs	r1, #1
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7fe fd5f 	bl	80018ec <write_register>
			if (handle->save_config) {
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <rfm95_send_receive_cycle+0xd2>
				handle->save_config(&(handle->config));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	3260      	adds	r2, #96	; 0x60
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4798      	blx	r3
			}
			return false;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e07d      	b.n	8002f42 <rfm95_send_receive_cycle+0x1d2>
		}

		// Any RX payload was received.
		if (phy_payload_len != 0) {
 8002e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d06f      	beq.n	8002f2c <rfm95_send_receive_cycle+0x1bc>

			uint8_t *frame_payload;
			uint8_t frame_payload_len = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			uint8_t frame_port;

			// Try decoding the frame payload.
			if (decode_phy_payload(handle, phy_payload_buf, phy_payload_len, &frame_payload, &frame_payload_len,
 8002e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002e5a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002e5e:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7ff fe7d 	bl	8002b6c <decode_phy_payload>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d059      	beq.n	8002f2c <rfm95_send_receive_cycle+0x1bc>
			                       &frame_port)) {

				// Process Mac Commands
				if (frame_port == 0) {
 8002e78:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d155      	bne.n	8002f2c <rfm95_send_receive_cycle+0x1bc>

					uint8_t mac_response_data[51] = {0};
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	f107 0318 	add.w	r3, r7, #24
 8002e88:	222f      	movs	r2, #47	; 0x2f
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 fac8 	bl	8006422 <memset>
					uint8_t mac_response_len = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

					if (process_mac_commands(handle, frame_payload, frame_payload_len, mac_response_data,
 8002e98:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e9a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002ea4:	f107 0214 	add.w	r2, r7, #20
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	f107 0349 	add.w	r3, r7, #73	; 0x49
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f7ff f87f 	bl	8001fb8 <process_mac_commands>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d035      	beq.n	8002f2c <rfm95_send_receive_cycle+0x1bc>
					                         &mac_response_len, snr) && mac_response_len != 0) {
 8002ec0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d031      	beq.n	8002f2c <rfm95_send_receive_cycle+0x1bc>

						// Build the up-link phy payload.
						phy_payload_len = encode_phy_payload(handle, phy_payload_buf, mac_response_data,
 8002ec8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f107 0214 	add.w	r2, r7, #20
 8002ed2:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	4603      	mov	r3, r0
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7ff fd8f 	bl	8002a00 <encode_phy_payload>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	65bb      	str	r3, [r7, #88]	; 0x58
						                                     mac_response_len, 0);

						if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel,
 8002ee6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ee8:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8002eec:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002ef0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff fc8f 	bl	800281c <send_package>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f083 0301 	eor.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d010      	beq.n	8002f2c <rfm95_send_receive_cycle+0x1bc>
						                  &tx_ticks)) {
							write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f7fe fcec 	bl	80018ec <write_register>
							if (handle->save_config) {
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <rfm95_send_receive_cycle+0x1b8>
								handle->save_config(&(handle->config));
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	3260      	adds	r2, #96	; 0x60
 8002f24:	4610      	mov	r0, r2
 8002f26:	4798      	blx	r3
							}
							return false;
 8002f28:	2300      	movs	r3, #0
			return false;
 8002f2a:	e00a      	b.n	8002f42 <rfm95_send_receive_cycle+0x1d2>
				}
			}
		}
	}

	if (handle->save_config) {
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <rfm95_send_receive_cycle+0x1d0>
		handle->save_config(&(handle->config));
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	3260      	adds	r2, #96	; 0x60
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4798      	blx	r3
	}

	return true;
 8002f40:	2301      	movs	r3, #1
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	37a0      	adds	r7, #160	; 0xa0
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f54:	2003      	movs	r0, #3
 8002f56:	f000 f961 	bl	800321c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f000 f80e 	bl	8002f7c <HAL_InitTick>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	71fb      	strb	r3, [r7, #7]
 8002f6a:	e001      	b.n	8002f70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f6c:	f7fd fcc4 	bl	80008f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f70:	79fb      	ldrb	r3, [r7, #7]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <HAL_InitTick+0x6c>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d023      	beq.n	8002fd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_InitTick+0x70>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <HAL_InitTick+0x6c>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f96d 	bl	8003286 <HAL_SYSTICK_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10f      	bne.n	8002fd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b0f      	cmp	r3, #15
 8002fb6:	d809      	bhi.n	8002fcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb8:	2200      	movs	r2, #0
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc0:	f000 f937 	bl	8003232 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <HAL_InitTick+0x74>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e007      	b.n	8002fdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
 8002fd0:	e004      	b.n	8002fdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
 8002fd6:	e001      	b.n	8002fdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000108 	.word	0x20000108
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000104 	.word	0x20000104

08002ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_IncTick+0x20>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_IncTick+0x24>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4413      	add	r3, r2
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_IncTick+0x24>)
 8003006:	6013      	str	r3, [r2, #0]
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000108 	.word	0x20000108
 8003018:	2000024c 	.word	0x2000024c

0800301c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return uwTick;
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_GetTick+0x14>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	2000024c 	.word	0x2000024c

08003034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff ffee 	bl	800301c <HAL_GetTick>
 8003040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d005      	beq.n	800305a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_Delay+0x44>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800305a:	bf00      	nop
 800305c:	f7ff ffde 	bl	800301c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	429a      	cmp	r2, r3
 800306a:	d8f7      	bhi.n	800305c <HAL_Delay+0x28>
  {
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000108 	.word	0x20000108

0800307c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ae:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	60d3      	str	r3, [r2, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <__NVIC_GetPriorityGrouping+0x18>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0307 	and.w	r3, r3, #7
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	db0b      	blt.n	800310a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f003 021f 	and.w	r2, r3, #31
 80030f8:	4907      	ldr	r1, [pc, #28]	; (8003118 <__NVIC_EnableIRQ+0x38>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2001      	movs	r0, #1
 8003102:	fa00 f202 	lsl.w	r2, r0, r2
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	6039      	str	r1, [r7, #0]
 8003126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	db0a      	blt.n	8003146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	490c      	ldr	r1, [pc, #48]	; (8003168 <__NVIC_SetPriority+0x4c>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	440b      	add	r3, r1
 8003140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003144:	e00a      	b.n	800315c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4908      	ldr	r1, [pc, #32]	; (800316c <__NVIC_SetPriority+0x50>)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3b04      	subs	r3, #4
 8003154:	0112      	lsls	r2, r2, #4
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	440b      	add	r3, r1
 800315a:	761a      	strb	r2, [r3, #24]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000e100 	.word	0xe000e100
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f1c3 0307 	rsb	r3, r3, #7
 800318a:	2b04      	cmp	r3, #4
 800318c:	bf28      	it	cs
 800318e:	2304      	movcs	r3, #4
 8003190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3304      	adds	r3, #4
 8003196:	2b06      	cmp	r3, #6
 8003198:	d902      	bls.n	80031a0 <NVIC_EncodePriority+0x30>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3b03      	subs	r3, #3
 800319e:	e000      	b.n	80031a2 <NVIC_EncodePriority+0x32>
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	f04f 32ff 	mov.w	r2, #4294967295
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	401a      	ands	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	43d9      	mvns	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	4313      	orrs	r3, r2
         );
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3724      	adds	r7, #36	; 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e8:	d301      	bcc.n	80031ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00f      	b.n	800320e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <SysTick_Config+0x40>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f6:	210f      	movs	r1, #15
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295
 80031fc:	f7ff ff8e 	bl	800311c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <SysTick_Config+0x40>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <SysTick_Config+0x40>)
 8003208:	2207      	movs	r2, #7
 800320a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	e000e010 	.word	0xe000e010

0800321c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ff29 	bl	800307c <__NVIC_SetPriorityGrouping>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	4603      	mov	r3, r0
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003244:	f7ff ff3e 	bl	80030c4 <__NVIC_GetPriorityGrouping>
 8003248:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	6978      	ldr	r0, [r7, #20]
 8003250:	f7ff ff8e 	bl	8003170 <NVIC_EncodePriority>
 8003254:	4602      	mov	r2, r0
 8003256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff5d 	bl	800311c <__NVIC_SetPriority>
}
 8003262:	bf00      	nop
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff31 	bl	80030e0 <__NVIC_EnableIRQ>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ffa2 	bl	80031d8 <SysTick_Config>
 8003294:	4603      	mov	r3, r0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d005      	beq.n	80032c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2204      	movs	r2, #4
 80032ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	e029      	b.n	8003316 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 020e 	bic.w	r2, r2, #14
 80032d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f003 021c 	and.w	r2, r3, #28
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f202 	lsl.w	r2, r1, r2
 80032f4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
    }
  }
  return status;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800332e:	e148      	b.n	80035c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	2101      	movs	r1, #1
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	4013      	ands	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 813a 	beq.w	80035bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d005      	beq.n	8003360 <HAL_GPIO_Init+0x40>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d130      	bne.n	80033c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2203      	movs	r2, #3
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003396:	2201      	movs	r2, #1
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f003 0201 	and.w	r2, r3, #1
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d017      	beq.n	80033fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d123      	bne.n	8003452 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	08da      	lsrs	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3208      	adds	r2, #8
 8003412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003416:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	220f      	movs	r2, #15
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	08da      	lsrs	r2, r3, #3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3208      	adds	r2, #8
 800344c:	6939      	ldr	r1, [r7, #16]
 800344e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	2203      	movs	r2, #3
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0203 	and.w	r2, r3, #3
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8094 	beq.w	80035bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003494:	4b52      	ldr	r3, [pc, #328]	; (80035e0 <HAL_GPIO_Init+0x2c0>)
 8003496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003498:	4a51      	ldr	r2, [pc, #324]	; (80035e0 <HAL_GPIO_Init+0x2c0>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6613      	str	r3, [r2, #96]	; 0x60
 80034a0:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <HAL_GPIO_Init+0x2c0>)
 80034a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034ac:	4a4d      	ldr	r2, [pc, #308]	; (80035e4 <HAL_GPIO_Init+0x2c4>)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	089b      	lsrs	r3, r3, #2
 80034b2:	3302      	adds	r3, #2
 80034b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	220f      	movs	r2, #15
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034d6:	d00d      	beq.n	80034f4 <HAL_GPIO_Init+0x1d4>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a43      	ldr	r2, [pc, #268]	; (80035e8 <HAL_GPIO_Init+0x2c8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d007      	beq.n	80034f0 <HAL_GPIO_Init+0x1d0>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a42      	ldr	r2, [pc, #264]	; (80035ec <HAL_GPIO_Init+0x2cc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d101      	bne.n	80034ec <HAL_GPIO_Init+0x1cc>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e004      	b.n	80034f6 <HAL_GPIO_Init+0x1d6>
 80034ec:	2307      	movs	r3, #7
 80034ee:	e002      	b.n	80034f6 <HAL_GPIO_Init+0x1d6>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <HAL_GPIO_Init+0x1d6>
 80034f4:	2300      	movs	r3, #0
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	f002 0203 	and.w	r2, r2, #3
 80034fc:	0092      	lsls	r2, r2, #2
 80034fe:	4093      	lsls	r3, r2
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003506:	4937      	ldr	r1, [pc, #220]	; (80035e4 <HAL_GPIO_Init+0x2c4>)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	089b      	lsrs	r3, r3, #2
 800350c:	3302      	adds	r3, #2
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	43db      	mvns	r3, r3
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003538:	4a2d      	ldr	r2, [pc, #180]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800353e:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003562:	4a23      	ldr	r2, [pc, #140]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003568:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43db      	mvns	r3, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800358c:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003592:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_GPIO_Init+0x2d0>)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3301      	adds	r3, #1
 80035c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f47f aeaf 	bne.w	8003330 <HAL_GPIO_Init+0x10>
  }
}
 80035d2:	bf00      	nop
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40010000 	.word	0x40010000
 80035e8:	48000400 	.word	0x48000400
 80035ec:	48000800 	.word	0x48000800
 80035f0:	40010400 	.word	0x40010400

080035f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
 8003600:	4613      	mov	r3, r2
 8003602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003604:	787b      	ldrb	r3, [r7, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003610:	e002      	b.n	8003618 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a04      	ldr	r2, [pc, #16]	; (8003640 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800362e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003632:	6013      	str	r3, [r2, #0]
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40007000 	.word	0x40007000

08003644 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <HAL_PWREx_GetVoltageRange+0x18>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40007000 	.word	0x40007000

08003660 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800366e:	d130      	bne.n	80036d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003670:	4b23      	ldr	r3, [pc, #140]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367c:	d038      	beq.n	80036f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003686:	4a1e      	ldr	r2, [pc, #120]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003688:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800368c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800368e:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2232      	movs	r2, #50	; 0x32
 8003694:	fb02 f303 	mul.w	r3, r2, r3
 8003698:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	0c9b      	lsrs	r3, r3, #18
 80036a0:	3301      	adds	r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036a4:	e002      	b.n	80036ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ac:	4b14      	ldr	r3, [pc, #80]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b8:	d102      	bne.n	80036c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f2      	bne.n	80036a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036cc:	d110      	bne.n	80036f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e00f      	b.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036de:	d007      	beq.n	80036f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036e8:	4a05      	ldr	r2, [pc, #20]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40007000 	.word	0x40007000
 8003704:	20000000 	.word	0x20000000
 8003708:	431bde83 	.word	0x431bde83

0800370c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	f000 bc02 	b.w	8003f24 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003720:	4b96      	ldr	r3, [pc, #600]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800372a:	4b94      	ldr	r3, [pc, #592]	; (800397c <HAL_RCC_OscConfig+0x270>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80e4 	beq.w	800390a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <HAL_RCC_OscConfig+0x4c>
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	f040 808b 	bne.w	8003866 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2b01      	cmp	r3, #1
 8003754:	f040 8087 	bne.w	8003866 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003758:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0x270>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_OscConfig+0x64>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e3d9      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	4b81      	ldr	r3, [pc, #516]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <HAL_RCC_OscConfig+0x7e>
 8003780:	4b7e      	ldr	r3, [pc, #504]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003788:	e005      	b.n	8003796 <HAL_RCC_OscConfig+0x8a>
 800378a:	4b7c      	ldr	r3, [pc, #496]	; (800397c <HAL_RCC_OscConfig+0x270>)
 800378c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003796:	4293      	cmp	r3, r2
 8003798:	d223      	bcs.n	80037e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fd8c 	bl	80042bc <RCC_SetFlashLatencyFromMSIRange>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e3ba      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ae:	4b73      	ldr	r3, [pc, #460]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a72      	ldr	r2, [pc, #456]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80037b4:	f043 0308 	orr.w	r3, r3, #8
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	4b70      	ldr	r3, [pc, #448]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	496d      	ldr	r1, [pc, #436]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037cc:	4b6b      	ldr	r3, [pc, #428]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	4968      	ldr	r1, [pc, #416]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
 80037e0:	e025      	b.n	800382e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037e2:	4b66      	ldr	r3, [pc, #408]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a65      	ldr	r2, [pc, #404]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80037e8:	f043 0308 	orr.w	r3, r3, #8
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b63      	ldr	r3, [pc, #396]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	4960      	ldr	r1, [pc, #384]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003800:	4b5e      	ldr	r3, [pc, #376]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	495b      	ldr	r1, [pc, #364]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fd4c 	bl	80042bc <RCC_SetFlashLatencyFromMSIRange>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e37a      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800382e:	f000 fc81 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 8003832:	4602      	mov	r2, r0
 8003834:	4b51      	ldr	r3, [pc, #324]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	4950      	ldr	r1, [pc, #320]	; (8003980 <HAL_RCC_OscConfig+0x274>)
 8003840:	5ccb      	ldrb	r3, [r1, r3]
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	fa22 f303 	lsr.w	r3, r2, r3
 800384a:	4a4e      	ldr	r2, [pc, #312]	; (8003984 <HAL_RCC_OscConfig+0x278>)
 800384c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800384e:	4b4e      	ldr	r3, [pc, #312]	; (8003988 <HAL_RCC_OscConfig+0x27c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fb92 	bl	8002f7c <HAL_InitTick>
 8003858:	4603      	mov	r3, r0
 800385a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d052      	beq.n	8003908 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	e35e      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d032      	beq.n	80038d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800386e:	4b43      	ldr	r3, [pc, #268]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a42      	ldr	r2, [pc, #264]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800387a:	f7ff fbcf 	bl	800301c <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003882:	f7ff fbcb 	bl	800301c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e347      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003894:	4b39      	ldr	r3, [pc, #228]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038a0:	4b36      	ldr	r3, [pc, #216]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a35      	ldr	r2, [pc, #212]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80038a6:	f043 0308 	orr.w	r3, r3, #8
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b33      	ldr	r3, [pc, #204]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	4930      	ldr	r1, [pc, #192]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038be:	4b2f      	ldr	r3, [pc, #188]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	492b      	ldr	r1, [pc, #172]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	604b      	str	r3, [r1, #4]
 80038d2:	e01a      	b.n	800390a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038d4:	4b29      	ldr	r3, [pc, #164]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a28      	ldr	r2, [pc, #160]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038e0:	f7ff fb9c 	bl	800301c <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038e8:	f7ff fb98 	bl	800301c <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e314      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038fa:	4b20      	ldr	r3, [pc, #128]	; (800397c <HAL_RCC_OscConfig+0x270>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x1dc>
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003908:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d073      	beq.n	80039fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	2b08      	cmp	r3, #8
 800391a:	d005      	beq.n	8003928 <HAL_RCC_OscConfig+0x21c>
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d10e      	bne.n	8003940 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b03      	cmp	r3, #3
 8003926:	d10b      	bne.n	8003940 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	4b14      	ldr	r3, [pc, #80]	; (800397c <HAL_RCC_OscConfig+0x270>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d063      	beq.n	80039fc <HAL_RCC_OscConfig+0x2f0>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d15f      	bne.n	80039fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e2f1      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003948:	d106      	bne.n	8003958 <HAL_RCC_OscConfig+0x24c>
 800394a:	4b0c      	ldr	r3, [pc, #48]	; (800397c <HAL_RCC_OscConfig+0x270>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a0b      	ldr	r2, [pc, #44]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e025      	b.n	80039a4 <HAL_RCC_OscConfig+0x298>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003960:	d114      	bne.n	800398c <HAL_RCC_OscConfig+0x280>
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a05      	ldr	r2, [pc, #20]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b03      	ldr	r3, [pc, #12]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a02      	ldr	r2, [pc, #8]	; (800397c <HAL_RCC_OscConfig+0x270>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e013      	b.n	80039a4 <HAL_RCC_OscConfig+0x298>
 800397c:	40021000 	.word	0x40021000
 8003980:	08007408 	.word	0x08007408
 8003984:	20000000 	.word	0x20000000
 8003988:	20000104 	.word	0x20000104
 800398c:	4ba0      	ldr	r3, [pc, #640]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a9f      	ldr	r2, [pc, #636]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b9d      	ldr	r3, [pc, #628]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a9c      	ldr	r2, [pc, #624]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 800399e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7ff fb36 	bl	800301c <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b4:	f7ff fb32 	bl	800301c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e2ae      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c6:	4b92      	ldr	r3, [pc, #584]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x2a8>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7ff fb22 	bl	800301c <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039dc:	f7ff fb1e 	bl	800301c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e29a      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ee:	4b88      	ldr	r3, [pc, #544]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x2d0>
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d060      	beq.n	8003acc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_OscConfig+0x310>
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d119      	bne.n	8003a4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d116      	bne.n	8003a4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a1c:	4b7c      	ldr	r3, [pc, #496]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_OscConfig+0x328>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e277      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a34:	4b76      	ldr	r3, [pc, #472]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	061b      	lsls	r3, r3, #24
 8003a42:	4973      	ldr	r1, [pc, #460]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a48:	e040      	b.n	8003acc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d023      	beq.n	8003a9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a52:	4b6f      	ldr	r3, [pc, #444]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a6e      	ldr	r2, [pc, #440]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5e:	f7ff fadd 	bl	800301c <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a66:	f7ff fad9 	bl	800301c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e255      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a78:	4b65      	ldr	r3, [pc, #404]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a84:	4b62      	ldr	r3, [pc, #392]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	061b      	lsls	r3, r3, #24
 8003a92:	495f      	ldr	r1, [pc, #380]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
 8003a98:	e018      	b.n	8003acc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9a:	4b5d      	ldr	r3, [pc, #372]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a5c      	ldr	r2, [pc, #368]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7ff fab9 	bl	800301c <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aae:	f7ff fab5 	bl	800301c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e231      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac0:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1f0      	bne.n	8003aae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d03c      	beq.n	8003b52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01c      	beq.n	8003b1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae0:	4b4b      	ldr	r3, [pc, #300]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae6:	4a4a      	ldr	r2, [pc, #296]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7ff fa94 	bl	800301c <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af8:	f7ff fa90 	bl	800301c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e20c      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b0a:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ef      	beq.n	8003af8 <HAL_RCC_OscConfig+0x3ec>
 8003b18:	e01b      	b.n	8003b52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1a:	4b3d      	ldr	r3, [pc, #244]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b20:	4a3b      	ldr	r2, [pc, #236]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7ff fa77 	bl	800301c <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b32:	f7ff fa73 	bl	800301c <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e1ef      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b44:	4b32      	ldr	r3, [pc, #200]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1ef      	bne.n	8003b32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80a6 	beq.w	8003cac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b60:	2300      	movs	r3, #0
 8003b62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b64:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10d      	bne.n	8003b8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b70:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	4a26      	ldr	r2, [pc, #152]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b7c:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b8c:	4b21      	ldr	r3, [pc, #132]	; (8003c14 <HAL_RCC_OscConfig+0x508>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d118      	bne.n	8003bca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b98:	4b1e      	ldr	r3, [pc, #120]	; (8003c14 <HAL_RCC_OscConfig+0x508>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <HAL_RCC_OscConfig+0x508>)
 8003b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba4:	f7ff fa3a 	bl	800301c <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bac:	f7ff fa36 	bl	800301c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1b2      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bbe:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <HAL_RCC_OscConfig+0x508>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d108      	bne.n	8003be4 <HAL_RCC_OscConfig+0x4d8>
 8003bd2:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd8:	4a0d      	ldr	r2, [pc, #52]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003be2:	e029      	b.n	8003c38 <HAL_RCC_OscConfig+0x52c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b05      	cmp	r3, #5
 8003bea:	d115      	bne.n	8003c18 <HAL_RCC_OscConfig+0x50c>
 8003bec:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	4a07      	ldr	r2, [pc, #28]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003bf4:	f043 0304 	orr.w	r3, r3, #4
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	4a03      	ldr	r2, [pc, #12]	; (8003c10 <HAL_RCC_OscConfig+0x504>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c0c:	e014      	b.n	8003c38 <HAL_RCC_OscConfig+0x52c>
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40007000 	.word	0x40007000
 8003c18:	4b9a      	ldr	r3, [pc, #616]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	4a99      	ldr	r2, [pc, #612]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c28:	4b96      	ldr	r3, [pc, #600]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	4a95      	ldr	r2, [pc, #596]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003c30:	f023 0304 	bic.w	r3, r3, #4
 8003c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d016      	beq.n	8003c6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7ff f9ec 	bl	800301c <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c48:	f7ff f9e8 	bl	800301c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e162      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c5e:	4b89      	ldr	r3, [pc, #548]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0ed      	beq.n	8003c48 <HAL_RCC_OscConfig+0x53c>
 8003c6c:	e015      	b.n	8003c9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6e:	f7ff f9d5 	bl	800301c <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c74:	e00a      	b.n	8003c8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c76:	f7ff f9d1 	bl	800301c <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e14b      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c8c:	4b7d      	ldr	r3, [pc, #500]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1ed      	bne.n	8003c76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c9a:	7ffb      	ldrb	r3, [r7, #31]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d105      	bne.n	8003cac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca0:	4b78      	ldr	r3, [pc, #480]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	4a77      	ldr	r2, [pc, #476]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d03c      	beq.n	8003d32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01c      	beq.n	8003cfa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cc0:	4b70      	ldr	r3, [pc, #448]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cc6:	4a6f      	ldr	r2, [pc, #444]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7ff f9a4 	bl	800301c <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cd8:	f7ff f9a0 	bl	800301c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e11c      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cea:	4b66      	ldr	r3, [pc, #408]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ef      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x5cc>
 8003cf8:	e01b      	b.n	8003d32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cfa:	4b62      	ldr	r3, [pc, #392]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d00:	4a60      	ldr	r2, [pc, #384]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0a:	f7ff f987 	bl	800301c <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d12:	f7ff f983 	bl	800301c <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e0ff      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d24:	4b57      	ldr	r3, [pc, #348]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1ef      	bne.n	8003d12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80f3 	beq.w	8003f22 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	f040 80c9 	bne.w	8003ed8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d46:	4b4f      	ldr	r3, [pc, #316]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f003 0203 	and.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d12c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	3b01      	subs	r3, #1
 8003d66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d123      	bne.n	8003db4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d11b      	bne.n	8003db4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d113      	bne.n	8003db4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d109      	bne.n	8003db4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	3b01      	subs	r3, #1
 8003dae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d06b      	beq.n	8003e8c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b0c      	cmp	r3, #12
 8003db8:	d062      	beq.n	8003e80 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dba:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0ac      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dca:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2d      	ldr	r2, [pc, #180]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dd6:	f7ff f921 	bl	800301c <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dde:	f7ff f91d 	bl	800301c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e099      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df0:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dfc:	4b21      	ldr	r3, [pc, #132]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <HAL_RCC_OscConfig+0x77c>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e0c:	3a01      	subs	r2, #1
 8003e0e:	0112      	lsls	r2, r2, #4
 8003e10:	4311      	orrs	r1, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e16:	0212      	lsls	r2, r2, #8
 8003e18:	4311      	orrs	r1, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e1e:	0852      	lsrs	r2, r2, #1
 8003e20:	3a01      	subs	r2, #1
 8003e22:	0552      	lsls	r2, r2, #21
 8003e24:	4311      	orrs	r1, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e2a:	0852      	lsrs	r2, r2, #1
 8003e2c:	3a01      	subs	r2, #1
 8003e2e:	0652      	lsls	r2, r2, #25
 8003e30:	4311      	orrs	r1, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e36:	06d2      	lsls	r2, r2, #27
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	4912      	ldr	r1, [pc, #72]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e40:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a0f      	ldr	r2, [pc, #60]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e4c:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4a0c      	ldr	r2, [pc, #48]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e58:	f7ff f8e0 	bl	800301c <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e60:	f7ff f8dc 	bl	800301c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e058      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e72:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <HAL_RCC_OscConfig+0x778>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e7e:	e050      	b.n	8003f22 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e04f      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
 8003e84:	40021000 	.word	0x40021000
 8003e88:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8c:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <HAL_RCC_OscConfig+0x820>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d144      	bne.n	8003f22 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e98:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <HAL_RCC_OscConfig+0x820>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a23      	ldr	r2, [pc, #140]	; (8003f2c <HAL_RCC_OscConfig+0x820>)
 8003e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ea4:	4b21      	ldr	r3, [pc, #132]	; (8003f2c <HAL_RCC_OscConfig+0x820>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4a20      	ldr	r2, [pc, #128]	; (8003f2c <HAL_RCC_OscConfig+0x820>)
 8003eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eb0:	f7ff f8b4 	bl	800301c <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7ff f8b0 	bl	800301c <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e02c      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eca:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <HAL_RCC_OscConfig+0x820>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x7ac>
 8003ed6:	e024      	b.n	8003f22 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b0c      	cmp	r3, #12
 8003edc:	d01f      	beq.n	8003f1e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ede:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <HAL_RCC_OscConfig+0x820>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a12      	ldr	r2, [pc, #72]	; (8003f2c <HAL_RCC_OscConfig+0x820>)
 8003ee4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eea:	f7ff f897 	bl	800301c <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef2:	f7ff f893 	bl	800301c <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e00f      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f04:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_RCC_OscConfig+0x820>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1f0      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_RCC_OscConfig+0x820>)
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	4905      	ldr	r1, [pc, #20]	; (8003f2c <HAL_RCC_OscConfig+0x820>)
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_RCC_OscConfig+0x824>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60cb      	str	r3, [r1, #12]
 8003f1c:	e001      	b.n	8003f22 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3720      	adds	r7, #32
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	feeefffc 	.word	0xfeeefffc

08003f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0e7      	b.n	8004118 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f48:	4b75      	ldr	r3, [pc, #468]	; (8004120 <HAL_RCC_ClockConfig+0x1ec>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d910      	bls.n	8003f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b72      	ldr	r3, [pc, #456]	; (8004120 <HAL_RCC_ClockConfig+0x1ec>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 0207 	bic.w	r2, r3, #7
 8003f5e:	4970      	ldr	r1, [pc, #448]	; (8004120 <HAL_RCC_ClockConfig+0x1ec>)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f66:	4b6e      	ldr	r3, [pc, #440]	; (8004120 <HAL_RCC_ClockConfig+0x1ec>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0cf      	b.n	8004118 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d010      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	4b66      	ldr	r3, [pc, #408]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d908      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f94:	4b63      	ldr	r3, [pc, #396]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	4960      	ldr	r1, [pc, #384]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d04c      	beq.n	800404c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fba:	4b5a      	ldr	r3, [pc, #360]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d121      	bne.n	800400a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0a6      	b.n	8004118 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d107      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fd2:	4b54      	ldr	r3, [pc, #336]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d115      	bne.n	800400a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e09a      	b.n	8004118 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d107      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fea:	4b4e      	ldr	r3, [pc, #312]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e08e      	b.n	8004118 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffa:	4b4a      	ldr	r3, [pc, #296]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e086      	b.n	8004118 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800400a:	4b46      	ldr	r3, [pc, #280]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f023 0203 	bic.w	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4943      	ldr	r1, [pc, #268]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8004018:	4313      	orrs	r3, r2
 800401a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401c:	f7fe fffe 	bl	800301c <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004022:	e00a      	b.n	800403a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004024:	f7fe fffa 	bl	800301c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e06e      	b.n	8004118 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	4b3a      	ldr	r3, [pc, #232]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 020c 	and.w	r2, r3, #12
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	429a      	cmp	r2, r3
 800404a:	d1eb      	bne.n	8004024 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d010      	beq.n	800407a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	4b31      	ldr	r3, [pc, #196]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004064:	429a      	cmp	r2, r3
 8004066:	d208      	bcs.n	800407a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004068:	4b2e      	ldr	r3, [pc, #184]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	492b      	ldr	r1, [pc, #172]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8004076:	4313      	orrs	r3, r2
 8004078:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800407a:	4b29      	ldr	r3, [pc, #164]	; (8004120 <HAL_RCC_ClockConfig+0x1ec>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d210      	bcs.n	80040aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <HAL_RCC_ClockConfig+0x1ec>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f023 0207 	bic.w	r2, r3, #7
 8004090:	4923      	ldr	r1, [pc, #140]	; (8004120 <HAL_RCC_ClockConfig+0x1ec>)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	4313      	orrs	r3, r2
 8004096:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004098:	4b21      	ldr	r3, [pc, #132]	; (8004120 <HAL_RCC_ClockConfig+0x1ec>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d001      	beq.n	80040aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e036      	b.n	8004118 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b6:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	4918      	ldr	r1, [pc, #96]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d009      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040d4:	4b13      	ldr	r3, [pc, #76]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4910      	ldr	r1, [pc, #64]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040e8:	f000 f824 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 80040ec:	4602      	mov	r2, r0
 80040ee:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	490b      	ldr	r1, [pc, #44]	; (8004128 <HAL_RCC_ClockConfig+0x1f4>)
 80040fa:	5ccb      	ldrb	r3, [r1, r3]
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
 8004104:	4a09      	ldr	r2, [pc, #36]	; (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8004106:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004108:	4b09      	ldr	r3, [pc, #36]	; (8004130 <HAL_RCC_ClockConfig+0x1fc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7fe ff35 	bl	8002f7c <HAL_InitTick>
 8004112:	4603      	mov	r3, r0
 8004114:	72fb      	strb	r3, [r7, #11]

  return status;
 8004116:	7afb      	ldrb	r3, [r7, #11]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40022000 	.word	0x40022000
 8004124:	40021000 	.word	0x40021000
 8004128:	08007408 	.word	0x08007408
 800412c:	20000000 	.word	0x20000000
 8004130:	20000104 	.word	0x20000104

08004134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004134:	b480      	push	{r7}
 8004136:	b089      	sub	sp, #36	; 0x24
 8004138:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	2300      	movs	r3, #0
 8004140:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004142:	4b3e      	ldr	r3, [pc, #248]	; (800423c <HAL_RCC_GetSysClockFreq+0x108>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800414c:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_RCC_GetSysClockFreq+0x108>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_GetSysClockFreq+0x34>
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b0c      	cmp	r3, #12
 8004160:	d121      	bne.n	80041a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d11e      	bne.n	80041a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004168:	4b34      	ldr	r3, [pc, #208]	; (800423c <HAL_RCC_GetSysClockFreq+0x108>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d107      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004174:	4b31      	ldr	r3, [pc, #196]	; (800423c <HAL_RCC_GetSysClockFreq+0x108>)
 8004176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	e005      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004184:	4b2d      	ldr	r3, [pc, #180]	; (800423c <HAL_RCC_GetSysClockFreq+0x108>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004190:	4a2b      	ldr	r2, [pc, #172]	; (8004240 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004198:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10d      	bne.n	80041bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041a4:	e00a      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d102      	bne.n	80041b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041ac:	4b25      	ldr	r3, [pc, #148]	; (8004244 <HAL_RCC_GetSysClockFreq+0x110>)
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	e004      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041b8:	4b23      	ldr	r3, [pc, #140]	; (8004248 <HAL_RCC_GetSysClockFreq+0x114>)
 80041ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b0c      	cmp	r3, #12
 80041c0:	d134      	bne.n	800422c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041c2:	4b1e      	ldr	r3, [pc, #120]	; (800423c <HAL_RCC_GetSysClockFreq+0x108>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d003      	beq.n	80041da <HAL_RCC_GetSysClockFreq+0xa6>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d003      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0xac>
 80041d8:	e005      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041da:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_RCC_GetSysClockFreq+0x110>)
 80041dc:	617b      	str	r3, [r7, #20]
      break;
 80041de:	e005      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041e0:	4b19      	ldr	r3, [pc, #100]	; (8004248 <HAL_RCC_GetSysClockFreq+0x114>)
 80041e2:	617b      	str	r3, [r7, #20]
      break;
 80041e4:	e002      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	617b      	str	r3, [r7, #20]
      break;
 80041ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041ec:	4b13      	ldr	r3, [pc, #76]	; (800423c <HAL_RCC_GetSysClockFreq+0x108>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	3301      	adds	r3, #1
 80041f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <HAL_RCC_GetSysClockFreq+0x108>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	0a1b      	lsrs	r3, r3, #8
 8004200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	fb03 f202 	mul.w	r2, r3, r2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <HAL_RCC_GetSysClockFreq+0x108>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	0e5b      	lsrs	r3, r3, #25
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	3301      	adds	r3, #1
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800422c:	69bb      	ldr	r3, [r7, #24]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3724      	adds	r7, #36	; 0x24
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
 8004240:	08007420 	.word	0x08007420
 8004244:	00f42400 	.word	0x00f42400
 8004248:	007a1200 	.word	0x007a1200

0800424c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004250:	4b03      	ldr	r3, [pc, #12]	; (8004260 <HAL_RCC_GetHCLKFreq+0x14>)
 8004252:	681b      	ldr	r3, [r3, #0]
}
 8004254:	4618      	mov	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000000 	.word	0x20000000

08004264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004268:	f7ff fff0 	bl	800424c <HAL_RCC_GetHCLKFreq>
 800426c:	4602      	mov	r2, r0
 800426e:	4b06      	ldr	r3, [pc, #24]	; (8004288 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	4904      	ldr	r1, [pc, #16]	; (800428c <HAL_RCC_GetPCLK1Freq+0x28>)
 800427a:	5ccb      	ldrb	r3, [r1, r3]
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004284:	4618      	mov	r0, r3
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40021000 	.word	0x40021000
 800428c:	08007418 	.word	0x08007418

08004290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004294:	f7ff ffda 	bl	800424c <HAL_RCC_GetHCLKFreq>
 8004298:	4602      	mov	r2, r0
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	0adb      	lsrs	r3, r3, #11
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	4904      	ldr	r1, [pc, #16]	; (80042b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042a6:	5ccb      	ldrb	r3, [r1, r3]
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000
 80042b8:	08007418 	.word	0x08007418

080042bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042c8:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042d4:	f7ff f9b6 	bl	8003644 <HAL_PWREx_GetVoltageRange>
 80042d8:	6178      	str	r0, [r7, #20]
 80042da:	e014      	b.n	8004306 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042dc:	4b25      	ldr	r3, [pc, #148]	; (8004374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e0:	4a24      	ldr	r2, [pc, #144]	; (8004374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e6:	6593      	str	r3, [r2, #88]	; 0x58
 80042e8:	4b22      	ldr	r3, [pc, #136]	; (8004374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042f4:	f7ff f9a6 	bl	8003644 <HAL_PWREx_GetVoltageRange>
 80042f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042fa:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fe:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004304:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800430c:	d10b      	bne.n	8004326 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b80      	cmp	r3, #128	; 0x80
 8004312:	d919      	bls.n	8004348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2ba0      	cmp	r3, #160	; 0xa0
 8004318:	d902      	bls.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800431a:	2302      	movs	r3, #2
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	e013      	b.n	8004348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004320:	2301      	movs	r3, #1
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	e010      	b.n	8004348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b80      	cmp	r3, #128	; 0x80
 800432a:	d902      	bls.n	8004332 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800432c:	2303      	movs	r3, #3
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	e00a      	b.n	8004348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b80      	cmp	r3, #128	; 0x80
 8004336:	d102      	bne.n	800433e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004338:	2302      	movs	r3, #2
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	e004      	b.n	8004348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b70      	cmp	r3, #112	; 0x70
 8004342:	d101      	bne.n	8004348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004344:	2301      	movs	r3, #1
 8004346:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f023 0207 	bic.w	r2, r3, #7
 8004350:	4909      	ldr	r1, [pc, #36]	; (8004378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004358:	4b07      	ldr	r3, [pc, #28]	; (8004378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	429a      	cmp	r2, r3
 8004364:	d001      	beq.n	800436a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40021000 	.word	0x40021000
 8004378:	40022000 	.word	0x40022000

0800437c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004384:	2300      	movs	r3, #0
 8004386:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004388:	2300      	movs	r3, #0
 800438a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004394:	2b00      	cmp	r3, #0
 8004396:	d031      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043a0:	d01a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80043a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043a6:	d814      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d009      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043b0:	d10f      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80043b2:	4b5d      	ldr	r3, [pc, #372]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	4a5c      	ldr	r2, [pc, #368]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043be:	e00c      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f9de 	bl	8004788 <RCCEx_PLLSAI1_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043d0:	e003      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	74fb      	strb	r3, [r7, #19]
      break;
 80043d6:	e000      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80043d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10b      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043e0:	4b51      	ldr	r3, [pc, #324]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	494e      	ldr	r1, [pc, #312]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043f6:	e001      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	7cfb      	ldrb	r3, [r7, #19]
 80043fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 809e 	beq.w	8004546 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440a:	2300      	movs	r3, #0
 800440c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800440e:	4b46      	ldr	r3, [pc, #280]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800441e:	2300      	movs	r3, #0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00d      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004424:	4b40      	ldr	r3, [pc, #256]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	4a3f      	ldr	r2, [pc, #252]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442e:	6593      	str	r3, [r2, #88]	; 0x58
 8004430:	4b3d      	ldr	r3, [pc, #244]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800443c:	2301      	movs	r3, #1
 800443e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004440:	4b3a      	ldr	r3, [pc, #232]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a39      	ldr	r2, [pc, #228]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800444c:	f7fe fde6 	bl	800301c <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004452:	e009      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004454:	f7fe fde2 	bl	800301c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d902      	bls.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	74fb      	strb	r3, [r7, #19]
        break;
 8004466:	e005      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004468:	4b30      	ldr	r3, [pc, #192]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0ef      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d15a      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800447a:	4b2b      	ldr	r3, [pc, #172]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004484:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01e      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	429a      	cmp	r2, r3
 8004494:	d019      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004496:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044a2:	4b21      	ldr	r3, [pc, #132]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a8:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044b2:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b8:	4a1b      	ldr	r2, [pc, #108]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044c2:	4a19      	ldr	r2, [pc, #100]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d016      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fe fda2 	bl	800301c <HAL_GetTick>
 80044d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044da:	e00b      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044dc:	f7fe fd9e 	bl	800301c <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d902      	bls.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	74fb      	strb	r3, [r7, #19]
            break;
 80044f2:	e006      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f4:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0ec      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004502:	7cfb      	ldrb	r3, [r7, #19]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10b      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004508:	4b07      	ldr	r3, [pc, #28]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004516:	4904      	ldr	r1, [pc, #16]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800451e:	e009      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	74bb      	strb	r3, [r7, #18]
 8004524:	e006      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004534:	7c7b      	ldrb	r3, [r7, #17]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d105      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800453a:	4b8a      	ldr	r3, [pc, #552]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800453c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453e:	4a89      	ldr	r2, [pc, #548]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004544:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004552:	4b84      	ldr	r3, [pc, #528]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004558:	f023 0203 	bic.w	r2, r3, #3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4980      	ldr	r1, [pc, #512]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004574:	4b7b      	ldr	r3, [pc, #492]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f023 020c 	bic.w	r2, r3, #12
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	4978      	ldr	r1, [pc, #480]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004596:	4b73      	ldr	r3, [pc, #460]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	496f      	ldr	r1, [pc, #444]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045b8:	4b6a      	ldr	r3, [pc, #424]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	4967      	ldr	r1, [pc, #412]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045da:	4b62      	ldr	r3, [pc, #392]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	495e      	ldr	r1, [pc, #376]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045fc:	4b59      	ldr	r3, [pc, #356]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	4956      	ldr	r1, [pc, #344]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800461e:	4b51      	ldr	r3, [pc, #324]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	494d      	ldr	r1, [pc, #308]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d028      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004640:	4b48      	ldr	r3, [pc, #288]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	4945      	ldr	r1, [pc, #276]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800465e:	d106      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004660:	4b40      	ldr	r3, [pc, #256]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a3f      	ldr	r2, [pc, #252]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800466a:	60d3      	str	r3, [r2, #12]
 800466c:	e011      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004676:	d10c      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3304      	adds	r3, #4
 800467c:	2101      	movs	r1, #1
 800467e:	4618      	mov	r0, r3
 8004680:	f000 f882 	bl	8004788 <RCCEx_PLLSAI1_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800468e:	7cfb      	ldrb	r3, [r7, #19]
 8004690:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d028      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800469e:	4b31      	ldr	r3, [pc, #196]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ac:	492d      	ldr	r1, [pc, #180]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046bc:	d106      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046be:	4b29      	ldr	r3, [pc, #164]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4a28      	ldr	r2, [pc, #160]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046c8:	60d3      	str	r3, [r2, #12]
 80046ca:	e011      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3304      	adds	r3, #4
 80046da:	2101      	movs	r1, #1
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 f853 	bl	8004788 <RCCEx_PLLSAI1_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046e6:	7cfb      	ldrb	r3, [r7, #19]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01c      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046fc:	4b19      	ldr	r3, [pc, #100]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470a:	4916      	ldr	r1, [pc, #88]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800471a:	d10c      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	2102      	movs	r1, #2
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f830 	bl	8004788 <RCCEx_PLLSAI1_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800472c:	7cfb      	ldrb	r3, [r7, #19]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004732:	7cfb      	ldrb	r3, [r7, #19]
 8004734:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004750:	4904      	ldr	r1, [pc, #16]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004758:	7cbb      	ldrb	r3, [r7, #18]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000

08004768 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a04      	ldr	r2, [pc, #16]	; (8004784 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004772:	f043 0304 	orr.w	r3, r3, #4
 8004776:	6013      	str	r3, [r2, #0]
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40021000 	.word	0x40021000

08004788 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004796:	4b74      	ldr	r3, [pc, #464]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d018      	beq.n	80047d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047a2:	4b71      	ldr	r3, [pc, #452]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0203 	and.w	r2, r3, #3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d10d      	bne.n	80047ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
       ||
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047ba:	4b6b      	ldr	r3, [pc, #428]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
       ||
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d047      	beq.n	800485e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	e044      	b.n	800485e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d018      	beq.n	800480e <RCCEx_PLLSAI1_Config+0x86>
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d825      	bhi.n	800482c <RCCEx_PLLSAI1_Config+0xa4>
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d002      	beq.n	80047ea <RCCEx_PLLSAI1_Config+0x62>
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d009      	beq.n	80047fc <RCCEx_PLLSAI1_Config+0x74>
 80047e8:	e020      	b.n	800482c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047ea:	4b5f      	ldr	r3, [pc, #380]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11d      	bne.n	8004832 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047fa:	e01a      	b.n	8004832 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047fc:	4b5a      	ldr	r3, [pc, #360]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	2b00      	cmp	r3, #0
 8004806:	d116      	bne.n	8004836 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800480c:	e013      	b.n	8004836 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800480e:	4b56      	ldr	r3, [pc, #344]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10f      	bne.n	800483a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800481a:	4b53      	ldr	r3, [pc, #332]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800482a:	e006      	b.n	800483a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
      break;
 8004830:	e004      	b.n	800483c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004832:	bf00      	nop
 8004834:	e002      	b.n	800483c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004836:	bf00      	nop
 8004838:	e000      	b.n	800483c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800483a:	bf00      	nop
    }

    if(status == HAL_OK)
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10d      	bne.n	800485e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004842:	4b49      	ldr	r3, [pc, #292]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6819      	ldr	r1, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	3b01      	subs	r3, #1
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	430b      	orrs	r3, r1
 8004858:	4943      	ldr	r1, [pc, #268]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 800485a:	4313      	orrs	r3, r2
 800485c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d17c      	bne.n	800495e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004864:	4b40      	ldr	r3, [pc, #256]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a3f      	ldr	r2, [pc, #252]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800486e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004870:	f7fe fbd4 	bl	800301c <HAL_GetTick>
 8004874:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004876:	e009      	b.n	800488c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004878:	f7fe fbd0 	bl	800301c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d902      	bls.n	800488c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	73fb      	strb	r3, [r7, #15]
        break;
 800488a:	e005      	b.n	8004898 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800488c:	4b36      	ldr	r3, [pc, #216]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1ef      	bne.n	8004878 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d15f      	bne.n	800495e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d110      	bne.n	80048c6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048a4:	4b30      	ldr	r3, [pc, #192]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80048ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6892      	ldr	r2, [r2, #8]
 80048b4:	0211      	lsls	r1, r2, #8
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68d2      	ldr	r2, [r2, #12]
 80048ba:	06d2      	lsls	r2, r2, #27
 80048bc:	430a      	orrs	r2, r1
 80048be:	492a      	ldr	r1, [pc, #168]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	610b      	str	r3, [r1, #16]
 80048c4:	e027      	b.n	8004916 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d112      	bne.n	80048f2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048cc:	4b26      	ldr	r3, [pc, #152]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6892      	ldr	r2, [r2, #8]
 80048dc:	0211      	lsls	r1, r2, #8
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6912      	ldr	r2, [r2, #16]
 80048e2:	0852      	lsrs	r2, r2, #1
 80048e4:	3a01      	subs	r2, #1
 80048e6:	0552      	lsls	r2, r2, #21
 80048e8:	430a      	orrs	r2, r1
 80048ea:	491f      	ldr	r1, [pc, #124]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	610b      	str	r3, [r1, #16]
 80048f0:	e011      	b.n	8004916 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048f2:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6892      	ldr	r2, [r2, #8]
 8004902:	0211      	lsls	r1, r2, #8
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6952      	ldr	r2, [r2, #20]
 8004908:	0852      	lsrs	r2, r2, #1
 800490a:	3a01      	subs	r2, #1
 800490c:	0652      	lsls	r2, r2, #25
 800490e:	430a      	orrs	r2, r1
 8004910:	4915      	ldr	r1, [pc, #84]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004912:	4313      	orrs	r3, r2
 8004914:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004916:	4b14      	ldr	r3, [pc, #80]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a13      	ldr	r2, [pc, #76]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 800491c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004920:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004922:	f7fe fb7b 	bl	800301c <HAL_GetTick>
 8004926:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004928:	e009      	b.n	800493e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800492a:	f7fe fb77 	bl	800301c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d902      	bls.n	800493e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	73fb      	strb	r3, [r7, #15]
          break;
 800493c:	e005      	b.n	800494a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0ef      	beq.n	800492a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	4903      	ldr	r1, [pc, #12]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e0>)
 800495a:	4313      	orrs	r3, r2
 800495c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800495e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40021000 	.word	0x40021000

0800496c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e095      	b.n	8004aaa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	d108      	bne.n	8004998 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800498e:	d009      	beq.n	80049a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	61da      	str	r2, [r3, #28]
 8004996:	e005      	b.n	80049a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fb ffbe 	bl	8000940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049e4:	d902      	bls.n	80049ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	e002      	b.n	80049f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049fa:	d007      	beq.n	8004a0c <HAL_SPI_Init+0xa0>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a04:	d002      	beq.n	8004a0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	ea42 0103 	orr.w	r1, r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	0c1b      	lsrs	r3, r3, #16
 8004a68:	f003 0204 	and.w	r2, r3, #4
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a88:	ea42 0103 	orr.w	r1, r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b088      	sub	sp, #32
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_SPI_Transmit+0x22>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e15f      	b.n	8004d94 <HAL_SPI_Transmit+0x2e2>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004adc:	f7fe fa9e 	bl	800301c <HAL_GetTick>
 8004ae0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d002      	beq.n	8004af8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004af2:	2302      	movs	r3, #2
 8004af4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004af6:	e148      	b.n	8004d8a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_SPI_Transmit+0x52>
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b08:	e13f      	b.n	8004d8a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	88fa      	ldrh	r2, [r7, #6]
 8004b22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b54:	d10f      	bne.n	8004b76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	d007      	beq.n	8004b94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b9c:	d94f      	bls.n	8004c3e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <HAL_SPI_Transmit+0xfa>
 8004ba6:	8afb      	ldrh	r3, [r7, #22]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d142      	bne.n	8004c32 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	881a      	ldrh	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	1c9a      	adds	r2, r3, #2
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bd0:	e02f      	b.n	8004c32 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d112      	bne.n	8004c06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	881a      	ldrh	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	1c9a      	adds	r2, r3, #2
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c04:	e015      	b.n	8004c32 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c06:	f7fe fa09 	bl	800301c <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d803      	bhi.n	8004c1e <HAL_SPI_Transmit+0x16c>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d102      	bne.n	8004c24 <HAL_SPI_Transmit+0x172>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004c30:	e0ab      	b.n	8004d8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1ca      	bne.n	8004bd2 <HAL_SPI_Transmit+0x120>
 8004c3c:	e080      	b.n	8004d40 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_SPI_Transmit+0x19a>
 8004c46:	8afb      	ldrh	r3, [r7, #22]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d174      	bne.n	8004d36 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d912      	bls.n	8004c7c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	881a      	ldrh	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	1c9a      	adds	r2, r3, #2
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b02      	subs	r3, #2
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c7a:	e05c      	b.n	8004d36 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	7812      	ldrb	r2, [r2, #0]
 8004c88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ca2:	e048      	b.n	8004d36 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d12b      	bne.n	8004d0a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d912      	bls.n	8004ce2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	881a      	ldrh	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	1c9a      	adds	r2, r3, #2
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b02      	subs	r3, #2
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ce0:	e029      	b.n	8004d36 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	330c      	adds	r3, #12
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d08:	e015      	b.n	8004d36 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d0a:	f7fe f987 	bl	800301c <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d803      	bhi.n	8004d22 <HAL_SPI_Transmit+0x270>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d20:	d102      	bne.n	8004d28 <HAL_SPI_Transmit+0x276>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004d34:	e029      	b.n	8004d8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1b1      	bne.n	8004ca4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	6839      	ldr	r1, [r7, #0]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 fe0d 	bl	8005964 <SPI_EndRxTxTransaction>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e003      	b.n	8004d8a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d92:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3720      	adds	r7, #32
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d002      	beq.n	8004dc2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dc0:	e11a      	b.n	8004ff8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dca:	d112      	bne.n	8004df2 <HAL_SPI_Receive+0x56>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10e      	bne.n	8004df2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2204      	movs	r2, #4
 8004dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ddc:	88fa      	ldrh	r2, [r7, #6]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	4613      	mov	r3, r2
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f90e 	bl	800500a <HAL_SPI_TransmitReceive>
 8004dee:	4603      	mov	r3, r0
 8004df0:	e107      	b.n	8005002 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_SPI_Receive+0x64>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e100      	b.n	8005002 <HAL_SPI_Receive+0x266>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e08:	f7fe f908 	bl	800301c <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <HAL_SPI_Receive+0x7e>
 8004e14:	88fb      	ldrh	r3, [r7, #6]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e1e:	e0eb      	b.n	8004ff8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2204      	movs	r2, #4
 8004e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	88fa      	ldrh	r2, [r7, #6]
 8004e38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	88fa      	ldrh	r2, [r7, #6]
 8004e40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e6a:	d908      	bls.n	8004e7e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e7a:	605a      	str	r2, [r3, #4]
 8004e7c:	e007      	b.n	8004e8e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e8c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e96:	d10f      	bne.n	8004eb8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004eb6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d007      	beq.n	8004ed6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ede:	d86f      	bhi.n	8004fc0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ee0:	e034      	b.n	8004f4c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d117      	bne.n	8004f20 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f103 020c 	add.w	r2, r3, #12
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	7812      	ldrb	r2, [r2, #0]
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004f1e:	e015      	b.n	8004f4c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f20:	f7fe f87c 	bl	800301c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d803      	bhi.n	8004f38 <HAL_SPI_Receive+0x19c>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f36:	d102      	bne.n	8004f3e <HAL_SPI_Receive+0x1a2>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004f4a:	e055      	b.n	8004ff8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1c4      	bne.n	8004ee2 <HAL_SPI_Receive+0x146>
 8004f58:	e038      	b.n	8004fcc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d115      	bne.n	8004f94 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	b292      	uxth	r2, r2
 8004f74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	1c9a      	adds	r2, r3, #2
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004f92:	e015      	b.n	8004fc0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f94:	f7fe f842 	bl	800301c <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d803      	bhi.n	8004fac <HAL_SPI_Receive+0x210>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d102      	bne.n	8004fb2 <HAL_SPI_Receive+0x216>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004fbe:	e01b      	b.n	8004ff8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1c6      	bne.n	8004f5a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 fc6f 	bl	80058b4 <SPI_EndRxTransaction>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	75fb      	strb	r3, [r7, #23]
 8004fee:	e003      	b.n	8004ff8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005000:	7dfb      	ldrb	r3, [r7, #23]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b08a      	sub	sp, #40	; 0x28
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	607a      	str	r2, [r7, #4]
 8005016:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005018:	2301      	movs	r3, #1
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_SPI_TransmitReceive+0x26>
 800502c:	2302      	movs	r3, #2
 800502e:	e20a      	b.n	8005446 <HAL_SPI_TransmitReceive+0x43c>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005038:	f7fd fff0 	bl	800301c <HAL_GetTick>
 800503c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005044:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800504c:	887b      	ldrh	r3, [r7, #2]
 800504e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005050:	887b      	ldrh	r3, [r7, #2]
 8005052:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005054:	7efb      	ldrb	r3, [r7, #27]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d00e      	beq.n	8005078 <HAL_SPI_TransmitReceive+0x6e>
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005060:	d106      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d102      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x66>
 800506a:	7efb      	ldrb	r3, [r7, #27]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d003      	beq.n	8005078 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005070:	2302      	movs	r3, #2
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005076:	e1e0      	b.n	800543a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <HAL_SPI_TransmitReceive+0x80>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_SPI_TransmitReceive+0x80>
 8005084:	887b      	ldrh	r3, [r7, #2]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005090:	e1d3      	b.n	800543a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b04      	cmp	r3, #4
 800509c:	d003      	beq.n	80050a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2205      	movs	r2, #5
 80050a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	887a      	ldrh	r2, [r7, #2]
 80050b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	887a      	ldrh	r2, [r7, #2]
 80050be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	887a      	ldrh	r2, [r7, #2]
 80050cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	887a      	ldrh	r2, [r7, #2]
 80050d2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050e8:	d802      	bhi.n	80050f0 <HAL_SPI_TransmitReceive+0xe6>
 80050ea:	8a3b      	ldrh	r3, [r7, #16]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d908      	bls.n	8005102 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050fe:	605a      	str	r2, [r3, #4]
 8005100:	e007      	b.n	8005112 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005110:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511c:	2b40      	cmp	r3, #64	; 0x40
 800511e:	d007      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800512e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005138:	f240 8081 	bls.w	800523e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <HAL_SPI_TransmitReceive+0x140>
 8005144:	8a7b      	ldrh	r3, [r7, #18]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d16d      	bne.n	8005226 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	881a      	ldrh	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	1c9a      	adds	r2, r3, #2
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800516e:	e05a      	b.n	8005226 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b02      	cmp	r3, #2
 800517c:	d11b      	bne.n	80051b6 <HAL_SPI_TransmitReceive+0x1ac>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d016      	beq.n	80051b6 <HAL_SPI_TransmitReceive+0x1ac>
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	2b01      	cmp	r3, #1
 800518c:	d113      	bne.n	80051b6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	881a      	ldrh	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	1c9a      	adds	r2, r3, #2
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d11c      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x1f4>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d016      	beq.n	80051fe <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	b292      	uxth	r2, r2
 80051dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	1c9a      	adds	r2, r3, #2
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051fa:	2301      	movs	r3, #1
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051fe:	f7fd ff0d 	bl	800301c <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520a:	429a      	cmp	r2, r3
 800520c:	d80b      	bhi.n	8005226 <HAL_SPI_TransmitReceive+0x21c>
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d007      	beq.n	8005226 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005224:	e109      	b.n	800543a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d19f      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x166>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d199      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x166>
 800523c:	e0e3      	b.n	8005406 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_SPI_TransmitReceive+0x244>
 8005246:	8a7b      	ldrh	r3, [r7, #18]
 8005248:	2b01      	cmp	r3, #1
 800524a:	f040 80cf 	bne.w	80053ec <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d912      	bls.n	800527e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	881a      	ldrh	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	1c9a      	adds	r2, r3, #2
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b02      	subs	r3, #2
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800527c:	e0b6      	b.n	80053ec <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	330c      	adds	r3, #12
 8005288:	7812      	ldrb	r2, [r2, #0]
 800528a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052a4:	e0a2      	b.n	80053ec <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d134      	bne.n	800531e <HAL_SPI_TransmitReceive+0x314>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d02f      	beq.n	800531e <HAL_SPI_TransmitReceive+0x314>
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d12c      	bne.n	800531e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d912      	bls.n	80052f4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	881a      	ldrh	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	1c9a      	adds	r2, r3, #2
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b02      	subs	r3, #2
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052f2:	e012      	b.n	800531a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	330c      	adds	r3, #12
 80052fe:	7812      	ldrb	r2, [r2, #0]
 8005300:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b01      	cmp	r3, #1
 800532a:	d148      	bne.n	80053be <HAL_SPI_TransmitReceive+0x3b4>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d042      	beq.n	80053be <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	d923      	bls.n	800538c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	b292      	uxth	r2, r2
 8005350:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	1c9a      	adds	r2, r3, #2
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b02      	subs	r3, #2
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b01      	cmp	r3, #1
 8005378:	d81f      	bhi.n	80053ba <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	e016      	b.n	80053ba <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f103 020c 	add.w	r2, r3, #12
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	7812      	ldrb	r2, [r2, #0]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053ba:	2301      	movs	r3, #1
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053be:	f7fd fe2d 	bl	800301c <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d803      	bhi.n	80053d6 <HAL_SPI_TransmitReceive+0x3cc>
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d4:	d102      	bne.n	80053dc <HAL_SPI_TransmitReceive+0x3d2>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d107      	bne.n	80053ec <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80053ea:	e026      	b.n	800543a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f47f af57 	bne.w	80052a6 <HAL_SPI_TransmitReceive+0x29c>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	f47f af50 	bne.w	80052a6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 faaa 	bl	8005964 <SPI_EndRxTxTransaction>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005430:	e003      	b.n	800543a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005446:	4618      	mov	r0, r3
 8005448:	3728      	adds	r7, #40	; 0x28
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10e      	bne.n	8005490 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005478:	2b00      	cmp	r3, #0
 800547a:	d009      	beq.n	8005490 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d004      	beq.n	8005490 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	4798      	blx	r3
    return;
 800548e:	e0ce      	b.n	800562e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <HAL_SPI_IRQHandler+0x5e>
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4798      	blx	r3
    return;
 80054ac:	e0bf      	b.n	800562e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <HAL_SPI_IRQHandler+0x7e>
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d105      	bne.n	80054ce <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80b0 	beq.w	800562e <HAL_SPI_IRQHandler+0x1de>
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 80aa 	beq.w	800562e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d023      	beq.n	800552c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d011      	beq.n	8005514 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f4:	f043 0204 	orr.w	r2, r3, #4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	e00b      	b.n	800552c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005514:	2300      	movs	r3, #0
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	613b      	str	r3, [r7, #16]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	693b      	ldr	r3, [r7, #16]
        return;
 800552a:	e080      	b.n	800562e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d014      	beq.n	8005560 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553a:	f043 0201 	orr.w	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00c      	beq.n	8005584 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556e:	f043 0208 	orr.w	r2, r3, #8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005588:	2b00      	cmp	r3, #0
 800558a:	d04f      	beq.n	800562c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800559a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d104      	bne.n	80055b8 <HAL_SPI_IRQHandler+0x168>
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d034      	beq.n	8005622 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0203 	bic.w	r2, r2, #3
 80055c6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d011      	beq.n	80055f4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	4a17      	ldr	r2, [pc, #92]	; (8005634 <HAL_SPI_IRQHandler+0x1e4>)
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fd fe5e 	bl	800329e <HAL_DMA_Abort_IT>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d016      	beq.n	800562a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005600:	4a0c      	ldr	r2, [pc, #48]	; (8005634 <HAL_SPI_IRQHandler+0x1e4>)
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005608:	4618      	mov	r0, r3
 800560a:	f7fd fe48 	bl	800329e <HAL_DMA_Abort_IT>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005618:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005620:	e003      	b.n	800562a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f808 	bl	8005638 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005628:	e000      	b.n	800562c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800562a:	bf00      	nop
    return;
 800562c:	bf00      	nop
  }
}
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	0800564d 	.word	0x0800564d

08005638 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005658:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff ffe5 	bl	8005638 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	4613      	mov	r3, r2
 8005686:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005688:	f7fd fcc8 	bl	800301c <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	4413      	add	r3, r2
 8005696:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005698:	f7fd fcc0 	bl	800301c <HAL_GetTick>
 800569c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800569e:	4b39      	ldr	r3, [pc, #228]	; (8005784 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	015b      	lsls	r3, r3, #5
 80056a4:	0d1b      	lsrs	r3, r3, #20
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	fb02 f303 	mul.w	r3, r2, r3
 80056ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ae:	e054      	b.n	800575a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d050      	beq.n	800575a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056b8:	f7fd fcb0 	bl	800301c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d902      	bls.n	80056ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d13d      	bne.n	800574a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056e6:	d111      	bne.n	800570c <SPI_WaitFlagStateUntilTimeout+0x94>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f0:	d004      	beq.n	80056fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056fa:	d107      	bne.n	800570c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800570a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005714:	d10f      	bne.n	8005736 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005734:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e017      	b.n	800577a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	3b01      	subs	r3, #1
 8005758:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4013      	ands	r3, r2
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	429a      	cmp	r2, r3
 8005768:	bf0c      	ite	eq
 800576a:	2301      	moveq	r3, #1
 800576c:	2300      	movne	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	429a      	cmp	r2, r3
 8005776:	d19b      	bne.n	80056b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000000 	.word	0x20000000

08005788 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08a      	sub	sp, #40	; 0x28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800579a:	f7fd fc3f 	bl	800301c <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a2:	1a9b      	subs	r3, r3, r2
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	4413      	add	r3, r2
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80057aa:	f7fd fc37 	bl	800301c <HAL_GetTick>
 80057ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	330c      	adds	r3, #12
 80057b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057b8:	4b3d      	ldr	r3, [pc, #244]	; (80058b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	00da      	lsls	r2, r3, #3
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	0d1b      	lsrs	r3, r3, #20
 80057c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80057d0:	e060      	b.n	8005894 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057d8:	d107      	bne.n	80057ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f0:	d050      	beq.n	8005894 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057f2:	f7fd fc13 	bl	800301c <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fe:	429a      	cmp	r2, r3
 8005800:	d902      	bls.n	8005808 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	2b00      	cmp	r3, #0
 8005806:	d13d      	bne.n	8005884 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005816:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005820:	d111      	bne.n	8005846 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800582a:	d004      	beq.n	8005836 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005834:	d107      	bne.n	8005846 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005844:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800584e:	d10f      	bne.n	8005870 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800586e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e010      	b.n	80058a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	3b01      	subs	r3, #1
 8005892:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	4013      	ands	r3, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d196      	bne.n	80057d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3728      	adds	r7, #40	; 0x28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000000 	.word	0x20000000

080058b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058c8:	d111      	bne.n	80058ee <SPI_EndRxTransaction+0x3a>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d2:	d004      	beq.n	80058de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058dc:	d107      	bne.n	80058ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2200      	movs	r2, #0
 80058f6:	2180      	movs	r1, #128	; 0x80
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7ff febd 	bl	8005678 <SPI_WaitFlagStateUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d007      	beq.n	8005914 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005908:	f043 0220 	orr.w	r2, r3, #32
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e023      	b.n	800595c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800591c:	d11d      	bne.n	800595a <SPI_EndRxTransaction+0xa6>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005926:	d004      	beq.n	8005932 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005930:	d113      	bne.n	800595a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2200      	movs	r2, #0
 800593a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7ff ff22 	bl	8005788 <SPI_WaitFifoStateUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d007      	beq.n	800595a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800594e:	f043 0220 	orr.w	r2, r3, #32
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e000      	b.n	800595c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2200      	movs	r2, #0
 8005978:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f7ff ff03 	bl	8005788 <SPI_WaitFifoStateUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d007      	beq.n	8005998 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598c:	f043 0220 	orr.w	r2, r3, #32
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e027      	b.n	80059e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2200      	movs	r2, #0
 80059a0:	2180      	movs	r1, #128	; 0x80
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f7ff fe68 	bl	8005678 <SPI_WaitFlagStateUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b2:	f043 0220 	orr.w	r2, r3, #32
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e014      	b.n	80059e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f7ff fedc 	bl	8005788 <SPI_WaitFifoStateUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d007      	beq.n	80059e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059da:	f043 0220 	orr.w	r2, r3, #32
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e000      	b.n	80059e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e03c      	b.n	8005a7c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fa fffa 	bl	8000a10 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0201 	bic.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f9e9 	bl	8005e0c <USART_SetConfig>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e01b      	b.n	8005a7c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a52:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a62:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 faf7 	bl	8006068 <USART_CheckIdleState>
 8005a7a:	4603      	mov	r3, r0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	617b      	str	r3, [r7, #20]
  /* If no error occurs */
#if defined(USART_CR2_SLVEN)
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
                                      USART_ISR_UDR));
#else
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005aaa:	4013      	ands	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]
#endif /* USART_CR2_SLVEN */
  if (errorflags == 0U)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d113      	bne.n	8005adc <HAL_USART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00e      	beq.n	8005adc <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <HAL_USART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (husart->RxISR != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 810d 	beq.w	8005cec <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	4798      	blx	r3
      }
      return;
 8005ada:	e107      	b.n	8005cec <HAL_USART_IRQHandler+0x268>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
#else
  if ((errorflags != 0U)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80e3 	beq.w	8005caa <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d105      	bne.n	8005afa <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 80d8 	beq.w	8005caa <HAL_USART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00e      	beq.n	8005b22 <HAL_USART_IRQHandler+0x9e>
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d009      	beq.n	8005b22 <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2201      	movs	r2, #1
 8005b14:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1a:	f043 0201 	orr.w	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00e      	beq.n	8005b4a <HAL_USART_IRQHandler+0xc6>
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d009      	beq.n	8005b4a <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b42:	f043 0204 	orr.w	r2, r3, #4
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00e      	beq.n	8005b72 <HAL_USART_IRQHandler+0xee>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d009      	beq.n	8005b72 <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2204      	movs	r2, #4
 8005b64:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b6a:	f043 0202 	orr.w	r2, r3, #2
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	64da      	str	r2, [r3, #76]	; 0x4c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d013      	beq.n	8005ba4 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d104      	bne.n	8005b90 <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d009      	beq.n	8005ba4 <HAL_USART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2208      	movs	r2, #8
 8005b96:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b9c:	f043 0208 	orr.w	r2, r3, #8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00f      	beq.n	8005bce <HAL_USART_IRQHandler+0x14a>
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00a      	beq.n	8005bce <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bc0:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
#endif /* USART_CR2_SLVEN */

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 808c 	beq.w	8005cf0 <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <HAL_USART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (husart->RxISR != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d002      	beq.n	8005c1a <HAL_USART_IRQHandler+0x196>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d03e      	beq.n	8005c98 <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f88e 	bl	8005d3c <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b40      	cmp	r3, #64	; 0x40
 8005c2c:	d130      	bne.n	8005c90 <HAL_USART_IRQHandler+0x20c>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c3c:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d008      	beq.n	8005c58 <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fd fb23 	bl	800329e <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d013      	beq.n	8005c88 <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c64:	4a25      	ldr	r2, [pc, #148]	; (8005cfc <HAL_USART_IRQHandler+0x278>)
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fd fb16 	bl	800329e <HAL_DMA_Abort_IT>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d016      	beq.n	8005ca6 <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c82:	4610      	mov	r0, r2
 8005c84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005c86:	e00e      	b.n	8005ca6 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f84d 	bl	8005d28 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005c8e:	e00a      	b.n	8005ca6 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f849 	bl	8005d28 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005c96:	e006      	b.n	8005ca6 <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f845 	bl	8005d28 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    return;
 8005ca4:	e024      	b.n	8005cf0 <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005ca6:	bf00      	nop
    return;
 8005ca8:	e022      	b.n	8005cf0 <HAL_USART_IRQHandler+0x26c>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00d      	beq.n	8005cd0 <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d008      	beq.n	8005cd0 <HAL_USART_IRQHandler+0x24c>
#endif /* USART_CR1_FIFOEN */
  {
    if (husart->TxISR != NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d016      	beq.n	8005cf4 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	4798      	blx	r3
    }
    return;
 8005cce:	e011      	b.n	8005cf4 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00d      	beq.n	8005cf6 <HAL_USART_IRQHandler+0x272>
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d008      	beq.n	8005cf6 <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fa02 	bl	80060ee <USART_EndTransmit_IT>
    return;
 8005cea:	e004      	b.n	8005cf6 <HAL_USART_IRQHandler+0x272>
      return;
 8005cec:	bf00      	nop
 8005cee:	e002      	b.n	8005cf6 <HAL_USART_IRQHandler+0x272>
    return;
 8005cf0:	bf00      	nop
 8005cf2:	e000      	b.n	8005cf6 <HAL_USART_IRQHandler+0x272>
    return;
 8005cf4:	bf00      	nop
    HAL_USARTEx_RxFifoFullCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005cf6:	3720      	adds	r7, #32
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	08005d79 	.word	0x08005d79

08005d00 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005d52:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0201 	bic.w	r2, r2, #1
 8005d62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f7ff ffc8 	bl	8005d28 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8005d98:	bf00      	nop
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005db0:	e018      	b.n	8005de4 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d014      	beq.n	8005de4 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dba:	f7fd f92f 	bl	800301c <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d302      	bcc.n	8005dd0 <USART_WaitOnFlagUntilTimeout+0x30>
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d109      	bne.n	8005de4 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e00f      	b.n	8005e04 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69da      	ldr	r2, [r3, #28]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4013      	ands	r3, r2
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	bf0c      	ite	eq
 8005df4:	2301      	moveq	r3, #1
 8005df6:	2300      	movne	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d0d7      	beq.n	8005db2 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	431a      	orrs	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	4b87      	ldr	r3, [pc, #540]	; (8006058 <USART_SetConfig+0x24c>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	6979      	ldr	r1, [r7, #20]
 8005e42:	430b      	orrs	r3, r1
 8005e44:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8005e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e4a:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a74      	ldr	r2, [pc, #464]	; (800605c <USART_SetConfig+0x250>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d121      	bne.n	8005ed2 <USART_SetConfig+0xc6>
 8005e8e:	4b74      	ldr	r3, [pc, #464]	; (8006060 <USART_SetConfig+0x254>)
 8005e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e94:	f003 0303 	and.w	r3, r3, #3
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d817      	bhi.n	8005ecc <USART_SetConfig+0xc0>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <USART_SetConfig+0x98>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005eb5 	.word	0x08005eb5
 8005ea8:	08005ec1 	.word	0x08005ec1
 8005eac:	08005ebb 	.word	0x08005ebb
 8005eb0:	08005ec7 	.word	0x08005ec7
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e045      	b.n	8005f46 <USART_SetConfig+0x13a>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	77fb      	strb	r3, [r7, #31]
 8005ebe:	e042      	b.n	8005f46 <USART_SetConfig+0x13a>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e03f      	b.n	8005f46 <USART_SetConfig+0x13a>
 8005ec6:	2308      	movs	r3, #8
 8005ec8:	77fb      	strb	r3, [r7, #31]
 8005eca:	e03c      	b.n	8005f46 <USART_SetConfig+0x13a>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	e039      	b.n	8005f46 <USART_SetConfig+0x13a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a63      	ldr	r2, [pc, #396]	; (8006064 <USART_SetConfig+0x258>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d132      	bne.n	8005f42 <USART_SetConfig+0x136>
 8005edc:	4b60      	ldr	r3, [pc, #384]	; (8006060 <USART_SetConfig+0x254>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee2:	f003 030c 	and.w	r3, r3, #12
 8005ee6:	2b0c      	cmp	r3, #12
 8005ee8:	d828      	bhi.n	8005f3c <USART_SetConfig+0x130>
 8005eea:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <USART_SetConfig+0xe4>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f25 	.word	0x08005f25
 8005ef4:	08005f3d 	.word	0x08005f3d
 8005ef8:	08005f3d 	.word	0x08005f3d
 8005efc:	08005f3d 	.word	0x08005f3d
 8005f00:	08005f31 	.word	0x08005f31
 8005f04:	08005f3d 	.word	0x08005f3d
 8005f08:	08005f3d 	.word	0x08005f3d
 8005f0c:	08005f3d 	.word	0x08005f3d
 8005f10:	08005f2b 	.word	0x08005f2b
 8005f14:	08005f3d 	.word	0x08005f3d
 8005f18:	08005f3d 	.word	0x08005f3d
 8005f1c:	08005f3d 	.word	0x08005f3d
 8005f20:	08005f37 	.word	0x08005f37
 8005f24:	2300      	movs	r3, #0
 8005f26:	77fb      	strb	r3, [r7, #31]
 8005f28:	e00d      	b.n	8005f46 <USART_SetConfig+0x13a>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	77fb      	strb	r3, [r7, #31]
 8005f2e:	e00a      	b.n	8005f46 <USART_SetConfig+0x13a>
 8005f30:	2304      	movs	r3, #4
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e007      	b.n	8005f46 <USART_SetConfig+0x13a>
 8005f36:	2308      	movs	r3, #8
 8005f38:	77fb      	strb	r3, [r7, #31]
 8005f3a:	e004      	b.n	8005f46 <USART_SetConfig+0x13a>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	77fb      	strb	r3, [r7, #31]
 8005f40:	e001      	b.n	8005f46 <USART_SetConfig+0x13a>
 8005f42:	2310      	movs	r3, #16
 8005f44:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8005f46:	7ffb      	ldrb	r3, [r7, #31]
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d85a      	bhi.n	8006002 <USART_SetConfig+0x1f6>
 8005f4c:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <USART_SetConfig+0x148>)
 8005f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f52:	bf00      	nop
 8005f54:	08005f79 	.word	0x08005f79
 8005f58:	08005f97 	.word	0x08005f97
 8005f5c:	08005fb5 	.word	0x08005fb5
 8005f60:	08006003 	.word	0x08006003
 8005f64:	08005fcf 	.word	0x08005fcf
 8005f68:	08006003 	.word	0x08006003
 8005f6c:	08006003 	.word	0x08006003
 8005f70:	08006003 	.word	0x08006003
 8005f74:	08005fed 	.word	0x08005fed
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f78:	f7fe f974 	bl	8004264 <HAL_RCC_GetPCLK1Freq>
 8005f7c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	005a      	lsls	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	441a      	add	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005f94:	e038      	b.n	8006008 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f96:	f7fe f97b 	bl	8004290 <HAL_RCC_GetPCLK2Freq>
 8005f9a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	005a      	lsls	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	441a      	add	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005fb2:	e029      	b.n	8006008 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	085b      	lsrs	r3, r3, #1
 8005fba:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005fbe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6852      	ldr	r2, [r2, #4]
 8005fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005fcc:	e01c      	b.n	8006008 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005fce:	f7fe f8b1 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 8005fd2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	005a      	lsls	r2, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	085b      	lsrs	r3, r3, #1
 8005fde:	441a      	add	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005fea:	e00d      	b.n	8006008 <USART_SetConfig+0x1fc>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8006000:	e002      	b.n	8006008 <USART_SetConfig+0x1fc>
    default:
      ret = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	77bb      	strb	r3, [r7, #30]
      break;
 8006006:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	2b0f      	cmp	r3, #15
 800600c:	d916      	bls.n	800603c <USART_SetConfig+0x230>
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006014:	d212      	bcs.n	800603c <USART_SetConfig+0x230>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f023 030f 	bic.w	r3, r3, #15
 800601e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	085b      	lsrs	r3, r3, #1
 8006024:	b29b      	uxth	r3, r3
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	b29a      	uxth	r2, r3
 800602c:	89fb      	ldrh	r3, [r7, #14]
 800602e:	4313      	orrs	r3, r2
 8006030:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	89fa      	ldrh	r2, [r7, #14]
 8006038:	60da      	str	r2, [r3, #12]
 800603a:	e001      	b.n	8006040 <USART_SetConfig+0x234>
  }
  else
  {
    ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 800604c:	7fbb      	ldrb	r3, [r7, #30]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	efff69f3 	.word	0xefff69f3
 800605c:	40013800 	.word	0x40013800
 8006060:	40021000 	.word	0x40021000
 8006064:	40004400 	.word	0x40004400

08006068 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af02      	add	r7, sp, #8
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006076:	f7fc ffd1 	bl	800301c <HAL_GetTick>
 800607a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b08      	cmp	r3, #8
 8006088:	d10e      	bne.n	80060a8 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800608a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff fe81 	bl	8005da0 <USART_WaitOnFlagUntilTimeout>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e01e      	b.n	80060e6 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d10e      	bne.n	80060d4 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80060b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff fe6b 	bl	8005da0 <USART_WaitOnFlagUntilTimeout>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e008      	b.n	80060e6 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006104:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	63da      	str	r2, [r3, #60]	; 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b12      	cmp	r3, #18
 8006126:	d115      	bne.n	8006154 <USART_EndTransmit_IT+0x66>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2208      	movs	r2, #8
 800612e:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	8b1b      	ldrh	r3, [r3, #24]
 8006136:	b29a      	uxth	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0208 	orr.w	r2, r2, #8
 8006140:	b292      	uxth	r2, r2
 8006142:	831a      	strh	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff fdd7 	bl	8005d00 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006152:	e00b      	b.n	800616c <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    HAL_USART_TxRxCpltCallback(husart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff fdd4 	bl	8005d14 <HAL_USART_TxRxCpltCallback>
}
 800616c:	bf00      	nop
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <__assert_func>:
 8006174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006176:	4614      	mov	r4, r2
 8006178:	461a      	mov	r2, r3
 800617a:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <__assert_func+0x2c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4605      	mov	r5, r0
 8006180:	68d8      	ldr	r0, [r3, #12]
 8006182:	b14c      	cbz	r4, 8006198 <__assert_func+0x24>
 8006184:	4b07      	ldr	r3, [pc, #28]	; (80061a4 <__assert_func+0x30>)
 8006186:	9100      	str	r1, [sp, #0]
 8006188:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800618c:	4906      	ldr	r1, [pc, #24]	; (80061a8 <__assert_func+0x34>)
 800618e:	462b      	mov	r3, r5
 8006190:	f000 f8b2 	bl	80062f8 <fiprintf>
 8006194:	f000 f9cf 	bl	8006536 <abort>
 8006198:	4b04      	ldr	r3, [pc, #16]	; (80061ac <__assert_func+0x38>)
 800619a:	461c      	mov	r4, r3
 800619c:	e7f3      	b.n	8006186 <__assert_func+0x12>
 800619e:	bf00      	nop
 80061a0:	20000164 	.word	0x20000164
 80061a4:	080074b7 	.word	0x080074b7
 80061a8:	080074c4 	.word	0x080074c4
 80061ac:	080074f2 	.word	0x080074f2

080061b0 <std>:
 80061b0:	2300      	movs	r3, #0
 80061b2:	b510      	push	{r4, lr}
 80061b4:	4604      	mov	r4, r0
 80061b6:	e9c0 3300 	strd	r3, r3, [r0]
 80061ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061be:	6083      	str	r3, [r0, #8]
 80061c0:	8181      	strh	r1, [r0, #12]
 80061c2:	6643      	str	r3, [r0, #100]	; 0x64
 80061c4:	81c2      	strh	r2, [r0, #14]
 80061c6:	6183      	str	r3, [r0, #24]
 80061c8:	4619      	mov	r1, r3
 80061ca:	2208      	movs	r2, #8
 80061cc:	305c      	adds	r0, #92	; 0x5c
 80061ce:	f000 f928 	bl	8006422 <memset>
 80061d2:	4b0d      	ldr	r3, [pc, #52]	; (8006208 <std+0x58>)
 80061d4:	6263      	str	r3, [r4, #36]	; 0x24
 80061d6:	4b0d      	ldr	r3, [pc, #52]	; (800620c <std+0x5c>)
 80061d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80061da:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <std+0x60>)
 80061dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061de:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <std+0x64>)
 80061e0:	6323      	str	r3, [r4, #48]	; 0x30
 80061e2:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <std+0x68>)
 80061e4:	6224      	str	r4, [r4, #32]
 80061e6:	429c      	cmp	r4, r3
 80061e8:	d006      	beq.n	80061f8 <std+0x48>
 80061ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80061ee:	4294      	cmp	r4, r2
 80061f0:	d002      	beq.n	80061f8 <std+0x48>
 80061f2:	33d0      	adds	r3, #208	; 0xd0
 80061f4:	429c      	cmp	r4, r3
 80061f6:	d105      	bne.n	8006204 <std+0x54>
 80061f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006200:	f000 b988 	b.w	8006514 <__retarget_lock_init_recursive>
 8006204:	bd10      	pop	{r4, pc}
 8006206:	bf00      	nop
 8006208:	0800637d 	.word	0x0800637d
 800620c:	0800639f 	.word	0x0800639f
 8006210:	080063d7 	.word	0x080063d7
 8006214:	080063fb 	.word	0x080063fb
 8006218:	20000250 	.word	0x20000250

0800621c <stdio_exit_handler>:
 800621c:	4a02      	ldr	r2, [pc, #8]	; (8006228 <stdio_exit_handler+0xc>)
 800621e:	4903      	ldr	r1, [pc, #12]	; (800622c <stdio_exit_handler+0x10>)
 8006220:	4803      	ldr	r0, [pc, #12]	; (8006230 <stdio_exit_handler+0x14>)
 8006222:	f000 b87b 	b.w	800631c <_fwalk_sglue>
 8006226:	bf00      	nop
 8006228:	2000010c 	.word	0x2000010c
 800622c:	08006de9 	.word	0x08006de9
 8006230:	20000118 	.word	0x20000118

08006234 <cleanup_stdio>:
 8006234:	6841      	ldr	r1, [r0, #4]
 8006236:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <cleanup_stdio+0x34>)
 8006238:	4299      	cmp	r1, r3
 800623a:	b510      	push	{r4, lr}
 800623c:	4604      	mov	r4, r0
 800623e:	d001      	beq.n	8006244 <cleanup_stdio+0x10>
 8006240:	f000 fdd2 	bl	8006de8 <_fflush_r>
 8006244:	68a1      	ldr	r1, [r4, #8]
 8006246:	4b09      	ldr	r3, [pc, #36]	; (800626c <cleanup_stdio+0x38>)
 8006248:	4299      	cmp	r1, r3
 800624a:	d002      	beq.n	8006252 <cleanup_stdio+0x1e>
 800624c:	4620      	mov	r0, r4
 800624e:	f000 fdcb 	bl	8006de8 <_fflush_r>
 8006252:	68e1      	ldr	r1, [r4, #12]
 8006254:	4b06      	ldr	r3, [pc, #24]	; (8006270 <cleanup_stdio+0x3c>)
 8006256:	4299      	cmp	r1, r3
 8006258:	d004      	beq.n	8006264 <cleanup_stdio+0x30>
 800625a:	4620      	mov	r0, r4
 800625c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006260:	f000 bdc2 	b.w	8006de8 <_fflush_r>
 8006264:	bd10      	pop	{r4, pc}
 8006266:	bf00      	nop
 8006268:	20000250 	.word	0x20000250
 800626c:	200002b8 	.word	0x200002b8
 8006270:	20000320 	.word	0x20000320

08006274 <global_stdio_init.part.0>:
 8006274:	b510      	push	{r4, lr}
 8006276:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <global_stdio_init.part.0+0x30>)
 8006278:	4c0b      	ldr	r4, [pc, #44]	; (80062a8 <global_stdio_init.part.0+0x34>)
 800627a:	4a0c      	ldr	r2, [pc, #48]	; (80062ac <global_stdio_init.part.0+0x38>)
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	4620      	mov	r0, r4
 8006280:	2200      	movs	r2, #0
 8006282:	2104      	movs	r1, #4
 8006284:	f7ff ff94 	bl	80061b0 <std>
 8006288:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800628c:	2201      	movs	r2, #1
 800628e:	2109      	movs	r1, #9
 8006290:	f7ff ff8e 	bl	80061b0 <std>
 8006294:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006298:	2202      	movs	r2, #2
 800629a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800629e:	2112      	movs	r1, #18
 80062a0:	f7ff bf86 	b.w	80061b0 <std>
 80062a4:	20000388 	.word	0x20000388
 80062a8:	20000250 	.word	0x20000250
 80062ac:	0800621d 	.word	0x0800621d

080062b0 <__sfp_lock_acquire>:
 80062b0:	4801      	ldr	r0, [pc, #4]	; (80062b8 <__sfp_lock_acquire+0x8>)
 80062b2:	f000 b930 	b.w	8006516 <__retarget_lock_acquire_recursive>
 80062b6:	bf00      	nop
 80062b8:	20000391 	.word	0x20000391

080062bc <__sfp_lock_release>:
 80062bc:	4801      	ldr	r0, [pc, #4]	; (80062c4 <__sfp_lock_release+0x8>)
 80062be:	f000 b92b 	b.w	8006518 <__retarget_lock_release_recursive>
 80062c2:	bf00      	nop
 80062c4:	20000391 	.word	0x20000391

080062c8 <__sinit>:
 80062c8:	b510      	push	{r4, lr}
 80062ca:	4604      	mov	r4, r0
 80062cc:	f7ff fff0 	bl	80062b0 <__sfp_lock_acquire>
 80062d0:	6a23      	ldr	r3, [r4, #32]
 80062d2:	b11b      	cbz	r3, 80062dc <__sinit+0x14>
 80062d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d8:	f7ff bff0 	b.w	80062bc <__sfp_lock_release>
 80062dc:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <__sinit+0x28>)
 80062de:	6223      	str	r3, [r4, #32]
 80062e0:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <__sinit+0x2c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1f5      	bne.n	80062d4 <__sinit+0xc>
 80062e8:	f7ff ffc4 	bl	8006274 <global_stdio_init.part.0>
 80062ec:	e7f2      	b.n	80062d4 <__sinit+0xc>
 80062ee:	bf00      	nop
 80062f0:	08006235 	.word	0x08006235
 80062f4:	20000388 	.word	0x20000388

080062f8 <fiprintf>:
 80062f8:	b40e      	push	{r1, r2, r3}
 80062fa:	b503      	push	{r0, r1, lr}
 80062fc:	4601      	mov	r1, r0
 80062fe:	ab03      	add	r3, sp, #12
 8006300:	4805      	ldr	r0, [pc, #20]	; (8006318 <fiprintf+0x20>)
 8006302:	f853 2b04 	ldr.w	r2, [r3], #4
 8006306:	6800      	ldr	r0, [r0, #0]
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	f000 fa3d 	bl	8006788 <_vfiprintf_r>
 800630e:	b002      	add	sp, #8
 8006310:	f85d eb04 	ldr.w	lr, [sp], #4
 8006314:	b003      	add	sp, #12
 8006316:	4770      	bx	lr
 8006318:	20000164 	.word	0x20000164

0800631c <_fwalk_sglue>:
 800631c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006320:	4607      	mov	r7, r0
 8006322:	4688      	mov	r8, r1
 8006324:	4614      	mov	r4, r2
 8006326:	2600      	movs	r6, #0
 8006328:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800632c:	f1b9 0901 	subs.w	r9, r9, #1
 8006330:	d505      	bpl.n	800633e <_fwalk_sglue+0x22>
 8006332:	6824      	ldr	r4, [r4, #0]
 8006334:	2c00      	cmp	r4, #0
 8006336:	d1f7      	bne.n	8006328 <_fwalk_sglue+0xc>
 8006338:	4630      	mov	r0, r6
 800633a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800633e:	89ab      	ldrh	r3, [r5, #12]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d907      	bls.n	8006354 <_fwalk_sglue+0x38>
 8006344:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006348:	3301      	adds	r3, #1
 800634a:	d003      	beq.n	8006354 <_fwalk_sglue+0x38>
 800634c:	4629      	mov	r1, r5
 800634e:	4638      	mov	r0, r7
 8006350:	47c0      	blx	r8
 8006352:	4306      	orrs	r6, r0
 8006354:	3568      	adds	r5, #104	; 0x68
 8006356:	e7e9      	b.n	800632c <_fwalk_sglue+0x10>

08006358 <iprintf>:
 8006358:	b40f      	push	{r0, r1, r2, r3}
 800635a:	b507      	push	{r0, r1, r2, lr}
 800635c:	4906      	ldr	r1, [pc, #24]	; (8006378 <iprintf+0x20>)
 800635e:	ab04      	add	r3, sp, #16
 8006360:	6808      	ldr	r0, [r1, #0]
 8006362:	f853 2b04 	ldr.w	r2, [r3], #4
 8006366:	6881      	ldr	r1, [r0, #8]
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	f000 fa0d 	bl	8006788 <_vfiprintf_r>
 800636e:	b003      	add	sp, #12
 8006370:	f85d eb04 	ldr.w	lr, [sp], #4
 8006374:	b004      	add	sp, #16
 8006376:	4770      	bx	lr
 8006378:	20000164 	.word	0x20000164

0800637c <__sread>:
 800637c:	b510      	push	{r4, lr}
 800637e:	460c      	mov	r4, r1
 8006380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006384:	f000 f878 	bl	8006478 <_read_r>
 8006388:	2800      	cmp	r0, #0
 800638a:	bfab      	itete	ge
 800638c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800638e:	89a3      	ldrhlt	r3, [r4, #12]
 8006390:	181b      	addge	r3, r3, r0
 8006392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006396:	bfac      	ite	ge
 8006398:	6563      	strge	r3, [r4, #84]	; 0x54
 800639a:	81a3      	strhlt	r3, [r4, #12]
 800639c:	bd10      	pop	{r4, pc}

0800639e <__swrite>:
 800639e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a2:	461f      	mov	r7, r3
 80063a4:	898b      	ldrh	r3, [r1, #12]
 80063a6:	05db      	lsls	r3, r3, #23
 80063a8:	4605      	mov	r5, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	4616      	mov	r6, r2
 80063ae:	d505      	bpl.n	80063bc <__swrite+0x1e>
 80063b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b4:	2302      	movs	r3, #2
 80063b6:	2200      	movs	r2, #0
 80063b8:	f000 f84c 	bl	8006454 <_lseek_r>
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063c6:	81a3      	strh	r3, [r4, #12]
 80063c8:	4632      	mov	r2, r6
 80063ca:	463b      	mov	r3, r7
 80063cc:	4628      	mov	r0, r5
 80063ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063d2:	f000 b863 	b.w	800649c <_write_r>

080063d6 <__sseek>:
 80063d6:	b510      	push	{r4, lr}
 80063d8:	460c      	mov	r4, r1
 80063da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063de:	f000 f839 	bl	8006454 <_lseek_r>
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	bf15      	itete	ne
 80063e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80063ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063f2:	81a3      	strheq	r3, [r4, #12]
 80063f4:	bf18      	it	ne
 80063f6:	81a3      	strhne	r3, [r4, #12]
 80063f8:	bd10      	pop	{r4, pc}

080063fa <__sclose>:
 80063fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fe:	f000 b819 	b.w	8006434 <_close_r>

08006402 <memcmp>:
 8006402:	b510      	push	{r4, lr}
 8006404:	3901      	subs	r1, #1
 8006406:	4402      	add	r2, r0
 8006408:	4290      	cmp	r0, r2
 800640a:	d101      	bne.n	8006410 <memcmp+0xe>
 800640c:	2000      	movs	r0, #0
 800640e:	e005      	b.n	800641c <memcmp+0x1a>
 8006410:	7803      	ldrb	r3, [r0, #0]
 8006412:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006416:	42a3      	cmp	r3, r4
 8006418:	d001      	beq.n	800641e <memcmp+0x1c>
 800641a:	1b18      	subs	r0, r3, r4
 800641c:	bd10      	pop	{r4, pc}
 800641e:	3001      	adds	r0, #1
 8006420:	e7f2      	b.n	8006408 <memcmp+0x6>

08006422 <memset>:
 8006422:	4402      	add	r2, r0
 8006424:	4603      	mov	r3, r0
 8006426:	4293      	cmp	r3, r2
 8006428:	d100      	bne.n	800642c <memset+0xa>
 800642a:	4770      	bx	lr
 800642c:	f803 1b01 	strb.w	r1, [r3], #1
 8006430:	e7f9      	b.n	8006426 <memset+0x4>
	...

08006434 <_close_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4d06      	ldr	r5, [pc, #24]	; (8006450 <_close_r+0x1c>)
 8006438:	2300      	movs	r3, #0
 800643a:	4604      	mov	r4, r0
 800643c:	4608      	mov	r0, r1
 800643e:	602b      	str	r3, [r5, #0]
 8006440:	f7fa fbf1 	bl	8000c26 <_close>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d102      	bne.n	800644e <_close_r+0x1a>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	b103      	cbz	r3, 800644e <_close_r+0x1a>
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	bd38      	pop	{r3, r4, r5, pc}
 8006450:	2000038c 	.word	0x2000038c

08006454 <_lseek_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d07      	ldr	r5, [pc, #28]	; (8006474 <_lseek_r+0x20>)
 8006458:	4604      	mov	r4, r0
 800645a:	4608      	mov	r0, r1
 800645c:	4611      	mov	r1, r2
 800645e:	2200      	movs	r2, #0
 8006460:	602a      	str	r2, [r5, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	f7fa fc06 	bl	8000c74 <_lseek>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_lseek_r+0x1e>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b103      	cbz	r3, 8006472 <_lseek_r+0x1e>
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	2000038c 	.word	0x2000038c

08006478 <_read_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4d07      	ldr	r5, [pc, #28]	; (8006498 <_read_r+0x20>)
 800647c:	4604      	mov	r4, r0
 800647e:	4608      	mov	r0, r1
 8006480:	4611      	mov	r1, r2
 8006482:	2200      	movs	r2, #0
 8006484:	602a      	str	r2, [r5, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	f7fa fb94 	bl	8000bb4 <_read>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_read_r+0x1e>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b103      	cbz	r3, 8006496 <_read_r+0x1e>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	2000038c 	.word	0x2000038c

0800649c <_write_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d07      	ldr	r5, [pc, #28]	; (80064bc <_write_r+0x20>)
 80064a0:	4604      	mov	r4, r0
 80064a2:	4608      	mov	r0, r1
 80064a4:	4611      	mov	r1, r2
 80064a6:	2200      	movs	r2, #0
 80064a8:	602a      	str	r2, [r5, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f7fa fb9f 	bl	8000bee <_write>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_write_r+0x1e>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_write_r+0x1e>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	2000038c 	.word	0x2000038c

080064c0 <__errno>:
 80064c0:	4b01      	ldr	r3, [pc, #4]	; (80064c8 <__errno+0x8>)
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	20000164 	.word	0x20000164

080064cc <__libc_init_array>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	4d0d      	ldr	r5, [pc, #52]	; (8006504 <__libc_init_array+0x38>)
 80064d0:	4c0d      	ldr	r4, [pc, #52]	; (8006508 <__libc_init_array+0x3c>)
 80064d2:	1b64      	subs	r4, r4, r5
 80064d4:	10a4      	asrs	r4, r4, #2
 80064d6:	2600      	movs	r6, #0
 80064d8:	42a6      	cmp	r6, r4
 80064da:	d109      	bne.n	80064f0 <__libc_init_array+0x24>
 80064dc:	4d0b      	ldr	r5, [pc, #44]	; (800650c <__libc_init_array+0x40>)
 80064de:	4c0c      	ldr	r4, [pc, #48]	; (8006510 <__libc_init_array+0x44>)
 80064e0:	f000 fe18 	bl	8007114 <_init>
 80064e4:	1b64      	subs	r4, r4, r5
 80064e6:	10a4      	asrs	r4, r4, #2
 80064e8:	2600      	movs	r6, #0
 80064ea:	42a6      	cmp	r6, r4
 80064ec:	d105      	bne.n	80064fa <__libc_init_array+0x2e>
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f4:	4798      	blx	r3
 80064f6:	3601      	adds	r6, #1
 80064f8:	e7ee      	b.n	80064d8 <__libc_init_array+0xc>
 80064fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80064fe:	4798      	blx	r3
 8006500:	3601      	adds	r6, #1
 8006502:	e7f2      	b.n	80064ea <__libc_init_array+0x1e>
 8006504:	08007530 	.word	0x08007530
 8006508:	08007530 	.word	0x08007530
 800650c:	08007530 	.word	0x08007530
 8006510:	08007534 	.word	0x08007534

08006514 <__retarget_lock_init_recursive>:
 8006514:	4770      	bx	lr

08006516 <__retarget_lock_acquire_recursive>:
 8006516:	4770      	bx	lr

08006518 <__retarget_lock_release_recursive>:
 8006518:	4770      	bx	lr

0800651a <memcpy>:
 800651a:	440a      	add	r2, r1
 800651c:	4291      	cmp	r1, r2
 800651e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006522:	d100      	bne.n	8006526 <memcpy+0xc>
 8006524:	4770      	bx	lr
 8006526:	b510      	push	{r4, lr}
 8006528:	f811 4b01 	ldrb.w	r4, [r1], #1
 800652c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006530:	4291      	cmp	r1, r2
 8006532:	d1f9      	bne.n	8006528 <memcpy+0xe>
 8006534:	bd10      	pop	{r4, pc}

08006536 <abort>:
 8006536:	b508      	push	{r3, lr}
 8006538:	2006      	movs	r0, #6
 800653a:	f000 fd3b 	bl	8006fb4 <raise>
 800653e:	2001      	movs	r0, #1
 8006540:	f7fa fb2e 	bl	8000ba0 <_exit>

08006544 <_free_r>:
 8006544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006546:	2900      	cmp	r1, #0
 8006548:	d044      	beq.n	80065d4 <_free_r+0x90>
 800654a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800654e:	9001      	str	r0, [sp, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f1a1 0404 	sub.w	r4, r1, #4
 8006556:	bfb8      	it	lt
 8006558:	18e4      	addlt	r4, r4, r3
 800655a:	f000 f8df 	bl	800671c <__malloc_lock>
 800655e:	4a1e      	ldr	r2, [pc, #120]	; (80065d8 <_free_r+0x94>)
 8006560:	9801      	ldr	r0, [sp, #4]
 8006562:	6813      	ldr	r3, [r2, #0]
 8006564:	b933      	cbnz	r3, 8006574 <_free_r+0x30>
 8006566:	6063      	str	r3, [r4, #4]
 8006568:	6014      	str	r4, [r2, #0]
 800656a:	b003      	add	sp, #12
 800656c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006570:	f000 b8da 	b.w	8006728 <__malloc_unlock>
 8006574:	42a3      	cmp	r3, r4
 8006576:	d908      	bls.n	800658a <_free_r+0x46>
 8006578:	6825      	ldr	r5, [r4, #0]
 800657a:	1961      	adds	r1, r4, r5
 800657c:	428b      	cmp	r3, r1
 800657e:	bf01      	itttt	eq
 8006580:	6819      	ldreq	r1, [r3, #0]
 8006582:	685b      	ldreq	r3, [r3, #4]
 8006584:	1949      	addeq	r1, r1, r5
 8006586:	6021      	streq	r1, [r4, #0]
 8006588:	e7ed      	b.n	8006566 <_free_r+0x22>
 800658a:	461a      	mov	r2, r3
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	b10b      	cbz	r3, 8006594 <_free_r+0x50>
 8006590:	42a3      	cmp	r3, r4
 8006592:	d9fa      	bls.n	800658a <_free_r+0x46>
 8006594:	6811      	ldr	r1, [r2, #0]
 8006596:	1855      	adds	r5, r2, r1
 8006598:	42a5      	cmp	r5, r4
 800659a:	d10b      	bne.n	80065b4 <_free_r+0x70>
 800659c:	6824      	ldr	r4, [r4, #0]
 800659e:	4421      	add	r1, r4
 80065a0:	1854      	adds	r4, r2, r1
 80065a2:	42a3      	cmp	r3, r4
 80065a4:	6011      	str	r1, [r2, #0]
 80065a6:	d1e0      	bne.n	800656a <_free_r+0x26>
 80065a8:	681c      	ldr	r4, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	6053      	str	r3, [r2, #4]
 80065ae:	440c      	add	r4, r1
 80065b0:	6014      	str	r4, [r2, #0]
 80065b2:	e7da      	b.n	800656a <_free_r+0x26>
 80065b4:	d902      	bls.n	80065bc <_free_r+0x78>
 80065b6:	230c      	movs	r3, #12
 80065b8:	6003      	str	r3, [r0, #0]
 80065ba:	e7d6      	b.n	800656a <_free_r+0x26>
 80065bc:	6825      	ldr	r5, [r4, #0]
 80065be:	1961      	adds	r1, r4, r5
 80065c0:	428b      	cmp	r3, r1
 80065c2:	bf04      	itt	eq
 80065c4:	6819      	ldreq	r1, [r3, #0]
 80065c6:	685b      	ldreq	r3, [r3, #4]
 80065c8:	6063      	str	r3, [r4, #4]
 80065ca:	bf04      	itt	eq
 80065cc:	1949      	addeq	r1, r1, r5
 80065ce:	6021      	streq	r1, [r4, #0]
 80065d0:	6054      	str	r4, [r2, #4]
 80065d2:	e7ca      	b.n	800656a <_free_r+0x26>
 80065d4:	b003      	add	sp, #12
 80065d6:	bd30      	pop	{r4, r5, pc}
 80065d8:	20000394 	.word	0x20000394

080065dc <sbrk_aligned>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	4e0e      	ldr	r6, [pc, #56]	; (8006618 <sbrk_aligned+0x3c>)
 80065e0:	460c      	mov	r4, r1
 80065e2:	6831      	ldr	r1, [r6, #0]
 80065e4:	4605      	mov	r5, r0
 80065e6:	b911      	cbnz	r1, 80065ee <sbrk_aligned+0x12>
 80065e8:	f000 fd00 	bl	8006fec <_sbrk_r>
 80065ec:	6030      	str	r0, [r6, #0]
 80065ee:	4621      	mov	r1, r4
 80065f0:	4628      	mov	r0, r5
 80065f2:	f000 fcfb 	bl	8006fec <_sbrk_r>
 80065f6:	1c43      	adds	r3, r0, #1
 80065f8:	d00a      	beq.n	8006610 <sbrk_aligned+0x34>
 80065fa:	1cc4      	adds	r4, r0, #3
 80065fc:	f024 0403 	bic.w	r4, r4, #3
 8006600:	42a0      	cmp	r0, r4
 8006602:	d007      	beq.n	8006614 <sbrk_aligned+0x38>
 8006604:	1a21      	subs	r1, r4, r0
 8006606:	4628      	mov	r0, r5
 8006608:	f000 fcf0 	bl	8006fec <_sbrk_r>
 800660c:	3001      	adds	r0, #1
 800660e:	d101      	bne.n	8006614 <sbrk_aligned+0x38>
 8006610:	f04f 34ff 	mov.w	r4, #4294967295
 8006614:	4620      	mov	r0, r4
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	20000398 	.word	0x20000398

0800661c <_malloc_r>:
 800661c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006620:	1ccd      	adds	r5, r1, #3
 8006622:	f025 0503 	bic.w	r5, r5, #3
 8006626:	3508      	adds	r5, #8
 8006628:	2d0c      	cmp	r5, #12
 800662a:	bf38      	it	cc
 800662c:	250c      	movcc	r5, #12
 800662e:	2d00      	cmp	r5, #0
 8006630:	4607      	mov	r7, r0
 8006632:	db01      	blt.n	8006638 <_malloc_r+0x1c>
 8006634:	42a9      	cmp	r1, r5
 8006636:	d905      	bls.n	8006644 <_malloc_r+0x28>
 8006638:	230c      	movs	r3, #12
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	2600      	movs	r6, #0
 800663e:	4630      	mov	r0, r6
 8006640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006644:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006718 <_malloc_r+0xfc>
 8006648:	f000 f868 	bl	800671c <__malloc_lock>
 800664c:	f8d8 3000 	ldr.w	r3, [r8]
 8006650:	461c      	mov	r4, r3
 8006652:	bb5c      	cbnz	r4, 80066ac <_malloc_r+0x90>
 8006654:	4629      	mov	r1, r5
 8006656:	4638      	mov	r0, r7
 8006658:	f7ff ffc0 	bl	80065dc <sbrk_aligned>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	4604      	mov	r4, r0
 8006660:	d155      	bne.n	800670e <_malloc_r+0xf2>
 8006662:	f8d8 4000 	ldr.w	r4, [r8]
 8006666:	4626      	mov	r6, r4
 8006668:	2e00      	cmp	r6, #0
 800666a:	d145      	bne.n	80066f8 <_malloc_r+0xdc>
 800666c:	2c00      	cmp	r4, #0
 800666e:	d048      	beq.n	8006702 <_malloc_r+0xe6>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	4631      	mov	r1, r6
 8006674:	4638      	mov	r0, r7
 8006676:	eb04 0903 	add.w	r9, r4, r3
 800667a:	f000 fcb7 	bl	8006fec <_sbrk_r>
 800667e:	4581      	cmp	r9, r0
 8006680:	d13f      	bne.n	8006702 <_malloc_r+0xe6>
 8006682:	6821      	ldr	r1, [r4, #0]
 8006684:	1a6d      	subs	r5, r5, r1
 8006686:	4629      	mov	r1, r5
 8006688:	4638      	mov	r0, r7
 800668a:	f7ff ffa7 	bl	80065dc <sbrk_aligned>
 800668e:	3001      	adds	r0, #1
 8006690:	d037      	beq.n	8006702 <_malloc_r+0xe6>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	442b      	add	r3, r5
 8006696:	6023      	str	r3, [r4, #0]
 8006698:	f8d8 3000 	ldr.w	r3, [r8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d038      	beq.n	8006712 <_malloc_r+0xf6>
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	42a2      	cmp	r2, r4
 80066a4:	d12b      	bne.n	80066fe <_malloc_r+0xe2>
 80066a6:	2200      	movs	r2, #0
 80066a8:	605a      	str	r2, [r3, #4]
 80066aa:	e00f      	b.n	80066cc <_malloc_r+0xb0>
 80066ac:	6822      	ldr	r2, [r4, #0]
 80066ae:	1b52      	subs	r2, r2, r5
 80066b0:	d41f      	bmi.n	80066f2 <_malloc_r+0xd6>
 80066b2:	2a0b      	cmp	r2, #11
 80066b4:	d917      	bls.n	80066e6 <_malloc_r+0xca>
 80066b6:	1961      	adds	r1, r4, r5
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	6025      	str	r5, [r4, #0]
 80066bc:	bf18      	it	ne
 80066be:	6059      	strne	r1, [r3, #4]
 80066c0:	6863      	ldr	r3, [r4, #4]
 80066c2:	bf08      	it	eq
 80066c4:	f8c8 1000 	streq.w	r1, [r8]
 80066c8:	5162      	str	r2, [r4, r5]
 80066ca:	604b      	str	r3, [r1, #4]
 80066cc:	4638      	mov	r0, r7
 80066ce:	f104 060b 	add.w	r6, r4, #11
 80066d2:	f000 f829 	bl	8006728 <__malloc_unlock>
 80066d6:	f026 0607 	bic.w	r6, r6, #7
 80066da:	1d23      	adds	r3, r4, #4
 80066dc:	1af2      	subs	r2, r6, r3
 80066de:	d0ae      	beq.n	800663e <_malloc_r+0x22>
 80066e0:	1b9b      	subs	r3, r3, r6
 80066e2:	50a3      	str	r3, [r4, r2]
 80066e4:	e7ab      	b.n	800663e <_malloc_r+0x22>
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	6862      	ldr	r2, [r4, #4]
 80066ea:	d1dd      	bne.n	80066a8 <_malloc_r+0x8c>
 80066ec:	f8c8 2000 	str.w	r2, [r8]
 80066f0:	e7ec      	b.n	80066cc <_malloc_r+0xb0>
 80066f2:	4623      	mov	r3, r4
 80066f4:	6864      	ldr	r4, [r4, #4]
 80066f6:	e7ac      	b.n	8006652 <_malloc_r+0x36>
 80066f8:	4634      	mov	r4, r6
 80066fa:	6876      	ldr	r6, [r6, #4]
 80066fc:	e7b4      	b.n	8006668 <_malloc_r+0x4c>
 80066fe:	4613      	mov	r3, r2
 8006700:	e7cc      	b.n	800669c <_malloc_r+0x80>
 8006702:	230c      	movs	r3, #12
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	4638      	mov	r0, r7
 8006708:	f000 f80e 	bl	8006728 <__malloc_unlock>
 800670c:	e797      	b.n	800663e <_malloc_r+0x22>
 800670e:	6025      	str	r5, [r4, #0]
 8006710:	e7dc      	b.n	80066cc <_malloc_r+0xb0>
 8006712:	605b      	str	r3, [r3, #4]
 8006714:	deff      	udf	#255	; 0xff
 8006716:	bf00      	nop
 8006718:	20000394 	.word	0x20000394

0800671c <__malloc_lock>:
 800671c:	4801      	ldr	r0, [pc, #4]	; (8006724 <__malloc_lock+0x8>)
 800671e:	f7ff befa 	b.w	8006516 <__retarget_lock_acquire_recursive>
 8006722:	bf00      	nop
 8006724:	20000390 	.word	0x20000390

08006728 <__malloc_unlock>:
 8006728:	4801      	ldr	r0, [pc, #4]	; (8006730 <__malloc_unlock+0x8>)
 800672a:	f7ff bef5 	b.w	8006518 <__retarget_lock_release_recursive>
 800672e:	bf00      	nop
 8006730:	20000390 	.word	0x20000390

08006734 <__sfputc_r>:
 8006734:	6893      	ldr	r3, [r2, #8]
 8006736:	3b01      	subs	r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	b410      	push	{r4}
 800673c:	6093      	str	r3, [r2, #8]
 800673e:	da08      	bge.n	8006752 <__sfputc_r+0x1e>
 8006740:	6994      	ldr	r4, [r2, #24]
 8006742:	42a3      	cmp	r3, r4
 8006744:	db01      	blt.n	800674a <__sfputc_r+0x16>
 8006746:	290a      	cmp	r1, #10
 8006748:	d103      	bne.n	8006752 <__sfputc_r+0x1e>
 800674a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800674e:	f000 bb73 	b.w	8006e38 <__swbuf_r>
 8006752:	6813      	ldr	r3, [r2, #0]
 8006754:	1c58      	adds	r0, r3, #1
 8006756:	6010      	str	r0, [r2, #0]
 8006758:	7019      	strb	r1, [r3, #0]
 800675a:	4608      	mov	r0, r1
 800675c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006760:	4770      	bx	lr

08006762 <__sfputs_r>:
 8006762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006764:	4606      	mov	r6, r0
 8006766:	460f      	mov	r7, r1
 8006768:	4614      	mov	r4, r2
 800676a:	18d5      	adds	r5, r2, r3
 800676c:	42ac      	cmp	r4, r5
 800676e:	d101      	bne.n	8006774 <__sfputs_r+0x12>
 8006770:	2000      	movs	r0, #0
 8006772:	e007      	b.n	8006784 <__sfputs_r+0x22>
 8006774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006778:	463a      	mov	r2, r7
 800677a:	4630      	mov	r0, r6
 800677c:	f7ff ffda 	bl	8006734 <__sfputc_r>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d1f3      	bne.n	800676c <__sfputs_r+0xa>
 8006784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006788 <_vfiprintf_r>:
 8006788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	460d      	mov	r5, r1
 800678e:	b09d      	sub	sp, #116	; 0x74
 8006790:	4614      	mov	r4, r2
 8006792:	4698      	mov	r8, r3
 8006794:	4606      	mov	r6, r0
 8006796:	b118      	cbz	r0, 80067a0 <_vfiprintf_r+0x18>
 8006798:	6a03      	ldr	r3, [r0, #32]
 800679a:	b90b      	cbnz	r3, 80067a0 <_vfiprintf_r+0x18>
 800679c:	f7ff fd94 	bl	80062c8 <__sinit>
 80067a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067a2:	07d9      	lsls	r1, r3, #31
 80067a4:	d405      	bmi.n	80067b2 <_vfiprintf_r+0x2a>
 80067a6:	89ab      	ldrh	r3, [r5, #12]
 80067a8:	059a      	lsls	r2, r3, #22
 80067aa:	d402      	bmi.n	80067b2 <_vfiprintf_r+0x2a>
 80067ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ae:	f7ff feb2 	bl	8006516 <__retarget_lock_acquire_recursive>
 80067b2:	89ab      	ldrh	r3, [r5, #12]
 80067b4:	071b      	lsls	r3, r3, #28
 80067b6:	d501      	bpl.n	80067bc <_vfiprintf_r+0x34>
 80067b8:	692b      	ldr	r3, [r5, #16]
 80067ba:	b99b      	cbnz	r3, 80067e4 <_vfiprintf_r+0x5c>
 80067bc:	4629      	mov	r1, r5
 80067be:	4630      	mov	r0, r6
 80067c0:	f000 fb78 	bl	8006eb4 <__swsetup_r>
 80067c4:	b170      	cbz	r0, 80067e4 <_vfiprintf_r+0x5c>
 80067c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067c8:	07dc      	lsls	r4, r3, #31
 80067ca:	d504      	bpl.n	80067d6 <_vfiprintf_r+0x4e>
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295
 80067d0:	b01d      	add	sp, #116	; 0x74
 80067d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d6:	89ab      	ldrh	r3, [r5, #12]
 80067d8:	0598      	lsls	r0, r3, #22
 80067da:	d4f7      	bmi.n	80067cc <_vfiprintf_r+0x44>
 80067dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067de:	f7ff fe9b 	bl	8006518 <__retarget_lock_release_recursive>
 80067e2:	e7f3      	b.n	80067cc <_vfiprintf_r+0x44>
 80067e4:	2300      	movs	r3, #0
 80067e6:	9309      	str	r3, [sp, #36]	; 0x24
 80067e8:	2320      	movs	r3, #32
 80067ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80067f2:	2330      	movs	r3, #48	; 0x30
 80067f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80069a8 <_vfiprintf_r+0x220>
 80067f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067fc:	f04f 0901 	mov.w	r9, #1
 8006800:	4623      	mov	r3, r4
 8006802:	469a      	mov	sl, r3
 8006804:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006808:	b10a      	cbz	r2, 800680e <_vfiprintf_r+0x86>
 800680a:	2a25      	cmp	r2, #37	; 0x25
 800680c:	d1f9      	bne.n	8006802 <_vfiprintf_r+0x7a>
 800680e:	ebba 0b04 	subs.w	fp, sl, r4
 8006812:	d00b      	beq.n	800682c <_vfiprintf_r+0xa4>
 8006814:	465b      	mov	r3, fp
 8006816:	4622      	mov	r2, r4
 8006818:	4629      	mov	r1, r5
 800681a:	4630      	mov	r0, r6
 800681c:	f7ff ffa1 	bl	8006762 <__sfputs_r>
 8006820:	3001      	adds	r0, #1
 8006822:	f000 80a9 	beq.w	8006978 <_vfiprintf_r+0x1f0>
 8006826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006828:	445a      	add	r2, fp
 800682a:	9209      	str	r2, [sp, #36]	; 0x24
 800682c:	f89a 3000 	ldrb.w	r3, [sl]
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 80a1 	beq.w	8006978 <_vfiprintf_r+0x1f0>
 8006836:	2300      	movs	r3, #0
 8006838:	f04f 32ff 	mov.w	r2, #4294967295
 800683c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006840:	f10a 0a01 	add.w	sl, sl, #1
 8006844:	9304      	str	r3, [sp, #16]
 8006846:	9307      	str	r3, [sp, #28]
 8006848:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800684c:	931a      	str	r3, [sp, #104]	; 0x68
 800684e:	4654      	mov	r4, sl
 8006850:	2205      	movs	r2, #5
 8006852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006856:	4854      	ldr	r0, [pc, #336]	; (80069a8 <_vfiprintf_r+0x220>)
 8006858:	f7f9 fcba 	bl	80001d0 <memchr>
 800685c:	9a04      	ldr	r2, [sp, #16]
 800685e:	b9d8      	cbnz	r0, 8006898 <_vfiprintf_r+0x110>
 8006860:	06d1      	lsls	r1, r2, #27
 8006862:	bf44      	itt	mi
 8006864:	2320      	movmi	r3, #32
 8006866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800686a:	0713      	lsls	r3, r2, #28
 800686c:	bf44      	itt	mi
 800686e:	232b      	movmi	r3, #43	; 0x2b
 8006870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006874:	f89a 3000 	ldrb.w	r3, [sl]
 8006878:	2b2a      	cmp	r3, #42	; 0x2a
 800687a:	d015      	beq.n	80068a8 <_vfiprintf_r+0x120>
 800687c:	9a07      	ldr	r2, [sp, #28]
 800687e:	4654      	mov	r4, sl
 8006880:	2000      	movs	r0, #0
 8006882:	f04f 0c0a 	mov.w	ip, #10
 8006886:	4621      	mov	r1, r4
 8006888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800688c:	3b30      	subs	r3, #48	; 0x30
 800688e:	2b09      	cmp	r3, #9
 8006890:	d94d      	bls.n	800692e <_vfiprintf_r+0x1a6>
 8006892:	b1b0      	cbz	r0, 80068c2 <_vfiprintf_r+0x13a>
 8006894:	9207      	str	r2, [sp, #28]
 8006896:	e014      	b.n	80068c2 <_vfiprintf_r+0x13a>
 8006898:	eba0 0308 	sub.w	r3, r0, r8
 800689c:	fa09 f303 	lsl.w	r3, r9, r3
 80068a0:	4313      	orrs	r3, r2
 80068a2:	9304      	str	r3, [sp, #16]
 80068a4:	46a2      	mov	sl, r4
 80068a6:	e7d2      	b.n	800684e <_vfiprintf_r+0xc6>
 80068a8:	9b03      	ldr	r3, [sp, #12]
 80068aa:	1d19      	adds	r1, r3, #4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	9103      	str	r1, [sp, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	bfbb      	ittet	lt
 80068b4:	425b      	neglt	r3, r3
 80068b6:	f042 0202 	orrlt.w	r2, r2, #2
 80068ba:	9307      	strge	r3, [sp, #28]
 80068bc:	9307      	strlt	r3, [sp, #28]
 80068be:	bfb8      	it	lt
 80068c0:	9204      	strlt	r2, [sp, #16]
 80068c2:	7823      	ldrb	r3, [r4, #0]
 80068c4:	2b2e      	cmp	r3, #46	; 0x2e
 80068c6:	d10c      	bne.n	80068e2 <_vfiprintf_r+0x15a>
 80068c8:	7863      	ldrb	r3, [r4, #1]
 80068ca:	2b2a      	cmp	r3, #42	; 0x2a
 80068cc:	d134      	bne.n	8006938 <_vfiprintf_r+0x1b0>
 80068ce:	9b03      	ldr	r3, [sp, #12]
 80068d0:	1d1a      	adds	r2, r3, #4
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	9203      	str	r2, [sp, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bfb8      	it	lt
 80068da:	f04f 33ff 	movlt.w	r3, #4294967295
 80068de:	3402      	adds	r4, #2
 80068e0:	9305      	str	r3, [sp, #20]
 80068e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80069b8 <_vfiprintf_r+0x230>
 80068e6:	7821      	ldrb	r1, [r4, #0]
 80068e8:	2203      	movs	r2, #3
 80068ea:	4650      	mov	r0, sl
 80068ec:	f7f9 fc70 	bl	80001d0 <memchr>
 80068f0:	b138      	cbz	r0, 8006902 <_vfiprintf_r+0x17a>
 80068f2:	9b04      	ldr	r3, [sp, #16]
 80068f4:	eba0 000a 	sub.w	r0, r0, sl
 80068f8:	2240      	movs	r2, #64	; 0x40
 80068fa:	4082      	lsls	r2, r0
 80068fc:	4313      	orrs	r3, r2
 80068fe:	3401      	adds	r4, #1
 8006900:	9304      	str	r3, [sp, #16]
 8006902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006906:	4829      	ldr	r0, [pc, #164]	; (80069ac <_vfiprintf_r+0x224>)
 8006908:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800690c:	2206      	movs	r2, #6
 800690e:	f7f9 fc5f 	bl	80001d0 <memchr>
 8006912:	2800      	cmp	r0, #0
 8006914:	d03f      	beq.n	8006996 <_vfiprintf_r+0x20e>
 8006916:	4b26      	ldr	r3, [pc, #152]	; (80069b0 <_vfiprintf_r+0x228>)
 8006918:	bb1b      	cbnz	r3, 8006962 <_vfiprintf_r+0x1da>
 800691a:	9b03      	ldr	r3, [sp, #12]
 800691c:	3307      	adds	r3, #7
 800691e:	f023 0307 	bic.w	r3, r3, #7
 8006922:	3308      	adds	r3, #8
 8006924:	9303      	str	r3, [sp, #12]
 8006926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006928:	443b      	add	r3, r7
 800692a:	9309      	str	r3, [sp, #36]	; 0x24
 800692c:	e768      	b.n	8006800 <_vfiprintf_r+0x78>
 800692e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006932:	460c      	mov	r4, r1
 8006934:	2001      	movs	r0, #1
 8006936:	e7a6      	b.n	8006886 <_vfiprintf_r+0xfe>
 8006938:	2300      	movs	r3, #0
 800693a:	3401      	adds	r4, #1
 800693c:	9305      	str	r3, [sp, #20]
 800693e:	4619      	mov	r1, r3
 8006940:	f04f 0c0a 	mov.w	ip, #10
 8006944:	4620      	mov	r0, r4
 8006946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800694a:	3a30      	subs	r2, #48	; 0x30
 800694c:	2a09      	cmp	r2, #9
 800694e:	d903      	bls.n	8006958 <_vfiprintf_r+0x1d0>
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0c6      	beq.n	80068e2 <_vfiprintf_r+0x15a>
 8006954:	9105      	str	r1, [sp, #20]
 8006956:	e7c4      	b.n	80068e2 <_vfiprintf_r+0x15a>
 8006958:	fb0c 2101 	mla	r1, ip, r1, r2
 800695c:	4604      	mov	r4, r0
 800695e:	2301      	movs	r3, #1
 8006960:	e7f0      	b.n	8006944 <_vfiprintf_r+0x1bc>
 8006962:	ab03      	add	r3, sp, #12
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	462a      	mov	r2, r5
 8006968:	4b12      	ldr	r3, [pc, #72]	; (80069b4 <_vfiprintf_r+0x22c>)
 800696a:	a904      	add	r1, sp, #16
 800696c:	4630      	mov	r0, r6
 800696e:	f3af 8000 	nop.w
 8006972:	4607      	mov	r7, r0
 8006974:	1c78      	adds	r0, r7, #1
 8006976:	d1d6      	bne.n	8006926 <_vfiprintf_r+0x19e>
 8006978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800697a:	07d9      	lsls	r1, r3, #31
 800697c:	d405      	bmi.n	800698a <_vfiprintf_r+0x202>
 800697e:	89ab      	ldrh	r3, [r5, #12]
 8006980:	059a      	lsls	r2, r3, #22
 8006982:	d402      	bmi.n	800698a <_vfiprintf_r+0x202>
 8006984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006986:	f7ff fdc7 	bl	8006518 <__retarget_lock_release_recursive>
 800698a:	89ab      	ldrh	r3, [r5, #12]
 800698c:	065b      	lsls	r3, r3, #25
 800698e:	f53f af1d 	bmi.w	80067cc <_vfiprintf_r+0x44>
 8006992:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006994:	e71c      	b.n	80067d0 <_vfiprintf_r+0x48>
 8006996:	ab03      	add	r3, sp, #12
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	462a      	mov	r2, r5
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <_vfiprintf_r+0x22c>)
 800699e:	a904      	add	r1, sp, #16
 80069a0:	4630      	mov	r0, r6
 80069a2:	f000 f879 	bl	8006a98 <_printf_i>
 80069a6:	e7e4      	b.n	8006972 <_vfiprintf_r+0x1ea>
 80069a8:	080074f3 	.word	0x080074f3
 80069ac:	080074fd 	.word	0x080074fd
 80069b0:	00000000 	.word	0x00000000
 80069b4:	08006763 	.word	0x08006763
 80069b8:	080074f9 	.word	0x080074f9

080069bc <_printf_common>:
 80069bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c0:	4616      	mov	r6, r2
 80069c2:	4699      	mov	r9, r3
 80069c4:	688a      	ldr	r2, [r1, #8]
 80069c6:	690b      	ldr	r3, [r1, #16]
 80069c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069cc:	4293      	cmp	r3, r2
 80069ce:	bfb8      	it	lt
 80069d0:	4613      	movlt	r3, r2
 80069d2:	6033      	str	r3, [r6, #0]
 80069d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069d8:	4607      	mov	r7, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	b10a      	cbz	r2, 80069e2 <_printf_common+0x26>
 80069de:	3301      	adds	r3, #1
 80069e0:	6033      	str	r3, [r6, #0]
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	0699      	lsls	r1, r3, #26
 80069e6:	bf42      	ittt	mi
 80069e8:	6833      	ldrmi	r3, [r6, #0]
 80069ea:	3302      	addmi	r3, #2
 80069ec:	6033      	strmi	r3, [r6, #0]
 80069ee:	6825      	ldr	r5, [r4, #0]
 80069f0:	f015 0506 	ands.w	r5, r5, #6
 80069f4:	d106      	bne.n	8006a04 <_printf_common+0x48>
 80069f6:	f104 0a19 	add.w	sl, r4, #25
 80069fa:	68e3      	ldr	r3, [r4, #12]
 80069fc:	6832      	ldr	r2, [r6, #0]
 80069fe:	1a9b      	subs	r3, r3, r2
 8006a00:	42ab      	cmp	r3, r5
 8006a02:	dc26      	bgt.n	8006a52 <_printf_common+0x96>
 8006a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a08:	1e13      	subs	r3, r2, #0
 8006a0a:	6822      	ldr	r2, [r4, #0]
 8006a0c:	bf18      	it	ne
 8006a0e:	2301      	movne	r3, #1
 8006a10:	0692      	lsls	r2, r2, #26
 8006a12:	d42b      	bmi.n	8006a6c <_printf_common+0xb0>
 8006a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a18:	4649      	mov	r1, r9
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	47c0      	blx	r8
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d01e      	beq.n	8006a60 <_printf_common+0xa4>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	6922      	ldr	r2, [r4, #16]
 8006a26:	f003 0306 	and.w	r3, r3, #6
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	bf02      	ittt	eq
 8006a2e:	68e5      	ldreq	r5, [r4, #12]
 8006a30:	6833      	ldreq	r3, [r6, #0]
 8006a32:	1aed      	subeq	r5, r5, r3
 8006a34:	68a3      	ldr	r3, [r4, #8]
 8006a36:	bf0c      	ite	eq
 8006a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a3c:	2500      	movne	r5, #0
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	bfc4      	itt	gt
 8006a42:	1a9b      	subgt	r3, r3, r2
 8006a44:	18ed      	addgt	r5, r5, r3
 8006a46:	2600      	movs	r6, #0
 8006a48:	341a      	adds	r4, #26
 8006a4a:	42b5      	cmp	r5, r6
 8006a4c:	d11a      	bne.n	8006a84 <_printf_common+0xc8>
 8006a4e:	2000      	movs	r0, #0
 8006a50:	e008      	b.n	8006a64 <_printf_common+0xa8>
 8006a52:	2301      	movs	r3, #1
 8006a54:	4652      	mov	r2, sl
 8006a56:	4649      	mov	r1, r9
 8006a58:	4638      	mov	r0, r7
 8006a5a:	47c0      	blx	r8
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d103      	bne.n	8006a68 <_printf_common+0xac>
 8006a60:	f04f 30ff 	mov.w	r0, #4294967295
 8006a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a68:	3501      	adds	r5, #1
 8006a6a:	e7c6      	b.n	80069fa <_printf_common+0x3e>
 8006a6c:	18e1      	adds	r1, r4, r3
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	2030      	movs	r0, #48	; 0x30
 8006a72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a76:	4422      	add	r2, r4
 8006a78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a80:	3302      	adds	r3, #2
 8006a82:	e7c7      	b.n	8006a14 <_printf_common+0x58>
 8006a84:	2301      	movs	r3, #1
 8006a86:	4622      	mov	r2, r4
 8006a88:	4649      	mov	r1, r9
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	47c0      	blx	r8
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d0e6      	beq.n	8006a60 <_printf_common+0xa4>
 8006a92:	3601      	adds	r6, #1
 8006a94:	e7d9      	b.n	8006a4a <_printf_common+0x8e>
	...

08006a98 <_printf_i>:
 8006a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a9c:	7e0f      	ldrb	r7, [r1, #24]
 8006a9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006aa0:	2f78      	cmp	r7, #120	; 0x78
 8006aa2:	4691      	mov	r9, r2
 8006aa4:	4680      	mov	r8, r0
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	469a      	mov	sl, r3
 8006aaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006aae:	d807      	bhi.n	8006ac0 <_printf_i+0x28>
 8006ab0:	2f62      	cmp	r7, #98	; 0x62
 8006ab2:	d80a      	bhi.n	8006aca <_printf_i+0x32>
 8006ab4:	2f00      	cmp	r7, #0
 8006ab6:	f000 80d4 	beq.w	8006c62 <_printf_i+0x1ca>
 8006aba:	2f58      	cmp	r7, #88	; 0x58
 8006abc:	f000 80c0 	beq.w	8006c40 <_printf_i+0x1a8>
 8006ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ac8:	e03a      	b.n	8006b40 <_printf_i+0xa8>
 8006aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ace:	2b15      	cmp	r3, #21
 8006ad0:	d8f6      	bhi.n	8006ac0 <_printf_i+0x28>
 8006ad2:	a101      	add	r1, pc, #4	; (adr r1, 8006ad8 <_printf_i+0x40>)
 8006ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ad8:	08006b31 	.word	0x08006b31
 8006adc:	08006b45 	.word	0x08006b45
 8006ae0:	08006ac1 	.word	0x08006ac1
 8006ae4:	08006ac1 	.word	0x08006ac1
 8006ae8:	08006ac1 	.word	0x08006ac1
 8006aec:	08006ac1 	.word	0x08006ac1
 8006af0:	08006b45 	.word	0x08006b45
 8006af4:	08006ac1 	.word	0x08006ac1
 8006af8:	08006ac1 	.word	0x08006ac1
 8006afc:	08006ac1 	.word	0x08006ac1
 8006b00:	08006ac1 	.word	0x08006ac1
 8006b04:	08006c49 	.word	0x08006c49
 8006b08:	08006b71 	.word	0x08006b71
 8006b0c:	08006c03 	.word	0x08006c03
 8006b10:	08006ac1 	.word	0x08006ac1
 8006b14:	08006ac1 	.word	0x08006ac1
 8006b18:	08006c6b 	.word	0x08006c6b
 8006b1c:	08006ac1 	.word	0x08006ac1
 8006b20:	08006b71 	.word	0x08006b71
 8006b24:	08006ac1 	.word	0x08006ac1
 8006b28:	08006ac1 	.word	0x08006ac1
 8006b2c:	08006c0b 	.word	0x08006c0b
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	1d1a      	adds	r2, r3, #4
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	602a      	str	r2, [r5, #0]
 8006b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b40:	2301      	movs	r3, #1
 8006b42:	e09f      	b.n	8006c84 <_printf_i+0x1ec>
 8006b44:	6820      	ldr	r0, [r4, #0]
 8006b46:	682b      	ldr	r3, [r5, #0]
 8006b48:	0607      	lsls	r7, r0, #24
 8006b4a:	f103 0104 	add.w	r1, r3, #4
 8006b4e:	6029      	str	r1, [r5, #0]
 8006b50:	d501      	bpl.n	8006b56 <_printf_i+0xbe>
 8006b52:	681e      	ldr	r6, [r3, #0]
 8006b54:	e003      	b.n	8006b5e <_printf_i+0xc6>
 8006b56:	0646      	lsls	r6, r0, #25
 8006b58:	d5fb      	bpl.n	8006b52 <_printf_i+0xba>
 8006b5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b5e:	2e00      	cmp	r6, #0
 8006b60:	da03      	bge.n	8006b6a <_printf_i+0xd2>
 8006b62:	232d      	movs	r3, #45	; 0x2d
 8006b64:	4276      	negs	r6, r6
 8006b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b6a:	485a      	ldr	r0, [pc, #360]	; (8006cd4 <_printf_i+0x23c>)
 8006b6c:	230a      	movs	r3, #10
 8006b6e:	e012      	b.n	8006b96 <_printf_i+0xfe>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	6820      	ldr	r0, [r4, #0]
 8006b74:	1d19      	adds	r1, r3, #4
 8006b76:	6029      	str	r1, [r5, #0]
 8006b78:	0605      	lsls	r5, r0, #24
 8006b7a:	d501      	bpl.n	8006b80 <_printf_i+0xe8>
 8006b7c:	681e      	ldr	r6, [r3, #0]
 8006b7e:	e002      	b.n	8006b86 <_printf_i+0xee>
 8006b80:	0641      	lsls	r1, r0, #25
 8006b82:	d5fb      	bpl.n	8006b7c <_printf_i+0xe4>
 8006b84:	881e      	ldrh	r6, [r3, #0]
 8006b86:	4853      	ldr	r0, [pc, #332]	; (8006cd4 <_printf_i+0x23c>)
 8006b88:	2f6f      	cmp	r7, #111	; 0x6f
 8006b8a:	bf0c      	ite	eq
 8006b8c:	2308      	moveq	r3, #8
 8006b8e:	230a      	movne	r3, #10
 8006b90:	2100      	movs	r1, #0
 8006b92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b96:	6865      	ldr	r5, [r4, #4]
 8006b98:	60a5      	str	r5, [r4, #8]
 8006b9a:	2d00      	cmp	r5, #0
 8006b9c:	bfa2      	ittt	ge
 8006b9e:	6821      	ldrge	r1, [r4, #0]
 8006ba0:	f021 0104 	bicge.w	r1, r1, #4
 8006ba4:	6021      	strge	r1, [r4, #0]
 8006ba6:	b90e      	cbnz	r6, 8006bac <_printf_i+0x114>
 8006ba8:	2d00      	cmp	r5, #0
 8006baa:	d04b      	beq.n	8006c44 <_printf_i+0x1ac>
 8006bac:	4615      	mov	r5, r2
 8006bae:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bb2:	fb03 6711 	mls	r7, r3, r1, r6
 8006bb6:	5dc7      	ldrb	r7, [r0, r7]
 8006bb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bbc:	4637      	mov	r7, r6
 8006bbe:	42bb      	cmp	r3, r7
 8006bc0:	460e      	mov	r6, r1
 8006bc2:	d9f4      	bls.n	8006bae <_printf_i+0x116>
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d10b      	bne.n	8006be0 <_printf_i+0x148>
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	07de      	lsls	r6, r3, #31
 8006bcc:	d508      	bpl.n	8006be0 <_printf_i+0x148>
 8006bce:	6923      	ldr	r3, [r4, #16]
 8006bd0:	6861      	ldr	r1, [r4, #4]
 8006bd2:	4299      	cmp	r1, r3
 8006bd4:	bfde      	ittt	le
 8006bd6:	2330      	movle	r3, #48	; 0x30
 8006bd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006be0:	1b52      	subs	r2, r2, r5
 8006be2:	6122      	str	r2, [r4, #16]
 8006be4:	f8cd a000 	str.w	sl, [sp]
 8006be8:	464b      	mov	r3, r9
 8006bea:	aa03      	add	r2, sp, #12
 8006bec:	4621      	mov	r1, r4
 8006bee:	4640      	mov	r0, r8
 8006bf0:	f7ff fee4 	bl	80069bc <_printf_common>
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d14a      	bne.n	8006c8e <_printf_i+0x1f6>
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	b004      	add	sp, #16
 8006bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	f043 0320 	orr.w	r3, r3, #32
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	4833      	ldr	r0, [pc, #204]	; (8006cd8 <_printf_i+0x240>)
 8006c0c:	2778      	movs	r7, #120	; 0x78
 8006c0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	6829      	ldr	r1, [r5, #0]
 8006c16:	061f      	lsls	r7, r3, #24
 8006c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c1c:	d402      	bmi.n	8006c24 <_printf_i+0x18c>
 8006c1e:	065f      	lsls	r7, r3, #25
 8006c20:	bf48      	it	mi
 8006c22:	b2b6      	uxthmi	r6, r6
 8006c24:	07df      	lsls	r7, r3, #31
 8006c26:	bf48      	it	mi
 8006c28:	f043 0320 	orrmi.w	r3, r3, #32
 8006c2c:	6029      	str	r1, [r5, #0]
 8006c2e:	bf48      	it	mi
 8006c30:	6023      	strmi	r3, [r4, #0]
 8006c32:	b91e      	cbnz	r6, 8006c3c <_printf_i+0x1a4>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	f023 0320 	bic.w	r3, r3, #32
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	2310      	movs	r3, #16
 8006c3e:	e7a7      	b.n	8006b90 <_printf_i+0xf8>
 8006c40:	4824      	ldr	r0, [pc, #144]	; (8006cd4 <_printf_i+0x23c>)
 8006c42:	e7e4      	b.n	8006c0e <_printf_i+0x176>
 8006c44:	4615      	mov	r5, r2
 8006c46:	e7bd      	b.n	8006bc4 <_printf_i+0x12c>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	6826      	ldr	r6, [r4, #0]
 8006c4c:	6961      	ldr	r1, [r4, #20]
 8006c4e:	1d18      	adds	r0, r3, #4
 8006c50:	6028      	str	r0, [r5, #0]
 8006c52:	0635      	lsls	r5, r6, #24
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	d501      	bpl.n	8006c5c <_printf_i+0x1c4>
 8006c58:	6019      	str	r1, [r3, #0]
 8006c5a:	e002      	b.n	8006c62 <_printf_i+0x1ca>
 8006c5c:	0670      	lsls	r0, r6, #25
 8006c5e:	d5fb      	bpl.n	8006c58 <_printf_i+0x1c0>
 8006c60:	8019      	strh	r1, [r3, #0]
 8006c62:	2300      	movs	r3, #0
 8006c64:	6123      	str	r3, [r4, #16]
 8006c66:	4615      	mov	r5, r2
 8006c68:	e7bc      	b.n	8006be4 <_printf_i+0x14c>
 8006c6a:	682b      	ldr	r3, [r5, #0]
 8006c6c:	1d1a      	adds	r2, r3, #4
 8006c6e:	602a      	str	r2, [r5, #0]
 8006c70:	681d      	ldr	r5, [r3, #0]
 8006c72:	6862      	ldr	r2, [r4, #4]
 8006c74:	2100      	movs	r1, #0
 8006c76:	4628      	mov	r0, r5
 8006c78:	f7f9 faaa 	bl	80001d0 <memchr>
 8006c7c:	b108      	cbz	r0, 8006c82 <_printf_i+0x1ea>
 8006c7e:	1b40      	subs	r0, r0, r5
 8006c80:	6060      	str	r0, [r4, #4]
 8006c82:	6863      	ldr	r3, [r4, #4]
 8006c84:	6123      	str	r3, [r4, #16]
 8006c86:	2300      	movs	r3, #0
 8006c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c8c:	e7aa      	b.n	8006be4 <_printf_i+0x14c>
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	462a      	mov	r2, r5
 8006c92:	4649      	mov	r1, r9
 8006c94:	4640      	mov	r0, r8
 8006c96:	47d0      	blx	sl
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d0ad      	beq.n	8006bf8 <_printf_i+0x160>
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	079b      	lsls	r3, r3, #30
 8006ca0:	d413      	bmi.n	8006cca <_printf_i+0x232>
 8006ca2:	68e0      	ldr	r0, [r4, #12]
 8006ca4:	9b03      	ldr	r3, [sp, #12]
 8006ca6:	4298      	cmp	r0, r3
 8006ca8:	bfb8      	it	lt
 8006caa:	4618      	movlt	r0, r3
 8006cac:	e7a6      	b.n	8006bfc <_printf_i+0x164>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4632      	mov	r2, r6
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	4640      	mov	r0, r8
 8006cb6:	47d0      	blx	sl
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d09d      	beq.n	8006bf8 <_printf_i+0x160>
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	68e3      	ldr	r3, [r4, #12]
 8006cc0:	9903      	ldr	r1, [sp, #12]
 8006cc2:	1a5b      	subs	r3, r3, r1
 8006cc4:	42ab      	cmp	r3, r5
 8006cc6:	dcf2      	bgt.n	8006cae <_printf_i+0x216>
 8006cc8:	e7eb      	b.n	8006ca2 <_printf_i+0x20a>
 8006cca:	2500      	movs	r5, #0
 8006ccc:	f104 0619 	add.w	r6, r4, #25
 8006cd0:	e7f5      	b.n	8006cbe <_printf_i+0x226>
 8006cd2:	bf00      	nop
 8006cd4:	08007504 	.word	0x08007504
 8006cd8:	08007515 	.word	0x08007515

08006cdc <__sflush_r>:
 8006cdc:	898a      	ldrh	r2, [r1, #12]
 8006cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	0710      	lsls	r0, r2, #28
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	d458      	bmi.n	8006d9c <__sflush_r+0xc0>
 8006cea:	684b      	ldr	r3, [r1, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dc05      	bgt.n	8006cfc <__sflush_r+0x20>
 8006cf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	dc02      	bgt.n	8006cfc <__sflush_r+0x20>
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	d0f9      	beq.n	8006cf6 <__sflush_r+0x1a>
 8006d02:	2300      	movs	r3, #0
 8006d04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d08:	682f      	ldr	r7, [r5, #0]
 8006d0a:	6a21      	ldr	r1, [r4, #32]
 8006d0c:	602b      	str	r3, [r5, #0]
 8006d0e:	d032      	beq.n	8006d76 <__sflush_r+0x9a>
 8006d10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	075a      	lsls	r2, r3, #29
 8006d16:	d505      	bpl.n	8006d24 <__sflush_r+0x48>
 8006d18:	6863      	ldr	r3, [r4, #4]
 8006d1a:	1ac0      	subs	r0, r0, r3
 8006d1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d1e:	b10b      	cbz	r3, 8006d24 <__sflush_r+0x48>
 8006d20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d22:	1ac0      	subs	r0, r0, r3
 8006d24:	2300      	movs	r3, #0
 8006d26:	4602      	mov	r2, r0
 8006d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d2a:	6a21      	ldr	r1, [r4, #32]
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	47b0      	blx	r6
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	d106      	bne.n	8006d44 <__sflush_r+0x68>
 8006d36:	6829      	ldr	r1, [r5, #0]
 8006d38:	291d      	cmp	r1, #29
 8006d3a:	d82b      	bhi.n	8006d94 <__sflush_r+0xb8>
 8006d3c:	4a29      	ldr	r2, [pc, #164]	; (8006de4 <__sflush_r+0x108>)
 8006d3e:	410a      	asrs	r2, r1
 8006d40:	07d6      	lsls	r6, r2, #31
 8006d42:	d427      	bmi.n	8006d94 <__sflush_r+0xb8>
 8006d44:	2200      	movs	r2, #0
 8006d46:	6062      	str	r2, [r4, #4]
 8006d48:	04d9      	lsls	r1, r3, #19
 8006d4a:	6922      	ldr	r2, [r4, #16]
 8006d4c:	6022      	str	r2, [r4, #0]
 8006d4e:	d504      	bpl.n	8006d5a <__sflush_r+0x7e>
 8006d50:	1c42      	adds	r2, r0, #1
 8006d52:	d101      	bne.n	8006d58 <__sflush_r+0x7c>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	b903      	cbnz	r3, 8006d5a <__sflush_r+0x7e>
 8006d58:	6560      	str	r0, [r4, #84]	; 0x54
 8006d5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d5c:	602f      	str	r7, [r5, #0]
 8006d5e:	2900      	cmp	r1, #0
 8006d60:	d0c9      	beq.n	8006cf6 <__sflush_r+0x1a>
 8006d62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d66:	4299      	cmp	r1, r3
 8006d68:	d002      	beq.n	8006d70 <__sflush_r+0x94>
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f7ff fbea 	bl	8006544 <_free_r>
 8006d70:	2000      	movs	r0, #0
 8006d72:	6360      	str	r0, [r4, #52]	; 0x34
 8006d74:	e7c0      	b.n	8006cf8 <__sflush_r+0x1c>
 8006d76:	2301      	movs	r3, #1
 8006d78:	4628      	mov	r0, r5
 8006d7a:	47b0      	blx	r6
 8006d7c:	1c41      	adds	r1, r0, #1
 8006d7e:	d1c8      	bne.n	8006d12 <__sflush_r+0x36>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0c5      	beq.n	8006d12 <__sflush_r+0x36>
 8006d86:	2b1d      	cmp	r3, #29
 8006d88:	d001      	beq.n	8006d8e <__sflush_r+0xb2>
 8006d8a:	2b16      	cmp	r3, #22
 8006d8c:	d101      	bne.n	8006d92 <__sflush_r+0xb6>
 8006d8e:	602f      	str	r7, [r5, #0]
 8006d90:	e7b1      	b.n	8006cf6 <__sflush_r+0x1a>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	e7ad      	b.n	8006cf8 <__sflush_r+0x1c>
 8006d9c:	690f      	ldr	r7, [r1, #16]
 8006d9e:	2f00      	cmp	r7, #0
 8006da0:	d0a9      	beq.n	8006cf6 <__sflush_r+0x1a>
 8006da2:	0793      	lsls	r3, r2, #30
 8006da4:	680e      	ldr	r6, [r1, #0]
 8006da6:	bf08      	it	eq
 8006da8:	694b      	ldreq	r3, [r1, #20]
 8006daa:	600f      	str	r7, [r1, #0]
 8006dac:	bf18      	it	ne
 8006dae:	2300      	movne	r3, #0
 8006db0:	eba6 0807 	sub.w	r8, r6, r7
 8006db4:	608b      	str	r3, [r1, #8]
 8006db6:	f1b8 0f00 	cmp.w	r8, #0
 8006dba:	dd9c      	ble.n	8006cf6 <__sflush_r+0x1a>
 8006dbc:	6a21      	ldr	r1, [r4, #32]
 8006dbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dc0:	4643      	mov	r3, r8
 8006dc2:	463a      	mov	r2, r7
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b0      	blx	r6
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	dc06      	bgt.n	8006dda <__sflush_r+0xfe>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e78e      	b.n	8006cf8 <__sflush_r+0x1c>
 8006dda:	4407      	add	r7, r0
 8006ddc:	eba8 0800 	sub.w	r8, r8, r0
 8006de0:	e7e9      	b.n	8006db6 <__sflush_r+0xda>
 8006de2:	bf00      	nop
 8006de4:	dfbffffe 	.word	0xdfbffffe

08006de8 <_fflush_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	690b      	ldr	r3, [r1, #16]
 8006dec:	4605      	mov	r5, r0
 8006dee:	460c      	mov	r4, r1
 8006df0:	b913      	cbnz	r3, 8006df8 <_fflush_r+0x10>
 8006df2:	2500      	movs	r5, #0
 8006df4:	4628      	mov	r0, r5
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	b118      	cbz	r0, 8006e02 <_fflush_r+0x1a>
 8006dfa:	6a03      	ldr	r3, [r0, #32]
 8006dfc:	b90b      	cbnz	r3, 8006e02 <_fflush_r+0x1a>
 8006dfe:	f7ff fa63 	bl	80062c8 <__sinit>
 8006e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f3      	beq.n	8006df2 <_fflush_r+0xa>
 8006e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e0c:	07d0      	lsls	r0, r2, #31
 8006e0e:	d404      	bmi.n	8006e1a <_fflush_r+0x32>
 8006e10:	0599      	lsls	r1, r3, #22
 8006e12:	d402      	bmi.n	8006e1a <_fflush_r+0x32>
 8006e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e16:	f7ff fb7e 	bl	8006516 <__retarget_lock_acquire_recursive>
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	f7ff ff5d 	bl	8006cdc <__sflush_r>
 8006e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e24:	07da      	lsls	r2, r3, #31
 8006e26:	4605      	mov	r5, r0
 8006e28:	d4e4      	bmi.n	8006df4 <_fflush_r+0xc>
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	059b      	lsls	r3, r3, #22
 8006e2e:	d4e1      	bmi.n	8006df4 <_fflush_r+0xc>
 8006e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e32:	f7ff fb71 	bl	8006518 <__retarget_lock_release_recursive>
 8006e36:	e7dd      	b.n	8006df4 <_fflush_r+0xc>

08006e38 <__swbuf_r>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	460e      	mov	r6, r1
 8006e3c:	4614      	mov	r4, r2
 8006e3e:	4605      	mov	r5, r0
 8006e40:	b118      	cbz	r0, 8006e4a <__swbuf_r+0x12>
 8006e42:	6a03      	ldr	r3, [r0, #32]
 8006e44:	b90b      	cbnz	r3, 8006e4a <__swbuf_r+0x12>
 8006e46:	f7ff fa3f 	bl	80062c8 <__sinit>
 8006e4a:	69a3      	ldr	r3, [r4, #24]
 8006e4c:	60a3      	str	r3, [r4, #8]
 8006e4e:	89a3      	ldrh	r3, [r4, #12]
 8006e50:	071a      	lsls	r2, r3, #28
 8006e52:	d525      	bpl.n	8006ea0 <__swbuf_r+0x68>
 8006e54:	6923      	ldr	r3, [r4, #16]
 8006e56:	b31b      	cbz	r3, 8006ea0 <__swbuf_r+0x68>
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	6922      	ldr	r2, [r4, #16]
 8006e5c:	1a98      	subs	r0, r3, r2
 8006e5e:	6963      	ldr	r3, [r4, #20]
 8006e60:	b2f6      	uxtb	r6, r6
 8006e62:	4283      	cmp	r3, r0
 8006e64:	4637      	mov	r7, r6
 8006e66:	dc04      	bgt.n	8006e72 <__swbuf_r+0x3a>
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	f7ff ffbc 	bl	8006de8 <_fflush_r>
 8006e70:	b9e0      	cbnz	r0, 8006eac <__swbuf_r+0x74>
 8006e72:	68a3      	ldr	r3, [r4, #8]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	60a3      	str	r3, [r4, #8]
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	1c5a      	adds	r2, r3, #1
 8006e7c:	6022      	str	r2, [r4, #0]
 8006e7e:	701e      	strb	r6, [r3, #0]
 8006e80:	6962      	ldr	r2, [r4, #20]
 8006e82:	1c43      	adds	r3, r0, #1
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d004      	beq.n	8006e92 <__swbuf_r+0x5a>
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	07db      	lsls	r3, r3, #31
 8006e8c:	d506      	bpl.n	8006e9c <__swbuf_r+0x64>
 8006e8e:	2e0a      	cmp	r6, #10
 8006e90:	d104      	bne.n	8006e9c <__swbuf_r+0x64>
 8006e92:	4621      	mov	r1, r4
 8006e94:	4628      	mov	r0, r5
 8006e96:	f7ff ffa7 	bl	8006de8 <_fflush_r>
 8006e9a:	b938      	cbnz	r0, 8006eac <__swbuf_r+0x74>
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f000 f806 	bl	8006eb4 <__swsetup_r>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d0d5      	beq.n	8006e58 <__swbuf_r+0x20>
 8006eac:	f04f 37ff 	mov.w	r7, #4294967295
 8006eb0:	e7f4      	b.n	8006e9c <__swbuf_r+0x64>
	...

08006eb4 <__swsetup_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4b2a      	ldr	r3, [pc, #168]	; (8006f60 <__swsetup_r+0xac>)
 8006eb8:	4605      	mov	r5, r0
 8006eba:	6818      	ldr	r0, [r3, #0]
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	b118      	cbz	r0, 8006ec8 <__swsetup_r+0x14>
 8006ec0:	6a03      	ldr	r3, [r0, #32]
 8006ec2:	b90b      	cbnz	r3, 8006ec8 <__swsetup_r+0x14>
 8006ec4:	f7ff fa00 	bl	80062c8 <__sinit>
 8006ec8:	89a3      	ldrh	r3, [r4, #12]
 8006eca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ece:	0718      	lsls	r0, r3, #28
 8006ed0:	d422      	bmi.n	8006f18 <__swsetup_r+0x64>
 8006ed2:	06d9      	lsls	r1, r3, #27
 8006ed4:	d407      	bmi.n	8006ee6 <__swsetup_r+0x32>
 8006ed6:	2309      	movs	r3, #9
 8006ed8:	602b      	str	r3, [r5, #0]
 8006eda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ede:	81a3      	strh	r3, [r4, #12]
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee4:	e034      	b.n	8006f50 <__swsetup_r+0x9c>
 8006ee6:	0758      	lsls	r0, r3, #29
 8006ee8:	d512      	bpl.n	8006f10 <__swsetup_r+0x5c>
 8006eea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eec:	b141      	cbz	r1, 8006f00 <__swsetup_r+0x4c>
 8006eee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ef2:	4299      	cmp	r1, r3
 8006ef4:	d002      	beq.n	8006efc <__swsetup_r+0x48>
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f7ff fb24 	bl	8006544 <_free_r>
 8006efc:	2300      	movs	r3, #0
 8006efe:	6363      	str	r3, [r4, #52]	; 0x34
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f06:	81a3      	strh	r3, [r4, #12]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	6063      	str	r3, [r4, #4]
 8006f0c:	6923      	ldr	r3, [r4, #16]
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	f043 0308 	orr.w	r3, r3, #8
 8006f16:	81a3      	strh	r3, [r4, #12]
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	b94b      	cbnz	r3, 8006f30 <__swsetup_r+0x7c>
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f26:	d003      	beq.n	8006f30 <__swsetup_r+0x7c>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f000 f894 	bl	8007058 <__smakebuf_r>
 8006f30:	89a0      	ldrh	r0, [r4, #12]
 8006f32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f36:	f010 0301 	ands.w	r3, r0, #1
 8006f3a:	d00a      	beq.n	8006f52 <__swsetup_r+0x9e>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	60a3      	str	r3, [r4, #8]
 8006f40:	6963      	ldr	r3, [r4, #20]
 8006f42:	425b      	negs	r3, r3
 8006f44:	61a3      	str	r3, [r4, #24]
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	b943      	cbnz	r3, 8006f5c <__swsetup_r+0xa8>
 8006f4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f4e:	d1c4      	bne.n	8006eda <__swsetup_r+0x26>
 8006f50:	bd38      	pop	{r3, r4, r5, pc}
 8006f52:	0781      	lsls	r1, r0, #30
 8006f54:	bf58      	it	pl
 8006f56:	6963      	ldrpl	r3, [r4, #20]
 8006f58:	60a3      	str	r3, [r4, #8]
 8006f5a:	e7f4      	b.n	8006f46 <__swsetup_r+0x92>
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	e7f7      	b.n	8006f50 <__swsetup_r+0x9c>
 8006f60:	20000164 	.word	0x20000164

08006f64 <_raise_r>:
 8006f64:	291f      	cmp	r1, #31
 8006f66:	b538      	push	{r3, r4, r5, lr}
 8006f68:	4604      	mov	r4, r0
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	d904      	bls.n	8006f78 <_raise_r+0x14>
 8006f6e:	2316      	movs	r3, #22
 8006f70:	6003      	str	r3, [r0, #0]
 8006f72:	f04f 30ff 	mov.w	r0, #4294967295
 8006f76:	bd38      	pop	{r3, r4, r5, pc}
 8006f78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f7a:	b112      	cbz	r2, 8006f82 <_raise_r+0x1e>
 8006f7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f80:	b94b      	cbnz	r3, 8006f96 <_raise_r+0x32>
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f830 	bl	8006fe8 <_getpid_r>
 8006f88:	462a      	mov	r2, r5
 8006f8a:	4601      	mov	r1, r0
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f92:	f000 b817 	b.w	8006fc4 <_kill_r>
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d00a      	beq.n	8006fb0 <_raise_r+0x4c>
 8006f9a:	1c59      	adds	r1, r3, #1
 8006f9c:	d103      	bne.n	8006fa6 <_raise_r+0x42>
 8006f9e:	2316      	movs	r3, #22
 8006fa0:	6003      	str	r3, [r0, #0]
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	e7e7      	b.n	8006f76 <_raise_r+0x12>
 8006fa6:	2400      	movs	r4, #0
 8006fa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fac:	4628      	mov	r0, r5
 8006fae:	4798      	blx	r3
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	e7e0      	b.n	8006f76 <_raise_r+0x12>

08006fb4 <raise>:
 8006fb4:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <raise+0xc>)
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	f7ff bfd3 	b.w	8006f64 <_raise_r>
 8006fbe:	bf00      	nop
 8006fc0:	20000164 	.word	0x20000164

08006fc4 <_kill_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4d07      	ldr	r5, [pc, #28]	; (8006fe4 <_kill_r+0x20>)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	4611      	mov	r1, r2
 8006fd0:	602b      	str	r3, [r5, #0]
 8006fd2:	f7f9 fdd5 	bl	8000b80 <_kill>
 8006fd6:	1c43      	adds	r3, r0, #1
 8006fd8:	d102      	bne.n	8006fe0 <_kill_r+0x1c>
 8006fda:	682b      	ldr	r3, [r5, #0]
 8006fdc:	b103      	cbz	r3, 8006fe0 <_kill_r+0x1c>
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	bd38      	pop	{r3, r4, r5, pc}
 8006fe2:	bf00      	nop
 8006fe4:	2000038c 	.word	0x2000038c

08006fe8 <_getpid_r>:
 8006fe8:	f7f9 bdc2 	b.w	8000b70 <_getpid>

08006fec <_sbrk_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d06      	ldr	r5, [pc, #24]	; (8007008 <_sbrk_r+0x1c>)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	602b      	str	r3, [r5, #0]
 8006ff8:	f7f9 fe4a 	bl	8000c90 <_sbrk>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_sbrk_r+0x1a>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_sbrk_r+0x1a>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	2000038c 	.word	0x2000038c

0800700c <__swhatbuf_r>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	460c      	mov	r4, r1
 8007010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007014:	2900      	cmp	r1, #0
 8007016:	b096      	sub	sp, #88	; 0x58
 8007018:	4615      	mov	r5, r2
 800701a:	461e      	mov	r6, r3
 800701c:	da0d      	bge.n	800703a <__swhatbuf_r+0x2e>
 800701e:	89a3      	ldrh	r3, [r4, #12]
 8007020:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007024:	f04f 0100 	mov.w	r1, #0
 8007028:	bf0c      	ite	eq
 800702a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800702e:	2340      	movne	r3, #64	; 0x40
 8007030:	2000      	movs	r0, #0
 8007032:	6031      	str	r1, [r6, #0]
 8007034:	602b      	str	r3, [r5, #0]
 8007036:	b016      	add	sp, #88	; 0x58
 8007038:	bd70      	pop	{r4, r5, r6, pc}
 800703a:	466a      	mov	r2, sp
 800703c:	f000 f848 	bl	80070d0 <_fstat_r>
 8007040:	2800      	cmp	r0, #0
 8007042:	dbec      	blt.n	800701e <__swhatbuf_r+0x12>
 8007044:	9901      	ldr	r1, [sp, #4]
 8007046:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800704a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800704e:	4259      	negs	r1, r3
 8007050:	4159      	adcs	r1, r3
 8007052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007056:	e7eb      	b.n	8007030 <__swhatbuf_r+0x24>

08007058 <__smakebuf_r>:
 8007058:	898b      	ldrh	r3, [r1, #12]
 800705a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800705c:	079d      	lsls	r5, r3, #30
 800705e:	4606      	mov	r6, r0
 8007060:	460c      	mov	r4, r1
 8007062:	d507      	bpl.n	8007074 <__smakebuf_r+0x1c>
 8007064:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	6123      	str	r3, [r4, #16]
 800706c:	2301      	movs	r3, #1
 800706e:	6163      	str	r3, [r4, #20]
 8007070:	b002      	add	sp, #8
 8007072:	bd70      	pop	{r4, r5, r6, pc}
 8007074:	ab01      	add	r3, sp, #4
 8007076:	466a      	mov	r2, sp
 8007078:	f7ff ffc8 	bl	800700c <__swhatbuf_r>
 800707c:	9900      	ldr	r1, [sp, #0]
 800707e:	4605      	mov	r5, r0
 8007080:	4630      	mov	r0, r6
 8007082:	f7ff facb 	bl	800661c <_malloc_r>
 8007086:	b948      	cbnz	r0, 800709c <__smakebuf_r+0x44>
 8007088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800708c:	059a      	lsls	r2, r3, #22
 800708e:	d4ef      	bmi.n	8007070 <__smakebuf_r+0x18>
 8007090:	f023 0303 	bic.w	r3, r3, #3
 8007094:	f043 0302 	orr.w	r3, r3, #2
 8007098:	81a3      	strh	r3, [r4, #12]
 800709a:	e7e3      	b.n	8007064 <__smakebuf_r+0xc>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	6020      	str	r0, [r4, #0]
 80070a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a4:	81a3      	strh	r3, [r4, #12]
 80070a6:	9b00      	ldr	r3, [sp, #0]
 80070a8:	6163      	str	r3, [r4, #20]
 80070aa:	9b01      	ldr	r3, [sp, #4]
 80070ac:	6120      	str	r0, [r4, #16]
 80070ae:	b15b      	cbz	r3, 80070c8 <__smakebuf_r+0x70>
 80070b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070b4:	4630      	mov	r0, r6
 80070b6:	f000 f81d 	bl	80070f4 <_isatty_r>
 80070ba:	b128      	cbz	r0, 80070c8 <__smakebuf_r+0x70>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	f023 0303 	bic.w	r3, r3, #3
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	431d      	orrs	r5, r3
 80070cc:	81a5      	strh	r5, [r4, #12]
 80070ce:	e7cf      	b.n	8007070 <__smakebuf_r+0x18>

080070d0 <_fstat_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4d07      	ldr	r5, [pc, #28]	; (80070f0 <_fstat_r+0x20>)
 80070d4:	2300      	movs	r3, #0
 80070d6:	4604      	mov	r4, r0
 80070d8:	4608      	mov	r0, r1
 80070da:	4611      	mov	r1, r2
 80070dc:	602b      	str	r3, [r5, #0]
 80070de:	f7f9 fdae 	bl	8000c3e <_fstat>
 80070e2:	1c43      	adds	r3, r0, #1
 80070e4:	d102      	bne.n	80070ec <_fstat_r+0x1c>
 80070e6:	682b      	ldr	r3, [r5, #0]
 80070e8:	b103      	cbz	r3, 80070ec <_fstat_r+0x1c>
 80070ea:	6023      	str	r3, [r4, #0]
 80070ec:	bd38      	pop	{r3, r4, r5, pc}
 80070ee:	bf00      	nop
 80070f0:	2000038c 	.word	0x2000038c

080070f4 <_isatty_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4d06      	ldr	r5, [pc, #24]	; (8007110 <_isatty_r+0x1c>)
 80070f8:	2300      	movs	r3, #0
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	602b      	str	r3, [r5, #0]
 8007100:	f7f9 fdad 	bl	8000c5e <_isatty>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d102      	bne.n	800710e <_isatty_r+0x1a>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	b103      	cbz	r3, 800710e <_isatty_r+0x1a>
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	2000038c 	.word	0x2000038c

08007114 <_init>:
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	bf00      	nop
 8007118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711a:	bc08      	pop	{r3}
 800711c:	469e      	mov	lr, r3
 800711e:	4770      	bx	lr

08007120 <_fini>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	bf00      	nop
 8007124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007126:	bc08      	pop	{r3}
 8007128:	469e      	mov	lr, r3
 800712a:	4770      	bx	lr


displayLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a2c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003bb8  08003bb8  00013bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c6c  08003c6c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c6c  08003c6c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c74  08003c74  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c74  08003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c78  08003c78  00013c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000001c  08003c98  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003c98  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc16  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed0  00000000  00000000  0002dca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  0002fb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ac  00000000  00000000  000307f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f7ff  00000000  00000000  0003119c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f32d  00000000  00000000  0005099b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be59c  00000000  00000000  0005fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000338c  00000000  00000000  0011e264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001215f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000001c 	.word	0x2000001c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003ba0 	.word	0x08003ba0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000020 	.word	0x20000020
 80001c8:	08003ba0 	.word	0x08003ba0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80004d2:	4a38      	ldr	r2, [pc, #224]	; (80005b4 <HD44780_Init+0xec>)
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80004d8:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <HD44780_Init+0xf0>)
 80004da:	2208      	movs	r2, #8
 80004dc:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80004de:	4b37      	ldr	r3, [pc, #220]	; (80005bc <HD44780_Init+0xf4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80004e4:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <HD44780_Init+0xec>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d907      	bls.n	80004fc <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80004ec:	4b33      	ldr	r3, [pc, #204]	; (80005bc <HD44780_Init+0xf4>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	f043 0308 	orr.w	r3, r3, #8
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b31      	ldr	r3, [pc, #196]	; (80005bc <HD44780_Init+0xf4>)
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	e006      	b.n	800050a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80004fc:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <HD44780_Init+0xf4>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <HD44780_Init+0xf4>)
 8000508:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800050a:	f000 fa13 	bl	8000934 <DelayInit>
  HAL_Delay(50);
 800050e:	2032      	movs	r0, #50	; 0x32
 8000510:	f000 fdc2 	bl	8001098 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <HD44780_Init+0xf0>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4618      	mov	r0, r3
 800051a:	f000 f9d1 	bl	80008c0 <ExpanderWrite>
  HAL_Delay(1000);
 800051e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000522:	f000 fdb9 	bl	8001098 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000526:	2030      	movs	r0, #48	; 0x30
 8000528:	f000 f9b9 	bl	800089e <Write4Bits>
  DelayUS(4500);
 800052c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000530:	f000 fa2a 	bl	8000988 <DelayUS>

  Write4Bits(0x03 << 4);
 8000534:	2030      	movs	r0, #48	; 0x30
 8000536:	f000 f9b2 	bl	800089e <Write4Bits>
  DelayUS(4500);
 800053a:	f241 1094 	movw	r0, #4500	; 0x1194
 800053e:	f000 fa23 	bl	8000988 <DelayUS>

  Write4Bits(0x03 << 4);
 8000542:	2030      	movs	r0, #48	; 0x30
 8000544:	f000 f9ab 	bl	800089e <Write4Bits>
  DelayUS(4500);
 8000548:	f241 1094 	movw	r0, #4500	; 0x1194
 800054c:	f000 fa1c 	bl	8000988 <DelayUS>

  Write4Bits(0x02 << 4);
 8000550:	2020      	movs	r0, #32
 8000552:	f000 f9a4 	bl	800089e <Write4Bits>
  DelayUS(100);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fa16 	bl	8000988 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HD44780_Init+0xf4>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	f043 0320 	orr.w	r3, r3, #32
 8000564:	b2db      	uxtb	r3, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f95c 	bl	8000824 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <HD44780_Init+0xf8>)
 800056e:	2204      	movs	r2, #4
 8000570:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000572:	f000 f88b 	bl	800068c <HD44780_Display>
  HD44780_Clear();
 8000576:	f000 f82b 	bl	80005d0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HD44780_Init+0xfc>)
 800057c:	2202      	movs	r2, #2
 800057e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000580:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <HD44780_Init+0xfc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	b2db      	uxtb	r3, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f94a 	bl	8000824 <SendCommand>
  DelayUS(4500);
 8000590:	f241 1094 	movw	r0, #4500	; 0x1194
 8000594:	f000 f9f8 	bl	8000988 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000598:	490b      	ldr	r1, [pc, #44]	; (80005c8 <HD44780_Init+0x100>)
 800059a:	2000      	movs	r0, #0
 800059c:	f000 f8eb 	bl	8000776 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005a0:	490a      	ldr	r1, [pc, #40]	; (80005cc <HD44780_Init+0x104>)
 80005a2:	2001      	movs	r0, #1
 80005a4:	f000 f8e7 	bl	8000776 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005a8:	f000 f81d 	bl	80005e6 <HD44780_Home>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	2000003b 	.word	0x2000003b
 80005b8:	2000003c 	.word	0x2000003c
 80005bc:	20000038 	.word	0x20000038
 80005c0:	20000039 	.word	0x20000039
 80005c4:	2000003a 	.word	0x2000003a
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20000008 	.word	0x20000008

080005d0 <HD44780_Clear>:

void HD44780_Clear()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 f925 	bl	8000824 <SendCommand>
  DelayUS(2000);
 80005da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005de:	f000 f9d3 	bl	8000988 <DelayUS>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <HD44780_Home>:

void HD44780_Home()
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80005ea:	2002      	movs	r0, #2
 80005ec:	f000 f91a 	bl	8000824 <SendCommand>
  DelayUS(2000);
 80005f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005f4:	f000 f9c8 	bl	8000988 <DelayUS>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b087      	sub	sp, #28
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	460a      	mov	r2, r1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	4613      	mov	r3, r2
 800060a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HD44780_SetCursor+0x5c>)
 800060e:	f107 0408 	add.w	r4, r7, #8
 8000612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <HD44780_SetCursor+0x60>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	79ba      	ldrb	r2, [r7, #6]
 800061e:	429a      	cmp	r2, r3
 8000620:	d303      	bcc.n	800062a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <HD44780_SetCursor+0x60>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3b01      	subs	r3, #1
 8000628:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	3318      	adds	r3, #24
 8000630:	443b      	add	r3, r7
 8000632:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000636:	b2da      	uxtb	r2, r3
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4413      	add	r3, r2
 800063c:	b2db      	uxtb	r3, r3
 800063e:	b25b      	sxtb	r3, r3
 8000640:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000644:	b25b      	sxtb	r3, r3
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f8eb 	bl	8000824 <SendCommand>
}
 800064e:	bf00      	nop
 8000650:	371c      	adds	r7, #28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd90      	pop	{r4, r7, pc}
 8000656:	bf00      	nop
 8000658:	08003bb8 	.word	0x08003bb8
 800065c:	2000003b 	.word	0x2000003b

08000660 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <HD44780_NoDisplay+0x28>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	f023 0304 	bic.w	r3, r3, #4
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HD44780_NoDisplay+0x28>)
 8000670:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <HD44780_NoDisplay+0x28>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	b2db      	uxtb	r3, r3
 800067c:	4618      	mov	r0, r3
 800067e:	f000 f8d1 	bl	8000824 <SendCommand>
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000039 	.word	0x20000039

0800068c <HD44780_Display>:

void HD44780_Display()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <HD44780_Display+0x28>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HD44780_Display+0x28>)
 800069c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HD44780_Display+0x28>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f043 0308 	orr.w	r3, r3, #8
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f8bb 	bl	8000824 <SendCommand>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000039 	.word	0x20000039

080006b8 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <HD44780_NoCursor+0x28>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	f023 0302 	bic.w	r3, r3, #2
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HD44780_NoCursor+0x28>)
 80006c8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <HD44780_NoCursor+0x28>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f8a5 	bl	8000824 <SendCommand>
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000039 	.word	0x20000039

080006e4 <HD44780_Cursor>:

void HD44780_Cursor()
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <HD44780_Cursor+0x28>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <HD44780_Cursor+0x28>)
 80006f4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <HD44780_Cursor+0x28>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	f043 0308 	orr.w	r3, r3, #8
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f88f 	bl	8000824 <SendCommand>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000039 	.word	0x20000039

08000710 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HD44780_NoBlink+0x28>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	f023 0301 	bic.w	r3, r3, #1
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HD44780_NoBlink+0x28>)
 8000720:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HD44780_NoBlink+0x28>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	f043 0308 	orr.w	r3, r3, #8
 800072a:	b2db      	uxtb	r3, r3
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f879 	bl	8000824 <SendCommand>
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000039 	.word	0x20000039

0800073c <HD44780_Blink>:

void HD44780_Blink()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HD44780_Blink+0x28>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HD44780_Blink+0x28>)
 800074c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HD44780_Blink+0x28>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f863 	bl	8000824 <SendCommand>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000039 	.word	0x20000039

08000768 <HD44780_ScrollDisplayLeft>:

void HD44780_ScrollDisplayLeft(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 800076c:	2018      	movs	r0, #24
 800076e:	f000 f859 	bl	8000824 <SendCommand>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}

08000776 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b084      	sub	sp, #16
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	6039      	str	r1, [r7, #0]
 8000780:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 0307 	and.w	r3, r3, #7
 8000788:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f843 	bl	8000824 <SendCommand>
  for (int i=0; i<8; i++)
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	e009      	b.n	80007b8 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f847 	bl	8000840 <SendChar>
  for (int i=0; i<8; i++)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3301      	adds	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2b07      	cmp	r3, #7
 80007bc:	ddf2      	ble.n	80007a4 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80007d0:	e006      	b.n	80007e0 <HD44780_PrintStr+0x18>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	607a      	str	r2, [r7, #4]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f830 	bl	8000840 <SendChar>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1f4      	bne.n	80007d2 <HD44780_PrintStr+0xa>
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <HD44780_NoBacklight+0x14>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 f85e 	bl	80008c0 <ExpanderWrite>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000003c 	.word	0x2000003c

0800080c <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HD44780_Backlight+0x14>)
 8000812:	2208      	movs	r2, #8
 8000814:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f852 	bl	80008c0 <ExpanderWrite>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000003c 	.word	0x2000003c

08000824 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f812 	bl	800085c <Send>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2101      	movs	r1, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f804 	bl	800085c <Send>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	460a      	mov	r2, r1
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f023 030f 	bic.w	r3, r3, #15
 8000872:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800087a:	7bfa      	ldrb	r2, [r7, #15]
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	4313      	orrs	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f80b 	bl	800089e <Write4Bits>
  Write4Bits((lownib)|mode);
 8000888:	7bba      	ldrb	r2, [r7, #14]
 800088a:	79bb      	ldrb	r3, [r7, #6]
 800088c:	4313      	orrs	r3, r2
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f804 	bl	800089e <Write4Bits>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f808 	bl	80008c0 <ExpanderWrite>
  PulseEnable(value);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f820 	bl	80008f8 <PulseEnable>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <ExpanderWrite+0x30>)
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80008d6:	f107 020f 	add.w	r2, r7, #15
 80008da:	230a      	movs	r3, #10
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	2301      	movs	r3, #1
 80008e0:	214e      	movs	r1, #78	; 0x4e
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <ExpanderWrite+0x34>)
 80008e4:	f000 ff00 	bl	80016e8 <HAL_I2C_Master_Transmit>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000003c 	.word	0x2000003c
 80008f4:	20000040 	.word	0x20000040

080008f8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ffd8 	bl	80008c0 <ExpanderWrite>
  DelayUS(20);
 8000910:	2014      	movs	r0, #20
 8000912:	f000 f839 	bl	8000988 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	f023 0304 	bic.w	r3, r3, #4
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffce 	bl	80008c0 <ExpanderWrite>
  DelayUS(20);
 8000924:	2014      	movs	r0, #20
 8000926:	f000 f82f 	bl	8000988 <DelayUS>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <DelayInit>:

static void DelayInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <DelayInit+0x4c>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	4a10      	ldr	r2, [pc, #64]	; (8000980 <DelayInit+0x4c>)
 800093e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000942:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <DelayInit+0x4c>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <DelayInit+0x4c>)
 800094a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800094e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <DelayInit+0x50>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <DelayInit+0x50>)
 8000956:	f023 0301 	bic.w	r3, r3, #1
 800095a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <DelayInit+0x50>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <DelayInit+0x50>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <DelayInit+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800096e:	bf00      	nop
  __ASM volatile ("NOP");
 8000970:	bf00      	nop
  __ASM volatile ("NOP");
 8000972:	bf00      	nop
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000edf0 	.word	0xe000edf0
 8000984:	e0001000 	.word	0xe0001000

08000988 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <DelayUS+0x44>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <DelayUS+0x48>)
 8000996:	fba2 2303 	umull	r2, r3, r2, r3
 800099a:	0c9a      	lsrs	r2, r3, #18
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	fb02 f303 	mul.w	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <DelayUS+0x4c>)
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <DelayUS+0x4c>)
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	697a      	ldr	r2, [r7, #20]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d8f6      	bhi.n	80009aa <DelayUS+0x22>
}
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	371c      	adds	r7, #28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000010 	.word	0x20000010
 80009d0:	431bde83 	.word	0x431bde83
 80009d4:	e0001000 	.word	0xe0001000

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f000 fae6 	bl	8000fae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 f893 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f000 f947 	bl	8000c78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009ea:	f000 f915 	bl	8000c18 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009ee:	f000 f8d3 	bl	8000b98 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  HD44780_Init(2);
 80009f2:	2002      	movs	r0, #2
 80009f4:	f7ff fd68 	bl	80004c8 <HD44780_Init>
  HD44780_Clear();
 80009f8:	f7ff fdea 	bl	80005d0 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 80009fc:	2100      	movs	r1, #0
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fdfc 	bl	80005fc <HD44780_SetCursor>
  HD44780_PrintStr("HELLO");
 8000a04:	483e      	ldr	r0, [pc, #248]	; (8000b00 <main+0x128>)
 8000a06:	f7ff fedf 	bl	80007c8 <HD44780_PrintStr>
  HD44780_SetCursor(10,1);
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	200a      	movs	r0, #10
 8000a0e:	f7ff fdf5 	bl	80005fc <HD44780_SetCursor>
  HD44780_PrintStr("WORLD");
 8000a12:	483c      	ldr	r0, [pc, #240]	; (8000b04 <main+0x12c>)
 8000a14:	f7ff fed8 	bl	80007c8 <HD44780_PrintStr>
  HAL_Delay(2000);
 8000a18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a1c:	f000 fb3c 	bl	8001098 <HAL_Delay>

  HD44780_Clear();
 8000a20:	f7ff fdd6 	bl	80005d0 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8000a24:	2100      	movs	r1, #0
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff fde8 	bl	80005fc <HD44780_SetCursor>
  HD44780_PrintStr("HELLO");
 8000a2c:	4834      	ldr	r0, [pc, #208]	; (8000b00 <main+0x128>)
 8000a2e:	f7ff fecb 	bl	80007c8 <HD44780_PrintStr>
  HAL_Delay(2000);
 8000a32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a36:	f000 fb2f 	bl	8001098 <HAL_Delay>
  HD44780_NoBacklight();
 8000a3a:	f7ff fedb 	bl	80007f4 <HD44780_NoBacklight>
  HAL_Delay(2000);
 8000a3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a42:	f000 fb29 	bl	8001098 <HAL_Delay>
  HD44780_Backlight();
 8000a46:	f7ff fee1 	bl	800080c <HD44780_Backlight>

  HAL_Delay(2000);
 8000a4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a4e:	f000 fb23 	bl	8001098 <HAL_Delay>
  HD44780_Cursor();
 8000a52:	f7ff fe47 	bl	80006e4 <HD44780_Cursor>
  HAL_Delay(2000);
 8000a56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a5a:	f000 fb1d 	bl	8001098 <HAL_Delay>
  HD44780_Blink();
 8000a5e:	f7ff fe6d 	bl	800073c <HD44780_Blink>
  HAL_Delay(5000);
 8000a62:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a66:	f000 fb17 	bl	8001098 <HAL_Delay>
  HD44780_NoBlink();
 8000a6a:	f7ff fe51 	bl	8000710 <HD44780_NoBlink>
  HAL_Delay(2000);
 8000a6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a72:	f000 fb11 	bl	8001098 <HAL_Delay>
  HD44780_NoCursor();
 8000a76:	f7ff fe1f 	bl	80006b8 <HD44780_NoCursor>
  HAL_Delay(2000);
 8000a7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a7e:	f000 fb0b 	bl	8001098 <HAL_Delay>

  HD44780_NoDisplay();
 8000a82:	f7ff fded 	bl	8000660 <HD44780_NoDisplay>
  HAL_Delay(2000);
 8000a86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a8a:	f000 fb05 	bl	8001098 <HAL_Delay>
  HD44780_Display();
 8000a8e:	f7ff fdfd 	bl	800068c <HD44780_Display>

  HD44780_Clear();
 8000a92:	f7ff fd9d 	bl	80005d0 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8000a96:	2100      	movs	r1, #0
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fdaf 	bl	80005fc <HD44780_SetCursor>
  HD44780_PrintStr("Learning STM32 with LCD is fun :-)");
 8000a9e:	481a      	ldr	r0, [pc, #104]	; (8000b08 <main+0x130>)
 8000aa0:	f7ff fe92 	bl	80007c8 <HD44780_PrintStr>
  int x;
  for(int x=0; x<40; x=x+1)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	e008      	b.n	8000abc <main+0xe4>
  {
    HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000aaa:	f7ff fe5d 	bl	8000768 <HD44780_ScrollDisplayLeft>
    HAL_Delay(500);
 8000aae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab2:	f000 faf1 	bl	8001098 <HAL_Delay>
  for(int x=0; x<40; x=x+1)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b27      	cmp	r3, #39	; 0x27
 8000ac0:	ddf3      	ble.n	8000aaa <main+0xd2>
  }

  char snum[5];
  for ( int x = 1; x <= 200 ; x++ )
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	e016      	b.n	8000af6 <main+0x11e>
  {
    itoa(x, snum, 10);
 8000ac8:	463b      	mov	r3, r7
 8000aca:	220a      	movs	r2, #10
 8000acc:	4619      	mov	r1, r3
 8000ace:	68b8      	ldr	r0, [r7, #8]
 8000ad0:	f002 fff5 	bl	8003abe <itoa>
    HD44780_Clear();
 8000ad4:	f7ff fd7c 	bl	80005d0 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fd8e 	bl	80005fc <HD44780_SetCursor>
    HD44780_PrintStr(snum);
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fe70 	bl	80007c8 <HD44780_PrintStr>
    HAL_Delay (1000);
 8000ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aec:	f000 fad4 	bl	8001098 <HAL_Delay>
  for ( int x = 1; x <= 200 ; x++ )
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	3301      	adds	r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	2bc8      	cmp	r3, #200	; 0xc8
 8000afa:	dde5      	ble.n	8000ac8 <main+0xf0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <main+0x124>
 8000afe:	bf00      	nop
 8000b00:	08003bc8 	.word	0x08003bc8
 8000b04:	08003bd0 	.word	0x08003bd0
 8000b08:	08003bd8 	.word	0x08003bd8

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b096      	sub	sp, #88	; 0x58
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2244      	movs	r2, #68	; 0x44
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f003 f814 	bl	8003b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	463b      	mov	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b32:	f001 f9a7 	bl	8001e84 <HAL_PWREx_ControlVoltageScaling>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b3c:	f000 f8e6 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b40:	2302      	movs	r3, #2
 8000b42:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b4a:	2310      	movs	r3, #16
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 f9ea 	bl	8001f30 <HAL_RCC_OscConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000b62:	f000 f8d3 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b66:	230f      	movs	r3, #15
 8000b68:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 fdea 	bl	8002758 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b8a:	f000 f8bf 	bl	8000d0c <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3758      	adds	r7, #88	; 0x58
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000b9e:	4a1c      	ldr	r2, [pc, #112]	; (8000c10 <MX_I2C1_Init+0x78>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <MX_I2C1_Init+0x7c>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd2:	480e      	ldr	r0, [pc, #56]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bd4:	f000 fcec 	bl	80015b0 <HAL_I2C_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bde:	f000 f895 	bl	8000d0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000be2:	2100      	movs	r1, #0
 8000be4:	4809      	ldr	r0, [pc, #36]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000be6:	f001 f8a7 	bl	8001d38 <HAL_I2CEx_ConfigAnalogFilter>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bf0:	f000 f88c 	bl	8000d0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_I2C1_Init+0x74>)
 8000bf8:	f001 f8e9 	bl	8001dce <HAL_I2CEx_ConfigDigitalFilter>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c02:	f000 f883 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000040 	.word	0x20000040
 8000c10:	40005400 	.word	0x40005400
 8000c14:	00303d5b 	.word	0x00303d5b

08000c18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c1e:	4a15      	ldr	r2, [pc, #84]	; (8000c74 <MX_USART2_UART_Init+0x5c>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_USART2_UART_Init+0x58>)
 8000c5c:	f002 fa88 	bl	8003170 <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c66:	f000 f851 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000094 	.word	0x20000094
 8000c74:	40004400 	.word	0x40004400

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <MX_GPIO_Init+0x8c>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <MX_GPIO_Init+0x8c>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_GPIO_Init+0x8c>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_GPIO_Init+0x8c>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <MX_GPIO_Init+0x8c>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_GPIO_Init+0x8c>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_GPIO_Init+0x8c>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <MX_GPIO_Init+0x8c>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_GPIO_Init+0x8c>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2108      	movs	r1, #8
 8000cda:	480b      	ldr	r0, [pc, #44]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000cdc:	f000 fc50 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000cf8:	f000 fad8 	bl	80012ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40021000 	.word	0x40021000
 8000d08:	48000400 	.word	0x48000400

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x44>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x44>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x44>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x44>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x44>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6593      	str	r3, [r2, #88]	; 0x58
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x44>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b09e      	sub	sp, #120	; 0x78
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	2254      	movs	r2, #84	; 0x54
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 fee1 	bl	8003b48 <memset>
  if(hi2c->Instance==I2C1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <HAL_I2C_MspInit+0xa4>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d135      	bne.n	8000dfc <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d90:	2340      	movs	r3, #64	; 0x40
 8000d92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f001 feff 	bl	8002ba0 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000da8:	f7ff ffb0 	bl	8000d0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_I2C_MspInit+0xa8>)
 8000dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db0:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <HAL_I2C_MspInit+0xa8>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <HAL_I2C_MspInit+0xa8>)
 8000dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc4:	23c0      	movs	r3, #192	; 0xc0
 8000dc6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc8:	2312      	movs	r3, #18
 8000dca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480b      	ldr	r0, [pc, #44]	; (8000e0c <HAL_I2C_MspInit+0xac>)
 8000de0:	f000 fa64 	bl	80012ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_I2C_MspInit+0xa8>)
 8000de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_I2C_MspInit+0xa8>)
 8000dea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dee:	6593      	str	r3, [r2, #88]	; 0x58
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_I2C_MspInit+0xa8>)
 8000df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3778      	adds	r7, #120	; 0x78
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40005400 	.word	0x40005400
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000400 	.word	0x48000400

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b09e      	sub	sp, #120	; 0x78
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	2254      	movs	r2, #84	; 0x54
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 fe89 	bl	8003b48 <memset>
  if(huart->Instance==USART2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a28      	ldr	r2, [pc, #160]	; (8000edc <HAL_UART_MspInit+0xcc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d148      	bne.n	8000ed2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fea7 	bl	8002ba0 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e58:	f7ff ff58 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5c:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_UART_MspInit+0xd0>)
 8000e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e60:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_UART_MspInit+0xd0>)
 8000e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e66:	6593      	str	r3, [r2, #88]	; 0x58
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_UART_MspInit+0xd0>)
 8000e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <HAL_UART_MspInit+0xd0>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <HAL_UART_MspInit+0xd0>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_UART_MspInit+0xd0>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f000 f9ff 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eb2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f000 f9ed 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3778      	adds	r7, #120	; 0x78
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40004400 	.word	0x40004400
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 f892 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f60:	f7ff ffea 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f66:	490d      	ldr	r1, [pc, #52]	; (8000f9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <LoopForever+0xe>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	; (8000fa8 <LoopForever+0x16>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f002 fde5 	bl	8003b58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f8e:	f7ff fd23 	bl	80009d8 <main>

08000f92 <LoopForever>:

LoopForever:
    b LoopForever
 8000f92:	e7fe      	b.n	8000f92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000fa0:	08003c7c 	.word	0x08003c7c
  ldr r2, =_sbss
 8000fa4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000fa8:	20000120 	.word	0x20000120

08000fac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC1_IRQHandler>

08000fae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f943 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f80e 	bl	8000fe0 <HAL_InitTick>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	e001      	b.n	8000fd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fd0:	f7ff fea2 	bl	8000d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_InitTick+0x6c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d023      	beq.n	800103c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_InitTick+0x70>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_InitTick+0x6c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f941 	bl	8001292 <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10f      	bne.n	8001036 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d809      	bhi.n	8001030 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 f919 	bl	800125a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_InitTick+0x74>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e007      	b.n	8001040 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e004      	b.n	8001040 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e001      	b.n	8001040 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000018 	.word	0x20000018
 8001050:	20000010 	.word	0x20000010
 8001054:	20000014 	.word	0x20000014

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000018 	.word	0x20000018
 800107c:	2000011c 	.word	0x2000011c

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2000011c 	.word	0x2000011c

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000018 	.word	0x20000018

080010e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff47 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff5c 	bl	8001128 <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffb0 	bl	8001200 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ba:	e148      	b.n	800154e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	2101      	movs	r1, #1
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	fa01 f303 	lsl.w	r3, r1, r3
 80012c8:	4013      	ands	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 813a 	beq.w	8001548 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d005      	beq.n	80012ec <HAL_GPIO_Init+0x40>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d130      	bne.n	800134e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001322:	2201      	movs	r2, #1
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	f003 0201 	and.w	r2, r3, #1
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b03      	cmp	r3, #3
 8001358:	d017      	beq.n	800138a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d123      	bne.n	80013de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	08da      	lsrs	r2, r3, #3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3208      	adds	r2, #8
 800139e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	691a      	ldr	r2, [r3, #16]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	08da      	lsrs	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	6939      	ldr	r1, [r7, #16]
 80013da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0203 	and.w	r2, r3, #3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8094 	beq.w	8001548 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001420:	4b52      	ldr	r3, [pc, #328]	; (800156c <HAL_GPIO_Init+0x2c0>)
 8001422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001424:	4a51      	ldr	r2, [pc, #324]	; (800156c <HAL_GPIO_Init+0x2c0>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6613      	str	r3, [r2, #96]	; 0x60
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <HAL_GPIO_Init+0x2c0>)
 800142e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001438:	4a4d      	ldr	r2, [pc, #308]	; (8001570 <HAL_GPIO_Init+0x2c4>)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	220f      	movs	r2, #15
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001462:	d00d      	beq.n	8001480 <HAL_GPIO_Init+0x1d4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a43      	ldr	r2, [pc, #268]	; (8001574 <HAL_GPIO_Init+0x2c8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x1d0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a42      	ldr	r2, [pc, #264]	; (8001578 <HAL_GPIO_Init+0x2cc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_GPIO_Init+0x1cc>
 8001474:	2302      	movs	r3, #2
 8001476:	e004      	b.n	8001482 <HAL_GPIO_Init+0x1d6>
 8001478:	2307      	movs	r3, #7
 800147a:	e002      	b.n	8001482 <HAL_GPIO_Init+0x1d6>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <HAL_GPIO_Init+0x1d6>
 8001480:	2300      	movs	r3, #0
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	f002 0203 	and.w	r2, r2, #3
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	4093      	lsls	r3, r2
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001492:	4937      	ldr	r1, [pc, #220]	; (8001570 <HAL_GPIO_Init+0x2c4>)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014a0:	4b36      	ldr	r3, [pc, #216]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014c4:	4a2d      	ldr	r2, [pc, #180]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014ca:	4b2c      	ldr	r3, [pc, #176]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014ee:	4a23      	ldr	r2, [pc, #140]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001518:	4a18      	ldr	r2, [pc, #96]	; (800157c <HAL_GPIO_Init+0x2d0>)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3301      	adds	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	fa22 f303 	lsr.w	r3, r2, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	f47f aeaf 	bne.w	80012bc <HAL_GPIO_Init+0x10>
  }
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000
 8001574:	48000400 	.word	0x48000400
 8001578:	48000800 	.word	0x48000800
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e08d      	b.n	80016de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fbc2 	bl	8000d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2224      	movs	r2, #36	; 0x24
 80015e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001600:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001610:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d107      	bne.n	800162a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	e006      	b.n	8001638 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001636:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d108      	bne.n	8001652 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	e007      	b.n	8001662 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001660:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001674:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001684:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69d9      	ldr	r1, [r3, #28]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1a      	ldr	r2, [r3, #32]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2220      	movs	r2, #32
 80016ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	461a      	mov	r2, r3
 80016f4:	460b      	mov	r3, r1
 80016f6:	817b      	strh	r3, [r7, #10]
 80016f8:	4613      	mov	r3, r2
 80016fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b20      	cmp	r3, #32
 8001706:	f040 80fd 	bne.w	8001904 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_I2C_Master_Transmit+0x30>
 8001714:	2302      	movs	r3, #2
 8001716:	e0f6      	b.n	8001906 <HAL_I2C_Master_Transmit+0x21e>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001720:	f7ff fcae 	bl	8001080 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2319      	movs	r3, #25
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 f914 	bl	8001960 <I2C_WaitOnFlagUntilTimeout>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0e1      	b.n	8001906 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2221      	movs	r2, #33	; 0x21
 8001746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2210      	movs	r2, #16
 800174e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	893a      	ldrh	r2, [r7, #8]
 8001762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176e:	b29b      	uxth	r3, r3
 8001770:	2bff      	cmp	r3, #255	; 0xff
 8001772:	d906      	bls.n	8001782 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	22ff      	movs	r2, #255	; 0xff
 8001778:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800177a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e007      	b.n	8001792 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800178c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001790:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001796:	2b00      	cmp	r3, #0
 8001798:	d024      	beq.n	80017e4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	781a      	ldrb	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	3301      	adds	r3, #1
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	8979      	ldrh	r1, [r7, #10]
 80017d6:	4b4e      	ldr	r3, [pc, #312]	; (8001910 <HAL_I2C_Master_Transmit+0x228>)
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 fa79 	bl	8001cd4 <I2C_TransferConfig>
 80017e2:	e066      	b.n	80018b2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	8979      	ldrh	r1, [r7, #10]
 80017ec:	4b48      	ldr	r3, [pc, #288]	; (8001910 <HAL_I2C_Master_Transmit+0x228>)
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 fa6e 	bl	8001cd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80017f8:	e05b      	b.n	80018b2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	6a39      	ldr	r1, [r7, #32]
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f8fd 	bl	80019fe <I2C_WaitOnTXISFlagUntilTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e07b      	b.n	8001906 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001828:	b29b      	uxth	r3, r3
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001836:	3b01      	subs	r3, #1
 8001838:	b29a      	uxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001842:	b29b      	uxth	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d034      	beq.n	80018b2 <HAL_I2C_Master_Transmit+0x1ca>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184c:	2b00      	cmp	r3, #0
 800184e:	d130      	bne.n	80018b2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	2200      	movs	r2, #0
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f880 	bl	8001960 <I2C_WaitOnFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e04d      	b.n	8001906 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186e:	b29b      	uxth	r3, r3
 8001870:	2bff      	cmp	r3, #255	; 0xff
 8001872:	d90e      	bls.n	8001892 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	22ff      	movs	r2, #255	; 0xff
 8001878:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187e:	b2da      	uxtb	r2, r3
 8001880:	8979      	ldrh	r1, [r7, #10]
 8001882:	2300      	movs	r3, #0
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 fa22 	bl	8001cd4 <I2C_TransferConfig>
 8001890:	e00f      	b.n	80018b2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	8979      	ldrh	r1, [r7, #10]
 80018a4:	2300      	movs	r3, #0
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 fa11 	bl	8001cd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d19e      	bne.n	80017fa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	6a39      	ldr	r1, [r7, #32]
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 f8e3 	bl	8001a8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e01a      	b.n	8001906 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2220      	movs	r2, #32
 80018d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6859      	ldr	r1, [r3, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_I2C_Master_Transmit+0x22c>)
 80018e4:	400b      	ands	r3, r1
 80018e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e000      	b.n	8001906 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001904:	2302      	movs	r3, #2
  }
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	80002000 	.word	0x80002000
 8001914:	fe00e800 	.word	0xfe00e800

08001918 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b02      	cmp	r3, #2
 800192c:	d103      	bne.n	8001936 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2200      	movs	r2, #0
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b01      	cmp	r3, #1
 8001942:	d007      	beq.n	8001954 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699a      	ldr	r2, [r3, #24]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	619a      	str	r2, [r3, #24]
  }
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	4613      	mov	r3, r2
 800196e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001970:	e031      	b.n	80019d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001978:	d02d      	beq.n	80019d6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800197a:	f7ff fb81 	bl	8001080 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d302      	bcc.n	8001990 <I2C_WaitOnFlagUntilTimeout+0x30>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d122      	bne.n	80019d6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	699a      	ldr	r2, [r3, #24]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	4013      	ands	r3, r2
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	429a      	cmp	r2, r3
 800199e:	bf0c      	ite	eq
 80019a0:	2301      	moveq	r3, #1
 80019a2:	2300      	movne	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d113      	bne.n	80019d6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f043 0220 	orr.w	r2, r3, #32
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2220      	movs	r2, #32
 80019be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	699a      	ldr	r2, [r3, #24]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4013      	ands	r3, r2
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	bf0c      	ite	eq
 80019e6:	2301      	moveq	r3, #1
 80019e8:	2300      	movne	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d0be      	beq.n	8001972 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a0a:	e033      	b.n	8001a74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f87f 	bl	8001b14 <I2C_IsErrorOccurred>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e031      	b.n	8001a84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a26:	d025      	beq.n	8001a74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a28:	f7ff fb2a 	bl	8001080 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d302      	bcc.n	8001a3e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d11a      	bne.n	8001a74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d013      	beq.n	8001a74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	f043 0220 	orr.w	r2, r3, #32
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e007      	b.n	8001a84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d1c4      	bne.n	8001a0c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a98:	e02f      	b.n	8001afa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f838 	bl	8001b14 <I2C_IsErrorOccurred>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e02d      	b.n	8001b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aae:	f7ff fae7 	bl	8001080 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d302      	bcc.n	8001ac4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d11a      	bne.n	8001afa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d013      	beq.n	8001afa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f043 0220 	orr.w	r2, r3, #32
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e007      	b.n	8001b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	2b20      	cmp	r3, #32
 8001b06:	d1c8      	bne.n	8001a9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d068      	beq.n	8001c12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2210      	movs	r2, #16
 8001b46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b48:	e049      	b.n	8001bde <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d045      	beq.n	8001bde <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b52:	f7ff fa95 	bl	8001080 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d302      	bcc.n	8001b68 <I2C_IsErrorOccurred+0x54>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d13a      	bne.n	8001bde <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8a:	d121      	bne.n	8001bd0 <I2C_IsErrorOccurred+0xbc>
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b92:	d01d      	beq.n	8001bd0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001b94:	7cfb      	ldrb	r3, [r7, #19]
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	d01a      	beq.n	8001bd0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ba8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001baa:	f7ff fa69 	bl	8001080 <HAL_GetTick>
 8001bae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bb0:	e00e      	b.n	8001bd0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001bb2:	f7ff fa65 	bl	8001080 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b19      	cmp	r3, #25
 8001bbe:	d907      	bls.n	8001bd0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	f043 0320 	orr.w	r3, r3, #32
 8001bc6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001bce:	e006      	b.n	8001bde <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	d1e9      	bne.n	8001bb2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d003      	beq.n	8001bf4 <I2C_IsErrorOccurred+0xe0>
 8001bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0aa      	beq.n	8001b4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d103      	bne.n	8001c04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2220      	movs	r2, #32
 8001c02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00b      	beq.n	8001c3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00b      	beq.n	8001c80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01c      	beq.n	8001cc2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fe45 	bl	8001918 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <I2C_IsErrorOccurred+0x1bc>)
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3728      	adds	r7, #40	; 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	fe00e800 	.word	0xfe00e800

08001cd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	817b      	strh	r3, [r7, #10]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ce6:	897b      	ldrh	r3, [r7, #10]
 8001ce8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cec:	7a7b      	ldrb	r3, [r7, #9]
 8001cee:	041b      	lsls	r3, r3, #16
 8001cf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cf4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	0d5b      	lsrs	r3, r3, #21
 8001d0e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <I2C_TransferConfig+0x60>)
 8001d14:	430b      	orrs	r3, r1
 8001d16:	43db      	mvns	r3, r3
 8001d18:	ea02 0103 	and.w	r1, r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d26:	bf00      	nop
 8001d28:	371c      	adds	r7, #28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	03ff63ff 	.word	0x03ff63ff

08001d38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d138      	bne.n	8001dc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e032      	b.n	8001dc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2224      	movs	r2, #36	; 0x24
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e000      	b.n	8001dc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dc0:	2302      	movs	r3, #2
  }
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d139      	bne.n	8001e58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e033      	b.n	8001e5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2224      	movs	r2, #36	; 0x24
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
  }
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40007000 	.word	0x40007000

08001e84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e92:	d130      	bne.n	8001ef6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e94:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea0:	d038      	beq.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eaa:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2232      	movs	r2, #50	; 0x32
 8001eb8:	fb02 f303 	mul.w	r3, r2, r3
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0c9b      	lsrs	r3, r3, #18
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ec8:	e002      	b.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001edc:	d102      	bne.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f2      	bne.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef0:	d110      	bne.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e00f      	b.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f02:	d007      	beq.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f0c:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40007000 	.word	0x40007000
 8001f28:	20000010 	.word	0x20000010
 8001f2c:	431bde83 	.word	0x431bde83

08001f30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f000 bc02 	b.w	8002748 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f44:	4b96      	ldr	r3, [pc, #600]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f4e:	4b94      	ldr	r3, [pc, #592]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80e4 	beq.w	800212e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_RCC_OscConfig+0x4c>
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	f040 808b 	bne.w	800208a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	f040 8087 	bne.w	800208a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f7c:	4b88      	ldr	r3, [pc, #544]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_OscConfig+0x64>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e3d9      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1a      	ldr	r2, [r3, #32]
 8001f98:	4b81      	ldr	r3, [pc, #516]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <HAL_RCC_OscConfig+0x7e>
 8001fa4:	4b7e      	ldr	r3, [pc, #504]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fac:	e005      	b.n	8001fba <HAL_RCC_OscConfig+0x8a>
 8001fae:	4b7c      	ldr	r3, [pc, #496]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d223      	bcs.n	8002006 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fd8c 	bl	8002ae0 <RCC_SetFlashLatencyFromMSIRange>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e3ba      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd2:	4b73      	ldr	r3, [pc, #460]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a72      	ldr	r2, [pc, #456]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b70      	ldr	r3, [pc, #448]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	496d      	ldr	r1, [pc, #436]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff0:	4b6b      	ldr	r3, [pc, #428]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	4968      	ldr	r1, [pc, #416]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
 8002004:	e025      	b.n	8002052 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002006:	4b66      	ldr	r3, [pc, #408]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a65      	ldr	r2, [pc, #404]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b63      	ldr	r3, [pc, #396]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4960      	ldr	r1, [pc, #384]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002024:	4b5e      	ldr	r3, [pc, #376]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	495b      	ldr	r1, [pc, #364]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fd4c 	bl	8002ae0 <RCC_SetFlashLatencyFromMSIRange>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e37a      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002052:	f000 fc81 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8002056:	4602      	mov	r2, r0
 8002058:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	4950      	ldr	r1, [pc, #320]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002064:	5ccb      	ldrb	r3, [r1, r3]
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	4a4e      	ldr	r2, [pc, #312]	; (80021a8 <HAL_RCC_OscConfig+0x278>)
 8002070:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002072:	4b4e      	ldr	r3, [pc, #312]	; (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe ffb2 	bl	8000fe0 <HAL_InitTick>
 800207c:	4603      	mov	r3, r0
 800207e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d052      	beq.n	800212c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	e35e      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d032      	beq.n	80020f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002092:	4b43      	ldr	r3, [pc, #268]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a42      	ldr	r2, [pc, #264]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800209e:	f7fe ffef 	bl	8001080 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a6:	f7fe ffeb 	bl	8001080 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e347      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020b8:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c4:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a35      	ldr	r2, [pc, #212]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4930      	ldr	r1, [pc, #192]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	492b      	ldr	r1, [pc, #172]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
 80020f6:	e01a      	b.n	800212e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020f8:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a28      	ldr	r2, [pc, #160]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002104:	f7fe ffbc 	bl	8001080 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800210c:	f7fe ffb8 	bl	8001080 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e314      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x1dc>
 800212a:	e000      	b.n	800212e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800212c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d073      	beq.n	8002222 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b08      	cmp	r3, #8
 800213e:	d005      	beq.n	800214c <HAL_RCC_OscConfig+0x21c>
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b0c      	cmp	r3, #12
 8002144:	d10e      	bne.n	8002164 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d10b      	bne.n	8002164 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d063      	beq.n	8002220 <HAL_RCC_OscConfig+0x2f0>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d15f      	bne.n	8002220 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e2f1      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d106      	bne.n	800217c <HAL_RCC_OscConfig+0x24c>
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e025      	b.n	80021c8 <HAL_RCC_OscConfig+0x298>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002184:	d114      	bne.n	80021b0 <HAL_RCC_OscConfig+0x280>
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a02      	ldr	r2, [pc, #8]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e013      	b.n	80021c8 <HAL_RCC_OscConfig+0x298>
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08003bfc 	.word	0x08003bfc
 80021a8:	20000010 	.word	0x20000010
 80021ac:	20000014 	.word	0x20000014
 80021b0:	4ba0      	ldr	r3, [pc, #640]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a9f      	ldr	r2, [pc, #636]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b9d      	ldr	r3, [pc, #628]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a9c      	ldr	r2, [pc, #624]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe ff56 	bl	8001080 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7fe ff52 	bl	8001080 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e2ae      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ea:	4b92      	ldr	r3, [pc, #584]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x2a8>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe ff42 	bl	8001080 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe ff3e 	bl	8001080 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e29a      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002212:	4b88      	ldr	r3, [pc, #544]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x2d0>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d060      	beq.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2b04      	cmp	r3, #4
 8002232:	d005      	beq.n	8002240 <HAL_RCC_OscConfig+0x310>
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d119      	bne.n	800226e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d116      	bne.n	800226e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002240:	4b7c      	ldr	r3, [pc, #496]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_OscConfig+0x328>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e277      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4b76      	ldr	r3, [pc, #472]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	4973      	ldr	r1, [pc, #460]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800226c:	e040      	b.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d023      	beq.n	80022be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002276:	4b6f      	ldr	r3, [pc, #444]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a6e      	ldr	r2, [pc, #440]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002282:	f7fe fefd 	bl	8001080 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228a:	f7fe fef9 	bl	8001080 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e255      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800229c:	4b65      	ldr	r3, [pc, #404]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a8:	4b62      	ldr	r3, [pc, #392]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	061b      	lsls	r3, r3, #24
 80022b6:	495f      	ldr	r1, [pc, #380]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
 80022bc:	e018      	b.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022be:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a5c      	ldr	r2, [pc, #368]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80022c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fe fed9 	bl	8001080 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d2:	f7fe fed5 	bl	8001080 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e231      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022e4:	4b53      	ldr	r3, [pc, #332]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d03c      	beq.n	8002376 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01c      	beq.n	800233e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002304:	4b4b      	ldr	r3, [pc, #300]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230a:	4a4a      	ldr	r2, [pc, #296]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7fe feb4 	bl	8001080 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231c:	f7fe feb0 	bl	8001080 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e20c      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800232e:	4b41      	ldr	r3, [pc, #260]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ef      	beq.n	800231c <HAL_RCC_OscConfig+0x3ec>
 800233c:	e01b      	b.n	8002376 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233e:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002344:	4a3b      	ldr	r2, [pc, #236]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe fe97 	bl	8001080 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002356:	f7fe fe93 	bl	8001080 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1ef      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002368:	4b32      	ldr	r3, [pc, #200]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800236a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ef      	bne.n	8002356 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80a6 	beq.w	80024d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002388:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10d      	bne.n	80023b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	4a26      	ldr	r2, [pc, #152]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 800239a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239e:	6593      	str	r3, [r2, #88]	; 0x58
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ac:	2301      	movs	r3, #1
 80023ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_RCC_OscConfig+0x508>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d118      	bne.n	80023ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_RCC_OscConfig+0x508>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_RCC_OscConfig+0x508>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c8:	f7fe fe5a 	bl	8001080 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d0:	f7fe fe56 	bl	8001080 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1b2      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_RCC_OscConfig+0x508>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_OscConfig+0x4d8>
 80023f6:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002406:	e029      	b.n	800245c <HAL_RCC_OscConfig+0x52c>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b05      	cmp	r3, #5
 800240e:	d115      	bne.n	800243c <HAL_RCC_OscConfig+0x50c>
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002426:	4a03      	ldr	r2, [pc, #12]	; (8002434 <HAL_RCC_OscConfig+0x504>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002430:	e014      	b.n	800245c <HAL_RCC_OscConfig+0x52c>
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
 800243c:	4b9a      	ldr	r3, [pc, #616]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	4a99      	ldr	r2, [pc, #612]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800244c:	4b96      	ldr	r3, [pc, #600]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002452:	4a95      	ldr	r2, [pc, #596]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d016      	beq.n	8002492 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7fe fe0c 	bl	8001080 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246a:	e00a      	b.n	8002482 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe fe08 	bl	8001080 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e162      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002482:	4b89      	ldr	r3, [pc, #548]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ed      	beq.n	800246c <HAL_RCC_OscConfig+0x53c>
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7fe fdf5 	bl	8001080 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdf1 	bl	8001080 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e14b      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b0:	4b7d      	ldr	r3, [pc, #500]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ed      	bne.n	800249a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024be:	7ffb      	ldrb	r3, [r7, #31]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d105      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c4:	4b78      	ldr	r3, [pc, #480]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	4a77      	ldr	r2, [pc, #476]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 80024ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d03c      	beq.n	8002556 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01c      	beq.n	800251e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024e4:	4b70      	ldr	r3, [pc, #448]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 80024e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024ea:	4a6f      	ldr	r2, [pc, #444]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7fe fdc4 	bl	8001080 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024fc:	f7fe fdc0 	bl	8001080 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e11c      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800250e:	4b66      	ldr	r3, [pc, #408]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 8002510:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ef      	beq.n	80024fc <HAL_RCC_OscConfig+0x5cc>
 800251c:	e01b      	b.n	8002556 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800251e:	4b62      	ldr	r3, [pc, #392]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 8002520:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002524:	4a60      	ldr	r2, [pc, #384]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252e:	f7fe fda7 	bl	8001080 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002536:	f7fe fda3 	bl	8001080 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e0ff      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002548:	4b57      	ldr	r3, [pc, #348]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 800254a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ef      	bne.n	8002536 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80f3 	beq.w	8002746 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	2b02      	cmp	r3, #2
 8002566:	f040 80c9 	bne.w	80026fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800256a:	4b4f      	ldr	r3, [pc, #316]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f003 0203 	and.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	429a      	cmp	r2, r3
 800257c:	d12c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	3b01      	subs	r3, #1
 800258a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d123      	bne.n	80025d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d11b      	bne.n	80025d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d113      	bne.n	80025d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	3b01      	subs	r3, #1
 80025be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d109      	bne.n	80025d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	3b01      	subs	r3, #1
 80025d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d06b      	beq.n	80026b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b0c      	cmp	r3, #12
 80025dc:	d062      	beq.n	80026a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025de:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0ac      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025ee:	4b2e      	ldr	r3, [pc, #184]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2d      	ldr	r2, [pc, #180]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 80025f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025fa:	f7fe fd41 	bl	8001080 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe fd3d 	bl	8001080 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e099      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002614:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002620:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <HAL_RCC_OscConfig+0x77c>)
 8002626:	4013      	ands	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002630:	3a01      	subs	r2, #1
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	4311      	orrs	r1, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800263a:	0212      	lsls	r2, r2, #8
 800263c:	4311      	orrs	r1, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002642:	0852      	lsrs	r2, r2, #1
 8002644:	3a01      	subs	r2, #1
 8002646:	0552      	lsls	r2, r2, #21
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800264e:	0852      	lsrs	r2, r2, #1
 8002650:	3a01      	subs	r2, #1
 8002652:	0652      	lsls	r2, r2, #25
 8002654:	4311      	orrs	r1, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800265a:	06d2      	lsls	r2, r2, #27
 800265c:	430a      	orrs	r2, r1
 800265e:	4912      	ldr	r1, [pc, #72]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 8002660:	4313      	orrs	r3, r2
 8002662:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 800266a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002670:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 8002676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800267c:	f7fe fd00 	bl	8001080 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fcfc 	bl	8001080 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e058      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <HAL_RCC_OscConfig+0x778>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a2:	e050      	b.n	8002746 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e04f      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
 80026a8:	40021000 	.word	0x40021000
 80026ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <HAL_RCC_OscConfig+0x820>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d144      	bne.n	8002746 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026bc:	4b24      	ldr	r3, [pc, #144]	; (8002750 <HAL_RCC_OscConfig+0x820>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a23      	ldr	r2, [pc, #140]	; (8002750 <HAL_RCC_OscConfig+0x820>)
 80026c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c8:	4b21      	ldr	r3, [pc, #132]	; (8002750 <HAL_RCC_OscConfig+0x820>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a20      	ldr	r2, [pc, #128]	; (8002750 <HAL_RCC_OscConfig+0x820>)
 80026ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026d4:	f7fe fcd4 	bl	8001080 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fcd0 	bl	8001080 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e02c      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_RCC_OscConfig+0x820>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x7ac>
 80026fa:	e024      	b.n	8002746 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d01f      	beq.n	8002742 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <HAL_RCC_OscConfig+0x820>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <HAL_RCC_OscConfig+0x820>)
 8002708:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800270c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7fe fcb7 	bl	8001080 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002716:	f7fe fcb3 	bl	8001080 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e00f      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RCC_OscConfig+0x820>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_OscConfig+0x820>)
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	4905      	ldr	r1, [pc, #20]	; (8002750 <HAL_RCC_OscConfig+0x820>)
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x824>)
 800273c:	4013      	ands	r3, r2
 800273e:	60cb      	str	r3, [r1, #12]
 8002740:	e001      	b.n	8002746 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000
 8002754:	feeefffc 	.word	0xfeeefffc

08002758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0e7      	b.n	800293c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800276c:	4b75      	ldr	r3, [pc, #468]	; (8002944 <HAL_RCC_ClockConfig+0x1ec>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d910      	bls.n	800279c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b72      	ldr	r3, [pc, #456]	; (8002944 <HAL_RCC_ClockConfig+0x1ec>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 0207 	bic.w	r2, r3, #7
 8002782:	4970      	ldr	r1, [pc, #448]	; (8002944 <HAL_RCC_ClockConfig+0x1ec>)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b6e      	ldr	r3, [pc, #440]	; (8002944 <HAL_RCC_ClockConfig+0x1ec>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0cf      	b.n	800293c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d010      	beq.n	80027ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	4b66      	ldr	r3, [pc, #408]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d908      	bls.n	80027ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b8:	4b63      	ldr	r3, [pc, #396]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4960      	ldr	r1, [pc, #384]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d04c      	beq.n	8002870 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027de:	4b5a      	ldr	r3, [pc, #360]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d121      	bne.n	800282e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e0a6      	b.n	800293c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f6:	4b54      	ldr	r3, [pc, #336]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d115      	bne.n	800282e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e09a      	b.n	800293c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800280e:	4b4e      	ldr	r3, [pc, #312]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e08e      	b.n	800293c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281e:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e086      	b.n	800293c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800282e:	4b46      	ldr	r3, [pc, #280]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f023 0203 	bic.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4943      	ldr	r1, [pc, #268]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	4313      	orrs	r3, r2
 800283e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002840:	f7fe fc1e 	bl	8001080 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	e00a      	b.n	800285e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7fe fc1a 	bl	8001080 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e06e      	b.n	800293c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 020c 	and.w	r2, r3, #12
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	429a      	cmp	r2, r3
 800286e:	d1eb      	bne.n	8002848 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d010      	beq.n	800289e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002888:	429a      	cmp	r2, r3
 800288a:	d208      	bcs.n	800289e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288c:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	492b      	ldr	r1, [pc, #172]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_RCC_ClockConfig+0x1ec>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d210      	bcs.n	80028ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_RCC_ClockConfig+0x1ec>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f023 0207 	bic.w	r2, r3, #7
 80028b4:	4923      	ldr	r1, [pc, #140]	; (8002944 <HAL_RCC_ClockConfig+0x1ec>)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028bc:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCC_ClockConfig+0x1ec>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d001      	beq.n	80028ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e036      	b.n	800293c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028da:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	4918      	ldr	r1, [pc, #96]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d009      	beq.n	800290c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4910      	ldr	r1, [pc, #64]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800290c:	f000 f824 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	490b      	ldr	r1, [pc, #44]	; (800294c <HAL_RCC_ClockConfig+0x1f4>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	fa22 f303 	lsr.w	r3, r2, r3
 8002928:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 800292a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1fc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fb55 	bl	8000fe0 <HAL_InitTick>
 8002936:	4603      	mov	r3, r0
 8002938:	72fb      	strb	r3, [r7, #11]

  return status;
 800293a:	7afb      	ldrb	r3, [r7, #11]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40022000 	.word	0x40022000
 8002948:	40021000 	.word	0x40021000
 800294c:	08003bfc 	.word	0x08003bfc
 8002950:	20000010 	.word	0x20000010
 8002954:	20000014 	.word	0x20000014

08002958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002966:	4b3e      	ldr	r3, [pc, #248]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002970:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x34>
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d121      	bne.n	80029ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d11e      	bne.n	80029ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800298c:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x108>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002998:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x108>)
 800299a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	e005      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029a8:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x108>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029b4:	4a2b      	ldr	r2, [pc, #172]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10d      	bne.n	80029e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d102      	bne.n	80029d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029d0:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x110>)
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	e004      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029dc:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x114>)
 80029de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d134      	bne.n	8002a50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029e6:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d003      	beq.n	80029fe <HAL_RCC_GetSysClockFreq+0xa6>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d003      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0xac>
 80029fc:	e005      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029fe:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a00:	617b      	str	r3, [r7, #20]
      break;
 8002a02:	e005      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002a06:	617b      	str	r3, [r7, #20]
      break;
 8002a08:	e002      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	617b      	str	r3, [r7, #20]
      break;
 8002a0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	0a1b      	lsrs	r3, r3, #8
 8002a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	fb03 f202 	mul.w	r2, r3, r2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	0e5b      	lsrs	r3, r3, #25
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	3301      	adds	r3, #1
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a50:	69bb      	ldr	r3, [r7, #24]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08003c14 	.word	0x08003c14
 8002a68:	00f42400 	.word	0x00f42400
 8002a6c:	007a1200 	.word	0x007a1200

08002a70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a76:	681b      	ldr	r3, [r3, #0]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000010 	.word	0x20000010

08002a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a8c:	f7ff fff0 	bl	8002a70 <HAL_RCC_GetHCLKFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	4904      	ldr	r1, [pc, #16]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08003c0c 	.word	0x08003c0c

08002ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ab8:	f7ff ffda 	bl	8002a70 <HAL_RCC_GetHCLKFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	0adb      	lsrs	r3, r3, #11
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4904      	ldr	r1, [pc, #16]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08003c0c 	.word	0x08003c0c

08002ae0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002aec:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002af8:	f7ff f9b6 	bl	8001e68 <HAL_PWREx_GetVoltageRange>
 8002afc:	6178      	str	r0, [r7, #20]
 8002afe:	e014      	b.n	8002b2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	4a24      	ldr	r2, [pc, #144]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b0c:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b18:	f7ff f9a6 	bl	8001e68 <HAL_PWREx_GetVoltageRange>
 8002b1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b30:	d10b      	bne.n	8002b4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d919      	bls.n	8002b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2ba0      	cmp	r3, #160	; 0xa0
 8002b3c:	d902      	bls.n	8002b44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b3e:	2302      	movs	r3, #2
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	e013      	b.n	8002b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b44:	2301      	movs	r3, #1
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	e010      	b.n	8002b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b80      	cmp	r3, #128	; 0x80
 8002b4e:	d902      	bls.n	8002b56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b50:	2303      	movs	r3, #3
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	e00a      	b.n	8002b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b80      	cmp	r3, #128	; 0x80
 8002b5a:	d102      	bne.n	8002b62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	e004      	b.n	8002b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b70      	cmp	r3, #112	; 0x70
 8002b66:	d101      	bne.n	8002b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b68:	2301      	movs	r3, #1
 8002b6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 0207 	bic.w	r2, r3, #7
 8002b74:	4909      	ldr	r1, [pc, #36]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d001      	beq.n	8002b8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40022000 	.word	0x40022000

08002ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ba8:	2300      	movs	r3, #0
 8002baa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bac:	2300      	movs	r3, #0
 8002bae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d031      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bc4:	d01a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002bc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bca:	d814      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d009      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bd4:	d10f      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002bd6:	4b5d      	ldr	r3, [pc, #372]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4a5c      	ldr	r2, [pc, #368]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002be2:	e00c      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3304      	adds	r3, #4
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f9ce 	bl	8002f8c <RCCEx_PLLSAI1_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bf4:	e003      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	74fb      	strb	r3, [r7, #19]
      break;
 8002bfa:	e000      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10b      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c04:	4b51      	ldr	r3, [pc, #324]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	494e      	ldr	r1, [pc, #312]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c1a:	e001      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 809e 	beq.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c32:	4b46      	ldr	r3, [pc, #280]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c48:	4b40      	ldr	r3, [pc, #256]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	4a3f      	ldr	r2, [pc, #252]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c52:	6593      	str	r3, [r2, #88]	; 0x58
 8002c54:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c60:	2301      	movs	r3, #1
 8002c62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c64:	4b3a      	ldr	r3, [pc, #232]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a39      	ldr	r2, [pc, #228]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c70:	f7fe fa06 	bl	8001080 <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c76:	e009      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c78:	f7fe fa02 	bl	8001080 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d902      	bls.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	74fb      	strb	r3, [r7, #19]
        break;
 8002c8a:	e005      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c8c:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ef      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c98:	7cfb      	ldrb	r3, [r7, #19]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d15a      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01e      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d019      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cc6:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ce6:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d016      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe f9c2 	bl	8001080 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe f9be 	bl	8001080 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d902      	bls.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	74fb      	strb	r3, [r7, #19]
            break;
 8002d16:	e006      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0ec      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002d26:	7cfb      	ldrb	r3, [r7, #19]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3a:	4904      	ldr	r1, [pc, #16]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d42:	e009      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	74bb      	strb	r3, [r7, #18]
 8002d48:	e006      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d58:	7c7b      	ldrb	r3, [r7, #17]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d105      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5e:	4b8a      	ldr	r3, [pc, #552]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	4a89      	ldr	r2, [pc, #548]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d76:	4b84      	ldr	r3, [pc, #528]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	f023 0203 	bic.w	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4980      	ldr	r1, [pc, #512]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d98:	4b7b      	ldr	r3, [pc, #492]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	f023 020c 	bic.w	r2, r3, #12
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	4978      	ldr	r1, [pc, #480]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dba:	4b73      	ldr	r3, [pc, #460]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	496f      	ldr	r1, [pc, #444]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	4967      	ldr	r1, [pc, #412]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dfe:	4b62      	ldr	r3, [pc, #392]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	495e      	ldr	r1, [pc, #376]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e20:	4b59      	ldr	r3, [pc, #356]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	4956      	ldr	r1, [pc, #344]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e42:	4b51      	ldr	r3, [pc, #324]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	494d      	ldr	r1, [pc, #308]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d028      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e64:	4b48      	ldr	r3, [pc, #288]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	4945      	ldr	r1, [pc, #276]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e82:	d106      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e84:	4b40      	ldr	r3, [pc, #256]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a3f      	ldr	r2, [pc, #252]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e8e:	60d3      	str	r3, [r2, #12]
 8002e90:	e011      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f872 	bl	8002f8c <RCCEx_PLLSAI1_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002eac:	7cfb      	ldrb	r3, [r7, #19]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d028      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ec2:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	492d      	ldr	r1, [pc, #180]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee2:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4a28      	ldr	r2, [pc, #160]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eec:	60d3      	str	r3, [r2, #12]
 8002eee:	e011      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2101      	movs	r1, #1
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 f843 	bl	8002f8c <RCCEx_PLLSAI1_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01c      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2e:	4916      	ldr	r1, [pc, #88]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f3e:	d10c      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	2102      	movs	r1, #2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f820 	bl	8002f8c <RCCEx_PLLSAI1_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f50:	7cfb      	ldrb	r3, [r7, #19]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002f56:	7cfb      	ldrb	r3, [r7, #19]
 8002f58:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f74:	4904      	ldr	r1, [pc, #16]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000

08002f8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f9a:	4b74      	ldr	r3, [pc, #464]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d018      	beq.n	8002fd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fa6:	4b71      	ldr	r3, [pc, #452]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0203 	and.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d10d      	bne.n	8002fd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
       ||
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fbe:	4b6b      	ldr	r3, [pc, #428]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
       ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d047      	beq.n	8003062 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
 8002fd6:	e044      	b.n	8003062 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d018      	beq.n	8003012 <RCCEx_PLLSAI1_Config+0x86>
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d825      	bhi.n	8003030 <RCCEx_PLLSAI1_Config+0xa4>
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d002      	beq.n	8002fee <RCCEx_PLLSAI1_Config+0x62>
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d009      	beq.n	8003000 <RCCEx_PLLSAI1_Config+0x74>
 8002fec:	e020      	b.n	8003030 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fee:	4b5f      	ldr	r3, [pc, #380]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d11d      	bne.n	8003036 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffe:	e01a      	b.n	8003036 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003000:	4b5a      	ldr	r3, [pc, #360]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003008:	2b00      	cmp	r3, #0
 800300a:	d116      	bne.n	800303a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003010:	e013      	b.n	800303a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003012:	4b56      	ldr	r3, [pc, #344]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10f      	bne.n	800303e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800301e:	4b53      	ldr	r3, [pc, #332]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800302e:	e006      	b.n	800303e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      break;
 8003034:	e004      	b.n	8003040 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003036:	bf00      	nop
 8003038:	e002      	b.n	8003040 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800303a:	bf00      	nop
 800303c:	e000      	b.n	8003040 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800303e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10d      	bne.n	8003062 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003046:	4b49      	ldr	r3, [pc, #292]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6819      	ldr	r1, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	430b      	orrs	r3, r1
 800305c:	4943      	ldr	r1, [pc, #268]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 800305e:	4313      	orrs	r3, r2
 8003060:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d17c      	bne.n	8003162 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003068:	4b40      	ldr	r3, [pc, #256]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a3f      	ldr	r2, [pc, #252]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 800306e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003074:	f7fe f804 	bl	8001080 <HAL_GetTick>
 8003078:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800307a:	e009      	b.n	8003090 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800307c:	f7fe f800 	bl	8001080 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d902      	bls.n	8003090 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	73fb      	strb	r3, [r7, #15]
        break;
 800308e:	e005      	b.n	800309c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1ef      	bne.n	800307c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d15f      	bne.n	8003162 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d110      	bne.n	80030ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a8:	4b30      	ldr	r3, [pc, #192]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6892      	ldr	r2, [r2, #8]
 80030b8:	0211      	lsls	r1, r2, #8
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68d2      	ldr	r2, [r2, #12]
 80030be:	06d2      	lsls	r2, r2, #27
 80030c0:	430a      	orrs	r2, r1
 80030c2:	492a      	ldr	r1, [pc, #168]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	610b      	str	r3, [r1, #16]
 80030c8:	e027      	b.n	800311a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d112      	bne.n	80030f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d0:	4b26      	ldr	r3, [pc, #152]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6892      	ldr	r2, [r2, #8]
 80030e0:	0211      	lsls	r1, r2, #8
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6912      	ldr	r2, [r2, #16]
 80030e6:	0852      	lsrs	r2, r2, #1
 80030e8:	3a01      	subs	r2, #1
 80030ea:	0552      	lsls	r2, r2, #21
 80030ec:	430a      	orrs	r2, r1
 80030ee:	491f      	ldr	r1, [pc, #124]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	610b      	str	r3, [r1, #16]
 80030f4:	e011      	b.n	800311a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6892      	ldr	r2, [r2, #8]
 8003106:	0211      	lsls	r1, r2, #8
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6952      	ldr	r2, [r2, #20]
 800310c:	0852      	lsrs	r2, r2, #1
 800310e:	3a01      	subs	r2, #1
 8003110:	0652      	lsls	r2, r2, #25
 8003112:	430a      	orrs	r2, r1
 8003114:	4915      	ldr	r1, [pc, #84]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003116:	4313      	orrs	r3, r2
 8003118:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a13      	ldr	r2, [pc, #76]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003120:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003124:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fd ffab 	bl	8001080 <HAL_GetTick>
 800312a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800312c:	e009      	b.n	8003142 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800312e:	f7fd ffa7 	bl	8001080 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d902      	bls.n	8003142 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	73fb      	strb	r3, [r7, #15]
          break;
 8003140:	e005      	b.n	800314e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ef      	beq.n	800312e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	4903      	ldr	r1, [pc, #12]	; (800316c <RCCEx_PLLSAI1_Config+0x1e0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003162:	7bfb      	ldrb	r3, [r7, #15]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000

08003170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e040      	b.n	8003204 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd fe3c 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2224      	movs	r2, #36	; 0x24
 800319c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fa54 	bl	8003664 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f825 	bl	800320c <UART_SetConfig>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e01b      	b.n	8003204 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fad3 	bl	80037a8 <UART_CheckIdleState>
 8003202:	4603      	mov	r3, r0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800320c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003210:	b08a      	sub	sp, #40	; 0x28
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	431a      	orrs	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	431a      	orrs	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	4313      	orrs	r3, r2
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4bb4      	ldr	r3, [pc, #720]	; (800350c <UART_SetConfig+0x300>)
 800323c:	4013      	ands	r3, r2
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003244:	430b      	orrs	r3, r1
 8003246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4aa9      	ldr	r2, [pc, #676]	; (8003510 <UART_SetConfig+0x304>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003274:	4313      	orrs	r3, r2
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003288:	430a      	orrs	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4aa0      	ldr	r2, [pc, #640]	; (8003514 <UART_SetConfig+0x308>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d126      	bne.n	80032e4 <UART_SetConfig+0xd8>
 8003296:	4ba0      	ldr	r3, [pc, #640]	; (8003518 <UART_SetConfig+0x30c>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d81b      	bhi.n	80032dc <UART_SetConfig+0xd0>
 80032a4:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <UART_SetConfig+0xa0>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032bd 	.word	0x080032bd
 80032b0:	080032cd 	.word	0x080032cd
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032d5 	.word	0x080032d5
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c2:	e080      	b.n	80033c6 <UART_SetConfig+0x1ba>
 80032c4:	2302      	movs	r3, #2
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ca:	e07c      	b.n	80033c6 <UART_SetConfig+0x1ba>
 80032cc:	2304      	movs	r3, #4
 80032ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d2:	e078      	b.n	80033c6 <UART_SetConfig+0x1ba>
 80032d4:	2308      	movs	r3, #8
 80032d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032da:	e074      	b.n	80033c6 <UART_SetConfig+0x1ba>
 80032dc:	2310      	movs	r3, #16
 80032de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e2:	e070      	b.n	80033c6 <UART_SetConfig+0x1ba>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a8c      	ldr	r2, [pc, #560]	; (800351c <UART_SetConfig+0x310>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d138      	bne.n	8003360 <UART_SetConfig+0x154>
 80032ee:	4b8a      	ldr	r3, [pc, #552]	; (8003518 <UART_SetConfig+0x30c>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	d82d      	bhi.n	8003358 <UART_SetConfig+0x14c>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <UART_SetConfig+0xf8>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003339 	.word	0x08003339
 8003308:	08003359 	.word	0x08003359
 800330c:	08003359 	.word	0x08003359
 8003310:	08003359 	.word	0x08003359
 8003314:	08003349 	.word	0x08003349
 8003318:	08003359 	.word	0x08003359
 800331c:	08003359 	.word	0x08003359
 8003320:	08003359 	.word	0x08003359
 8003324:	08003341 	.word	0x08003341
 8003328:	08003359 	.word	0x08003359
 800332c:	08003359 	.word	0x08003359
 8003330:	08003359 	.word	0x08003359
 8003334:	08003351 	.word	0x08003351
 8003338:	2300      	movs	r3, #0
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333e:	e042      	b.n	80033c6 <UART_SetConfig+0x1ba>
 8003340:	2302      	movs	r3, #2
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003346:	e03e      	b.n	80033c6 <UART_SetConfig+0x1ba>
 8003348:	2304      	movs	r3, #4
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334e:	e03a      	b.n	80033c6 <UART_SetConfig+0x1ba>
 8003350:	2308      	movs	r3, #8
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003356:	e036      	b.n	80033c6 <UART_SetConfig+0x1ba>
 8003358:	2310      	movs	r3, #16
 800335a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335e:	e032      	b.n	80033c6 <UART_SetConfig+0x1ba>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a6a      	ldr	r2, [pc, #424]	; (8003510 <UART_SetConfig+0x304>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d12a      	bne.n	80033c0 <UART_SetConfig+0x1b4>
 800336a:	4b6b      	ldr	r3, [pc, #428]	; (8003518 <UART_SetConfig+0x30c>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003370:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003378:	d01a      	beq.n	80033b0 <UART_SetConfig+0x1a4>
 800337a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800337e:	d81b      	bhi.n	80033b8 <UART_SetConfig+0x1ac>
 8003380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003384:	d00c      	beq.n	80033a0 <UART_SetConfig+0x194>
 8003386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338a:	d815      	bhi.n	80033b8 <UART_SetConfig+0x1ac>
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <UART_SetConfig+0x18c>
 8003390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003394:	d008      	beq.n	80033a8 <UART_SetConfig+0x19c>
 8003396:	e00f      	b.n	80033b8 <UART_SetConfig+0x1ac>
 8003398:	2300      	movs	r3, #0
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339e:	e012      	b.n	80033c6 <UART_SetConfig+0x1ba>
 80033a0:	2302      	movs	r3, #2
 80033a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a6:	e00e      	b.n	80033c6 <UART_SetConfig+0x1ba>
 80033a8:	2304      	movs	r3, #4
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ae:	e00a      	b.n	80033c6 <UART_SetConfig+0x1ba>
 80033b0:	2308      	movs	r3, #8
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b6:	e006      	b.n	80033c6 <UART_SetConfig+0x1ba>
 80033b8:	2310      	movs	r3, #16
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033be:	e002      	b.n	80033c6 <UART_SetConfig+0x1ba>
 80033c0:	2310      	movs	r3, #16
 80033c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a51      	ldr	r2, [pc, #324]	; (8003510 <UART_SetConfig+0x304>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d17a      	bne.n	80034c6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d824      	bhi.n	8003422 <UART_SetConfig+0x216>
 80033d8:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <UART_SetConfig+0x1d4>)
 80033da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033de:	bf00      	nop
 80033e0:	08003405 	.word	0x08003405
 80033e4:	08003423 	.word	0x08003423
 80033e8:	0800340d 	.word	0x0800340d
 80033ec:	08003423 	.word	0x08003423
 80033f0:	08003413 	.word	0x08003413
 80033f4:	08003423 	.word	0x08003423
 80033f8:	08003423 	.word	0x08003423
 80033fc:	08003423 	.word	0x08003423
 8003400:	0800341b 	.word	0x0800341b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003404:	f7ff fb40 	bl	8002a88 <HAL_RCC_GetPCLK1Freq>
 8003408:	61f8      	str	r0, [r7, #28]
        break;
 800340a:	e010      	b.n	800342e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800340c:	4b44      	ldr	r3, [pc, #272]	; (8003520 <UART_SetConfig+0x314>)
 800340e:	61fb      	str	r3, [r7, #28]
        break;
 8003410:	e00d      	b.n	800342e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003412:	f7ff faa1 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8003416:	61f8      	str	r0, [r7, #28]
        break;
 8003418:	e009      	b.n	800342e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800341a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800341e:	61fb      	str	r3, [r7, #28]
        break;
 8003420:	e005      	b.n	800342e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800342c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8107 	beq.w	8003644 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	429a      	cmp	r2, r3
 8003444:	d305      	bcc.n	8003452 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	429a      	cmp	r2, r3
 8003450:	d903      	bls.n	800345a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003458:	e0f4      	b.n	8003644 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	2200      	movs	r2, #0
 800345e:	461c      	mov	r4, r3
 8003460:	4615      	mov	r5, r2
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	022b      	lsls	r3, r5, #8
 800346c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003470:	0222      	lsls	r2, r4, #8
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	6849      	ldr	r1, [r1, #4]
 8003476:	0849      	lsrs	r1, r1, #1
 8003478:	2000      	movs	r0, #0
 800347a:	4688      	mov	r8, r1
 800347c:	4681      	mov	r9, r0
 800347e:	eb12 0a08 	adds.w	sl, r2, r8
 8003482:	eb43 0b09 	adc.w	fp, r3, r9
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003494:	4650      	mov	r0, sl
 8003496:	4659      	mov	r1, fp
 8003498:	f7fc fe98 	bl	80001cc <__aeabi_uldivmod>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4613      	mov	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034aa:	d308      	bcc.n	80034be <UART_SetConfig+0x2b2>
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b2:	d204      	bcs.n	80034be <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	e0c2      	b.n	8003644 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034c4:	e0be      	b.n	8003644 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ce:	d16a      	bne.n	80035a6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80034d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d834      	bhi.n	8003542 <UART_SetConfig+0x336>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <UART_SetConfig+0x2d4>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	08003505 	.word	0x08003505
 80034e4:	08003525 	.word	0x08003525
 80034e8:	0800352d 	.word	0x0800352d
 80034ec:	08003543 	.word	0x08003543
 80034f0:	08003533 	.word	0x08003533
 80034f4:	08003543 	.word	0x08003543
 80034f8:	08003543 	.word	0x08003543
 80034fc:	08003543 	.word	0x08003543
 8003500:	0800353b 	.word	0x0800353b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003504:	f7ff fac0 	bl	8002a88 <HAL_RCC_GetPCLK1Freq>
 8003508:	61f8      	str	r0, [r7, #28]
        break;
 800350a:	e020      	b.n	800354e <UART_SetConfig+0x342>
 800350c:	efff69f3 	.word	0xefff69f3
 8003510:	40008000 	.word	0x40008000
 8003514:	40013800 	.word	0x40013800
 8003518:	40021000 	.word	0x40021000
 800351c:	40004400 	.word	0x40004400
 8003520:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003524:	f7ff fac6 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8003528:	61f8      	str	r0, [r7, #28]
        break;
 800352a:	e010      	b.n	800354e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800352c:	4b4c      	ldr	r3, [pc, #304]	; (8003660 <UART_SetConfig+0x454>)
 800352e:	61fb      	str	r3, [r7, #28]
        break;
 8003530:	e00d      	b.n	800354e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003532:	f7ff fa11 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8003536:	61f8      	str	r0, [r7, #28]
        break;
 8003538:	e009      	b.n	800354e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353e:	61fb      	str	r3, [r7, #28]
        break;
 8003540:	e005      	b.n	800354e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800354c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d077      	beq.n	8003644 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005a      	lsls	r2, r3, #1
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	441a      	add	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b0f      	cmp	r3, #15
 800356e:	d916      	bls.n	800359e <UART_SetConfig+0x392>
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003576:	d212      	bcs.n	800359e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	b29b      	uxth	r3, r3
 800357c:	f023 030f 	bic.w	r3, r3, #15
 8003580:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	b29b      	uxth	r3, r3
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	b29a      	uxth	r2, r3
 800358e:	8afb      	ldrh	r3, [r7, #22]
 8003590:	4313      	orrs	r3, r2
 8003592:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	8afa      	ldrh	r2, [r7, #22]
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	e052      	b.n	8003644 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035a4:	e04e      	b.n	8003644 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d827      	bhi.n	80035fe <UART_SetConfig+0x3f2>
 80035ae:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <UART_SetConfig+0x3a8>)
 80035b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b4:	080035d9 	.word	0x080035d9
 80035b8:	080035e1 	.word	0x080035e1
 80035bc:	080035e9 	.word	0x080035e9
 80035c0:	080035ff 	.word	0x080035ff
 80035c4:	080035ef 	.word	0x080035ef
 80035c8:	080035ff 	.word	0x080035ff
 80035cc:	080035ff 	.word	0x080035ff
 80035d0:	080035ff 	.word	0x080035ff
 80035d4:	080035f7 	.word	0x080035f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7ff fa56 	bl	8002a88 <HAL_RCC_GetPCLK1Freq>
 80035dc:	61f8      	str	r0, [r7, #28]
        break;
 80035de:	e014      	b.n	800360a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e0:	f7ff fa68 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 80035e4:	61f8      	str	r0, [r7, #28]
        break;
 80035e6:	e010      	b.n	800360a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <UART_SetConfig+0x454>)
 80035ea:	61fb      	str	r3, [r7, #28]
        break;
 80035ec:	e00d      	b.n	800360a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ee:	f7ff f9b3 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 80035f2:	61f8      	str	r0, [r7, #28]
        break;
 80035f4:	e009      	b.n	800360a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fa:	61fb      	str	r3, [r7, #28]
        break;
 80035fc:	e005      	b.n	800360a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003608:	bf00      	nop
    }

    if (pclk != 0U)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d019      	beq.n	8003644 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	085a      	lsrs	r2, r3, #1
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	441a      	add	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b0f      	cmp	r3, #15
 8003628:	d909      	bls.n	800363e <UART_SetConfig+0x432>
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003630:	d205      	bcs.n	800363e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	e002      	b.n	8003644 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003650:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003654:	4618      	mov	r0, r3
 8003656:	3728      	adds	r7, #40	; 0x28
 8003658:	46bd      	mov	sp, r7
 800365a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365e:	bf00      	nop
 8003660:	00f42400 	.word	0x00f42400

08003664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01a      	beq.n	800377a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003762:	d10a      	bne.n	800377a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	605a      	str	r2, [r3, #4]
  }
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b098      	sub	sp, #96	; 0x60
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037b8:	f7fd fc62 	bl	8001080 <HAL_GetTick>
 80037bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d12e      	bne.n	800382a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d4:	2200      	movs	r2, #0
 80037d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f88c 	bl	80038f8 <UART_WaitOnFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d021      	beq.n	800382a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fa:	653b      	str	r3, [r7, #80]	; 0x50
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003804:	647b      	str	r3, [r7, #68]	; 0x44
 8003806:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800380a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800380c:	e841 2300 	strex	r3, r2, [r1]
 8003810:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e6      	bne.n	80037e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e062      	b.n	80038f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b04      	cmp	r3, #4
 8003836:	d149      	bne.n	80038cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003840:	2200      	movs	r2, #0
 8003842:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f856 	bl	80038f8 <UART_WaitOnFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d03c      	beq.n	80038cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	623b      	str	r3, [r7, #32]
   return(result);
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003870:	633b      	str	r3, [r7, #48]	; 0x30
 8003872:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003874:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003878:	e841 2300 	strex	r3, r2, [r1]
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e6      	bne.n	8003852 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3308      	adds	r3, #8
 800388a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	60fb      	str	r3, [r7, #12]
   return(result);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	64bb      	str	r3, [r7, #72]	; 0x48
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3308      	adds	r3, #8
 80038a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038a4:	61fa      	str	r2, [r7, #28]
 80038a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	69b9      	ldr	r1, [r7, #24]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	617b      	str	r3, [r7, #20]
   return(result);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e5      	bne.n	8003884 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e011      	b.n	80038f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3758      	adds	r7, #88	; 0x58
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003908:	e049      	b.n	800399e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d045      	beq.n	800399e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fd fbb5 	bl	8001080 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <UART_WaitOnFlagUntilTimeout+0x30>
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e048      	b.n	80039be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b00      	cmp	r3, #0
 8003938:	d031      	beq.n	800399e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b08      	cmp	r3, #8
 8003946:	d110      	bne.n	800396a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2208      	movs	r2, #8
 800394e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f838 	bl	80039c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2208      	movs	r2, #8
 800395a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e029      	b.n	80039be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003978:	d111      	bne.n	800399e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003982:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f81e 	bl	80039c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e00f      	b.n	80039be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69da      	ldr	r2, [r3, #28]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4013      	ands	r3, r2
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	bf0c      	ite	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	2300      	movne	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d0a6      	beq.n	800390a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b095      	sub	sp, #84	; 0x54
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d6:	e853 3f00 	ldrex	r3, [r3]
 80039da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ec:	643b      	str	r3, [r7, #64]	; 0x40
 80039ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039f4:	e841 2300 	strex	r3, r2, [r1]
 80039f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e6      	bne.n	80039ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3308      	adds	r3, #8
 8003a06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e5      	bne.n	8003a00 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d118      	bne.n	8003a6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f023 0310 	bic.w	r3, r3, #16
 8003a50:	647b      	str	r3, [r7, #68]	; 0x44
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6979      	ldr	r1, [r7, #20]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	613b      	str	r3, [r7, #16]
   return(result);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e6      	bne.n	8003a3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a82:	bf00      	nop
 8003a84:	3754      	adds	r7, #84	; 0x54
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <__itoa>:
 8003a8e:	1e93      	subs	r3, r2, #2
 8003a90:	2b22      	cmp	r3, #34	; 0x22
 8003a92:	b510      	push	{r4, lr}
 8003a94:	460c      	mov	r4, r1
 8003a96:	d904      	bls.n	8003aa2 <__itoa+0x14>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	700b      	strb	r3, [r1, #0]
 8003a9c:	461c      	mov	r4, r3
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	bd10      	pop	{r4, pc}
 8003aa2:	2a0a      	cmp	r2, #10
 8003aa4:	d109      	bne.n	8003aba <__itoa+0x2c>
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	da07      	bge.n	8003aba <__itoa+0x2c>
 8003aaa:	232d      	movs	r3, #45	; 0x2d
 8003aac:	700b      	strb	r3, [r1, #0]
 8003aae:	4240      	negs	r0, r0
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4421      	add	r1, r4
 8003ab4:	f000 f806 	bl	8003ac4 <__utoa>
 8003ab8:	e7f1      	b.n	8003a9e <__itoa+0x10>
 8003aba:	2100      	movs	r1, #0
 8003abc:	e7f9      	b.n	8003ab2 <__itoa+0x24>

08003abe <itoa>:
 8003abe:	f7ff bfe6 	b.w	8003a8e <__itoa>
	...

08003ac4 <__utoa>:
 8003ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac6:	4c1f      	ldr	r4, [pc, #124]	; (8003b44 <__utoa+0x80>)
 8003ac8:	b08b      	sub	sp, #44	; 0x2c
 8003aca:	4605      	mov	r5, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	466e      	mov	r6, sp
 8003ad0:	f104 0c20 	add.w	ip, r4, #32
 8003ad4:	6820      	ldr	r0, [r4, #0]
 8003ad6:	6861      	ldr	r1, [r4, #4]
 8003ad8:	4637      	mov	r7, r6
 8003ada:	c703      	stmia	r7!, {r0, r1}
 8003adc:	3408      	adds	r4, #8
 8003ade:	4564      	cmp	r4, ip
 8003ae0:	463e      	mov	r6, r7
 8003ae2:	d1f7      	bne.n	8003ad4 <__utoa+0x10>
 8003ae4:	7921      	ldrb	r1, [r4, #4]
 8003ae6:	7139      	strb	r1, [r7, #4]
 8003ae8:	1e91      	subs	r1, r2, #2
 8003aea:	6820      	ldr	r0, [r4, #0]
 8003aec:	6038      	str	r0, [r7, #0]
 8003aee:	2922      	cmp	r1, #34	; 0x22
 8003af0:	f04f 0100 	mov.w	r1, #0
 8003af4:	d904      	bls.n	8003b00 <__utoa+0x3c>
 8003af6:	7019      	strb	r1, [r3, #0]
 8003af8:	460b      	mov	r3, r1
 8003afa:	4618      	mov	r0, r3
 8003afc:	b00b      	add	sp, #44	; 0x2c
 8003afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b00:	1e58      	subs	r0, r3, #1
 8003b02:	4684      	mov	ip, r0
 8003b04:	fbb5 f7f2 	udiv	r7, r5, r2
 8003b08:	fb02 5617 	mls	r6, r2, r7, r5
 8003b0c:	3628      	adds	r6, #40	; 0x28
 8003b0e:	446e      	add	r6, sp
 8003b10:	460c      	mov	r4, r1
 8003b12:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003b16:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003b1a:	462e      	mov	r6, r5
 8003b1c:	42b2      	cmp	r2, r6
 8003b1e:	f101 0101 	add.w	r1, r1, #1
 8003b22:	463d      	mov	r5, r7
 8003b24:	d9ee      	bls.n	8003b04 <__utoa+0x40>
 8003b26:	2200      	movs	r2, #0
 8003b28:	545a      	strb	r2, [r3, r1]
 8003b2a:	1919      	adds	r1, r3, r4
 8003b2c:	1aa5      	subs	r5, r4, r2
 8003b2e:	42aa      	cmp	r2, r5
 8003b30:	dae3      	bge.n	8003afa <__utoa+0x36>
 8003b32:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003b36:	780e      	ldrb	r6, [r1, #0]
 8003b38:	7006      	strb	r6, [r0, #0]
 8003b3a:	3201      	adds	r2, #1
 8003b3c:	f801 5901 	strb.w	r5, [r1], #-1
 8003b40:	e7f4      	b.n	8003b2c <__utoa+0x68>
 8003b42:	bf00      	nop
 8003b44:	08003c44 	.word	0x08003c44

08003b48 <memset>:
 8003b48:	4402      	add	r2, r0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d100      	bne.n	8003b52 <memset+0xa>
 8003b50:	4770      	bx	lr
 8003b52:	f803 1b01 	strb.w	r1, [r3], #1
 8003b56:	e7f9      	b.n	8003b4c <memset+0x4>

08003b58 <__libc_init_array>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	4d0d      	ldr	r5, [pc, #52]	; (8003b90 <__libc_init_array+0x38>)
 8003b5c:	4c0d      	ldr	r4, [pc, #52]	; (8003b94 <__libc_init_array+0x3c>)
 8003b5e:	1b64      	subs	r4, r4, r5
 8003b60:	10a4      	asrs	r4, r4, #2
 8003b62:	2600      	movs	r6, #0
 8003b64:	42a6      	cmp	r6, r4
 8003b66:	d109      	bne.n	8003b7c <__libc_init_array+0x24>
 8003b68:	4d0b      	ldr	r5, [pc, #44]	; (8003b98 <__libc_init_array+0x40>)
 8003b6a:	4c0c      	ldr	r4, [pc, #48]	; (8003b9c <__libc_init_array+0x44>)
 8003b6c:	f000 f818 	bl	8003ba0 <_init>
 8003b70:	1b64      	subs	r4, r4, r5
 8003b72:	10a4      	asrs	r4, r4, #2
 8003b74:	2600      	movs	r6, #0
 8003b76:	42a6      	cmp	r6, r4
 8003b78:	d105      	bne.n	8003b86 <__libc_init_array+0x2e>
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b80:	4798      	blx	r3
 8003b82:	3601      	adds	r6, #1
 8003b84:	e7ee      	b.n	8003b64 <__libc_init_array+0xc>
 8003b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8a:	4798      	blx	r3
 8003b8c:	3601      	adds	r6, #1
 8003b8e:	e7f2      	b.n	8003b76 <__libc_init_array+0x1e>
 8003b90:	08003c74 	.word	0x08003c74
 8003b94:	08003c74 	.word	0x08003c74
 8003b98:	08003c74 	.word	0x08003c74
 8003b9c:	08003c78 	.word	0x08003c78

08003ba0 <_init>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr

08003bac <_fini>:
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	bf00      	nop
 8003bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb2:	bc08      	pop	{r3}
 8003bb4:	469e      	mov	lr, r3
 8003bb6:	4770      	bx	lr
